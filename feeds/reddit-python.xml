<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=Python&amp;averagePostsPerDay=5&amp;content&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/Python</title><description>Hot posts in /r/Python (roughly 5 posts per day)</description><link>https://www.reddit.com/r/Python/</link><language>en-us</language><lastBuildDate>Fri, 19 Sep 2025 20:40:59 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>http://192.168.1.132//app/cache/images/styles-redditmedia-com-t5_2qh0y-styles-communityIcon_mkayghu1502d1-144x400.png</url><title>/r/Python</title><link>https://www.reddit.com/r/Python/</link><width>144</width><height>144</height></image><item><link>https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</link><title>FYI: PEP 2026 (CalVer) was shot down back in February - no jumping from 3.14.y to 3.25.y or 2025.x.y</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</guid><comments>https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><a href="https://peps.python.org/pep-2026/">PEP2026</a> discussed replacing the current Semantic Versioning with a Calender Versioning, where some options were 26.x.y (where 26 was from 2026), or 3.26.y (because there&#39;s currently a yearly release, they would just shift the minor version about 10 points).</p><p>Luckily this idea was shot down, back in Feb, because I was NOT looking forward to having to mess around with versions.</p><hr/><p>I&#39;m mentioning it, because I recall a discussion back in Januari that they were going to do this, and quite a few people disliked the idea, so I&#39;m happy to inform you that it&#39;s dead.</p><hr/><p>edit: It was shot down in <a href="https://discuss.python.org/t/pep-2026-calendar-versioning-for-python/55782/126">this post</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 19 Sep 2025 16:54:52 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</link><title>enso: A functional programming framework for Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hello all, I&#39;m here to make my first post and &#39;release&#39; of my functional programming framework, enso.  Right before I made this post, I made the repository public.  You can find it <a href="https://gitlab.com/evansemenoff/enso">here.</a></p><h1>What my project does</h1><p>enso is a high-level functional framework that works over top of Python.  It expands the existing Python syntax by adding a variety of features.  It does so by altering the AST at runtime, expanding the functionality of a handful of built-in classes, and using a modified tokenizer which adds additional tokens for a preprocessing/translation step.</p><p>I&#39;ll go over a few of the basic features so that people can get a taste of what you can do with it.</p><ol><li>Automatically curried functions!</li></ol><p>How about the function add, which looks like</p><pre><code>def add(x:a, y:a) -&gt; a:    return x + y</code></pre><p>Unlike normal Python, where you would need to call add with 2 arguments, you can call this <code>add</code> with only one argument, and then call it with the other argument later, like so:</p><pre><code>f = add(2)f(2)4</code></pre><ol><li>A map operator</li></ol><p>Since functions are automatically curried, this makes them really, really easy to use with <code>map</code>.  Fortunately, enso has a map operator, much like Haskell.</p><pre><code>f &lt;$&gt; [1,2,3][3, 4, 5]</code></pre><ol><li>Predicate functions</li></ol><p>Functions that return <code>Bool</code> work a little differently than normal functions.  They are able to use the pipe operator to filter iterables:</p><pre><code>even? | [1,2,3,4][2, 4]</code></pre><ol><li>Function composition</li></ol><p>There are a variety of ways that functions can be composed in enso, the most common one is your typical function composition.</p><pre><code>h = add(2) @ mul(2)h(3)8</code></pre><p>Additionally, you can take the <em>direct sum</em> of 2 functions:</p><pre><code>h = add + mulh(1,2,3,4)(3, 12)</code></pre><p>And these are just a few of the ways in which you can combine functions in enso.</p><ol><li>Macros</li></ol><p>enso has a variety of macro styles, allowing you to redefine the syntax on the file, adding new operators, regex based macros, or even complex syntax operations.  For example, in the REPL, you can add a <code>zip</code> operator like so:</p><pre><code>macro(op(&quot;-=-&quot;, zip))[1,2,3] -=- [4,5,6][(1, 4), (2, 5), (3, 6)]</code></pre><p>This is just one style of macro that you can add, see the readme in the project for more.</p><ol><li>Monads, more new operators, new methods on existing classes, tons of useful functions, automatically derived function &#39;variants&#39;, and loads of other features made to make writing code fun, ergonomic and aesthetic.</li></ol><p>Above is just a small taster of the features I&#39;ve added.  The README file in the repo goes over a lot more.</p><h1>Target Audience</h1><p>What I&#39;m hoping is that people will enjoy this.  I&#39;ve been working on it for awhile, and dogfooding my own work by writing several programs in it.  My own smart-home software is written entirely in <em>enso.</em>  I&#39;m really happy to be able to share what is essentially a beta version of it, and would be super happy if people were interested in contributing, or even just using enso and filing bug reports.  My long shot goal is that one day I will write a proper compiler for enso, and either self-host it as its own language, or run it on something like LLVM and avoid some of the performance issues from Python, as well as some of the sticky parts which have been a little harder to work with.</p><p>I will post this to <a href="https://www.reddit.com/r/functionalprogramming">r/functionalprogramming</a> once I have obtained enough karma.</p><p>Happy coding.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 19 Sep 2025 08:59:06 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</link><title>T-Strings: What will you do?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</guid><comments>https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Good evening from my part of the world!</p><p>I&#39;m excited with the new functionality we have in Python 3.14. I think the feature that has caught my attention the most is the introduction of <a href="https://docs.python.org/3.14/whatsnew/3.14.html#pep-750-template-strings">t-strings</a>.</p><p>I&#39;m curious, what do you think will be a good application for t-strings? I&#39;m planning to use them as better-formatted templates for a custom message pop-up in my homelab, taking information from different sources to format for display. Not reinventing any functionality, but certainly a cleaner and easier implementation for a message dashboard.</p><p>Please share your ideas below, I&#39;m curious to see what you have in mind!</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 19 Sep 2025 06:52:59 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</link><title>Today I learned that Python doesn't care about how many spaces you indent as long as it's consistent</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</guid><comments>https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Call me stupid for only discovering this after 6 years, but did you know that you can use as many spaces you want to indent, as long as they&#39;re consistent within one indented block. For example, the following (awful) code block gives no error:</p><pre><code>def say_hi(bye = False): print(&quot;Hi&quot;) if bye:        print(&quot;Bye&quot;)</code></pre></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 19 Sep 2025 01:19:56 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</link><title>Favorite Modern Async Task Processing Solution for FastAPI service and why?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</guid><comments>https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>So many choices, hard to know where to begin!</p><p>Worker:</p><ul><li>Hatchet</li><li>Arq</li><li>TaskIQ</li><li>Celery</li><li>Dramatiq</li><li>Temporal</li><li>Prefect</li><li>Other</li></ul><p>Broker:</p><ul><li>Redis</li><li>RabbitMQ</li><li>Other</li></ul><p>No Cloud Solutions allowed (Cloud Tasks/SQS/Lambda or Cloud Functions, etc.)</p><p>For my part, Hatchet is growing on me exponentially. I always found Flower for Celery to have pretty bad observability and Celery feels rather clumsy in Async workflows.</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 18 Sep 2025 23:30:27 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</link><title>prek a fast (rust and uv powered) drop in replacement for pre-commit with monorepo support!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</guid><comments>https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I wanted to let you know about a tool I switched to about a month ago called prek: <a href="https://github.com/j178/prek?tab=readme-ov-file#prek">https://github.com/j178/prek?tab=readme-ov-file#prek</a></p><p>It&#39;s a drop in replacement for pre-commit, so there&#39;s no need to change any of your config files, you can install and type <code>prek</code> instead of <code>pre-commit</code>, and switch to using it for your git precommit hook by running <code>prek install -f</code>.</p><p>It has a few advantage over pre-commit:</p><ul><li>Core hooks re-written in Rust for better performance</li><li>Uses uv to install Python dependencies so non-cached runs are much faster</li><li>Can be installed without needing to set up a Python environment: <a href="https://github.com/j178/prek?tab=readme-ov-file#installation">https://github.com/j178/prek?tab=readme-ov-file#installation</a></li><li>Monorepo support as of 0.2.0:  <a href="https://github.com/j178/prek/releases/tag/v0.2.0">https://github.com/j178/prek/releases/tag/v0.2.0</a></li><li>Automatic PEP 723 in-line metadata dependency installation: <a href="https://github.com/j178/prek/pull/529">https://github.com/j178/prek/pull/529</a></li></ul><p>It&#39;s still early days for prek, but the large project apache-airflow has adopted it (<a href="https://github.com/apache/airflow/pull/54258">https://github.com/apache/airflow/pull/54258</a>), is taking advantage of monorepo support (<a href="https://github.com/apache/airflow/pull/54615">https://github.com/apache/airflow/pull/54615</a>) and PEP 723 dependencies (<a href="https://github.com/apache/airflow/pull/54917">https://github.com/apache/airflow/pull/54917</a>). So it already has a lot of exposure to real world development.</p><p>When I first reviewed the tool I found a couple of bugs and they were both fixed within a few hours of reporting them. Since then I&#39;ve enthusiastically adopted prek, largely because while pre-commit is stable it is very stagnant, the pre-commit author actively blocks suggesting using new packaging standards, so I am excited to see competition in this space.</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 18 Sep 2025 21:26:21 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</link><title>UV issues in corporate env</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</guid><comments>https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I am trying uv for the first time in a corporate environment. I would like to make sure I understand correctly: </p><ul><li><p>uv creates a virtual env in the projects folder, and it stores all dependencies in there. So, for a quick data processing job with pandas and marimo, I will keep 200Mb+ worth of library and auxiliary files. If I have different folders for different projects, this will be duplicated over on each. Maybe there is a way to set central repositories, but I already have conda for that. </p></li><li><p>uv automatically creates a git repository for the project. This is fine in principle, but unfortunately OneDrive, Dropbox and other sync tools choke on the .git folder. Too many files and subfolders. I have had problems in the past. </p></li></ul><p>I am not sure uv is for me. How do you guys deal with these issues? Thanks</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 18 Sep 2025 17:56:43 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</link><title>Where's a good place to find people to talk about projects?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</guid><comments>https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I&#39;m a hobbyist programmer, dabbling in coding for like 20 years now, but never anything professional minus a three month stint. I&#39;m trying to work on a medium sized Python project but honestly, I&#39;m looking to work with someone who&#39;s a little bit more experienced so I can properly learn and ask questions instead of being reliant on a hallucinating chat bot.</p><p>But where would be the best place to discuss projects and look for like minded folks? </p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 18 Sep 2025 01:47:05 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</link><title>Do you prefer sticking to the standard library or pulling in external packages?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</guid><comments>https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I’ve been writing Python for a while and I keep running into this situation. Python’s standard library is huge and covers so much, but sometimes it feels easier (or just faster) to grab a popular external package from PyPI.</p><p>For example, I’ve seen people write entire data processing scripts with just built-in modules, while others immediately bring in pandas or requests even for simple tasks.</p><p>I’m curious how you all approach this. Do you try to keep dependencies minimal and stick to the stdlib as much as possible, or do you reach for external packages early to save development time?</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 17 Sep 2025 07:53:09 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</link><title>List of 87 Programming Ideas for Beginners (with Python implementations)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</guid><comments>https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><a href="https://inventwithpython.com/blog/programming-ideas-beginners-big-book-python.html">https://inventwithpython.com/blog/programming-ideas-beginners-big-book-python.html</a></p><p>I&#39;ve compiled a list of beginner-friendly programming projects, with example implementations in Python. These projects are drawn from my free Python books, but since they only use stdio text, you can implement them in any language.</p><p>I got tired of the copy-paste &quot;1001 project&quot; posts that obviously were copied from other posts or generated by AI which included everything from &quot;make a coin flip program&quot; to &quot;make an operating system&quot;. I&#39;ve personally curated this list to be small enough for beginners. The implementations are all usually under 100 or 200 lines of code.</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 17 Sep 2025 02:43:35 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</link><title>Some tips for beginners (Things you probably wish you knew when you first started)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</guid><comments>https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Maybe the title came out a bit ambiguous, but I’d really like to get this kind of help and I also hope this post can be useful for others who, like me, are just starting out on their Python journey.</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 16 Sep 2025 17:40:26 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</link><title>I made a vs code extension that insults you if you copy &amp;amp; paste AI generated code</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</guid><comments>https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>-on an important note: this project was just for fun, I&#39;m not against using AI to help your coding sessions-</p><p>What my project does:It&#39;s a vs code extension that gives random insults such as &quot;Do you ask GPT what to eat for dinner as well?&quot; to the user if it detects AI generated content. It uses a pretrained transformer-based model for inference (roberta-base-openai-detector), that returns the probability of human and AI writing the given section of text. It was pretty fun to play around with, although not accurate (the model was trained on GPT-2, and not optimized for code, so accuracy is bum), but it was my first time mixing languages together to create something. (In this case typescript and python) It&#39;s interesting how extensions like these are set up, I think it&#39;s valuable for anyone to do pet projects like these.</p><p>Target audience: noone really, just a funny pet project, due to the inaccuracy I wouldn&#39;t recommend it for actual usage (it&#39;s a bit difficult to create something more accurate, these kind of open-source models were trained on texts, not code) </p><p>Comparison: To my knowledge there hasn&#39;t been a vs code extension like this before, but there are several much more accurate detectors available online. </p><p>If anyone wants to check it out, or contribute, please feel free to reach out.</p><p><a href="https://github.com/Tbence132545/Ai-copypaste-insult">https://github.com/Tbence132545/Ai-copypaste-insult</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 15 Sep 2025 23:50:56 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</link><title>3 months in Python, I made my first proper 2D game</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</guid><comments>https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does:</strong><br/>I’ve been messing with Python for about three months, mostly tutorials and dumb exercises. Finally tried making an actual game, and this is what came out.</p><p>It’s called <a href="https://github.com/ah4ddd/Hate-Core">Hate-Core</a>. You play as a knight fighting dragons in 2D. There’s sprites, music, keyboard and touch controls, and a high-score system. Basically my attempt at a Dark Souls-ish vibe, but, you know… beginner style. Built it with <strong>Pygame</strong>, did the movement, attacks, scoring, and slapped in some sprites and backgrounds.</p><p><strong>Target Audience:</strong><br/>Honestly? Just me learn-ing Python. Not production-ready, just a toy to practice, see what works, and maybe have some fun.</p><p><strong>Comparison:</strong><br/>Way beyond boring number guessing, dice rolls, or quizzes you see from beginners. It’s an actual 2D game, with visuals, music, and some “combat” mechanics. Dark Souls-ish but tiny, broken, and beginner-coded.</p><p>I’d love <strong>honest feedback</strong>, tips, ideas or anything. I know it’s rough as hell.</p><p>Check it out here: <a href="https://github.com/ah4ddd/Hate-Core">https://github.com/ah4ddd/Hate-Core</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 15 Sep 2025 13:04:37 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</link><title>I made a terminal-based game that uses LLMs -- Among LLMs: You are the Impostor</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</guid><comments>https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I made this game in Python (that uses <strong>Ollama</strong> and local <code>gpt-oss:20b</code> / <code>gpt-oss:120b</code> models) that runs directly inside your terminal. TL;DR <strong>above</strong> the example.</p><blockquote><p>Among LLMs turns your <strong>terminal</strong> into a chaotic chatroom playground where <strong>you’re the only human</strong> <strong>among a bunch of eccentric AI agents</strong>, dropped into a common <em>scenario</em> -- it could be Fantasy, Sci-Fi, Thriller, Crime, or something completely unexpected. Each participant, including you, has a <em>persona</em> and a <em>backstory</em>, and all the AI agents share one common goal -- determine and eliminate the human, through <em>voting</em>. <strong>Your mission: stay hidden, manipulate conversations, and turn the bots against each other with edits, whispers, impersonations, and clever gaslighting</strong>. Outlast everyone, turn chaos to your advantage, and make it to the final two.</p><p>Can you survive the hunt and <em>outsmart</em> the AI ?</p></blockquote><p>Quick Demo: <a href="https://youtu.be/kbNe9WUQe14">https://youtu.be/kbNe9WUQe14</a></p><p>Github: <a href="https://github.com/0xd3ba/among-llms">https://github.com/0xd3ba/among-llms</a> (refer to <code>develop</code> branch for latest updates)</p><p>(<strong>Edit:</strong> Join the <a href="https://www.reddit.com/r/Among_LLMs/">subreddit for Among LLMs</a> if you have any bug reports, issues, feature-requests, suggestions or want to showcase your hilarious moments)</p><ul><li><strong>What my project does:</strong> Uses local Ollama gpt-oss models uniquely in a game setting; Built completely as a terminal-UI based project.</li><li><strong>Target Audience:</strong> Anyone who loves drama and making AI fight each other</li><li><strong>Comparision:</strong> No such project exists yet.</li></ul><h1>Example of a Chatroom (after export)</h1><p>You can <strong>save chatrooms as JSON</strong> and <strong>resume</strong> where you left off later on. <strong>Similarly you can load other&#39;s saved JSON as well</strong>! What&#39;s more, when you save a chatroom, it also exports the chat as a text file. Following is an example of a chatroom I recently had.</p><p><strong>Note(s):</strong></p><ul><li>Might be lengthy, but you&#39;ll get the idea of how these bots behave (lol)</li><li>All agents have personas and backstories, which are not visible in the exported chat</li></ul><p><strong>Example:</strong> <a href="https://pastebin.com/ud7mYmH4">https://pastebin.com/ud7mYmH4</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 15 Sep 2025 11:20:48 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</link><title>I was terrible at studying so I made a Chrome extension that forces you to learn programming.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</guid><comments>https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>tldr; I made a free, open-source Chrome extension that helps you study by showing you flashcards while you browse the web. Its algorithm uses spaced repetition and semantic analysis to target your weaknesses and help you learn faster. It started as an SAT tool, but I&#39;ve expanded it for everything, and I have custom flashcard deck suggestions for you guys to learn programming syntax and complex CS topics.</p><p>Hi everyone,</p><p>So, I&#39;m not great at studying, or any good lol. Like when the SATs were coming up in high school, all my friends were getting 1500s, and I was just not, like I couldn&#39;t keep up, and I hated that I couldn&#39;t just sit down and study like them. The only thing I did all day was browse the web and working on coding projects that i would never finish in the first place.</p><p>So, one day, whilst working on a project and contemplating how bad of a person I was for not studying, I decided why not use my only skill, coding, to force me to study.</p><p>At first I wanted to make like a locker that would prevent my from accessing apps until I answered a question, but I only ever open a few apps a day, but what I did do was load hundreds of websites a da, and that&#39;s how the idea flashysurf was born. I didn&#39;t even have a real computer at the time, my laptop broke, so I built the first version as a userscript on my old iPad with a cheap Bluetooth mouse. It basically works like this, it&#39;s a Chrome extension that just randomly pops up with a flashcard every now and then while you&#39;re on YouTube, watching Anime, GitHub, or wherever. You answer it, and you slowly build knowledge without even trying.</p><p>It&#39;s completely free and open source (<a href="https://github.com/MaxDevv/FlashySurf">GitHub link here</a>), and I got a little obsessed with the algorithm  (I&#39;ve been working on this for like 5-6 months now lol). It&#39;s not just random. It uses a combination of psycological techniques to make learning as efficient as possible:</p><ul><li>Dumb Weakness Targeting: Really simple, everytime you get a question wrong, its stored in a list and then later on these quesitons are priorotized that way you work on your weaknesses.</li><li>Intelligent Weakness Targeting: This was one of the biggest updates I made. For my SAT version, I implemented a semantic clustering system that groups questions by topic. So for example, if you get a question about arithmentic wrong, it knows to show you more questions that are semantically similar. Meaning it actively tarkedts your weak areas. The question selection is split 50% new questions, 35% questions similar to ones you&#39;ve failed, and 15% direct review of failed questions.</li><li>Forced Note-Taking: This is in my opinion the most important feature in flashysurf for learning. Basically, if you get a question wrong, you have to write a short note on why you messed up and what you should&#39;ve done instead, before you can close the card. It forces you to actually assess your mistakes and learn from them, instead of just clicking past them.</li></ul><p>At first, it was just for the SAT, and the results were actually really impressive. I personally got my score up 100 points, which is like going from the top 8% to the top 3% (considered a really big improvement), and a lot of my friends and other online users saw 60-100 point increases. So it proved the concept worked, especially for lazy people like me who want to learn without the effort of a formal study session.</p><p>After seeing it work so well, I pushed an update, FlashySurf v2.0, so that anyone can study LITERALLY ANYTHING without having to try. You can create and import your own flashcard decks for any subject.</p><p>The only/biggest caveat about flashysurf is that you need to use it for a bit of time to see results like I used it for 2 months to see that 100 point increase (technically that was an outdated version with far less optimizations, so it should take less time) so you can&#39;t just use it for a test you have tmrw (unless you set it to be like 100% which would mean that a flashcard would appear on every single website).</p><p>It has a few more features that I couldn&#39;t mention here: AI flashcard generation from documents; 30 minute breaks to focus; stats on flashcard collections; and for the SAT, performance reports. (Also if ur wondering why i&#39;m using semicolons, I actually learnt that from studying the SAT using flashysurf lol)</p><p>And for you guys in <a href="https://www.reddit.com/r/python">r/python</a>, I thought this would be perfect for drilling concepts that just need repetition. So, if you go to the flashysurf <a href="https://flashysurf.com/creator">flashcard creator</a> you can actually use the AI flashcard import/maker tool to convert any documents (i.e. programming problems/exercises you have) or your own flashcard decks into flashysurf flashcards. So you can work on complex programming topics like Big O notation, dynamic programming, and graph theory algorithms. Note: You will obviously need the extension to use the cards lol but when you install the extension, you&#39;ll recieve <a href="https://flashysurf.com/onboarding">instructions</a> on creating and importing flashcards, so you don&#39;t gotta memorize any of this.</p><p>You can download it from the Chrome Web Store, link in the website: <a href="https://flashysurf.com/?utm_source=rpst&amp;utm_campaign=rpython">https://flashysurf.com/</a></p><p>I&#39;m still actively working on it (just pushed a bugfix yesterday lol), so I&#39;d love to hear any feedback or ideas you have. Hope it helps you learn something new while you&#39;re procrastinating on your actual work.</p><p>Thanks for reading :D</p><p>Complicance thingy</p><h1>What My Project Does</h1><p>FlashySurf is a free, open-source Chrome extension that helps users learn and study by showing them flashcards as they browse the web. It uses a spaced repetition algorithm with semantic analysis to identify and target a user&#39;s weaknesses. The extension also has features like a &quot;Forced Note-Taking&quot; system to ensure users learn from their mistakes, and it allows for custom flashcard decks so it can be used for any subject.</p><h1>Target Audience</h1><p>FlashySurf is intended for anyone who wants to learn or study new information without the effort of a formal study session. It is particularly useful for students, professionals, or hobbyists who spend a lot of time on the web and want to use that time more productively. It&#39;s a production-ready project that&#39;s been in development for over six months, with a focus on being a long-term learning tool.</p><h1>Comparison</h1><p>While there are other flashcard and spaced repetition tools, FlashySurf stands out by integrating learning directly into a user&#39;s everyday browsing habits. Unlike traditional apps like Anki, which require dedicated study sessions, FlashySurf brings the flashcards to you. Its unique combination of a spaced repetition algorithm with a semantic clustering system means it not only reinforces what you&#39;ve learned but actively focuses on related topics where you are weakest. This approach is designed to help &quot;lazy&quot; learners like me who struggle with traditional study methods.</p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 15 Sep 2025 03:10:42 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</link><title>The best object notation?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</guid><comments>https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I want your advice regarding the best object notation to use for a python project. If you had the choice to receive data with a specific object notation, what would it be? YAML or JSON? Or another object notation?</p><p>YAML looks, to me, to be in agreement with a more pythonic way, because it is simple, faster and easier to understand. On the other hand, JSON has a similar structure to the python dictionary and the native python parser is very much faster than the YAML parser.</p><p>Any preferences or experiences?</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 13 Sep 2025 21:24:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</link><title>MathFlow: an easy-to-use math library for python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Project Site: <a href="https://github.com/cybergeek1943/MathFlow">https://github.com/cybergeek1943/MathFlow</a></p><p>In the process of doing research for my paper <a href="https://doi.org/10.48550/arXiv.2508.14095">Combinatorial and Gaussian Foundations of Rational Nth Root Approximations</a> (on arXiv), I created this library to address the pain points I felt when using only SymPy and SciPy separately. I wanted something lightweight, easy to use (exploratory), and something that would support numerical methods more easily. Hence, I created this lightweight wrapper that provides a hybrid symbolic-numerical interface to symbolic and numerical backends. It is backward compatible with Sympy. In short, this enables much faster analysis of symbolic math expressions by providing both numerical and traditional symbolic methods of analysis in the same interface. I have also added additional numerical methods that neither SymPy nor SciPy have (Pade approximations, numerical roots, etc.). The main goal for this project is to provide a tool that requires as little of a learning curve as possible and allows them to just focus on the math they are doing.</p><h1>Core features</h1><ul><li><strong>🔒 Operative Closure</strong>: Mathematical operations return new Expression objects by default</li><li><strong>⚡ Mutability Control</strong>: Choose between immutable (default) and mutable expressions for different workflows</li><li><strong>🔗 Seamless Numerical Integration</strong>: Every symbolic expression has a <code>.n</code> attribute providing numerical methods without manual lambdification (uses cached lambdified expression when needed)</li><li><strong>🎨 Enhanced Printing</strong>: Flexible output formatting through the <code>.print</code> attribute (LaTeX, pretty printing, code generation)</li><li><strong>📡 Signal System</strong>: Qt-like signals for tracking expression mutations and clones, enabling reactive programming</li><li><strong>🔄 Automatic Type Conversions</strong>: Seamlessly and automatically converts between internal Poly and Expr representations based on context</li><li><strong>📦 Lightweight</strong>: ~0.5 MB itself, ~100 MB including dependencies</li><li><strong>🧩 Fully backward compatible</strong>: Seamlessly integrate SymPy and MathFlow in the same script. All methods that work on SymPy Expr or Poly objects work on MathFlow objects</li><li><strong>🔍 Exploratory</strong>: Full IDE support, enabling easy tool finding and minimizing the learning curve.</li></ul><p>A few examples are shown below. Many more examples can be found in the README of the official GitHub site.</p><h1>Quick Start</h1><p>Install using: <code>pip install mathflow</code></p><pre><code>from mathflow import Expression, Polynomial, Rational# Create expressions naturallyf = Expression(&quot;2x^2 + 3x + \frac{1}{2}&quot;)  # latex is automatically parsedg = Expression(&quot;sin(x) + cos(x)&quot;)# Automatic operative closure - operations return new objects of the same typeh = f + g  # f and g remain unchangedhprime = h.diff()  # hprime is still an Expression object# Numerical evaluation made easyresult = f(2.5)  # Numerically evaluate at x = 2.5# Use the .n attribute to access fast numerical methodsnumerical_roots = f.n.all_roots()# Call f&#39;s n-prefixed methods to use variable precision numerical methodsprecise_roots = f.nsolve_all(prec=50)  # 50 digits of accuracy# quick and easy printingf.print()f.print(&#39;latex&#39;)  # LaTeX outputf.print(&#39;mathematica_code&#39;)f.print(&#39;ccode&#39;)  # c code output</code></pre><h1>Numerical Computing</h1><p>MathFlow excels at bridging symbolic and numerical mathematics:</p><pre><code>f = Expression(&quot;x^3 - 2x^2 + x - 1&quot;)# Root findingall_roots = f.n.all_roots(bounds=(-5, 5))specific_root = f.nsolve_all(bounds=(-5, 5), prec=50)  # High-precision solve# Numerical calculusderivative_func = f.n.derivative_lambda(df_order=2)  # 2nd derivative numerical function  integral_result = f.n.integrate(-1, 1)               # Definite integral  # Optimizationminimum = f.n.minimize(bounds=[(-2, 2)])</code></pre><h1>Edit:</h1><p>This project was developed and used primarily for a research project, so a thorough test suite has not yet been developed. The project is still in development, and the current release is an alpha version. I have tried to minimize danger here, however, by designing it as a proxy to the already well-tested SymPy and SciPy libraries.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 13 Sep 2025 19:51:43 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</link><title>Flowfile - An open-source visual ETL tool, now with a Pydantic-based node designer.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</guid><comments>https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey <a href="https://www.reddit.com/r/Python">r/Python</a>,</p><p>I built Flowfile, an open-source tool for creating data pipelines both visually and in code. Here&#39;s the latest feature: Custom Node Designer.</p><h1>What My Project Does</h1><p>Flowfile creates bidirectional conversion between visual ETL workflows and Python code. You can build pipelines visually and export to Python, or write Python and visualize it. The Custom Node Designer lets you define new visual nodes using Python classes with Pydantic for settings and Polars for data processing.</p><h1>Target Audience</h1><p>Production-ready tool for data engineers who work with ETL pipelines. Also useful for prototyping and teams that need both visual and code representations of their workflows.</p><h1>Comparison</h1><ul><li><strong>Alteryx</strong>: Proprietary, expensive. Flowfile is open-source.</li><li><strong>Apache NiFi</strong>: Java-based, requires infrastructure. Flowfile is pip-installable Python.</li><li><strong>Prefect/Dagster</strong>: Orchestration-focused. Flowfile focuses on visual pipeline building.</li></ul><h1>Custom Node Example</h1><pre><code>import polars as plfrom flowfile_core.flowfile.node_designer import (    CustomNodeBase, NodeSettings, Section,    ColumnSelector, MultiSelect, Types)class TextCleanerSettings(NodeSettings):    cleaning_options: Section = Section(        title=&quot;Cleaning Options&quot;,        text_column=ColumnSelector(label=&quot;Column to Clean&quot;, data_types=Types.String),        operations=MultiSelect(            label=&quot;Cleaning Operations&quot;,            options=[&quot;lowercase&quot;, &quot;remove_punctuation&quot;, &quot;trim&quot;],            default=[&quot;lowercase&quot;, &quot;trim&quot;]        )    )class TextCleanerNode(CustomNodeBase):    node_name: str = &quot;Text Cleaner&quot;    settings_schema: TextCleanerSettings = TextCleanerSettings()    def process(self, input_df: pl.LazyFrame) -&gt; pl.LazyFrame:        text_col = self.settings_schema.cleaning_options.text_column.value        operations = self.settings_schema.cleaning_options.operations.value        expr = pl.col(text_col)        if &quot;lowercase&quot; in operations:            expr = expr.str.to_lowercase()        if &quot;trim&quot; in operations:            expr = expr.str.strip_chars()        return input_df.with_columns(expr.alias(f&quot;{text_col}_cleaned&quot;))</code></pre><p>Save in <code>~/.flowfile/user_defined_nodes/</code> and it appears in the visual editor.</p><h1>Why This Matters</h1><p>You can wrap complex tasks—API connections, custom validations, niche library functions—into simple drag-and-drop blocks. Build your own high-level tool palette right inside the app. It&#39;s all built on Polars for speed and completely open-source.</p><h1>Installation</h1><p><code>pip install Flowfile</code></p><h1>Links</h1><ul><li>GitHub: <a href="https://github.com/Edwardvaneechoud/Flowfile/">https://github.com/Edwardvaneechoud/Flowfile/</a></li><li>Custom Nodes Documentation: <a href="https://edwardvaneechoud.github.io/Flowfile/for-developers/creating-custom-nodes.html">https://edwardvaneechoud.github.io/Flowfile/for-developers/creating-custom-nodes.html</a></li><li>Previous discussions: <a href="https://www.reddit.com/r/SideProject/comments/1mp0hor/i_built_a_tool_that_turns_python_data_pipelines/">SideProject post</a>, <a href="https://www.reddit.com/r/Python/comments/1kp0er9/flowframe_python_code_that_generates_visual_etl/">FlowFrame post</a></li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 13 Sep 2025 02:45:28 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</link><title>Update: Should I give away my app to my employer for free?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</guid><comments>https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Link to original post - <a href="https://www.reddit.com/r/Python/s/UMQsQi8lAX">https://www.reddit.com/r/Python/s/UMQsQi8lAX</a></p><p>Hi, since my post gained a lot of attention the other day and I had a lot of messages, questions on the thread etc. I thought I would give an update. </p><p>I didn’t make it clear in my previous post but I developed this app in my own time, but using company resources. </p><p>I spoke to a friend in the HR team and he explained a similar scenario happened a few years ago, someone built an automation tool for outlook, which managed a mailbox receiving 500+ emails a day (dealing/contract notes) and he simply worked on a fund pricing team and only needed to view a few of those emails a day but realised the mailbox was a mess. He took the idea to senior management and presented the cost saving and benefits. Once it was deployed he was offered shares in the company and then a cash bonus once a year of realised savings was achieved. </p><p>I’ve been advised by my HR friend to approach senior management with my proposal, explain that I’ve already spoken to my manager and detail the cost savings I can make, ask for a salary increase to provide ongoing support and develop my code further and ask for similar terms to that of the person who did this previously. He has confirmed what I’ve done doesn’t go against any HR policies or my contract. </p><p>Meeting is booked for next week and I’ve had 2 messages from senior management saying how excited they are to see my idea :) </p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 12 Sep 2025 20:17:00 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</link><title>I built a from-scratch Python package for classic Numerical Methods (no NumPy/SciPy required!)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</guid><comments>https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone,</p><p>Over the past few months I’ve been building a Python package called <code>numethods</code> — a small but growing collection of <strong>classic numerical algorithms implemented 100% from scratch</strong>. No NumPy, no SciPy, just plain Python floats and list-of-lists.</p><p>The idea is to make algorithms transparent and educational, so you can actually <em>see</em> how LU decomposition, power iteration, or RK4 are implemented under the hood. This is especially useful for students, self-learners, or anyone who wants a deeper feel for how numerical methods work beyond calling library functions.</p><p><a href="https://github.com/denizd1/numethods">https://github.com/denizd1/numethods</a></p><h1>🔧 What’s included so far</h1><ul><li><strong>Linear system solvers</strong>: LU (with pivoting), Gauss–Jordan, Jacobi, Gauss–Seidel, Cholesky</li><li><strong>Root-finding</strong>: Bisection, Fixed-Point Iteration, Secant, Newton’s method</li><li><strong>Interpolation</strong>: Newton divided differences, Lagrange form</li><li><strong>Quadrature (integration)</strong>: Trapezoidal rule, Simpson’s rule, Gauss–Legendre (2- and 3-point)</li><li><strong>Orthogonalization &amp; least squares</strong>: Gram–Schmidt, Householder QR, LS solver</li><li><strong>Eigenvalue methods</strong>: Power iteration, Inverse iteration, Rayleigh quotient iteration, QR iteration</li><li><strong>SVD</strong> (via eigen-decomposition of ATAA^T AATA)</li><li><strong>ODE solvers</strong>: Euler, Heun, RK2, RK4, Backward Euler, Trapezoidal, Adams–Bashforth, Adams–Moulton, Predictor–Corrector, Adaptive RK45</li></ul><h1>✅ Why this might be useful</h1><ul><li>Great for <strong>teaching/learning</strong> numerical methods step by step.</li><li>Good reference for people writing their own solvers in C/Fortran/Julia.</li><li>Lightweight, no dependencies.</li><li>Consistent object-oriented API (<code>.solve()</code>, <code>.integrate()</code> etc).</li></ul><h1>🚀 What’s next</h1><ul><li>PDE solvers (heat, wave, Poisson with finite differences)</li><li>More optimization methods (conjugate gradient, quasi-Newton)</li><li>Spectral methods and advanced quadrature</li></ul><p>👉 If you’re learning numerical analysis, want to peek under the hood, or just like playing with algorithms, I’d love for you to check it out and give feedback.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 12 Sep 2025 13:57:44 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1neno5h/what_is_the_quickest_and_easiest_way_to_fix/</link><title>What is the quickest and easiest way to fix indentation errors?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1neno5h/what_is_the_quickest_and_easiest_way_to_fix/</guid><comments>https://www.reddit.com/r/Python/comments/1neno5h/what_is_the_quickest_and_easiest_way_to_fix/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1neno5h/what_is_the_quickest_and_easiest_way_to_fix/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Context - I&#39;ve been writing Python for a good number of years and I still find indentation errors annoying. Also I&#39;m using VScode with the Python extension.</p><p>How often do you encounter them? How are you dealing with them?  </p><p>Because in Javascript land (and other languages too), there are some linters that look to be taking care of that.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 12 Sep 2025 04:47:44 +0530</pubDate></item></channel></rss>
