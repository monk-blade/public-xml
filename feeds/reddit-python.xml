<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=Python&amp;averagePostsPerDay=5&amp;content&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/Python</title><description>Hot posts in /r/Python (roughly 5 posts per day)</description><link>https://www.reddit.com/r/Python/</link><language>en-us</language><lastBuildDate>Thu, 11 Sep 2025 12:42:54 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>http://192.168.1.132//app/cache/images/styles-redditmedia-com-t5_2qh0y-styles-communityIcon_mkayghu1502d1-144x400.png</url><title>/r/Python</title><link>https://www.reddit.com/r/Python/</link><width>144</width><height>144</height></image><item><link>https://www.reddit.com/r/Python/comments/1ndua5j/thursday_daily_thread_python_careers_courses_and/</link><title>Thursday Daily Thread: Python Careers, Courses, and Furthering Education!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndua5j/thursday_daily_thread_python_careers_courses_and/</guid><comments>https://www.reddit.com/r/Python/comments/1ndua5j/thursday_daily_thread_python_careers_courses_and/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ndua5j/thursday_daily_thread_python_careers_courses_and/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: Professional Use, Jobs, and Education üè¢</h1><p>Welcome to this week&#39;s discussion on Python in the professional world! This is your spot to talk about job hunting, career growth, and educational resources in Python. Please note, this thread is <strong>not for recruitment</strong>.</p><hr/><h2>How it Works:</h2><ol><li><strong>Career Talk</strong>: Discuss using Python in your job, or the job market for Python roles.</li><li><strong>Education Q&amp;A</strong>: Ask or answer questions about Python courses, certifications, and educational resources.</li><li><strong>Workplace Chat</strong>: Share your experiences, challenges, or success stories about using Python professionally.</li></ol><hr/><h2>Guidelines:</h2><ul><li>This thread is <strong>not for recruitment</strong>. For job postings, please see <a href="https://www.reddit.com/r/PythonJobs">r/PythonJobs</a> or the recruitment thread in the sidebar.</li><li>Keep discussions relevant to Python in the professional and educational context.</li></ul><hr/><h2>Example Topics:</h2><ol><li><strong>Career Paths</strong>: What kinds of roles are out there for Python developers?</li><li><strong>Certifications</strong>: Are Python certifications worth it?</li><li><strong>Course Recommendations</strong>: Any good advanced Python courses to recommend?</li><li><strong>Workplace Tools</strong>: What Python libraries are indispensable in your professional work?</li><li><strong>Interview Tips</strong>: What types of Python questions are commonly asked in interviews?</li></ol><hr/><p>Let&#39;s help each other grow in our careers and education. Happy discussing! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 11 Sep 2025 05:30:32 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndsuud/streamlit_for_python_apps/</link><title>Streamlit for python apps</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndsuud/streamlit_for_python_apps/</guid><comments>https://www.reddit.com/r/Python/comments/1ndsuud/streamlit_for_python_apps/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ndsuud/streamlit_for_python_apps/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>i‚Äôve been using streamlit lately and honestly it‚Äôs pretty nice, so just wanted to share in case it helps someone.</p><p>if you‚Äôre into data analysis or working on python projects and want to turn them into something interactive, streamlit is definitely worth checking out. it lets you build web apps super easily ‚Äî like you just write python code and it handles all the front-end stuff for you.</p><p>you can add charts, sliders, forms, even upload files, and it all works without needing to learn html or javascript. really useful if you want to share your work with others or just make a personal dashboard or tool.</p><p>feels like a good starting point if you‚Äôve been thinking about making web apps but didn‚Äôt know where to start.</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 11 Sep 2025 04:25:12 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/</link><title>[ANNOUNCEMENT] pychub: A new way to ship your Python wheels + deps + extras</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nds31l/announcement_pychub_a_new_way_to_ship_your_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey fellow deveopers!  </p><p>I built a packaging tool called <a href="https://github.com/Steve973/pychub"><strong>pychub</strong></a> that might fill a weird little gap you didn‚Äôt know you had. It came out of me needing a clean way to distribute Python wheels <em>with</em> all of their dependencies and optional extras, but <em>without</em> having to freeze them into platform-specific binaries like PyInstaller does. And if you want to just install everything into your own current environment?  That&#39;s what I wanted, too.</p><h1>So what is it?</h1><p><strong>pychub</strong> takes your wheel, resolves and downloads its dependencies, and wraps everything into a single executable <code>.chub</code> file. That file can then be shipped/copied anywhere, and then run directly like this:</p><pre><code>python yourtool.chub</code></pre><p>It installs into the current environment (or a venv, or a conda env, your call), and can even run an entrypoint function or console script <em>right after</em> install.</p><p>No network calls. No pip. No virtualenv setup. Just <code>python tool.chub</code> and go.</p><h1>Why I built it:</h1><p>Most of the Python packaging tools out there either:</p><ul><li>Freeze the whole thing into a binary (PyInstaller, PyOxidizer) ‚Äî which is great, until you hit platform issues or need to debug something. Or you just want to do something different than that.</li><li>Just stop at building a wheel and leave it up to you (or your users) to figure out installation, dependencies, and environment prep.</li></ul><p>I wanted something in between: still using the host Python interpreter (so it stays light and portable), but with everything pre-downloaded and reproducible.</p><h1>What it can bundle:</h1><ul><li>Your main wheel</li><li>Any number of additional wheels</li><li>All their dependencies (downloaded and stored locally)</li><li>Optional include files (configs, docs, whatever)</li><li>Pre-install and post-install scripts (shell, Python, etc.)</li></ul><p>And it‚Äôs 100% reproducible, so that the archive installs the exact same versions every time, no network access needed.</p><h1>Build tool integration:</h1><p>If you&#39;re using <strong>Poetry</strong>, <strong>Hatch</strong>, or <strong>PDM</strong>, I‚Äôve released plugins for all three:</p><ul><li>Just add the plugin to your <code>pyproject.toml</code></li><li>Specify your build details (main wheel, includes, scripts, etc.)</li><li>Run your normal build command and you‚Äôll get a <code>.chub</code> alongside your <code>.whl</code></li></ul><p>It‚Äôs one of the easiest ways to ship Python tools that <em>just work,</em> whether you&#39;re distributing internally, packaging for air-gapped environments, or dropping into Docker builder stages.</p><p>Plugins repo:  <a href="https://github.com/Steve973/pychub-build-plugins">https://github.com/Steve973/pychub-build-plugins</a></p><h1>Why not just use some other bundling/packaging tool?</h1><p>Well, depending on your needs, maybe you should! I don‚Äôt think pychub replaces everything. It just solves a different problem.</p><p>If you want sealed apps with bundled runtimes, use PEX or PyOxidizer.<br/>If you&#39;re distributing scripts, zipapp is great.<br/>But if you want a <strong>wheel-based</strong>, network-free, single-file installer that works on any Python 3.9+ environment, then pychub might be the right tool.</p><p>Full comparison table along with everything else:<br/>üìò <a href="https://github.com/Steve973/pychub#why-not-just-use-insert-favorite-tool-name-here">README on GitHub</a></p><p>That‚Äôs it. I built it because I needed it to include plugins for a platform that I am building. If it helps you too, even better.  I will be actively supporting this, and if you would like to take it for a spin and see if you like it, I&#39;d be honored to hear your feedback. If you want a feature added, etc, please let me know.<br/>Issues, suggestions, and PRs are all welcome.</p><p>Thanks for your time and interest!</p><p>Steve</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 11 Sep 2025 03:51:16 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/</link><title>A Complete List of Python Tkinter Colors, Valid and Tested</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/</guid><comments>https://www.reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ndnusy/a_complete_list_of_python_tkinter_colors_valid/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I needed a complete list of valid color names for Python&#39;s Tkinter package as part of my <a href="https://pypi.org/project/ButtonPad/">ButtonPad</a> GUI framework development. The lists I found on the internet were either incomplete, buried under ads, and often just plain wrong. Here&#39;s a list of all 760 color names (valid and personally tested) for Python Tkinter.</p><p><a href="https://inventwithpython.com/blog/complete-list-tkinter-colors-valid-and-tested.html">https://inventwithpython.com/blog/complete-list-tkinter-colors-valid-and-tested.html</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 11 Sep 2025 00:57:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/</link><title>Update: Python-based MTG Commander Deck Builder ‚Äî Now With Combos, Bracket Enforcement, and Include/</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/</guid><comments>https://www.reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1ndm9zl/update_pythonbased_mtg_commander_deck_builder_now/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hi <a href="https://www.reddit.com/r/Python">r/Python</a>, I wanted to share another update on my Python-based project: a <strong>Magic: The Gathering Commander deck builder</strong>. My first post here was when I had a mostly command-line tool; then I moved to a basic web interface. Since then I‚Äôve added quite a few new features, cleaned up the backend, and expanded both the web and CLI sides.</p><h1>What My Project Does</h1><ul><li>Pick a commander and up to three themes (e.g., Aristocrats, +1/+1, Kindred, Aggro).</li><li>The builder generates a complete 100-card list with stage-by-stage reasoning.</li><li>Handles multi-copy strategies (Petitioners, Dragon‚Äôs Approach, Shadowborn Apostle) with packages that keep the deck at 100 and adjust land counts automatically.</li><li>Lets you lock favorite cards, reroll just creatures/spells/lands, or swap cards for alternatives.</li><li>Supports ‚Äúowned-only‚Äù and ‚Äúprefer owned‚Äù builds by uploading TXT/CSV lists of your collection.</li><li>Exports to TXT (Moxfield/Archidekt), CSV with tags/Owned info, or a simple printout.</li></ul><h1>Target Audience</h1><ul><li><strong>Magic: The Gathering players</strong> who like to theorycraft and spin up decks quickly.</li><li>People who want to give a few high-level instructions (commander, themes, composition) and get a playable decklist back.</li><li>Developers or hobbyists interested in Python projects that mix data handling, web UI, and CLI tooling.</li></ul><h1>Comparison</h1><p>I built this because I wasn‚Äôt finding much in the way of Python-based, ‚Äúhands-off‚Äù deck builders. Tools like EDHRec, Moxfield, and Archidekt are great, but they generally need a lot of manual input. My approach is closer to: ‚Äúgive me a commander and some themes, generate a deck, and let me iterate fast.‚Äù It also lets me compare multiple builds for the same commander or themes to see how choices shift.</p><h1>What‚Äôs New</h1><ul><li><strong>Combos &amp; Synergies:</strong> detects curated two-card combos, surfaces them in the web UI with badges, and honors color identity.</li><li><strong>Bracket Compliance:</strong> validates decks against configurable bracket rules (like tutors/extra turns); includes inline enforcement and optional auto-fixing.</li><li><strong>Include/Exclude Lists:</strong> add must-have or must-exclude cards via text/file input; supports fuzzy matching, EDH color checks, and JSON import/export.</li><li><strong>Web UI Polish:</strong> improved New Deck modal, integrated multi-copy suggestions, cleaner alternatives panel, and mobile-friendly layouts.</li><li><strong>CLI Parity:</strong> theme selection by name, deck composition flags (<code>--land-count</code>, <code>--wipe-count</code>, etc.), and full include/exclude support with detailed console summaries.</li><li><strong>Performance &amp; Stability:</strong> exclude filtering benchmarked under 50ms on 20k+ cards; Docker image seeds defaults automatically; fixes for land counts, exports mismatches, and mobile scaling quirks.</li></ul><h1>Tech Stack</h1><ul><li><strong>Backend:</strong> Python 3.x with structured logging, modular orchestration, and test suite for validation and backward compatibility.</li><li><strong>Web:</strong> Flask + Jinja templates, partial caching, validation endpoints, and Playwright end-to-end tests.</li><li><strong>CLI:</strong> argparse interface with type indicators, grouped help, and full parity with web features.</li><li><strong>Deployment:</strong> Docker with multi-arch builds (x86/ARM), sample docker-compose configs.</li></ul><h1>Try it</h1><ul><li>Live demo: <a href="https://deck-builder.wiz-ops.com/">deck-builder.wiz-ops.com</a> (setup may take a minute).</li><li>Docker Hub (easiest): <a href="https://hub.docker.com/r/mwisnowski/mtg-python-deckbuilder">mwisnowski/mtg-python-deckbuilder</a></li><li>Source &amp; releases: <a href="https://github.com/mwisnowski/mtg_python_deckbuilder">GitHub repo</a></li></ul><h1>Roadmap</h1><ul><li>Budget mode with price caps and recommended pickup lists.</li><li>Smarter land base profiles tuned by curve and pip breakdown.</li><li>Random build modes (‚Äúsurprise me,‚Äù random by theme, or full random).</li></ul><p>This is my first real ‚Äúfrom-scratch‚Äù software project, so if you have thoughts on the Python side ‚Äî code structure, testing, deployment ‚Äî I‚Äôd love to hear them.</p><p>Do you want me to keep this <strong>balanced between MTG features and technical notes</strong>, or make it <strong>more developer-focused</strong> (leaning heavier on Python design decisions, logging, testing, etc.) since it‚Äôs for <a href="https://www.reddit.com/r/Python">r/Python</a>?</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 23:58:31 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/</link><title>Scaling asyncio on Free-Threaded Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/</guid><comments>https://www.reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ndk80g/scaling_asyncio_on_freethreaded_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><a href="https://labs.quansight.org/blog/scaling-asyncio-on-free-threaded-python">https://labs.quansight.org/blog/scaling-asyncio-on-free-threaded-python</a></p><p>From the author: &quot;In this blog post, we will explore the changes I made in the upcoming Python 3.14 release to enable asyncio to scale on the free-threaded build of CPython.&quot;</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 22:43:07 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/</link><title>I decoupled FastAPI dependency injection system in pure python, no dependencies.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/</guid><comments>https://www.reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1ndj5vz/i_decoupled_fastapi_dependency_injection_system/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong></p><p>When building FastAPI endpoints, I found the dependency injection system such a pleasure to use that I wanted it everywhere, not just in my endpoints. I explored a few libraries that promised similar functionality, but each had drawbacks, some required Pydantic, others bundled in features beyond dependency injection, and many were riddled with bugs.</p><p>That&#39;s way I created <a href="https://github.com/entropy-flux/PyDepends">PyDepends</a>, a lightweight dependency injection system that I now use in my own projects and would like to share with you.</p><p><strong>Target Audience</strong><br/>This is mainly aimed at:</p><ul><li><p>FastAPI developers who want to use dependency injection in the service layer.</p></li><li><p>Domain-Driven Design practitioners who want to decouple their services from infrastructure.</p></li><li><p>Python developers who aren‚Äôt building API endpoints but would still like to use dependency injection in their projects.It‚Äôs not production-grade yet, but it‚Äôs stable enough for everyday use and easy to extend.</p></li></ul><p><strong>Comparison</strong>  </p><p>Compared to other similar packages, it does just that, inject dependencies, is not bloated with other functionalities. </p><ul><li>FastDepends: I started out with this for another library I was using but had to ditch it because of the bugs. I even opened a pull request fixing the issue, but it wasn‚Äôt taken into account. It also cannot be used with non-serializable classes, and I wanted to inject machine learning models into services. On top of that, it does unpredictable things beyond dependency injection.</li></ul><p>Repo: <a href="https://github.com/entropy-flux/PyDepends">https://github.com/entropy-flux/PyDepends</a></p><p>Hope you find it useful!</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 22:04:32 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/</link><title>Curious about moving from Mechanical Engineering to Data Science</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/</guid><comments>https://www.reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ndgpwv/curious_about_moving_from_mechanical_engineering/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone,</p><p>I‚Äôm wrapping up my final year in <strong>Mechanical Engineering</strong>, and lately I‚Äôve been fascinated by how data is shaping decisions in engineering, manufacturing, and beyond. The more I read about <strong>data analysis, machine learning, and predictive modeling</strong>, the more I feel drawn to explore this path.</p><p>My background is heavy on problem-solving, math, and physics, and I‚Äôve done some basic coding in Python and MATLAB for academic projects. I‚Äôm now experimenting with SQL and data visualization tools, and I‚Äôm considering building small projects that combine engineering concepts with data insights.</p><p>I‚Äôd love to hear from people who‚Äôve made a similar shift:</p><ul><li>What was the most valuable skill or habit you developed early on?</li><li>Did you start in a data-related role within your original industry, or switch fields entirely?</li><li>Any project ideas that helped you stand out when you were starting out?</li></ul><p>Thanks in advance for sharing your experiences!</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 20:35:50 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/</link><title>I created a pretty-printed dir function to make debugging complex classes easier</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/</guid><comments>https://www.reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nd1go9/i_created_a_prettyprinted_dir_function_to_make/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong></p><p>You can check it out on github:¬†<a href="https://pypi.org/project/pretty-dir/">https://pypi.org/project/pretty-dir/</a></p><p>This library generates a better <strong>dir</strong> output for debugging. For a quick example, check out the <a href="https://github.com/douglassimonsen/ppdir/raw/main/example_images/before.png">with dir</a> and <a href="https://github.com/douglassimonsen/ppdir/raw/main/example_images/after.png">with ppdir</a> outputs using a simple pydantic model.</p><p><strong>Target Audience</strong></p><p>This is mainly aimed at developers who are debugging code that uses any libraries that have large, complex, deeply nested classes. Libraries such as pydantic, dataclasses, and openpyxl.</p><p><strong>Comparison</strong></p><p>It exists in a similar niche as icecream and rich.inspect where it&#39;s meant to improve the debugging experience. Unlike similar libraries, this only shows the structure, not the values themselves. This is valuable in pydantic environments, where instances can be too verbose to be meaningful when printed to the console.</p><p><strong>Details</strong></p><p>The library uses the output of the <strong>dir(obj)</strong> function as a baseline, but improves the output in a number of ways:</p><ul><li>Visually groups the methods and attributes by the classes they were defined on. Therefore, if you&#39;re subclassing the <a href="https://docs.pydantic.dev/latest/api/base_model/">pydantic.BaseModel</a> class, it separates the generic basemodel methods from the subclass&#39; specific methods.</li><li>Pulls the first line of the docstrings for the class, all methods, and all class attributes.</li><li>Can enable showing the function signature for all class methods</li><li>By default, hides private and and dunder methods from the outputs</li><li>Prints the source code location of all parent classes</li><li>Uses <a href="https://pypi.org/project/colorama/">colorama</a> to color the different sections of the output</li></ul><p>I&#39;ve set it to automatically import (see <strong>Auto-loading in PDB (Breakpoint)</strong> on PyPI) when I use breakpoint() and it&#39;s been a nice quality of life improvement!</p><p>This is my first project I expect other people to use, so let me know if I can improve anything!</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 07:11:36 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/</link><title>Most Performant Python Compilers/Transpilers in 2025</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/</guid><comments>https://www.reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1ncy8av/most_performant_python_compilerstranspilers_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Today I find myself in the unfortunate position to create a program that must compile arbitrary python code :(  For the use case I am facing now performance is everything, and luckily the target OS for the executable file will only be linux. The compiled codes will be standalone local computational tools without any frills (no guis, no i|o or r|w operations, no system access, and no backend or configuration needs to pull in). Python code is &gt;=3.8 and can pull in external libraries (eg: numpy). However, the codes may be multithreaded/multiprocessed and any static type-like behavior is not guaranteed.</p><p>Historically I have used tools like pyinstaller, py2exe, py2app, which work robustly, but create stand alone executable files that are often pretty slow. I have been looking at a host of transpilers instead, eg: <a href="https://github.com/dbohdan/compilers-targeting-c?tab=readme-ov-file">https://github.com/dbohdan/compilers-targeting-c?tab=readme-ov-file</a>, and am somewhat overwhelmed by the amount of choices therein. Going through stackoverflow naturally recovered a lot of great recommendations that were go-to&#39;s 10-20 years ago, but do not have much promise for recent python versions. Currently I am considering:<br/>wax <a href="https://github.com/LingDong-/wax">https://github.com/LingDong-/wax</a> ,<br/>11l-lang <a href="https://11l-lang.org/transpiler/">https://11l-lang.org/transpiler/</a>,<br/>nuitka <a href="https://nuitka.net/">https://nuitka.net/</a>,<br/>prometeo  <a href="https://github.com/zanellia/prometeo">https://github.com/zanellia/prometeo</a>,<br/>pytran <a href="https://pythran.readthedocs.io/en/latest/">https://pythran.readthedocs.io/en/latest/</a>,<br/>rpython <a href="https://rpython.readthedocs.io/en/latest/">https://rpython.readthedocs.io/en/latest/</a>,<br/>or py14  <a href="https://github.com/lukasmartinelli/py14">https://github.com/lukasmartinelli/py14</a>.<br/>However, this is a lot to consider without rigorously testing all of them out. Does anyone on this sub have experience in modern Transpilers or other techniques for compiling numerical python codes for linux? If so, can you share any tools, techniques, or general guidance? Thank you!</p><p>Edit for clarification:<br/>This will be placed in a user facing application wherein users can upload their tools to be autonomously deployed in a on demand/dynamic runtime basis. Since we cannot know all the codes that users are uploading, a lot of the traditional and well defined methods are not possible. We are including C, C++, Rust, Fortran, Go, and Cobol compilers to support these languages, but seeking a similar solution for python.</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 10 Sep 2025 04:43:04 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/</link><title>imgbatch ‚Äì A Python tool for batch-processing images from the command line</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/</guid><comments>https://www.reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ncn5fq/imgbatch_a_python_tool_for_batchprocessing_images/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong></p><p><a href="https://github.com/booo2233/imgbatch">https://github.com/booo2233/imgbatch</a></p><p>is a simple Python tool that lets you batch-process images (resize, compress, or convert formats) directly from the command line. Instead of opening heavy software, you can point it at a folder and quickly process all your images in one go.</p><p><strong>Target Audience</strong><br/>This is mainly aimed at:</p><ul><li>Developers who need quick image preprocessing for projects</li><li>Photographers or designers who want to resize/compress many images at once</li><li>Anyone who prefers lightweight CLI tools instead of GUIs</li></ul><p>It‚Äôs not production-grade yet, but it‚Äôs stable enough for everyday use and easy to extend.</p><p><strong>Comparison</strong><br/>Compared to tools like ImageMagick or Pillow scripts:</p><ul><li>imgbatch is <strong>simpler</strong> (minimal commands, no need to learn a big toolset)</li><li>It‚Äôs <strong>focused only on batch tasks</strong> (not a general-purpose graphics library)</li><li>Written in Python, so easy to tweak or add custom functions if you know a little code</li></ul><p>üëâ Repo: <a href="https://github.com/booo2233/imgbatch">https://github.com/booo2233/imgbatch</a></p><p>Would love feedback, and if you find it useful, a ‚≠ê would be amazing!<br/>thank you guys</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 21:41:00 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/</link><title>Should I give away my app to my employer for free?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/</guid><comments>https://www.reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1ncmlwv/should_i_give_away_my_app_to_my_employer_for_free/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I work for a fintech company in the UK (in operations to be specific) however my daily role doesn‚Äôt require any coding knowledge. I have built up some python knowledge over the past few years and have developed an app that far outperforms the workflow tool my company currently uses. I have given hints to my manager that I have some coding knowledge and given them snippets of the tool I‚Äôve created, she‚Äôs pretty much given me free reign to stop any of my usual tasks and focus on this full time. My partner used to work for the same company in the finance department so I know they paid over ¬£200k for 3 people to develop the current workflow tool (these developers had no operations experience so built something unfit for purpose). I‚Äôve estimated if I can get my app functional it would save the company ¬£20k per month (due to all the manual work we usually have to do vs what I can automate). My manager has already said this puts me in a good position for a decent bonus next year (it wouldn‚Äôt be anymore than ¬£10k) so I‚Äôm a little stuck on what to do and if I‚Äôm sounding greedy. </p><p>Has anyone ever been in a similar position? </p><p>EDIT TITLE: I know it‚Äôs not ‚Äòfor free‚Äô as of course I‚Äôm paid to do my job. But I would be handing over hours of work that I haven‚Äôt been paid for. </p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 21:20:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nckydw/cythonize_python_code/</link><title>Cythonize Python Code</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nckydw/cythonize_python_code/</guid><comments>https://www.reddit.com/r/Python/comments/1nckydw/cythonize_python_code/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nckydw/cythonize_python_code/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Context</h1><p>This is my first time messing with <strong>Cython</strong> (or really anything related to optimizing Python code).<br/>I usually just stick with yielding and avoiding keeping much in memory, so bear with me.</p><h1>Context</h1><p>I‚Äôm building a Python project that‚Äôs kind of like <code>zipgrep</code> / <code>ugrep</code>.<br/>It streams through archive(s) file contents (nothing kept in memory) and searches for whatever pattern is passed in.</p><h1>Benchmarks</h1><p>(Results vary depending on the pattern, hence the wide gap)</p><ul><li>‚úÖ <strong>~15‚Äì30x faster</strong> than <code>zipgrep</code> (expected)</li><li>‚ùå <strong>~2‚Äì8x slower</strong> than <code>ugrep</code> (also expected, since it‚Äôs C++ and much faster)</li></ul><p>I tried:</p><ul><li><code>cythonize</code> from <a href="http://Cython.Build"><code>Cython.Build</code></a> with setuptools</li><li>Nuitka</li></ul><p>But the performance was basically identical in both cases. I didn‚Äôt see any difference at all.<br/>Maybe I compiled Cython/Nuitka incorrectly, even though they both built successfully?</p><h1>Question</h1><p>Is it actually worth:</p><ul><li>Manually writing <code>.c</code> files</li><li>Switching the right parts over to <code>cdef</code></li></ul><p>Or is this just one of those cases where Python‚Äôs overhead will always keep it behind something like <code>ugrep</code>?</p><p>Gitub Repo: <a href="https://github.com/yousefabuz17/pyzipgrep">pyzipgrep</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 20:18:10 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/</link><title>[Project] /dev/push - An open source Vercel for Python apps</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ncgwas/project_devpush_an_open_source_vercel_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong></p><p><a href="https://github.com/hunvreus/devpush">/dev/push</a> is an open source deployment platform that lets you deploy Python apps with a UX similar to Vercel/Render. It handles git-based deployments, environment variables, real-time logs, custom domains...</p><p><strong>Target Audience</strong></p><p>Python developers who want an easier way to self-host and deploy apps. It‚Äôs ready for use (I run it for my own apps) but still in beta. Bug reports and feedback is welcome.</p><p><strong>Comparison</strong></p><p>Unlike Vercel or Render, /dev/push is fully open source and self-hosted. You can install and run it on your own Debian/Ubuntu server with a single command, without relying on a third-party platform. Compared to Coolify or CapRover, it‚Äôs lighter and more focused on delivering a polished UX.</p><p><strong>How to get started</strong></p><p>You can install it on a any Debian/Ubuntu server with a single command:</p><pre><code>curl -fsSL https://raw.githubusercontent.com/hunvreus/devpush/main/scripts/prod/install.sh | sudo bash</code></pre><p>More info on installation steps: <a href="https://devpu.sh/docs/installation/#quickstart">https://devpu.sh/docs/installation/#quickstart</a></p><p><strong>Links</strong></p><ul><li>GitHub: <a href="https://github.com/hunvreus/devpush">https://github.com/hunvreus/devpush</a></li><li>Docs: <a href="https://devpu.sh/docs">https://devpu.sh/docs</a></li><li>Website: <a href="https://devpu.sh">https://devpu.sh</a></li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 17:28:36 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/</link><title>I built a Django job scraper that saves listings directly into Google Sheets</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/</guid><comments>https://www.reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ncbh1t/i_built_a_django_job_scraper_that_saves_listings/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone</p><p>I was spending way too much time manually checking job boards, copying jobs into spreadsheets, and still missing good opportunities. So I built a small Django project to automate the whole process.</p><p>Here‚Äôs what it does:</p><ul><li>‚úÖ Scrapes job listings from TimesJobs using <strong>BeautifulSoup + Requests</strong></li><li>‚úÖ Saves them in a <strong>Django SQLite database</strong></li><li>‚úÖ Pushes jobs into <strong>Google Sheets</strong> via API</li><li>‚úÖ Avoids duplicates and formats data cleanly</li><li>‚úÖ Runs automatically every few hours with Python‚Äôs <code>schedule</code> library</li></ul><p><strong>Source code (GitHub):</strong> <a href="https://github.com/coderdigi01/jobscraper">jobscraper</a><br/><strong>Full step-by-step tutorial (with code snippets):</strong> [Blog Post]()</p><p>This was a fun project that taught me a lot about:</p><ul><li>Rate limiting (got blocked early on for too many requests)</li><li>Handling inconsistent HTML in job listings</li><li>Google Sheets API quotas and batching updates</li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 11:53:21 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/</link><title>trying to find old rtmidi module</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/</guid><comments>https://www.reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ncaaqa/trying_to_find_old_rtmidi_module/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I am trying to get MIDI input working in a very old Python 2.7 game, which is based on pygame 1.9.6.<br/>This game requires &quot;rtmidi&quot;, but I&#39;ve been unable to find exactly which rtmidi it needs.</p><p>These are the API calls used by the game;</p><pre><code>import rtmidi.RtMidiOut().RtMidiIn().getPortCount().openPort().getMessage()</code></pre><p>which rules out <code>rtmidi-python</code> and <code>python-rtmidi</code> as those use <code>.MidiOut</code>/<code>.MidiIn</code> instead of <code>.RtMidiOut</code>/<code>.RtMidiIn</code>.</p><p>I also tried every version of <code>rtmidi</code> which uses the API expected by this game, but the game crashes on startup with the error <code>TypeError: object of type &#39;NoneType&#39; has no len()</code>.</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 10:40:51 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/</link><title>What is the best framework for working with data from remote devices and applying it to the web?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/</guid><comments>https://www.reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nc7tpm/what_is_the_best_framework_for_working_with_data/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I need to get data from IoT devices and work with them, being able to manipulate them on the web and in databases.</p><p>I was thinking about Django Rest - Framework‚Ä¶.</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 08:28:08 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/</link><title>Python Type System and Tooling Survey 2025</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/</guid><comments>https://www.reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nc7r45/python_type_system_and_tooling_survey_2025/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>This survey was developed with support from the Pyrefly team at Meta, the PyCharm team at JetBrains, and the typing community on discourse.python.org. No typing experience needed -- your perspective as a Python dev matters most. Take a couple minutes to help improve Python typing for all:</p><p><a href="https://docs.google.com/forms/d/e/1FAIpQLSeOFkLutxMLqsU6GPe60OJFYVN699vqjXPtuvUoxbz108eDWQ/viewform?fbzx=-4095906651778441520">https://docs.google.com/forms/d/e/1FAIpQLSeOFkLutxMLqsU6GPe60OJFYVN699vqjXPtuvUoxbz108eDWQ/viewform?fbzx=-4095906651778441520</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 08:24:32 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/</link><title>Tuesday Daily Thread: Advanced questions</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/</guid><comments>https://www.reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nc41wf/tuesday_daily_thread_advanced_questions/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Wednesday Thread: Advanced Questions üêç</h1><p>Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.</p><h2>How it Works:</h2><ol><li><strong>Ask Away</strong>: Post your advanced Python questions here.</li><li><strong>Expert Insights</strong>: Get answers from experienced developers.</li><li><strong>Resource Pool</strong>: Share or discover tutorials, articles, and tips.</li></ol><h2>Guidelines:</h2><ul><li>This thread is for <strong>advanced questions only</strong>. Beginner questions are welcome in our <a href="#daily-beginner-thread-link">Daily Beginner Thread</a> every Thursday.</li><li>Questions that are not advanced may be removed and redirected to the appropriate thread.</li></ul><h2>Recommended Resources:</h2><ul><li>If you don&#39;t receive a response, consider exploring <a href="https://www.reddit.com/r/LearnPython">r/LearnPython</a> or join the <a href="https://discord.gg/python">Python Discord Server</a> for quicker assistance.</li></ul><h2>Example Questions:</h2><ol><li><strong>How can you implement a custom memory allocator in Python?</strong></li><li><strong>What are the best practices for optimizing Cython code for heavy numerical computations?</strong></li><li><strong>How do you set up a multi-threaded architecture using Python&#39;s Global Interpreter Lock (GIL)?</strong></li><li><strong>Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?</strong></li><li><strong>How would you go about implementing a distributed task queue using Celery and RabbitMQ?</strong></li><li><strong>What are some advanced use-cases for Python&#39;s decorators?</strong></li><li><strong>How can you achieve real-time data streaming in Python with WebSockets?</strong></li><li><strong>What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?</strong></li><li><strong>Best practices for securing a Flask (or similar) REST API with OAuth 2.0?</strong></li><li><strong>What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)</strong></li></ol><p>Let&#39;s deepen our Python knowledge together. Happy coding! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 05:30:29 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/</link><title>Just LSPDock v0.1.3 (before named LSProxy) released, multi-lsp handling feature</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/</guid><comments>https://www.reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nc3glf/just_lspdock_v013_before_named_lsproxy_released/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I have news: I implemented the feature in the proxy for handling multiple LSP in the same path/project using an <code>--exec</code> argument. The details are in the README.</p><p>LSPDock allows you to connect to an LSP running inside a Docker container directly from the IDE and automatically handles the differences in paths.</p><p>Note: I renamed the project because a conflict with another project.</p><p>The link of the repo:</p><p><a href="https://github.com/richardhapb/lspdock">https://github.com/richardhapb/lspdock</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 05:04:36 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/</link><title>Baba is you, learning games</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/</guid><comments>https://www.reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nc0etx/baba_is_you_learning_games/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Anyone played it? I heard it‚Äôs based on the logic of python. üêç Was thinking of downloading to keep me thinking about the topic while I am in the process of learning</p><p><a href="https://youtu.be/z3_yA4HTJfs?si=OR6gXX6xCTiarFbM">https://youtu.be/z3_yA4HTJfs?si=OR6gXX6xCTiarFbM</a></p><p>Doesn‚Äôt apply to anything in my current job field but I am learning it to eventually make a lateral job move until the opportunity presents itself</p><p>It‚Äôs available on mobile so thinking of getting it</p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 02:57:02 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/</link><title>cython for coding a game engine?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/</guid><comments>https://www.reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nbx7l6/cython_for_coding_a_game_engine/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>So I have plans to write a game engine, I wanna incorporate python as the main scripting language, and write the backend in C (maybe eventually c++) could I write the whole engine in cython getting the power of c but writing it in python or just stick to writing the backend in C?    </p></div><!-- SC_ON --></section>]]></description><pubDate>Tue, 09 Sep 2025 00:54:22 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/</link><title>Webscraping twitter or any</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/</guid><comments>https://www.reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nblyt6/webscraping_twitter_or_any/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>So I was trying to learn webscraping. I was following a github repo project based learning. The methods were outdated so the libraries were. It was snscrape. I found the twitter&#39;s own mining api but after one try it was not working . It had rate limit. I searched for few and found playwright and selenium . I only want to learn how to get the data and convert it into datasets. Later I will continue doing analysis on them for learning purpose. Can anyone suggest me something that should follow ?</p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 17:38:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/</link><title>Stop building UI frameworks in Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nbkych/stop_building_ui_frameworks_in_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>7 years back when I started coding, I used Tkinter. Then PyQt. </p><p>I spent some good 2 weeks debating if I should learn Kivy or Java for building an Android app.</p><p>Then we&#39;ve got modern ones: FastUI by Pydantic, NiceGUI (amazing project, it&#39;s the closest bet).</p><p>Python is great for a lot of things. Just stop abusing it by building (or trying to) UI with it. </p><p>Even if you ship something you&#39;ll wake up in mid of night thinking of all the weird scenarios, convincing yourself to go back to sleep since you&#39;ll find a workaround like last time. </p><p>Why I am saying this: Because I&#39;ve tried it all. I&#39;ve tried every possible way to avoid JavaScript and keep building UIs with Python.</p><p>I&#39;ve contributed to some really popular UI libraries in Python, tried inventing one back in Tkinter days. </p><p>I finally caved in and I now build UI with JavaScript, and I&#39;m happier person now. I feel more human.</p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 16:47:22 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/</link><title>I built a programming language interpreted in Python!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/</guid><comments>https://www.reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nbkguo/i_built_a_programming_language_interpreted_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey!</p><p>I&#39;d like to share a project I&#39;ve been working on: A functional programming language that I built entirely in Python.</p><p>I&#39;m primarily a Python developer, but I wanted to understand functional programming concepts better. Instead of just reading about them, I decided to build my own FP language from scratch. It started as a tiny DSL (domain specific language) for a specific problem (which it turned out to be terrible for!), but I enjoyed the core ideas enough to expand it into a full functional language.</p><h2>What My Project Does</h2><p>NumFu is a pure functional programming language interpreted in Python featuring:- <strong>Arbitrary precision arithmetic</strong> using <code>mpmath</code> - no floating point issues- <strong>Automatic partial application</strong> and function composition - <strong>Built-in testing syntax</strong> with readable assertions- <strong>Tail call optimization</strong> for efficient recursion- <strong>Clean syntax</strong> with only four types (Number, Boolean, List, String)</p><p>Here&#39;s a taste of the syntax:</p><p>```numfu// Functions automatically partially apply</p><blockquote><blockquote><blockquote><p>{a, b, c -&gt; a + b + c}(_, 5){a, c -&gt; a+5+c}  // Even prints as readable syntax!</p></blockquote></blockquote></blockquote><p>// Composition and pipeslet add1 = {x -&gt; x + 1},    double = {x -&gt; x * 2}in 5 |&gt; (add1 &gt;&gt; double) // 12</p><p>// Built-in testinglet square = {x -&gt; x * x} insquare(7) ---&gt; $ == 49  // ‚úì passes```</p><h2>Target Audience</h2><p>This is <strong>not</strong> a production language - it&#39;s 2-5x slower than Python due to double interpretation. It&#39;s more of a learning tool for:- Teaching functional programming concepts without complex syntax- Sketching mathematical algorithms where precision matters more than speed- Understanding how interpreters work</p><h2>Comparison</h2><p>NumFu has much simpler syntax than traditional functional languages like Haskell or ML and no complex type system - just four basic types. It&#39;s less powerful but much more approachable. I designed it to make FP concepts accessible without getting bogged down in advanced language features. Think of it as functional programming with training wheels.</p><h2>Implementation Details</h2><p>The implementation is about 3,500 lines of Python using:- <em>Lark</em> for parsing- <em>Tree-walking interpreter</em> - straightforward recursive evaluation<br/>- <em>mpmath</em> for arbitrary precision arithmetic</p><h2>Try It Out</h2><p><code>bashpip install numfu-langnumfu repl</code></p><h2>Links</h2><p>I actually enjoy web design, so NumFu has a (probably overly fancy) landing page + documentation site. üòÖ</p><ul><li>GitHub: <a href="https://github.com/rphle/numfu">https://github.com/rphle/numfu</a><br/></li><li>Website: <a href="https://rphle.github.io/numfu/">https://rphle.github.io/numfu/</a></li><li>Documentation: <a href="https://rphle.github.io/numfu/docs">https://rphle.github.io/numfu/docs</a></li><li>PyPI: <a href="https://pypi.org/project/numfu-lang/">https://pypi.org/project/numfu-lang/</a></li></ul><p>I built this as a learning exercise and it&#39;s been fun to work on. Happy to answer questions about design choices or implementation details! I also really appreciate issues and pull requests!</p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 16:20:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/</link><title>Monday Daily Thread: Project ideas!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/</guid><comments>https://www.reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nb8x34/monday_daily_thread_project_ideas/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: Project Ideas üí°</h1><p>Welcome to our weekly Project Ideas thread! Whether you&#39;re a newbie looking for a first project or an expert seeking a new challenge, this is the place for you.</p><h2>How it Works:</h2><ol><li><strong>Suggest a Project</strong>: Comment your project idea‚Äîbe it beginner-friendly or advanced.</li><li><strong>Build &amp; Share</strong>: If you complete a project, reply to the original comment, share your experience, and attach your source code.</li><li><strong>Explore</strong>: Looking for ideas? Check out Al Sweigart&#39;s <a href="https://www.amazon.com/Big-Book-Small-Python-Programming/dp/1718501242">&quot;The Big Book of Small Python Projects&quot;</a> for inspiration.</li></ol><h2>Guidelines:</h2><ul><li>Clearly state the difficulty level.</li><li>Provide a brief description and, if possible, outline the tech stack.</li><li>Feel free to link to tutorials or resources that might help.</li></ul><h1>Example Submissions:</h1><h2>Project Idea: Chatbot</h2><p><strong>Difficulty</strong>: Intermediate</p><p><strong>Tech Stack</strong>: Python, NLP, Flask/FastAPI/Litestar </p><p><strong>Description</strong>: Create a chatbot that can answer FAQs for a website.</p><p><strong>Resources</strong>: <a href="https://www.youtube.com/watch?v=a37BL0stIuM">Building a Chatbot with Python</a></p><h1>Project Idea: Weather Dashboard</h1><p><strong>Difficulty</strong>: Beginner</p><p><strong>Tech Stack</strong>: HTML, CSS, JavaScript, API</p><p><strong>Description</strong>: Build a dashboard that displays real-time weather information using a weather API.</p><p><strong>Resources</strong>: <a href="https://www.youtube.com/watch?v=9P5MY_2i7K8">Weather API Tutorial</a></p><h2>Project Idea: File Organizer</h2><p><strong>Difficulty</strong>: Beginner</p><p><strong>Tech Stack</strong>: Python, File I/O</p><p><strong>Description</strong>: Create a script that organizes files in a directory into sub-folders based on file type.</p><p><strong>Resources</strong>: <a href="https://automatetheboringstuff.com/2e/chapter9/">Automate the Boring Stuff: Organizing Files</a></p><p>Let&#39;s help each other grow. Happy coding! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 05:30:30 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/</link><title>My Python library to create images from simple layouts</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/</guid><comments>https://www.reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nb8bdn/my_python_library_to_create_images_from_simple/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey <a href="https://www.reddit.com/r/Python">r/Python</a>,</p><p>I&#39;m working on an open-source library for creating images from code. The idea is to build visuals by describing them as simple layouts, instead of calculating <code>(x, y)</code> coordinates for everything.</p><p>For example, I used it to generate this fake Reddit post card:</p><p><a href="https://i.imgur.com/JUFXMzK.png">Resulting Image</a></p><p>This whole image was created with the Python code below. It handles all the layout, font fallbacks, text wrapping, and rendering for you.</p><p>```pythonfrom pictex import *</p><h1>--- 1. Define the small components ---</h1><p>upvote_icon = Image(&quot;upvote.png&quot;)downvote_icon = Image(&quot;downvote.png&quot;)comment_icon = Image(&quot;comment.png&quot;).resize(0.7)python_icon = Image(&quot;python_logo.png&quot;).size(25, 25).border_radius(&#39;50%&#39;)</p><p>flair = Text(&quot;Showcase&quot;).font_size(12).padding(2, 6).background_color(&quot;#0079D3&quot;).color(&quot;white&quot;).border_radius(10)</p><h1>--- 2. Build the layout by composing components ---</h1><p>vote_section = Column(    upvote_icon,    Text(&quot;51&quot;).font_size(40).font_weight(700),    downvote_icon).horizontal_align(&#39;center&#39;).gap(5)</p><p>post_header = Row(    python_icon,    Text(&quot;<a href="https://www.reddit.com/r/Python">r/Python</a> ‚Ä¢ Posted by <a href="https://www.reddit.com/u/_unknownProtocol">u/_unknownProtocol</a>&quot;).font_size(14),    flair).gap(8).vertical_align(&#39;center&#39;)</p><p>post_title = Text(    &quot;My Python library to create images from simple layouts&quot;).font_size(22).font_weight(700).line_height(1.2)</p><p>post_footer = Row(    comment_icon,    Text(&quot;12 Comments&quot;).font_size(14).font_weight(700),).gap(8).vertical_align(&#39;center&#39;)</p><h1>--- 3. Assemble the final card ---</h1><p>main_card = Row(    vote_section.padding(0, 15, 0, 0),    Column(post_header, post_title, post_footer).gap(10)).padding(20).background_color(&quot;white&quot;).border_radius(10).size(width=600).box_shadows(    Shadow(offset=(5, 5), blur_radius=10, color=&quot;#00000033&quot;))</p><h1>--- 4. Render on a canvas ---</h1><p>canvas = Canvas().background_color(LinearGradient([&quot;#F0F2F5&quot;, &quot;#DAE0E6&quot;])).padding(40)image = canvas.render(main_card)image.save(&quot;reddit_card.png&quot;)```</p><hr/><h3>What My Project Does</h3><p>It&#39;s a layout engine that renders to an image. You build your image by nesting components (<code>Row</code>, <code>Column</code>, <code>Text</code>, <code>Image</code>), and the library figures out all the sizing and positioning for you, using a model inspired by CSS Flexbox. You can style any element with padding, borders, backgrounds, and shadows. It also handles fonts and emojis, automatically finding fallbacks if a character isn&#39;t supported.</p><h3>Target Audience</h3><p>It&#39;s for any Python dev who wants to create images from code, especially when the content is dynamic. For example:*   Automating social media posts or quote images.*   Generating Open Graph images for a website on the fly.*   Creating parts of an infographic or a report.</p><p>The project is currently in Beta. It&#39;s pretty solid for most common use cases, but you might still find some rough edges.</p><h3>Comparison</h3><ul><li>  <strong>vs. Pillow/OpenCV:</strong> Think of Pillow/OpenCV as a digital canvas where you have to specify the exact <code>(x, y)</code> coordinates for everything you draw. This library is more of a layout manager: you describe <em>how</em> elements should be arranged, and it does the math for you.</li><li>  <strong>vs. HTML/CSS-to-Image libraries:</strong> They&#39;re powerful, but they usually require a full web browser engine (like Chrome) to work, which can be a heavy dependency. This library uses Skia directly and is a standard <code>pip install</code>.</li></ul><hr/><p>I&#39;m still working on it, and any feedback or suggestions are very welcome.</p><p>You can find more examples in the repository. Thanks for taking a look!</p><ul><li>  <strong>GitHub Repo:</strong> <a href="https://github.com/francozanardi/pictex">https://github.com/francozanardi/pictex</a></li><li>  <strong>PyPI Page:</strong> <a href="https://pypi.org/project/pictex/">https://pypi.org/project/pictex/</a></li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 05:02:44 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/</link><title>lilpipe: a tiny, typed pipeline engine (not a DAG)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/</guid><comments>https://www.reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nb5rhw/lilpipe_a_tiny_typed_pipeline_engine_not_a_dag/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>At work, I develop data analysis pipelines in Python for the lab teams. Oftentimes, the pipelines are a little too lightweight to justify a full DAG.¬†<a href="https://github.com/andrewruba/lilpipe">lilpipe</a>¬†is my attempt at the minimum feature set to run those pipelines without extra/unnecessary infrastructure.</p><h1>What My Project Does</h1><ul><li>Runs sequential, in-process pipelines (not a DAG/orchestrator).</li><li>Shares a typed, Pydantic PipelineContext across steps (assignment-time validation if you want it).</li><li>Skips work via fingerprint caching (fingerprint_keys).</li><li>Gives simple control signals: ctx.abort_pass() (retry current pass) and ctx.abort_pipeline() (stop).</li><li>Lets you compose steps: Step(&quot;name&quot;, children=[...]).</li></ul><h1>Target Audience</h1><ul><li>Data scientists / lab scientists who use notebooks or small scripts and want a shared context across steps.</li><li>Anyone maintaining ‚Äúglue‚Äù scripts that could use caching and simple retry/abort semantics.</li><li>Bio-analytical analysis: load plate ‚Üí calibrate ‚Üí QC ‚Üí report (ie. this project&#39;s origin story).</li><li>Data engineers with one-box batch jobs (CSV ‚Üí clean ‚Üí export) who don‚Äôt want a scheduler and metadata DB (a bit of a stretch, I know).</li></ul><h1>Comparison</h1><ul><li>Airflow/Dagster/Prefect: Full DAG/orchestrators with schedulers, UIs, state, lineage, retries, SLAs/backfills. lilpipe is intentionally not that. It‚Äôs for linear, in-process pipelines where that stack is overkill.</li><li>scikit-learn Pipeline: ML-specific fit/transform/predict on estimators. lilpipe is general purpose steps with a Pydantic context.</li><li>Other lightweight pipeline libraries: don&#39;t have the exact features that I use on a day-to-day basis. lilpipe does have those features haha.</li></ul><p>Thanks, hoping to get feedback. I know there are many variations of this but it may fit a certain data analysis niche.</p><p><a href="https://github.com/andrewruba/lilpipe">lilpipe</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Mon, 08 Sep 2025 03:12:32 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/</link><title>Class type parameters that actually do something</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/</guid><comments>https://www.reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nazumb/class_type_parameters_that_actually_do_something/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I was bored, so I made type parameters for python classes that are accessible within your class and contribute to behaviour . Check them out:</p><p><a href="https://github.com/arikheinss/ParametricTypes.py">https://github.com/arikheinss/ParametricTypes.py</a></p><pre><code>T = TypeVar(&quot;T&quot;)class wrapper[T](metaclass = ParametricClass):    &quot;silly wrapper class with a type restriction&quot;    def __init__(self, x: T):        self.set(x)    def set(self, v: T):        if not isinstance(v, T):            raise TypeError(f&quot;wrapper of type ({T}) got value of type {type(v)}&quot;)        self.data = v    def get(self) -&gt; T:        return self.data# =============================================w_int = wrapper[int](2)w_int.set(4)print(w_int.get()) # 4print(isinstance(wrapper[int], type)) # Truew_int.set(&quot;hello&quot;) # error!! Wrong type!w_2 = wrapper(None) # error!! Missing type parameters!!</code></pre><p>edit: after some discussion in the comments, I want to highlight that one central component of this mechanism is that we get different types from applying the type parameters, i.e.:</p><p><code>isinstance(w_int, wrapper) # Trueisinstance(w_int, wrapper[int]) # Trueisinstance(w_int, wrapper[float]) # Falsetype(wrapper[str](&quot;&quot;)) == type(wrapper[int](2)) # False</code></p><p>For the Bot, so it does not autoban me again:</p><ul><li><strong>What My Project Does</strong> Is explained above</li><li><strong>Target Audience</strong> Toyproject - Anyone who cares</li><li><strong>Comparison</strong> The Python GenericAlias exists, but does not really integrate with the rest of the type system.</li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 23:21:49 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/</link><title>Python-JSON-Logger v4.0.0.rc1 Released</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/</guid><comments>https://www.reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nakbd6/pythonjsonlogger_v400rc1_released/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hi All, maintainer of <a href="https://github.com/nhairs/python-json-logger">python-json-logger</a> here with a new (pre) release for you.</p><p>It can be installed using <code>python-json-logger==4.0.0.rc1</code></p><h1>What&#39;s new?</h1><p>This release has a few quality of life improvements that also happen to be breaking changes. The <a href="https://nhairs.github.io/python-json-logger/4.0.0/changelog/">full change log is here</a> but to give an overview:</p><p><strong>Support for</strong> <code>ext://</code> <strong>when using</strong> <code>dictConfig</code> <strong>/</strong> <code>fileConfig</code></p><p>This allows you to reference Python objects in your config for example:</p><pre><code>version: 1disable_existing_loggers: Falseformatters:  default:    &quot;()&quot;: pythonjsonlogger.json.JsonFormatter    format: &quot;%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s %(lineno)s %(message)s&quot;    json_default: ext://logging_config.my_json_default    rename_fields:      &quot;asctime&quot;: &quot;timestamp&quot;      &quot;levelname&quot;: &quot;status&quot;    static_fields:      &quot;service&quot;: ext://logging_config.PROJECT_NAME      &quot;env&quot;: ext://logging_config.ENVIRONMENT      &quot;version&quot;: ext://logging_config.PROJECT_VERSION      &quot;app_log&quot;: &quot;true&quot;handlers:  default:    formatter: default    class: logging.StreamHandler    stream: ext://sys.stderr  access:    formatter: default    class: logging.StreamHandler    stream: ext://sys.stdoutloggers:  uvicorn.error:    level: INFO    handlers:      - default    propagate: no  uvicorn.access:    level: INFO    handlers:      - access    propagate: no</code></pre><p><strong>Support for easier to use formats</strong></p><p>We now support a comma <code>style=&quot;,&quot;</code> style which lets use a comma seperate string to specific fields.</p><pre><code>formatter = JsonFormatter(&quot;message,asctime,exc_info&quot;, style=&quot;,&quot;)</code></pre><p>We also using any sequence of strings (e.g. lists or tuples).</p><pre><code>formatter = JsonFormatter([&quot;message&quot;, &quot;asctime&quot;, &quot;exc_info&quot;])</code></pre><h1>What is Python JSON Logger</h1><p>If you&#39;ve not heard of this package, Python JSON Logger enables you produce JSON logs when using Python&#39;s¬†<code>logging</code>¬†package.</p><p>JSON logs are machine readable allowing for much easier parsing and ingestion into log aggregation tools.</p><p>For example here is the (formatted) log output of one of my programs:</p><pre><code>{  &quot;trace_id&quot;: &quot;af922f04redacted&quot;,  &quot;request_id&quot;: &quot;cb1499redacted&quot;,  &quot;parent_request_id&quot;: null,  &quot;message&quot;: &quot;Successfully imported redacted&quot;,  &quot;levelname&quot;: &quot;INFO&quot;,  &quot;name&quot;: &quot;redacted&quot;,  &quot;pathname&quot;: &quot;/code/src/product_data/consumers/games.py&quot;,  &quot;lineno&quot;: 41,  &quot;timestamp&quot;: &quot;2025-09-06T08:00:48.485770+00:00&quot;}</code></pre><h1>Why post to Reddit?</h1><p>Although Python JSON Logger <a href="https://hugovk.github.io/top-pypi-packages/">is in the top 300 downloaded packaged from PyPI</a> (in the last month it&#39;s been downloaded more times that UV! ... just), there&#39;s not many people watching the repository <a href="https://www.reddit.com/r/Python/comments/1hcm2rr/pythonjsonlogger_has_changed_hands/">after it changed hands</a> at the end of 2024.</p><p>This seemed the most appropriate way to share the word in order to minimise disruptions once it is released.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 10:18:52 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nagdcd/tempocut_broadcaststyle_audiovideo_time/</link><title>TempoCut ‚Äî Broadcast-style audio/video time compression in Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nagdcd/tempocut_broadcaststyle_audiovideo_time/</guid><comments>https://www.reddit.com/r/Python/comments/1nagdcd/tempocut_broadcaststyle_audiovideo_time/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nagdcd/tempocut_broadcaststyle_audiovideo_time/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hi all ‚Äî I just released **TempoCut**, a Python project that recreates broadcast-style time compression (like the systems TV networks used to squeeze shows into fixed time slots).</p><p>### What My Project Does</p><p>- Compresses video runtimes while keeping audio/video/subtitles in sync</p><p>- Audio ‚Äúskippy‚Äù compression with crossfade blending (stereo + 5.1)</p><p>- DTW-based video retiming at 59.94p with micro-smear blending</p><p>- Exports Premiere Pro markers for editors</p><p>- Automatic subtitle retiming using warp maps</p><p>- Includes a one-click batch workflow for Windows</p><p>Repo: <a href="https://github.com/AfvFan99/TempoCut">https://github.com/AfvFan99/TempoCut</a></p><p>### Target Audience</p><p>TempoCut is for:</p><p>- Hobbyists and pros curious about how broadcast time-tailoring works</p><p>- Editors who want to experiment with time compression outside of proprietary hardware</p><p>- Researchers or students interested in DSP / dynamic time warping in Python</p><p>This is not intended for mission-critical production broadcasting, but it‚Äôs close to what real networks used.</p><p>### Comparison</p><p>- Professional solutions (like Prime Image Time Tailor) are **expensive, closed-source, and hardware-based**.  </p><p>- TempoCut is **free, open-source, and Python-based** ‚Äî accessible to anyone.  </p><p>- While simple FFmpeg speed changes distort pitch or cause sync drift, TempoCut mimics broadcast-style micro-skips with far fewer artifacts.  </p><p>Would love feedback ‚Äî especially on DSP choices, performance, and making it more portable for Linux/Mac users. üöÄ</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 06:49:34 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/</link><title>ensures: simple Design by Contract</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/</guid><comments>https://www.reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nag19u/ensures_simple_design_by_contract/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><ul><li><strong>What My Project Does</strong></li></ul><p>There are a few other packages for this, but I decided to make one that is simple, readable, accepts arbitrary functions, and uses the Result type from functional programming. You can find more details in the readme: <a href="https://github.com/brunodantas/ensures">https://github.com/brunodantas/ensures</a></p><blockquote><p>ensures is a simple Python package that implements the idea of Design by Contract described in the Pragmatic Paranoia chapter of The Pragmatic Programmer. That&#39;s the chapter where they say you should trust nobody, not even yourself.</p></blockquote><ul><li><strong>Target Audience</strong>¬†(e.g., Is it meant for production, just a toy project, etc.)</li></ul><p>Anyone interested in <del>paranoia</del> decorating functions with precondition functions etc and use a Functional data structure in the process.</p><p>I plan to add pytest tests to make this more production-ready. Any feedback is welcome.</p><ul><li><strong>Comparison</strong>¬†(A brief comparison explaining how it differs from existing alternatives.)</li></ul><p>None of the alternatives I found seem to implement arbitrary functions plus the Result type, while being simple and readable.</p><p>But some of the alternatives are icontract, contracts, deal. Each with varying levels of the above.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 06:32:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/</link><title>Sunday Daily Thread: What's everyone working on this week?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/</guid><comments>https://www.reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1naeqh3/sunday_daily_thread_whats_everyone_working_on/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: What&#39;s Everyone Working On This Week? üõ†Ô∏è</h1><p>Hello <a href="https://www.reddit.com/r/Python">/r/Python</a>! It&#39;s time to share what you&#39;ve been working on! Whether it&#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&#39;re up to!</p><h2>How it Works:</h2><ol><li><strong>Show &amp; Tell</strong>: Share your current projects, completed works, or future ideas.</li><li><strong>Discuss</strong>: Get feedback, find collaborators, or just chat about your project.</li><li><strong>Inspire</strong>: Your project might inspire someone else, just as you might get inspired here.</li></ol><h2>Guidelines:</h2><ul><li>Feel free to include as many details as you&#39;d like. Code snippets, screenshots, and links are all welcome.</li><li>Whether it&#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.</li></ul><h2>Example Shares:</h2><ol><li><strong>Machine Learning Model</strong>: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!</li><li><strong>Web Scraping</strong>: Built a script to scrape and analyze news articles. It&#39;s helped me understand media bias better.</li><li><strong>Automation</strong>: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!</li></ol><p>Let&#39;s build and grow together! Share your journey and learn from others. Happy coding! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 05:30:31 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/</link><title>Another free Python 3 Tkinter Book</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/</guid><comments>https://www.reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1naeauz/another_free_python_3_tkinter_book/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>If you are interested, you can click the top link on my landing page and download my eBook, &quot;Tkinter in Python 3, De-mystified&quot; for free:¬†<a href="https://linktr.ee/chris4sawit">https://linktr.ee/chris4sawit</a></p><p>I recently gave away a Beginner&#39;s Python Book and that went really well</p><p>So I hope this 150 page pdf will be useful for someone interested in Tkinter in Python. Since it is sometimes difficult to copy/paste from a pdf, I&#39;ve added a .docx and .md version as well.  The link will download all 3 as a zip file.  No donations will be requested. Only info needed is an email address to get the download link.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 05:10:02 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/</link><title>Built a free VS Code extension for Python dependencies - no more PyPI tab switching</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1na9od6/built_a_free_vs_code_extension_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Tired of switching to PyPI tabs to check package versions?</p><p>Just released <strong>Tombo</strong> - brings PyPI directly into VS Code:</p><p><strong>What it does (complements your existing workflow):</strong></p><ul><li>uv/poetry handle installation ‚Üí Tombo handles version selection</li><li>Hover <code>requests</code> ‚Üí see ALL versions + Python compatibility</li><li>Type <code>numpy&gt;=</code> ‚Üí intelligent version suggestions for your project</li><li>Perfect for big projects (10+ deps) - no more version hunting</li><li>Then let uv/poetry create the lock files</li></ul><p><strong>Demo in 10 seconds:</strong></p><ol><li>Open any Python project</li><li>Type <code>django&gt;=</code></li><li>Get instant version suggestions</li><li>Hover packages for release info</li></ol><p><strong>Installation:</strong> VS Code ‚Üí Search &quot;Tombo&quot; ‚Üí Install</p><p><strong>Free &amp; open source</strong> - no tracking, no accounts, just works.</p><p>‚≠ê <strong>Star the project</strong> if you find it useful: <a href="https://github.com/benbenbang/tombo">https://github.com/benbenbang/tombo</a></p><p>VS Code Marketplace: <a href="https://marketplace.visualstudio.com/items?itemName=benbenbang.tombo">https://marketplace.visualstudio.com/items?itemName=benbenbang.tombo</a></p><p>Documentation: <a href="https://benbenbang.github.io/tombo/">https://benbenbang.github.io/tombo/</a></p><p>Anyone else tired of manual PyPI lookups? ü§¶‚Äç‚ôÇÔ∏è</p></div><!-- SC_ON --></section>]]></description><pubDate>Sun, 07 Sep 2025 01:48:17 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1na6xqg/simple_keyboard_count_tracker/</link><title>Simple Keyboard Count Tracker</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1na6xqg/simple_keyboard_count_tracker/</guid><comments>https://www.reddit.com/r/Python/comments/1na6xqg/simple_keyboard_count_tracker/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1na6xqg/simple_keyboard_count_tracker/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does:</strong><br/>This simple Python script tracks your keyboard in the background and logs every key you press. You can track your total keystrokes, see which keys you hit the most, and all that with a fancy keyboard display with a color gradient.</p><p>Whether you‚Äôre curious about your productivity, want to visualize your keyboard usage, or just enjoy quirky data experiments</p><p><strong>Target Audience:</strong><br/>People interested in knowing more about their productivity, or just data enthusiasts like me :)</p><p><strong>Comparison:</strong><br/>I Couldn&#39;t find a similar lightweight tool that works in the background and is easy to use, so I decided to build my own using Python.</p><p><strong>Repo Link:</strong><br/><a href="https://github.com/Franm99/keyboard-tracker">https://github.com/Franm99/keyboard-tracker</a></p><p>Would love feedback, suggestions, or improvements from the community!</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 23:58:20 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/</link><title>Ducky, my open-source networking &amp;amp; security toolkit for Network Engineers, Sysadmins, and Pentester</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/</guid><comments>https://www.reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1na61l2/ducky_my_opensource_networking_security_toolkit/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone, For a long time, I&#39;ve been frustrated with having to switch between a dozen different apps for my networking tasks PuTTY for SSH, a separate port scanner, a subnet calculator, etc.</p><p>To solve this, I built¬†<strong>Ducky</strong>, a free and open-source, all-in-one toolkit that combines these essential tools into one clean, tabbed interface.</p><p><strong>What it does:</strong></p><ul><li><strong>Multi-Protocol Tabbed Terminal:</strong>¬†Full support for SSH, Telnet, and Serial (COM) connections.</li><li><strong>Network Discovery:</strong>¬†An ARP scanner to find live hosts on your local network and a visual Topology Mapper.</li><li><strong>Essential Tools:</strong>¬†It also includes a Port Scanner, CVE Vulnerability Lookup, Hash Cracker, and other handy utilities.</li></ul><p><strong>Target Audience:</strong><br/>I built this for anyone who works with networks or systems, including:</p><ul><li><strong>Network Engineers &amp; Sysadmins:</strong>¬†For managing routers, switches, and servers without juggling multiple windows.</li><li><strong>Cybersecurity Professionals &amp; Students:</strong>¬†A great all-in-one tool for pentesting, vulnerability checks (CVE), and learning.</li><li><strong>Homelabbers &amp; Tech Enthusiasts:</strong>¬†The perfect command center for managing your home lab setup.</li><li><strong>Fellow Python Developers:</strong>¬†To see a practical desktop application built with¬†<strong>PySide6</strong>.</li></ul><p><strong>How you can help:</strong><br/>The project is 100% open-source, and I&#39;m actively looking for contributors and feedback!</p><ul><li><strong>Report bugs or issues:</strong>¬†Find something that doesn&#39;t work right? Please open an issue on GitHub.</li><li><strong>Suggest enhancements:</strong>¬†Have an idea for a new tool or an improvement? Let&#39;s discuss it!</li><li><strong>Contribute code:</strong>¬†Pull Requests are always welcome.</li><li><strong>GitHub Repo (Source Code &amp; Issues):</strong>¬†<a href="https://github.com/thecmdguy/Ducky">https://github.com/thecmdguy/Ducky</a></li><li><strong>Project Homepage:</strong>¬†<a href="https://ducky.ge/">https://ducky.ge/</a></li></ul><p>Thanks for taking a look!</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 23:23:19 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1na5fk2/from_stress_to_success_load_testing_python_apps/</link><title>From Stress to Success: Load Testing Python Apps ‚Äì Open Source Example</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1na5fk2/from_stress_to_success_load_testing_python_apps/</guid><comments>https://www.reddit.com/r/Python/comments/1na5fk2/from_stress_to_success_load_testing_python_apps/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1na5fk2/from_stress_to_success_load_testing_python_apps/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does:</strong><br/>This project demonstrates <strong>load testing Python applications</strong> and <strong>visualizing performance metrics</strong>. It uses a sample Python app, Locust for stress testing, Prometheus for metrics collection, and Grafana for dashboards. It‚Äôs designed to give a hands-on example of how to simulate load and understand app performance.</p><p><strong>Target Audience:</strong><br/>Developers and Python enthusiasts who want to learn or experiment with load testing and performance visualization. It‚Äôs meant as a <strong>learning tool and reference</strong>, not a production-ready system.</p><p><strong>Comparison:</strong><br/>Unlike generic tutorials or scattered examples online, this repo bundles everything together‚Äîapp, load scripts, Prometheus, and Grafana dashboards‚Äîso you can <strong>see the full workflow from stress testing to visualization in one place</strong>.</p><p><strong>Repo Link:</strong><br/><a href="https://github.com/Alleny244/locust-grafana-prometheus">https://github.com/Alleny244/locust-grafana-prometheus</a></p><p>Would love feedback, suggestions, or improvements from the community!</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 22:59:34 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1na21zu/jollyradio_a_web_based_radio/</link><title>JollyRadio - A web based radio</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1na21zu/jollyradio_a_web_based_radio/</guid><comments>https://www.reddit.com/r/Python/comments/1na21zu/jollyradio_a_web_based_radio/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1na21zu/jollyradio_a_web_based_radio/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong> </p><p>JollyRadio is a web based, simple radio where you can find lots of live streams. It&#39;s designed to be easy to navigate and have less extra fluff. </p><p><strong>Target Audience</strong> </p><p>JollyRadio is for people who want to listen to radio! It has basic filtering to filter out bad stuff, but you may still need to know what to do and not do. </p><p><strong>Comparison</strong> </p><p>Compared to other web based radios, JollyRadio is designed to be local-focused and more minimalistic. There are three sections, exploring, local stations and searching for stations. It is better if you want a easy, minimal interface.</p><p><strong>Technical Explanation</strong></p><p>JollyRadio is written in Python (Flask) with HTML (Bootstrap). I&#39;m new to programming, so please don&#39;t expect a perfect product. It uses the RadioBrowser API to find the radio stations.</p><p><strong>Links</strong></p><p>GitHub Link: <a href="https://github.com/SeafoodStudios/JollyRadio">https://github.com/SeafoodStudios/JollyRadio</a></p><p>Radio Link: <a href="https://tryjollyradio.seafoodstudios.com/">https://tryjollyradio.seafoodstudios.com/</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 20:44:15 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9urtc/automating_power_supply_measurements_with_pyvisa/</link><title>Automating Power Supply Measurements with PyVisa &amp;amp; Pytest</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9urtc/automating_power_supply_measurements_with_pyvisa/</guid><comments>https://www.reddit.com/r/Python/comments/1n9urtc/automating_power_supply_measurements_with_pyvisa/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n9urtc/automating_power_supply_measurements_with_pyvisa/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>Target Audience:</strong></p><ul><li>R&amp;D Development &amp; Test Enginners</li><li>Electrical Engineering Students</li><li>Python Automation Experts</li></ul><p><strong>What My Project Does:</strong></p><p>I created a small python library: <a href="https://github.com/ammarkh95/pypm-test">pypm-test</a> which could be used for automating measurements with the pictured instruments.</p><p>You could also use it as reference to automate similar functions with your available instruments. The library is Python based and makes use of <a href="https://pyvisa.readthedocs.io/en/latest/">PyVisa </a>library for communction with electronic eqipment supporting <a href="https://www.ivifoundation.org/About-IVI/scpi.html">SCPI </a>standard.</p><p>The library also includes some <a href="https://docs.pytest.org/en/stable/explanation/fixtures.html">pytest-fixtures</a> which makes it nice to use in automated testing environment.</p><p>Below I share summary of the hardware used and developed python library as well as some example results for an automated DC-DC converter measurements. You can find all the details in my <a href="https://ak-experiments.blogspot.com/2025/09/automating-power-supply-measurements.html">blog post</a></p><p><strong>Hardware:</strong></p><p>I had access to the following instruments:</p><p><a href="https://www.keysight.com/us/en/support/U3606B/multimeter-dc-power-supply.html">Keysight U3606B</a>: Combination of a 5.5 digit digital multimeter and 30-W power supply in a single unit<br/><a href="https://www.keysight.com/us/en/products/source-measure-units-smu/u2722a-u2723a-usb-modular-source-measure-units-smu.html">Keysight U2723A:</a> Modular source measure unit (SMU) Four-quadrant operation (¬± 120 mA/¬± 20 V)</p><p><strong>Software:</strong></p><p>The developd library contain wrapper classes that implement the control and measurement functions of the above instruments.</p><p>The exposed functions by the SCPI interface are normally documented in the programming manuals of the equipment published online. So it was just a matter of going through the manuals to get the required <a href="https://www.ivifoundation.org/About-IVI/scpi.html">SCPI</a> commands / queries for a given instrument function and then sending it over to the instrument using <a href="https://pyvisa.readthedocs.io/en/latest/">PyVisa</a> write and query functions.</p><p><strong>Example:</strong></p><p>A classical example application with a power supply and source measure unit is to evaluate the efficiency of DC-DC conversion for a given system. It is also a nice candiate &quot;parameteric study&quot; for automation to see how does the output power compares to the input power (i.e. effeciency) at different inputs voltges / sink currents. You can view the code behind similar test directly from my repo <a href="https://github.com/ammarkh95/pypm-test/blob/f5434110e7dffd4adeff23f09d9ca10877fc1dbb/testing/example_tests/test_dc_dc_converter.py#L84">here</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 14:28:25 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9qlkv/what_are_some_nonai_toolsextensions_which_have/</link><title>What are some non-AI tools/extensions which have really boosted your work life or made life easier?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9qlkv/what_are_some_nonai_toolsextensions_which_have/</guid><comments>https://www.reddit.com/r/Python/comments/1n9qlkv/what_are_some_nonai_toolsextensions_which_have/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9qlkv/what_are_some_nonai_toolsextensions_which_have/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>It can be an extension or a CLI tool or something else, My work mainly involves in developing managing mid sized python applications deployed over aws. I mostly work through cursor and agents have been decently useful but these days all the development on programming tools seems to be about AI integration. Is there something that people here have been using that&#39;s come out in last few years and has made serious impact in how you do things? Can be open source or not, anything goes it just shouldn&#39;t be something AI or a framework.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 10:11:33 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9q2p1/python_idles_practical_upgrade_file_tree_tabbed/</link><title>Python IDLE's practical upgrade: file tree, tabbed editing, console view using only stdlib+tkinter.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9q2p1/python_idles_practical_upgrade_file_tree_tabbed/</guid><comments>https://www.reddit.com/r/Python/comments/1n9q2p1/python_idles_practical_upgrade_file_tree_tabbed/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9q2p1/python_idles_practical_upgrade_file_tree_tabbed/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I was tinkering with IDLE and wondered: what if it had just a few modern quality-of-life improvements, but implemented entirely with Python‚Äôs standard library (so no extra dependencies, just <code>tkinter</code>)?</p><p>Specifically:</p><ul><li>File tree view (browse/open files inside the IDE itself)</li><li>Tabbed editing (each opened file gets its own tab)</li><li>Console view embedded alongside tabs</li><li>Still dead-simple, light, and portable</li></ul><p>The idea isn‚Äôt to compete with full IDEs like PyCharm or VS Code, but to provide a <em>corporate-safe</em>, zero-install, batteries-included IDE that works even on fenced machines where you can‚Äôt pull in external editors or packages.</p><p>Think of it as ‚ÄúIDLE-plus‚Äù ‚Äî familiar, lightweight, but with just enough features to make small/medium coding tasks more pleasant.</p><p>I‚Äôm curious:</p><ul><li>Would people here find this genuinely useful?</li><li>Do fenced corporate environments still rely on IDLE as the only safe option?</li><li>Is it worth polishing into a small open-source project (maybe even proposing as an official IDLE enhancement)?</li></ul><p>What do you think ‚Äî niche toy, or something that could actually see adoption?</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 09:41:59 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/</link><title>Simple Python expression that does complex things?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/</guid><comments>https://www.reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9ov57/simple_python_expression_that_does_complex_things/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>First time I saw <code>a[::-1]</code> to invert the list <code>a</code>, I was blown away. </p><p><code>a, b = b, a</code> which swaps two variables (without temp variables in between) is also quite elegant. </p><p>What&#39;s your favorite example?</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 08:37:42 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9l3dr/saturday_daily_thread_resource_request_and/</link><title>Saturday Daily Thread: Resource Request and Sharing! Daily Thread</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9l3dr/saturday_daily_thread_resource_request_and/</guid><comments>https://www.reddit.com/r/Python/comments/1n9l3dr/saturday_daily_thread_resource_request_and/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9l3dr/saturday_daily_thread_resource_request_and/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: Resource Request and Sharing üìö</h1><p>Stumbled upon a useful Python resource? Or are you looking for a guide on a specific topic? Welcome to the Resource Request and Sharing thread!</p><h2>How it Works:</h2><ol><li><strong>Request</strong>: Can&#39;t find a resource on a particular topic? Ask here!</li><li><strong>Share</strong>: Found something useful? Share it with the community.</li><li><strong>Review</strong>: Give or get opinions on Python resources you&#39;ve used.</li></ol><h2>Guidelines:</h2><ul><li>Please include the type of resource (e.g., book, video, article) and the topic.</li><li>Always be respectful when reviewing someone else&#39;s shared resource.</li></ul><h2>Example Shares:</h2><ol><li><strong>Book</strong>: <a href="https://www.amazon.com/Fluent-Python-Concise-Effective-Programming/dp/1491946008">&quot;Fluent Python&quot;</a> - Great for understanding Pythonic idioms.</li><li><strong>Video</strong>: <a href="https://www.youtube.com/watch?v=pkYVOmU3MgA">Python Data Structures</a> - Excellent overview of Python&#39;s built-in data structures.</li><li><strong>Article</strong>: <a href="https://realpython.com/primer-on-python-decorators/">Understanding Python Decorators</a> - A deep dive into decorators.</li></ol><h2>Example Requests:</h2><ol><li><strong>Looking for</strong>: Video tutorials on web scraping with Python.</li><li><strong>Need</strong>: Book recommendations for Python machine learning.</li></ol><p>Share the knowledge, enrich the community. Happy learning! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 05:30:30 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9kste/python_type_system_and_tooling_survey_2025_from/</link><title>Python Type System and Tooling Survey 2025 (From Meta &amp;amp; JetBrains)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9kste/python_type_system_and_tooling_survey_2025_from/</guid><comments>https://www.reddit.com/r/Python/comments/1n9kste/python_type_system_and_tooling_survey_2025_from/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9kste/python_type_system_and_tooling_survey_2025_from/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>As mentioned in the title, this survey was developed by Meta &amp; Jetbrains w/ community input to collect opinions around Python&#39;s type system and type-related tooling.</p><blockquote><p>The goal of this survey is to gain insights into the tools and practices you use (if any!), the challenges you face, and how you stay updated on new features. Your responses will help the Python typing community identify common blockers, improve resources, and enhance the overall experience of using Python&#39;s type system. Even if you have never actively used type hints in your code, your thoughts are still valuable and we want to hear from you.</p></blockquote><p>Take the survey <a href="https://docs.google.com/forms/d/e/1FAIpQLSeOFkLutxMLqsU6GPe60OJFYVN699vqjXPtuvUoxbz108eDWQ/viewform">here</a>.</p><p>Original LinkedIn posts (so you know it&#39;s legit):</p><p><a href="https://www.linkedin.com/posts/meta-open-source_python-type-system-and-tooling-survey-2025-activity-7369400929546092548-A0hh?utm_source=share&amp;utm_medium=member_desktop&amp;rcm=ACoAAB9aSUsBqmxSbrhoW2URuDnxCgS5eVD1AS0">Meta Open Source</a></p><p><a href="https://www.linkedin.com/posts/thepsf_python-type-system-and-tooling-survey-2025-activity-7368968760252059648-ICjo?utm_source=social_share_send&amp;utm_medium=member_desktop_web&amp;rcm=ACoAAB9aSUsBqmxSbrhoW2URuDnxCgS5eVD1AS0">Python Software Foundation</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 05:16:17 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9d8oj/i_thought_id_give_away_my_python_ebook_pdf_for/</link><title>I thought I'd give away my Python eBook (pdf) for free.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9d8oj/i_thought_id_give_away_my_python_ebook_pdf_for/</guid><comments>https://www.reddit.com/r/Python/comments/1n9d8oj/i_thought_id_give_away_my_python_ebook_pdf_for/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9d8oj/i_thought_id_give_away_my_python_ebook_pdf_for/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>If you are interested, you can click the top link on my landing page and download my eBook, &quot;Programming Basics in Python 3&quot; for free: <a href="https://linktr.ee/chris4sawit">https://linktr.ee/chris4sawit</a></p><p>I hope this 99 page pdf will be useful for someone interested in Python.  No donations will be requested.  Only info needed is an email address to get the download link.</p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 06 Sep 2025 00:05:37 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n96z9e/python_equivalent_for_mark_comments_swift/</link><title>Python equivalent for Mark comments (Swift)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n96z9e/python_equivalent_for_mark_comments_swift/</guid><comments>https://www.reddit.com/r/Python/comments/1n96z9e/python_equivalent_for_mark_comments_swift/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n96z9e/python_equivalent_for_mark_comments_swift/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Is there such thing? Paired with XCode&#39;s jump bar, I qucikly grew to love the Mark-type comments and how they help you to quickly naviagte and understand someone else&#39;s code.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 20:05:53 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n95jwd/aws_for_python_devs_made_simple/</link><title>AWS for Python devs - made simple</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n95jwd/aws_for_python_devs_made_simple/</guid><comments>https://www.reddit.com/r/Python/comments/1n95jwd/aws_for_python_devs_made_simple/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n95jwd/aws_for_python_devs_made_simple/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What is Stelvio?</strong><br/>Stelvio is a Python framework for managing and deploying AWS infrastructure. Instead of writing YAML, JSON, or HCL, you define your infrastructure in <strong>pure Python</strong>. The framework provides <strong>smart defaults</strong> for networking, IAM, and security so you can focus on your application logic rather than boilerplate setup.</p><p>With the <code>stlv</code> CLI, you can go from zero to a working AWS environment in seconds, without heavy configuration.</p><p><strong>What My Project Does</strong><br/>Stelvio lets Python developers:</p><ul><li>Spin up AWS resources (e.g. compute, storage, networking) using Python code.</li><li>Deploy isolated environments (personal or team-based) with a single command.</li><li>Skip most of the manual setup thanks to opinionated defaults for IAM roles, VPCs, and security groups.</li></ul><p>The goal is to make cloud deployments <strong>approachable to Python developers who aren‚Äôt infrastructure experts</strong>.</p><p><strong>Target Audience</strong></p><ul><li><strong>Python developers</strong> who want to deploy applications to AWS without learning all of Terraform or CloudFormation.</li><li><strong>Small teams and projects</strong> that need quick, reproducible environments.</li><li>It‚Äôs designed for <strong>real-world usage</strong>, not just as a toy project, but it‚Äôs still early-stage and evolving rapidly.</li></ul><p><strong>Comparison to Alternatives</strong></p><ul><li>Compared to <strong>Terraform</strong>: Stelvio is Python-native, so you don‚Äôt need to learn HCL or use external templating.</li><li>Compared to <strong>AWS CDK</strong>: Stelvio emphasizes <strong>zero setup</strong> and <strong>smart defaults</strong>. CDK is very flexible but requires more boilerplate and AWS-specific expertise.</li><li>Compared to <strong>Pulumi</strong>: Stelvio is lighter-weight and focuses narrowly on AWS, aiming to reduce complexity rather than cover all clouds.</li></ul><p><strong>Links</strong></p><ul><li>GitHub: <a href="https://github.com/michal-stlv/stelvio?utm_source=chatgpt.com">https://github.com/michal-stlv/stelvio</a></li><li>Website: <a href="https://stelvio.dev?utm_source=chatgpt.com">https://stelvio.dev</a></li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 19:09:25 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n95gzi/showcase_modernized_gower_distance_package_20/</link><title>[Showcase] Modernized Gower Distance Package - 20% Faster, GPU Support, sklearn Integration</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n95gzi/showcase_modernized_gower_distance_package_20/</guid><comments>https://www.reddit.com/r/Python/comments/1n95gzi/showcase_modernized_gower_distance_package_20/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n95gzi/showcase_modernized_gower_distance_package_20/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does</strong></p><p><a href="https://github.com/momonga-ml/gower-express">Gower Express</a> is a modernized Python implementation of Gower distance calculation for mixed-type data (categorical + numerical). It computes pairwise distances between records containing both categorical and numerical features without requiring preprocessing or encoding.</p><p><strong>Target Audience</strong></p><p>It&#39;s for data scientists and ML engineers working with uses for customer segmentation, mixed clinical data, recommendation with tabular data, and clustering tasks.</p><p>This replaces the unmaintained <code>gower</code> package (last updated 2022) with modern Python standards.</p><p><strong>Comparison</strong></p><p>Unlike the original <code>gower</code> package (unmaintained since 2022), this implementation offers 20% better performance via Numba JIT, GPU acceleration through CuPy (3-5x speedup), and native scikit-learn integration. Compared to UMAP/t-SNE embeddings, Gower provides deterministic results without hyperparameter tuning while maintaining full interpretability of distance calculations.</p><p><strong>Installation &amp; Usage</strong></p><p><code>pythonpip install gower_exp[gpu,sklearn]</code></p><p>```pythonimport gower_exp as gowerfrom sklearn.cluster import AgglomerativeClustering</p><h1>Mixed data (categorical + numerical)</h1><p>distances = gower.gower_matrix(customer_data)clusters = AgglomerativeClustering(metric=&#39;precomputed&#39;).fit(distances)</p><h1>GPU acceleration for large datasets</h1><p>distances = gower.gower_matrix(big_data, use_gpu=True)</p><h1>Find top-N similar items (memory-efficient)</h1><p>similar = gower.gower_topn(target_item, catalog, n=10)```</p><p><strong>Performance</strong></p><table><thead><tr><th>Dataset Size</th><th>CPU Time</th><th>GPU Time</th><th>Memory Usage</th></tr></thead><tbody><tr><td>1K records</td><td>0.08s</td><td>0.05s</td><td>12MB</td></tr><tr><td>10K records</td><td>2.1s</td><td>0.8s</td><td>180MB</td></tr><tr><td>100K records</td><td>45s</td><td>12s</td><td>1.2GB</td></tr><tr><td>1M records</td><td>18min</td><td>3.8min</td><td>8GB</td></tr></tbody></table><p>Source: <a href="https://github.com/momonga-ml/gower-express">https://github.com/momonga-ml/gower-express</a></p><p>I built it with Claude Code assistance over a weekend. Happy to answer questions about the implementation or discuss when classical methods outperform modern embeddings!</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 19:05:59 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n9267v/i_built_a_visual_component_library_for/</link><title>I built a visual component library for instrumentation</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n9267v/i_built_a_visual_component_library_for/</guid><comments>https://www.reddit.com/r/Python/comments/1n9267v/i_built_a_visual_component_library_for/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n9267v/i_built_a_visual_component_library_for/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hello everyone,</p><p>as Python is growing more and more in industrial field, I decided to create visual component library for instrumentation.</p><p><strong>What My Project Does:</strong><br/>A Python library with <strong>40+ visual and non-visual components</strong> for building industrial and lab GUIs. Includes analog instruments, sliders, switches, buttons, graphs, and oscilloscope &amp; logic analyzer widgets (PyVISA-compatible). Components are <strong>highly customizable</strong> and designed with a <strong>retro industrial look</strong>.</p><p><strong>Target Audience:</strong><br/>Engineers, scientists, and hobbyists building technical or industrial GUIs. Suitable for both <strong>prototypes and production-ready applications</strong>.</p><p><strong>Comparison / How It‚Äôs Different:</strong><br/>Unlike general GUI frameworks, this library is <strong>instrumentation-focused</strong> with ready-made industrial-style meters, gauges, and analyzer components‚Äîsaving development time and providing a consistent professional look.</p><p><strong>Demo:</strong> <a href="https://imgur.com/a/0j89hPf?utm_source=chatgpt.com">Imgur</a> (Not all components are being shown, just a small sneek-peak)<br/><strong>GitHub Repo:</strong> <a href="https://github.com/tino-posedi/Thales?utm_source=chatgpt.com">Thales</a> (private, still in progress)</p><p><strong>Feedback Questions:</strong></p><ul><li>Are there components you‚Äôd find particularly useful for industrial or lab GUIs?</li><li>Is the retro industrial style appealing, or would you prefer alternative themes?</li><li>Any suggestions for improving customization, usability, or performance?</li></ul></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 16:31:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n91acl/showcase_i_cocreated_dlt_an_opensource_python/</link><title>Showcase: I co-created dlt, an open-source Python library that lets you build data pipelines in minu</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n91acl/showcase_i_cocreated_dlt_an_opensource_python/</guid><comments>https://www.reddit.com/r/Python/comments/1n91acl/showcase_i_cocreated_dlt_an_opensource_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n91acl/showcase_i_cocreated_dlt_an_opensource_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>As a 10y+ data engineering professional, I got tired of the boilerplate and complexity required to load data from messy APIs and files into structured destinations. So, with a team, I built <code>dlt</code> to make data loading ridiculously simple for anyone who knows Python.</p><p><strong>Features:</strong></p><ul><li>‚û°Ô∏è <strong>Load anything with Schema Evolution:</strong> Easily pull data from any API, database, or file (JSON, CSV, etc.) and load it into destinations like DuckDB, BigQuery, Snowflake, and more, handling types and nested data flawlessly.</li><li>‚û°Ô∏è <strong>No more schema headaches:</strong> <code>dlt</code> automatically creates and maintains your database tables. If your source data changes, the schema adapts on its own.</li><li>‚û°Ô∏è <strong>Just write Python:</strong> No YAML, no complex configurations. If you can write a Python function, you can build a production-ready data pipeline.</li><li>‚û°Ô∏è <strong>Scales with you:</strong> Start with a simple script and scale up to handle millions of records without changing your code. It&#39;s built for both quick experiments and robust production workflows.</li><li>‚û°Ô∏è <strong>Incremental loading solved:</strong> Easily keep your destination in sync with your source by loading only new data, without the complex state management.</li><li>‚û°Ô∏è <strong>Easily extendible:</strong> <code>dlt</code> is built to be modular. You can add new sources, customize data transformations, and deploy anywhere.</li></ul><p><strong>Link to repo:</strong><a href="https://github.com/dlt-hub/dlt">https://github.com/dlt-hub/dlt</a></p><p>Let us know what you think! We&#39;re always looking for feedback and contributors.</p><h1>What My Project Does</h1><p><code>dlt</code> is an open-source Python library that simplifies the creation of robust and scalable data pipelines. It automates the most painful parts of Extract, Transform, Load (ETL) processes, particularly schema inference and evolution. Users can write simple Python scripts to extract data from various sources, and <code>dlt</code> handles the complex work of normalizing that data and loading it efficiently into a structured destination, ensuring the target schema always matches the source data.</p><h1>Target Audience</h1><p>The tool is for <strong>data scientists, analysts, and Python developers</strong> who need to move data for analysis, machine learning, or operational dashboards but don&#39;t want to become full-time data engineers. It&#39;s perfect for anyone who wants to build production-ready, maintainable data pipelines without the steep learning curve of heavyweight orchestration tools like Airflow or writing extensive custom code. It‚Äôs suitable for everything from personal projects to enterprise-level deployments.</p><h1>Comparison (how it differs from existing alternatives)</h1><p>Unlike complex frameworks such as <strong>Airflow</strong> or <strong>Dagster</strong>, which are primarily orchestrators that require significant setup, <code>dlt</code> is a lightweight library focused purely on the &quot;load&quot; part of the data pipeline. Compared to writing <strong>custom Python scripts</strong> using libraries like <code>SQLAlchemy</code> and <code>pandas</code>, <code>dlt</code> abstracts away tedious tasks like schema management, data normalization, and incremental loading logic. This allows developers to create declarative and resilient pipelines with far less code, reducing development time and maintenance overhead.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 15:41:57 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n90ss5/sphinx_docs_translation_tutorial_and_template/</link><title>Sphinx Docs Translation: tutorial and template</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n90ss5/sphinx_docs_translation_tutorial_and_template/</guid><comments>https://www.reddit.com/r/Python/comments/1n90ss5/sphinx_docs_translation_tutorial_and_template/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n90ss5/sphinx_docs_translation_tutorial_and_template/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Localizing documentation, manuals, or help is a challenging task. But it‚Äôs also an area where¬†Sphinx documentation generator¬†really shines.  I wrote <a href="https://documatt.com/blog/25/sphinx-translation-tutorial/">tutorial how to localize Sphinx docs</a> and <a href="https://github.com/liborjelinek/sphinx-doc-i18n-example">sample repository</a> to showcase a full localization workflow on a minimal yet realistic Sphinx documentation example. If you‚Äôre maintaining docs in multiple languages, this might help you get started.</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 15:11:42 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8qcam/friday_daily_thread_rpython_meta_and_freetalk/</link><title>Friday Daily Thread: r/Python Meta and Free-Talk Fridays</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8qcam/friday_daily_thread_rpython_meta_and_freetalk/</guid><comments>https://www.reddit.com/r/Python/comments/1n8qcam/friday_daily_thread_rpython_meta_and_freetalk/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n8qcam/friday_daily_thread_rpython_meta_and_freetalk/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: Meta Discussions and Free Talk Friday üéôÔ∏è</h1><p>Welcome to Free Talk Friday on <a href="https://www.reddit.com/r/Python">/r/Python</a>! This is the place to discuss the <a href="https://www.reddit.com/r/Python">r/Python</a> community (meta discussions), Python news, projects, or anything else Python-related!</p><h2>How it Works:</h2><ol><li><strong>Open Mic</strong>: Share your thoughts, questions, or anything you&#39;d like related to Python or the community.</li><li><strong>Community Pulse</strong>: Discuss what you feel is working well or what could be improved in the <a href="https://www.reddit.com/r/python">/r/python</a> community.</li><li><strong>News &amp; Updates</strong>: Keep up-to-date with the latest in Python and share any news you find interesting.</li></ol><h2>Guidelines:</h2><ul><li>All topics should be related to Python or the <a href="https://www.reddit.com/r/python">/r/python</a> community.</li><li>Be respectful and follow Reddit&#39;s <a href="https://www.redditinc.com/policies/content-policy">Code of Conduct</a>.</li></ul><h2>Example Topics:</h2><ol><li><strong>New Python Release</strong>: What do you think about the new features in Python 3.11?</li><li><strong>Community Events</strong>: Any Python meetups or webinars coming up?</li><li><strong>Learning Resources</strong>: Found a great Python tutorial? Share it here!</li><li><strong>Job Market</strong>: How has Python impacted your career?</li><li><strong>Hot Takes</strong>: Got a controversial Python opinion? Let&#39;s hear it!</li><li><strong>Community Ideas</strong>: Something you&#39;d like to see us do? tell us.</li></ol><p>Let&#39;s keep the conversation going. Happy discussing! üåü</p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 05:30:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8jasr/im_building_local_opensource_fast_minimal_and/</link><title>I'm building local, open-source, fast minimal, and extendible python RAG library and CLI tool</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8jasr/im_building_local_opensource_fast_minimal_and/</guid><comments>https://www.reddit.com/r/Python/comments/1n8jasr/im_building_local_opensource_fast_minimal_and/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n8jasr/im_building_local_opensource_fast_minimal_and/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I got tired of overengineered and bloated AI libraries and needed something to prototype local RAG apps quickly so I decided to make my own library,<br/>Features:<br/>‚û°Ô∏è Get to prototyping local RAG applications in seconds: uvx rocketrag prepare &amp; uv rocketrag ask is all you need<br/>‚û°Ô∏è CLI first interface, you can even visualize embeddings in your terminal<br/>‚û°Ô∏è Native llama.cpp bindings - no Ollama bullshit<br/>‚û°Ô∏è Ready to use minimalistic web app with chat, vectors visualization and browsing documents‚û°Ô∏è Minimal footprint: milvus-lite, llama.cpp, kreuzberg, simple html web app<br/>‚û°Ô∏è Tiny but powerful - use any chucking method from chonkie, any LLM with .gguf provided and any embedding model from sentence-transformers<br/>‚û°Ô∏è Easily extendible - implement your own document loaders, chunkers and BDs, contributions welcome!<br/>Link to repo: <a href="https://github.com/TheLion-ai/RocketRAG">https://github.com/TheLion-ai/RocketRAG</a><br/>Let me know what you think. If anybody wants to collaborate and contribute DM me or just open a PR!  </p><p><strong>What My Project Does</strong><br/>RocketRAG is a high-performance Retrieval-Augmented Generation (RAG) library that loads documents (PDF/TXT/MD‚Ä¶), performs semantic chunking, indexes embeddings into a fast vector DB, then serves answers via a local LLM. It provides both a CLI and a FastAPI-based web server with OpenAI-compatible <code>/ask</code> and streaming endpoints, and is built to prioritize speed, a minimal code footprint, and easy extensibility</p><p><strong>Target Audience</strong><br/>Developers and researchers who want a fast, modular RAG stack for local or self-hosted inference (GGUF / llama-cpp-python), and teams who value low-latency document processing and a plug-and-play architecture. It‚Äôs suitable both for experimentation and for production-ready local/offline deployments where performance and customizability matter. </p><p><strong>Comparison (how it differs from existing alternatives)</strong><br/>Unlike heavier, opinionated frameworks, RocketRAG focuses on performance-first building blocks: ultra-fast document loaders (Kreuzberg), semantic chunking (Chonkie/model2vec), Sentence-Transformers embeddings, Milvus Lite for sub-millisecond search, and llama-cpp-python for GGUF inference ‚Äî all in a pluggable architecture with a small footprint. The goal is lower latency and easier swapping of components compared to larger ecosystems, while still offering a nice CLI </p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 05 Sep 2025 00:43:21 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8f0xu/pycon_2025_workshop_agentic_apps_with_pydanticai/</link><title>PyCon 2025 Workshop: Agentic Apps with Pydantic-AI</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8f0xu/pycon_2025_workshop_agentic_apps_with_pydanticai/</guid><comments>https://www.reddit.com/r/Python/comments/1n8f0xu/pycon_2025_workshop_agentic_apps_with_pydanticai/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n8f0xu/pycon_2025_workshop_agentic_apps_with_pydanticai/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>Hey all!</strong></p><p>I recently gave a workshop talk at <strong>PyCon Greece 2025</strong> about building production-ready agent systems.<br/>To check it out, I put together a demo repo (slides coming soon on my blog: <a href="https://www.petrostechchronicles.com/?utm_source=chatgpt.com">petrostechchronicles.com</a>):</p><p>Repo: <a href="https://github.com/Aherontas/Pycon_Greece_2025_Presentation_Agents?utm_source=chatgpt.com">github.com/Aherontas/Pycon_Greece_2025_Presentation_Agents</a></p><p><strong>The idea</strong>: show how multiple AI agents can collaborate using <strong>FastAPI + Pydantic-AI</strong>, with protocols like <strong>MCP (Model Context Protocol)</strong> and <strong>A2A (Agent-to-Agent)</strong> for safe communication and orchestration.</p><p><strong>Features:</strong></p><ul><li>Multiple agents running in containers</li><li>MCP servers (Brave search, GitHub, filesystem, etc.) as tools</li><li>A2A communication between services</li><li>Minimal UI for experimentation (e.g., repo analysis)</li></ul><p><strong>Why I built this</strong>:<br/>Most agent frameworks look great in isolated demos, but fall apart when you try to glue agents together into a real application.<br/>My goal was to help people experiment with these patterns and move closer to real-world use cases.</p><p>It‚Äôs not production-grade, but I‚Äôd love <strong>feedback, criticism, or war stories</strong> from anyone who‚Äôs tried building multi-agent systems.</p><p><strong>Big question for discussion:</strong><br/>Do you think agent-to-agent protocols like MCP/A2A will stick?<br/>Or will the future be mostly single powerful LLMs with plugin stacks?</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 22:01:51 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8d6pi/productiongrade_python_logging_made_easier_with/</link><title>Production-Grade Python Logging Made Easier with Loguru</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8d6pi/productiongrade_python_logging_made_easier_with/</guid><comments>https://www.reddit.com/r/Python/comments/1n8d6pi/productiongrade_python_logging_made_easier_with/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n8d6pi/productiongrade_python_logging_made_easier_with/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>While Python&#39;s standard logging module is powerful, navigating its system of handlers, formatters, and filters can often feel like more work than it should be.</p><p><a href="https://www.dash0.com/guides/python-logging-with-loguru">I wrote a guide</a> on how to achieve the same (and better) results with a fraction of the complexity using Loguru. It‚Äôs approachable, can intercept logs from the standard library, and exposes its other great features in a much cleaner API.</p><p>Looking forward to hearing what you think!</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 20:53:33 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8c4ou/filesweep_a_fast_duplicate_clutter_file_cleaner/</link><title>FileSweep, a fast duplicate &amp;amp; clutter file cleaner</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8c4ou/filesweep_a_fast_duplicate_clutter_file_cleaner/</guid><comments>https://www.reddit.com/r/Python/comments/1n8c4ou/filesweep_a_fast_duplicate_clutter_file_cleaner/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n8c4ou/filesweep_a_fast_duplicate_clutter_file_cleaner/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone! I built FileSweep, a utility to help keep duplicates and clutter under control. I have the bad habit of downloading files and then <em>copying</em> them someplace else, instead of moving and deleting them. My downloads folder is currently 23 gigabytes, with 4 year old files and quadruple copies. Checking 3200 files manually is a monumental task, and I would never start doing it. That is why I build FileSweep. It is designed to allow fine-grained control over what gets deleted, with a focus on file duplicates.</p><p>Get the source code at <a href="https://github.com/ramsteak/FileSweep">https://github.com/ramsteak/FileSweep</a></p><h1>What My Project Does</h1><p>FileSweep is a set-and-forget utility that:</p><ul><li>is easily configurable for your own system,</li><li>detects duplicates across multiple folders, with per-directory priorities and policies,</li><li>moves files to recycle bin / trash with send2trash,</li><li>is very fast (with cache enabled, scans the above-described download directory in 1.2 seconds) with only the necessary disk reads,</li><li>is cross-platform,</li><li>can select files based on name, extension, regex, size and age,</li><li>supports different policies (from keep to always delete),</li><li>has dry-run mode for safe testing, guaranteeing that no file is deleted,</li><li>can be set up as a cron / task scheduler task, and work in the background.</li></ul><h1>How it works</h1><ul><li>You set up a filesweep.yaml config describing which folders to scan, their priorities, and what to do with duplicates or matches (an example config with the explanation for every field is available in the repo)</li><li>FileSweep builds a cache of file metadata and hashes, so future runs are much faster</li><li>Respect rules for filetype, size, age, ...</li></ul><h1>Target Audience</h1><p>Any serial downloader of files that wants to keep their hard drive in check</p><h1>Comparison</h1><p>dupeGuru is another duplicate-manager software. It uses Qt5 as GUI, so it can be more intuitive to beginners, and the user manually parses through duplicates. FileSweep is an automated CLI tool, can be configured and run without the need of a display and with minimal user intervention.</p><p>FileSweep is freely available (MIT License) from the <a href="https://github.com/ramsteak/FileSweep">github repo</a></p><p>Tested with Python 3.12+</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 20:14:14 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n8b41e/i_built_a_python_library_to_simplify_complex/</link><title>I built a Python library to simplify complex SQLAlchemy queries with a clean architecture.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n8b41e/i_built_a_python_library_to_simplify_complex/</guid><comments>https://www.reddit.com/r/Python/comments/1n8b41e/i_built_a_python_library_to_simplify_complex/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1n8b41e/i_built_a_python_library_to_simplify_complex/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey¬†r/Python,</p><p>Like many of you, I&#39;ve spent countless hours writing boilerplate code for web APIs that use SQLAlchemy. Handling dynamic query parameters for filtering on nested relationships, sorting, full-text search, and pagination always felt repetitive and prone to errors.</p><p>To solve this, I created¬†<strong>fastapi-query-builder</strong>.</p><p>Don&#39;t let the name fool you! While it was born from a FastAPI project, it&#39;s fundamentally a powerful, structured way to handle SQLAlchemy queries that can be adapted to any Python framework (Flask, Django Ninja, etc.).</p><p>The most unique part is its installation, inspired by¬†shadcn/ui. Instead of being just another black-box package, you run¬†query-builder init, and it copies the entire source code into your project. This gives you¬†<strong>full ownership</strong>¬†to customize, extend, or fix anything you need.</p><p><strong>GitHub Repo:</strong>¬†<a href="https://www.google.com/url?sa=E&amp;q=https%3A%2F%2Fgithub.com%2FPedroffda%2Ffastapi-query-builder"><strong>https://github.com/Pedroffda/fastapi-query-builder</strong></a></p><h1>How it Works: A Clean Architecture</h1><p>The library encourages a clean, three-layer architecture to separate concerns:</p><ol><li><strong>BaseService</strong>: The data access layer. It talks to the database using SQLAlchemy and the core¬†QueryBuilder. It only deals with SQLAlchemy models.</li><li><strong>BaseMapper</strong>: The presentation layer. It&#39;s responsible for transforming SQLAlchemy models into Pydantic schemas, intelligently handling relationship loading and field selection (select_fields).</li><li><strong>BaseUseCase</strong>: The business logic layer. It coordinates the service and the mapper. Your API endpoint talks to this layer, keeping your routes incredibly clean.</li></ol><h1>A Quick, Realistic Example</h1><p>Here‚Äôs a one-time setup for a¬†Post¬†model that has a relationship with a¬†User¬†model.</p><pre><code># --- In your project, after running &#39;query-builder init&#39; ---# Import from your local, customizable copyfrom query_builder import BaseService, BaseMapper, BaseUseCase, get_dynamic_relations_mapfrom your_models import User, Postfrom your_schemas import UserView, PostView# 1. Define Mappers (SQLAlchemy Model -&gt; Pydantic Schema)user_mapper = BaseMapper(model_class=User, view_class=UserView, ...)post_mapper = BaseMapper(    model_class=Post,    view_class=PostView,    relationship_map={        &#39;user&#39;: {&#39;mapper&#39;: user_mapper.map_to_view, ...}    })# 2. Define the Service (Handles all the DB logic)post_service = BaseService(    model_class=Post,    relationship_map=get_dynamic_relations_map(Post),    searchable_fields=[&quot;title&quot;, &quot;content&quot;, &quot;user.name&quot;] # &lt;-- Search across relationships!)# 3. Define the UseCase (Connects Service &amp; Mapper)post_use_case = BaseUseCase(    service=post_service,    map_to_view=post_mapper.map_to_view,    map_list_to_view=post_mapper.map_list_to_view)</code></pre><p>After this setup, your API endpoint becomes trivial. Here&#39;s a FastAPI example, but you can adapt the principle to any framework:</p><pre><code>from query_builder import QueryBuilderquery_builder = QueryBuilder()u/router.get(&quot;/posts&quot;)async def get_posts(query_params: QueryParams = Depends(), ...):    filter_params = query_builder.parse_filters(query_params)    # The UseCase handles everything!    return await post_use_case.get_all(        db=db,        filter_params=filter_params,        ... # all other params like search, sort_by, etc.    )</code></pre><p>This setup unlocks powerful, clean, and complex queries directly from your URL, like:</p><ul><li><strong>Find posts with &quot;Python&quot; in the title, by authors named &quot;Pedro&quot;:</strong> .../posts?filter[title][ilike]=%Python%&amp;filter[user.name][ilike]=%Pedro%</li><li><strong>Sort posts by user&#39;s name, then by post ID descending:</strong> .../posts?sort_by=user.name,-id</li><li><strong>Select specific fields from both the post and the related user:</strong> .../posts?select_fields=id,title,user.id,user.name</li></ul><h1>I&#39;d love your feedback!</h1><p>This is my first open-source library, and I‚Äôm keen to hear from experienced Python developers.</p><ul><li>What are your thoughts on the three-layer (Service,¬†Mapper,¬†UseCase) architecture?</li><li>Is the¬†shadcn/ui¬†&quot;vendoring&quot; approach (copying the code into your project) appealing?</li><li>What crucial features do you think are missing?</li><li>Any obvious pitfalls or suggestions for improvement in the code?</li></ul><p>It&#39;s on TestPyPI now, and I&#39;m hoping to make a full release after getting some community feedback.</p><p><strong>TestPyPI Link:</strong>¬†<a href="https://www.google.com/url?sa=E&amp;q=https%3A%2F%2Ftest.pypi.org%2Fproject%2Ffastapi-query-builder%2F">https://test.pypi.org/project/fastapi-query-builder/</a></p><p>Thanks for taking the time to look at my project</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 19:36:15 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n87g91/rant_use_that_second_expression_in_assert/</link><title>Rant: use that second expression in `assert`!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n87g91/rant_use_that_second_expression_in_assert/</guid><comments>https://www.reddit.com/r/Python/comments/1n87g91/rant_use_that_second_expression_in_assert/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n87g91/rant_use_that_second_expression_in_assert/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>The <code>assert</code> statement is wildly useful for developing and maintaining software. I sprinkle <code>assert</code>s liberally in my code at the beginning to make sure what I think is true, is actually true, and this practice catches a vast number of idiotic errors; and I keep at least some of them in production.</p><p>But often I am in a position where someone else&#39;s assert triggers, and I see in a log something like <code>assert foo.bar().baz() != 0</code> has triggered, and I have no information at all.</p><p>Use that second expression in <code>assert</code>! </p><p>It can be anything you like, even some calculation, and it doesn&#39;t get called unless the assertion fails, so it costs nothing if it never fires. When someone has to find out why your assertion triggered, it will make everyone&#39;s life easier if the assertion explains what&#39;s going on.</p><p>I often use</p><pre><code>assert some_condition(), locals()</code></pre><p>which prints every local variable if the assertion fails. (<code>locals()</code> might be impossibly huge though, if it contains some massive variable, you don&#39;t want to generate some terabyte log, so be a little careful...)</p><p>And remember that <code>assert</code> is a statement, not an expression. That is why this <code>assert</code> will never trigger:</p><pre><code>assert (   condition,   &quot;Long Message&quot;)</code></pre><p>because it asserts that the expression <code>(condition, &quot;Message&quot;)</code> is truthy, which it always is, because it is a two-element tuple.</p><p>Luckily I read an article about this long before I actually did it. I see it every year or two in someone&#39;s production code still.</p><p>Instead, use </p><pre><code>assert condition, (    &quot;Long Message&quot;)</code></pre></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 16:53:00 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n86hnz/i_made_a_script_that_identifies_graded_pokemon/</link><title>I made a script that identifies graded Pokemon cards with OCR</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n86hnz/i_made_a_script_that_identifies_graded_pokemon/</guid><comments>https://www.reddit.com/r/Python/comments/1n86hnz/i_made_a_script_that_identifies_graded_pokemon/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1n86hnz/i_made_a_script_that_identifies_graded_pokemon/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hi everyone,</p><p>I run a <a href="https://www.jimmysdealfinder.com">Pokemon deal finder</a> site that finds deals on Pokemon cards on eBay by comparing listing prices to historical card values.</p><p>I used to have graded cards on there, but I had to remove them from the site because too many people would lie in the title about what grade it is. For example, they might put &quot;PSA 10&quot; when it&#39;s only a PSA 9 or they might put &quot;Easily a PSA 10&quot; or &quot;Potential PSA 10&quot; when the card was ungraded. There were enough cards like this that I had to remove graded cards from the site because there were too many misleading graded listings.</p><p>I decided to try to use OCR on the card images to identify the grade rather than trusting what the user says in the title. I managed to write a surprisingly accurate script for identifying the grade of PSA 9 and PSA 10 cards.</p><p>It uses the cv2 and easyocr libraries, and it searches for sections that look purely black and white in the image (likely to be text), then it scans that section for the words &quot;MINT&quot; (grade 9) or &quot;GEM MT&quot; (grade 10) to determine the grade of the card.</p><p>It works surprisingly well, and the best thing is there are no false positives.</p><p>Now I&#39;ve got graded cards back on my site, and they all seem to be identified correctly.</p><p><strong>What My Project Does</strong></p><p>Takes an image of a Pokemon card, and determiners whether it&#39;s a grade 9 or 10 or ungraded.</p><p><strong>Target Audience</strong></p><p>This is mainly for myself as a tool to add graded cards back to my site. Though it could be useful for anyone who needs to identify a graded card from an image.</p><p><strong>Comparison</strong></p><p>When I was first writing this, I did search on Google to see if anyone had done OCR recognition on graded Pokemon cards, but I didn&#39;t really find anything. I think this is unique in that regard.</p><p>You can run it with get_grade_ocr() on either a filename or a URL.</p><p>Github: <a href="https://github.com/sgriffin53/pokemon_ocr">https://github.com/sgriffin53/pokemon_ocr</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 15:59:31 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n85285/typewriter_sound_program/</link><title>Typewriter sound program</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n85285/typewriter_sound_program/</guid><comments>https://www.reddit.com/r/Python/comments/1n85285/typewriter_sound_program/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n85285/typewriter_sound_program/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I love the sound of a typewriter. I like the mechanical sound but I don&#39;t like typing on mechanical keyboards. How would one go about writing a program that imitates the typewriter sound as I&#39;m typing?</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 14:32:18 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n84top/showcase_ecma426_source_maps_in_pure_python/</link><title>Showcase: ecma426: Source Maps in Pure Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n84top/showcase_ecma426_source_maps_in_pure_python/</guid><comments>https://www.reddit.com/r/Python/comments/1n84top/showcase_ecma426_source_maps_in_pure_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n84top/showcase_ecma426_source_maps_in_pure_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h3>What My Project Does</h3><p><strong>ecma426</strong> is a pure-Python implementation of <a href="https://tc39.es/source-map/">ECMA-426: Source Maps</a>. It decodes and encodes sourcemaps, including index maps with <code>sections</code>, and aims to stay close to the specification.</p><h3>Target Audience</h3><p>Anyone working with JavaScript toolchains from Python. For example, build systems, bundlers, error trackers, or debugging tools that need to parse or emit sourcemaps. It‚Äôs intended for production use, not just experimentation.</p><h3>Comparison</h3><p>Most Python sourcemap libraries are either unmaintained or only handle decoding. <strong>ecma426</strong> covers both directions (decode and encode) and supports <code>sections</code> as defined in the spec, while staying dependency-free.</p><h3>Usage</h3><p>```pythonimport ecma426, json</p><p>smap = ecma426.loads(json.load(open(&quot;app.min.js.map&quot;)))</p><h1>strict lookup (exact match only, raises KeyError if absent)</h1><p>m = smap[(10, 42)]</p><h1>nearest-left lookup (devtools convention)</h1><p>m = smap.lookup_left(10, 42)</p><h1>map back into the original text</h1><p>line = smap.raw[&quot;sourcesContent&quot;][0].splitlines()[m.original_line]print(line)print(&quot; &quot; * m.original_column + &quot;^ here&quot;)```</p><h3>Source</h3><p><a href="https://github.com/bugsink/ecma426">https://github.com/bugsink/ecma426</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 14:16:38 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n84hjt/pyconfr_at_lyon_france/</link><title>PyconFR at Lyon (France)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n84hjt/pyconfr_at_lyon_france/</guid><comments>https://www.reddit.com/r/Python/comments/1n84hjt/pyconfr_at_lyon_france/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n84hjt/pyconfr_at_lyon_france/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>The French-Speaking Python Association (AFPy) is organizing PyConFR 2025 from Thursday, October 30 to Sunday, November 2. For this 16th edition, we‚Äôll be hosted by the Ren√© Cassin Campus in Lyon!</p><p>PyConFR is a free, four-day event centered around the Python programming language. It includes two days of collaborative development (sprints), followed by two days of talks and workshops.</p><p>The call for proposals is now closed, and we‚Äôll be publishing the schedule soon at <a href="https://www.pycon.fr/2025/en/schedule.html">https://www.pycon.fr/2025/en/schedule.html</a>. There will be an English-language track.</p><p>While attendance is free, registration is required for all participants.</p><p>As every year, we offer support to people who are usually underrepresented at conferences ‚Äî help with finding a topic, writing a proposal, preparing slides, and rehearsing. Feel free to contact us at [<a href="mailto:diversite@afpy.org">diversite@afpy.org</a>]()</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 13:54:02 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n802wo/i_made_a_chat_program/</link><title>I made a chat program</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n802wo/i_made_a_chat_program/</guid><comments>https://www.reddit.com/r/Python/comments/1n802wo/i_made_a_chat_program/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n802wo/i_made_a_chat_program/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>What my project does</h1><p>It&#39;s a simple socket-based python messaging &quot;app&quot; that works on linux. I don&#39;t know if it works on windows, so comment if it does</p><h1>Target audience</h1><p>I dunno, if you want a template for a chat program you can expand on this? I just made it to mess with socket</p><h1>Comparison</h1><p>I mean, there are a lot of online tutorials for stuff like this, but i dunno, this one has a <em>bit</em> more than <em>most</em> of the tutorials.</p><p>Anyways, <a href="https://github.com/Redstonedust653/pychat">here&#39;s a link</a> to the github repository.</p><p>enjoy!</p><p>NOTE:</p><p>Don&#39;t read the comments! look at the repository. if you have issues with some part of it, LEAVE AN ISSUE ON THE REPOSITORY! ALL COMMENTS WILL BECOME OUTDATED EVERY TIME I PATCH IT.</p><p>SEVERAL OF THE ISSUES IN COMMENTS HAVE BEEN FIXED.</p><p>BUT PLEASE DON&#39;T COMMENT ISSUES.</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 09:25:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n800hy/airfoil_optimizer/</link><title>Airfoil Optimizer.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n800hy/airfoil_optimizer/</guid><comments>https://www.reddit.com/r/Python/comments/1n800hy/airfoil_optimizer/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n800hy/airfoil_optimizer/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey yall!<br/>So recently, for a personal plane project of mine, I developed FoilNet,¬†<a href="https://github.com/AvnehSBhatia/FoilNet">https://github.com/AvnehSBhatia/FoilNet</a></p><p>It&#39;s an airfoil optimizer, as the title suggests. However, I am not too certain about these results that I&#39;m getting from the optimizer.</p><p>If anyone knows a good bit about Airfoils and think they can validate my results, please feel free to do so!</p><p>Any comments or criticism is appreciated.</p><p>Thanks!</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 09:22:16 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n7sr1x/why_does_processpoolexecutor_mark_some_tasks_as/</link><title>Why does ProcessPoolExecutor mark some tasks as "running" even though all workers are busy?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n7sr1x/why_does_processpoolexecutor_mark_some_tasks_as/</guid><comments>https://www.reddit.com/r/Python/comments/1n7sr1x/why_does_processpoolexecutor_mark_some_tasks_as/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n7sr1x/why_does_processpoolexecutor_mark_some_tasks_as/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I‚Äôm using Python‚Äôs <code>ProcessPoolExecutor</code> to run a bunch of tasks. Something I noticed is that some tasks are marked as <em>running</em> even though all the workers are already working on other tasks.</p><p>From my understanding, a task should only switch from <em>pending</em> to <em>running</em> once a worker actually starts executing it. But in my case, it seems like the executor marks extra tasks as running before they‚Äôre really picked up.</p><p>Is this normal behavior of <code>ProcessPoolExecutor</code>? Or am I missing something about how it manages its internal task queue?</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 03:46:26 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n7r4xb/niche_python_tools_libraries_and_features_whats/</link><title>Niche Python tools, libraries and features - whats your favourite?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n7r4xb/niche_python_tools_libraries_and_features_whats/</guid><comments>https://www.reddit.com/r/Python/comments/1n7r4xb/niche_python_tools_libraries_and_features_whats/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n7r4xb/niche_python_tools_libraries_and_features_whats/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I know we see this get asked every other week, but it always makes for a good discussion.</p><p>I only just found out about <code>pathlib</code> - makes working with files so much cleaner.</p><p>Whats a python tool or library you wish youd known about earlier?</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 02:41:38 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n7pe37/removing_a_dependency_major_minor_or_patch_bump/</link><title>Removing a dependency - Major, Minor or Patch bump?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n7pe37/removing_a_dependency_major_minor_or_patch_bump/</guid><comments>https://www.reddit.com/r/Python/comments/1n7pe37/removing_a_dependency_major_minor_or_patch_bump/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n7pe37/removing_a_dependency_major_minor_or_patch_bump/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I&#39;ve been collaborating on an <a href="https://github.com/jcfitzpatrick12/spectre/issues/167">issue</a> for <a href="https://github.com/jcfitzpatrick12/spectre"><em>Spectre</em></a>, a Python program for recording radio spectrograms with software-defined radios. The motivation for the issue was to remove <a href="https://scipy.org/">Scipy</a> as dependency from a Python package used by the program called <a href="https://github.com/jcfitzpatrick12/spectre-core">spectre-core</a>.</p><p>The <a href="https://github.com/jcfitzpatrick12/spectre-core/pull/52">PR</a> introduced no changes from the perspective of the public API of the package. It just reimplemented the same functionality for our particular use case. However, we removed Scipy as a dependency since it was no longer required. Under <a href="https://semver.org/">semantic versioning</a>, would this constitute a major, minor or patch bump?</p><p>I considered making this a major bump, since any consumer of the package relying on Scipy being a transitive dependency would see a breaking change. But since the Scipy functionality wasn&#39;t exposed publically, I didn&#39;t think this argument was strong enough and so opted for a minor bump. What would you do?</p></div><!-- SC_ON --></section>]]></description><pubDate>Thu, 04 Sep 2025 01:35:24 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1n7e1oa/zuban_is_now_open_source/</link><title>Zuban is now Open Source</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1n7e1oa/zuban_is_now_open_source/</guid><comments>https://www.reddit.com/r/Python/comments/1n7e1oa/zuban_is_now_open_source/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1n7e1oa/zuban_is_now_open_source/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Zuban, the successor of Jedi is now Open Source: <a href="https://github.com/zubanls/zuban">https://github.com/zubanls/zuban</a></p><p>Zuban is a high-performance Python Language Server and type checker implemented in Rust, by the author of Jedi. Zuban is 20‚Äì200√ó faster than Mypy, while using roughly half the memory and CPU compared to Ty and Pyrefly. It offers both a PyRight-like mode and a Mypy-compatible mode, which behaves just like Mypy; supporting the same config files, command-line flags, and error messages.</p><p>Most important LSP features are supported. Features include diagnostics, completions, goto, references, rename, hover and document highlights.</p><p>Zuban passes over 95% of Mypy‚Äôs relevant test suite and offers comprehensive support for Python&#39;s <a href="https://htmlpreview.github.io/?https://github.com/python/typing/blob/main/conformance/results/results.html">type system</a>.</p></div><!-- SC_ON --></section>]]></description><pubDate>Wed, 03 Sep 2025 18:25:41 +0530</pubDate></item></channel></rss>
