<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=Python&amp;averagePostsPerDay=5&amp;content=0&amp;comments=7&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/Python</title><description>Hot posts in /r/Python (roughly 5 posts per day)</description><link>https://www.reddit.com/r/Python/</link><language>en-us</language><lastBuildDate>Sat, 20 Sep 2025 08:46:48 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>http://192.168.1.132//app/cache/images/styles-redditmedia-com-t5_2qh0y-styles-communityIcon_mkayghu1502d1-144x400.png</url><title>/r/Python</title><link>https://www.reddit.com/r/Python/</link><width>144</width><height>144</height></image><item><link>https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/</link><title>Why isn't the copy() method part of the Sequence and MutableSequence ABCs?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/</guid><comments>https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>The <code>Sequence</code> ABC from collections.abc does not include an abstract method copy(). What are the reasons for that design choice?</p><p>Note that I am <em>not</em> asking how to work with that design choice. Instead I am trying to understand it.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Read the comments from Raymond and Guido:</p><p><a href="https://bugs.python.org/issue22101">https://bugs.python.org/issue22101</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/nf6g3sm/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>because a collection doesn&#39;t require a copy() method to be usable as a collection. its trying to be a minimal-as-possible interface. I think that&#39;s all there is to it.</p><p>but list dict and set include a copy() among others, and I think it would&#39;ve made sense for them to include it honestly.</p><p>Fantastically good question btw. bravo.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/nf6fm90/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I&#39;m curious what abc&#39;s are used for? Are they for checking that an arbitrary class or instance implements the minimal set of operations to be treated as a certain type of container? Kind of safety checking an interface at runtime since we don&#39;t have &lt;Interfaces&gt; and declarative typing?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/nf6o9ba/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>When you design an interface you are not only giving the caller a collection of methods that they can use, you are also giving the implementer a collection of methods that they must implement!</p><p>This leads to ideas like the interface segregation principal. Especially for something as fundamental as a language&#39;s abstract collections, you do not want to bloat an interface with non-essential methods that may not be universally applicable.</p><p>Note that an implementer can always add methods beyond the interface like copy() to their Sequence class anyway, and Protocols can be used to declare an interface that includes classes that weren&#39;t aware of (but conform to) the protocol (e.g. a sequence that also has a copy()).</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/nf6zju1/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I haven’t read the docs but I assume a sequence could be any iterable, including a generator. So it’s possible the elements are not yet allocated. What would it mean to copy a generator mid sequence? Do you start over? Or pick up where that one left off?</p><p>FWIW other data structures and primitives also don’t have copy methods, so it could just be seen as a non-primary concern</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nllur9/why_isnt_the_copy_method_part_of_the_sequence_and/nf6fqo7/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 20 Sep 2025 07:25:01 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/</link><title>I just released reaktiv v0.19.2 with LinkedSignals! Let me explain what Signals even are</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/</guid><comments>https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I&#39;ve been working on this reactive state management library for Python, and I&#39;m excited to share that I just added LinkedSignals in v0.19.2. But first, let me explain what this whole &quot;Signals&quot; thing is about.</p><h1>I built Signals = Excel for your Python code</h1><p>You know that frustrating bug where you update some data but forget to refresh the UI? Or where you change one piece of state and suddenly everything is inconsistent? <strong>I got tired of those bugs, so I built something that eliminates them completely.</strong></p><p>Signals work just like Excel - change one cell, and all dependent formulas automatically recalculate:</p><pre><code>from reaktiv import Signal, Computed, Effect# Your data (like Excel cells)name = Signal(&quot;Alice&quot;)age = Signal(25)# Automatic formulas (like Excel =A1&amp;&quot; is &quot;&amp;B1&amp;&quot; years old&quot;)greeting = Computed(lambda: f&quot;{name()} is {age()} years old&quot;)# Auto-display (like Excel charts that update automatically)display = Effect(lambda: print(greeting()))# Prints: &quot;Alice is 25 years old&quot;# Just change the data - everything updates automatically!name.set(&quot;Bob&quot;)  # Prints: &quot;Bob is 25 years old&quot;age.set(30)      # Prints: &quot;Bob is 30 years old&quot;</code></pre><p><strong>No more forgotten updates. No more inconsistent state. It just works.</strong></p><h1>What I just added: LinkedSignals</h1><p>The big feature I&#39;m excited about in v0.19.2 is <strong>LinkedSignals</strong> - for when you want a value that usually follows a formula, but users can override it temporarily:</p><pre><code>from reaktiv import Signal, Computed, LinkedSignal# Items from your APIitems = Signal([&quot;iPhone&quot;, &quot;Samsung&quot;, &quot;Google Pixel&quot;])# Selection that defaults to first item but remembers user choiceselected = LinkedSignal(lambda: items()[0] if items() else None)print(selected())  # &quot;iPhone&quot;# User picks somethingselected.set(&quot;Samsung&quot;) print(selected())  # &quot;Samsung&quot;# API updates - smart behavior!items.set([&quot;Samsung&quot;, &quot;OnePlus&quot;, &quot;Nothing Phone&quot;])print(selected())  # Still &quot;Samsung&quot; (preserved!)# But resets when their choice is goneitems.set([&quot;OnePlus&quot;, &quot;Nothing Phone&quot;])print(selected())  # &quot;OnePlus&quot; (smart fallback)</code></pre><p><strong>I built this for:</strong></p><ul><li>Search/filter UIs where selections should survive data refreshes</li><li>Pagination that clamps to valid pages automatically</li><li>Form defaults that adapt but remember user input</li><li>Any &quot;smart defaulting&quot; scenario</li></ul><h1>Why I think this matters</h1><p>The traditional approach:</p><pre><code># Update data ✓# Remember to update display (bug!)  # Remember to validate selection (bug!)# Remember to update related calculations (bug!)</code></pre><p>So I built something where you declare relationships once:</p><pre><code># Declare what depends on what# Everything else happens automatically ✓</code></pre><p>I borrowed this battle-tested pattern from frontend frameworks (Angular, SolidJS) and brought it to Python. Perfect for APIs, data processing, configuration management, or any app where data flows through your system.</p><p>Try it out: <code>pip install reaktiv</code> (now v0.19.2!)</p><p><a href="https://github.com/buiapp/reaktiv">GitHub</a> | <a href="https://reaktiv.readthedocs.io">Docs</a> | <a href="https://github.com/buiapp/reaktiv/tree/main/examples">Examples</a> | <a href="https://reaktiv.bui.app/#interactive-demo">Playground</a></p><p>Would love to hear what you think or if you build something cool with it!</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Neat, this is kinda like Jane Street’s ocaml library Incremental. One question I have for you is: is computation necessarily triggered on every set? If you have a large/expensive to compute graph and you want to set multiple variables, you wouldn’t want everything to recompute on each set, but only after all of them are set. Not even just for expensive to compute graphs, but also if you don’t want your effects to trigger on each set. </p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/nf3u9vg/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>How does it figure out the dependencies? Does it look at the AST of the Computed function?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/nf4id99/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This reminds me of the javascript tc-39 signals proposal:<a href="https://github.com/tc39/proposal-signals">https://github.com/tc39/proposal-signals</a></p><p>And the reactive components in Textual:<a href="https://textual.textualize.io/guide/reactivity/">https://textual.textualize.io/guide/reactivity/</a></p><p>Wondering if there’s a world where you and Will McGugan standardize this for python.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl9f0h/i_just_released_reaktiv_v0192_with_linkedsignals/nf620oc/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 22:41:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/</link><title>A script to get songs from a playlist with matching total length</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/</guid><comments>https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>What my project does</h1><p>Basically, you input:</p><ul><li><p>A public youtube playlist</p></li><li><p>Target duration</p></li></ul><p>You get:</p><ul><li>Song groups with a matching total length</li></ul><h1>Target Audience</h1><p>So I think this is one of the most specific &#39;problems&#39;..</p><p>I&#39;ve been making a slow return to jogging, and one of the changes to keep things fresh was to jog until the playlist ended. (Rather than meters, or a route)</p><p>I am incrementing the length of the playlist by 15 seconds between each run, and each time finding a group of songs with a matching length can be tiring, which is why I thought of this 😅</p><p>&nbsp;</p><p>So I guess this is for people who want a shuffled playlist, with a specific duration, for some reason.</p><p>This is &#39;py-playlist-subset&#39;, try it out 👀</p><p><a href="https://github.com/Tomi-1997/py-playlist-subset">https://github.com/Tomi-1997/py-playlist-subset</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Dumb question but what do you do when it ends, walk home? </p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/nf2s1qi/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is awesome, I had been thinking of making something very similar for a while now! I take the train to work and usually start walking to the train with about 10-15 mins till I have to catch the train.</p><p>I was thinking how nice it&#39;d be to have my spotify be an audio cue as to if I need to pick up my walking pace to catch my train or not</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl4bxv/a_script_to_get_songs_from_a_playlist_with/nf3ijrg/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 19:28:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nl14dr/built_a_realtime_debugging_dashboard_that_works/</link><title>Built a real-time debugging dashboard that works with any FastAPI app</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nl14dr/built_a_realtime_debugging_dashboard_that_works/</guid><comments>https://www.reddit.com/r/Python/comments/1nl14dr/built_a_realtime_debugging_dashboard_that_works/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nl14dr/built_a_realtime_debugging_dashboard_that_works/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>What My Project Does</h1><p>FastAPI Radar is a debugging dashboard that gives you complete visibility into your FastAPI applications. Once installed, it monitors and displays:</p><ul><li>All HTTP requests and responses with timing data</li><li>Database queries with execution times</li><li>Exceptions with full stack traces</li><li>Performance metrics in real-time</li></ul><p>Everything is viewable through a clean web interface that updates live as your app handles requests. You access it at <code>/__radar/</code> while your app is running.</p><h1>Target Audience</h1><p>This is primarily for developers working with FastAPI during development and debugging. It&#39;s NOT meant for production use (though you can disable it in prod with a flag).</p><p>If you&#39;ve ever found yourself adding print statements to debug API calls, wondering why an endpoint is slow, or trying to track down which queries are running, this tool is for you. It&#39;s especially useful when building REST APIs with FastAPI + SQLAlchemy.</p><p>GitHub: <a href="http://github.com/doganarif/fastapi-radar">github.com/doganarif/fastapi-radar</a></p></div><!-- SC_ON --></section>]]></description><pubDate>Fri, 19 Sep 2025 17:05:38 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</link><title>FYI: PEP 2026 (CalVer) was shot down back in February - no jumping from 3.14.y to 3.25.y or 2025.x.y</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</guid><comments>https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><a href="https://peps.python.org/pep-2026/">PEP2026</a> discussed replacing the current Semantic Versioning with a Calender Versioning, where some options were 26.x.y (where 26 was from 2026), or 3.26.y (because there&#39;s currently a yearly release, they would just shift the minor version about 10 points).</p><p>Luckily this idea was shot down, back in Feb, because I was NOT looking forward to having to mess around with versions.</p><hr/><p>I&#39;m mentioning it, because I recall a discussion back in Januari that they were going to do this, and quite a few people disliked the idea, so I&#39;m happy to inform you that it&#39;s dead.</p><hr/><p>edit: It was shot down in <a href="https://discuss.python.org/t/pep-2026-calendar-versioning-for-python/55782/126">this post</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>The PEP process is quite arduous, so most users don&#39;t raise a PEP until they have already achieved consensus as they have been well thrashed out in the ideas section of DPO. The PEP process announces it to the wider community and irons out the formal process to add it to Python or Packaging, the acceptance rate of these PEPs tends to be quite high.</p><p>However, I would say there is another type of PEP, those where the authors are quite familiar with how to submit a PEP and include at least one core developer. These PEPs can often be raised before consensus has been achieved, and the acceptance rate of these PEPs are much lower.</p><p>I would say this PEP was the second type of PEP.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/nf2i18g/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Python mightve dodged a bullet — CalVer would’ve broken half of requirements.txt overnight.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/nf2xawl/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>People that don&#39;t work with Python a lot would probably appreciate a calendar versioning as it&#39;s self evident whether you&#39;re updated.  But as someone who uses it a lot, the calendar versioning looks ugly.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/nf4nj9x/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Why do you think it is a bad PEP?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/nf2mlkc/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>You don’t <em>have</em> to follow and/or use <em>all</em> the PEPs you know.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nl0x1p/fyi_pep_2026_calver_was_shot_down_back_in/nf26q6g/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 16:54:52 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</link><title>enso: A functional programming framework for Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hello all, I&#39;m here to make my first post and &#39;release&#39; of my functional programming framework, enso.  Right before I made this post, I made the repository public.  You can find it <a href="https://gitlab.com/evansemenoff/enso">here.</a></p><h1>What my project does</h1><p>enso is a high-level functional framework that works over top of Python.  It expands the existing Python syntax by adding a variety of features.  It does so by altering the AST at runtime, expanding the functionality of a handful of built-in classes, and using a modified tokenizer which adds additional tokens for a preprocessing/translation step.</p><p>I&#39;ll go over a few of the basic features so that people can get a taste of what you can do with it.</p><ol><li>Automatically curried functions!</li></ol><p>How about the function add, which looks like</p><pre><code>def add(x:a, y:a) -&gt; a:    return x + y</code></pre><p>Unlike normal Python, where you would need to call add with 2 arguments, you can call this <code>add</code> with only one argument, and then call it with the other argument later, like so:</p><pre><code>f = add(2)f(2)4</code></pre><ol><li>A map operator</li></ol><p>Since functions are automatically curried, this makes them really, really easy to use with <code>map</code>.  Fortunately, enso has a map operator, much like Haskell.</p><pre><code>f &lt;$&gt; [1,2,3][3, 4, 5]</code></pre><ol><li>Predicate functions</li></ol><p>Functions that return <code>Bool</code> work a little differently than normal functions.  They are able to use the pipe operator to filter iterables:</p><pre><code>even? | [1,2,3,4][2, 4]</code></pre><ol><li>Function composition</li></ol><p>There are a variety of ways that functions can be composed in enso, the most common one is your typical function composition.</p><pre><code>h = add(2) @ mul(2)h(3)8</code></pre><p>Additionally, you can take the <em>direct sum</em> of 2 functions:</p><pre><code>h = add + mulh(1,2,3,4)(3, 12)</code></pre><p>And these are just a few of the ways in which you can combine functions in enso.</p><ol><li>Macros</li></ol><p>enso has a variety of macro styles, allowing you to redefine the syntax on the file, adding new operators, regex based macros, or even complex syntax operations.  For example, in the REPL, you can add a <code>zip</code> operator like so:</p><pre><code>macro(op(&quot;-=-&quot;, zip))[1,2,3] -=- [4,5,6][(1, 4), (2, 5), (3, 6)]</code></pre><p>This is just one style of macro that you can add, see the readme in the project for more.</p><ol><li>Monads, more new operators, new methods on existing classes, tons of useful functions, automatically derived function &#39;variants&#39;, and loads of other features made to make writing code fun, ergonomic and aesthetic.</li></ol><p>Above is just a small taster of the features I&#39;ve added.  The README file in the repo goes over a lot more.</p><h1>Target Audience</h1><p>What I&#39;m hoping is that people will enjoy this.  I&#39;ve been working on it for awhile, and dogfooding my own work by writing several programs in it.  My own smart-home software is written entirely in <em>enso.</em>  I&#39;m really happy to be able to share what is essentially a beta version of it, and would be super happy if people were interested in contributing, or even just using enso and filing bug reports.  My long shot goal is that one day I will write a proper compiler for enso, and either self-host it as its own language, or run it on something like LLVM and avoid some of the performance issues from Python, as well as some of the sticky parts which have been a little harder to work with.</p><p>I will post this to <a href="https://www.reddit.com/r/functionalprogramming">r/functionalprogramming</a> once I have obtained enough karma.</p><p>Happy coding.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Please feel free to ask any questions about <em>enso</em> here.  I&#39;d love to answer them.  Or DM if you don&#39;t want to talk in public.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf0fco5/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Really clean! As someone who makes liberal use of <code>functools</code>, I’ll definitely be checking this out in the morning — just the ability to write <code>fn = add(1)</code> rather than <code>fn = ft.partial(add, 1)</code> is already a HUGE selling point! A few random thoughts below, answer whatever subset you’d like :)</p><ol><li><p><strong>I’m assuming the currying supports keyword arguments, too?</strong> e.g. <code>fn = add(y=1)</code></p></li><li><p>I will say that new syntax can be a hard sell in the AI age since there’s so much training data with the old syntax, but that’s less of a worry for such a popular topic IMO. Still, something to consider if you haven’t already. <strong>Were your syntax choices here driven by some existing language (Haskell?), or are they pretty novel?</strong> Especially curious about <code>&lt;$&gt;</code>, tbh. </p></li><li><p>My big deal breaker question is this: <strong>does this work nicely with both MyPy and PyRight already?</strong> I’ve recently been burned on this by two great libraries (<code>ovld</code> and <code>dspy</code>), so I’m scared I’ll be hurt again lol. </p></li><li><p>I’m on my phone so haven’t checked out your macros (AWESOME idea), but <strong>I’m curious if you’ve checked out the under-appreciated GOAT of python packages, <code>more-itertools</code>?</strong> If not, they have some great ones to steal! Shoutout to <code>unzip()</code>, <code>bucket()</code>, and <code>locate()</code> especially. </p></li><li><p>On a similar note, <strong>do you have anything for the last big part of functools, caching/“memoization”?</strong> If not, is that something you’re thinking about, or is it out of scope?</p></li><li><p>I’m assuming this doesn’t runtime performance at all, just some (likely-infinitesimal) work when you first run a script?</p></li><li><p>Most fundamentally: <strong>any words of wisdom from writing what seems to be a quite challenging package in your free time?</strong> You must have some insane Py-internals-fu at this point, so I’d love to hear whatever rambling thoughts come to mind lol. </p></li></ol><p>Congrats on the big launch, regardless. Impressive stuff!</p><p>ETA: hell yeah, GitLab ✊✊✊</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf15wqo/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This sounds amazing! Couple questions:</p><p>1) syntax changes are great and very useful but what to do with standard python types that are mutable? Do you use some additional packages for immutable types or are they also included in enso?</p><p>2) how are monads defined (I should probably just check docs) and does the package include any of the common monads out of the box?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf0zyoa/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Apologies if anyone had a bunch of errors when the loaded up the REPL.  It expects for their to be an rc file/history file/ and macro file present.  I mean to make it so it would load empty versions of those files if it didn&#39;t find them but somehow it didn&#39;t get pushed.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf0vh3f/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This speaks to a very narrow Python audience. Vanishingly few people actually want ALL the features of Lisp in Python. (I say this having written my fair share of Lisp in the &#39;90s)</p><p>My CS professor loved curried functions, but I could never find a great use for them in SWE. And it makes the code harder to read and debug, so I always avoided them.</p><blockquote><p>f &lt;$&gt; [1,2,3]</p></blockquote><p>Sigils always make code harder to read/understand. Reminds me of Perl. A write-once, read-never language.</p><blockquote><p>Macros[1,2,3] -=- [4,5,6]</p></blockquote><p>I mean, this is great. For the writer of the macro, it definitely scratches an itch. But for anyone reading your code, now they need to understand and memorize your macros. (See: Sigils)</p><hr/><p>It&#39;s nifty what you&#39;ve written, but I suspect you&#39;re going to have a tough time getting any serious uptake. Though I&#39;m sure some folks will love it and really appreciate it. </p><p>Functional Programming (FP) has some great ideas (ie. lazy eval, function purity, first class functions, anonymous functions aka lambdas), but also some questionable ones, too. </p><p>I prefer to take the good and leave the bad. And I think Python has already done that very well! </p><p>Or put another way: The aspects in Lisp missing from Python are a feature, not a bug.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf307xu/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I wouldn&#39;t use that. </p><p>Some frameworks have matrix addition and multiplication. Those are methods for matric class (2d, 3d or 4d)</p><p>For basic floats and ints doing that is stupid. Writing <code>a + b</code> is much easier (even for Matrix class there&#39;s operator overloading, so you can still do <code>matrix1 * matrix2</code>)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf1qvf1/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This looks awesome!  I’ll check out your readme.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nksvm0/enso_a_functional_programming_framework_for_python/nf0hf89/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 08:59:06 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</link><title>T-Strings: What will you do?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</guid><comments>https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Good evening from my part of the world!</p><p>I&#39;m excited with the new functionality we have in Python 3.14. I think the feature that has caught my attention the most is the introduction of <a href="https://docs.python.org/3.14/whatsnew/3.14.html#pep-750-template-strings">t-strings</a>.</p><p>I&#39;m curious, what do you think will be a good application for t-strings? I&#39;m planning to use them as better-formatted templates for a custom message pop-up in my homelab, taking information from different sources to format for display. Not reinventing any functionality, but certainly a cleaner and easier implementation for a message dashboard.</p><p>Please share your ideas below, I&#39;m curious to see what you have in mind!</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Wake me up when we get g-strings</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nf04hk1/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>It’s not clear to me what exists here that I couldn’t already do. But maybe it will become clear once people start using it.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nezwjsf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I could see logging libraries using it. </p><p>Not that I&#39;ve used them, but apparently some of the more advanced libraries will keep log calls that use separate data separated rather than interpolated so they can group similar calls.</p><p>I.e. <code>logger.log(&quot;failed to initialise user %(user_id)s because of %(reason)s&quot;, extra={&quot;user_id&quot;=user.id, &quot;reason&quot;=response error_code)</code></p><p>With t-strings you wouldn&#39;t have to use the extras argument anymore to rely on interpolation (and there are libraries such as python-json-logger that repurpose that field) as the various fields would be able to be extracted or interpolated as needed.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nf08c0o/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Translations! Building translations by substituting dynamic content has always been tricky and depended on patterns like _(&quot;Hey {name}&quot;).format(name=...)</p><p>now we could simply do _(t&quot;Hey {name}&quot;)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nf154vi/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I plan to not use them at all, unless I find a REALLY good reason to.</p><p>Feels like unnecessary complexity and mental overhead for everything I do daily. Don&#39;t, get me wrong, the feature is awesome and has its place, but &quot;its place&quot; is something I never encounter writing the applications I write, and I suspect this probably applies to most devs.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nf1oav0/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>F-strings are great. They’re exactly what Perl strings and python strings should be. Interpolation is good. Granted, bold output to web vs bold output to console looks markedly different, but I think the general trend js away from console to web.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/neztgf6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>One cool use for t-strings could be in dynamically generating API requests. You can create a base t-string for an endpoint and embed parameters easily, making it simpler to handle different types of requests on the fly. This could streamline handling RESTful service calls, especially when integrating with microservices.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkq8pt/tstrings_what_will_you_do/nf0jn90/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 06:52:59 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/</link><title>Dou you use jit compilation with numba?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/</guid><comments>https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Is it common among experienced python devs and what is the scope of it (where it cannot be used really). Or do you use other optimization tools like that?</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I&#39;ve used it to meaningfully improve performance for numerically heavy bottlenecks. This was even after getting fancy with <code>ufuncs</code> and trying to exploit broadcasting and other speed ups in <code>numpy</code>.</p><p>Depending on your use case, it can be a useful tool requiring little additional knowledge, but it&#39;s not a cure all or likely a fit for every problem. If you&#39;re looking for libraries that have made heavy use of it, <code>umap-learn</code> and <code>apricot-select</code> come to mind.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/neyefq3/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I use numba almost daily for analysis of scientific data (imaging sensors). The whole system works in Python, so porting to C++ is not reasonable, but at some points, I have to loop over hundreds of millions of rows of data and numba comes in pretty handy (no, this can not be solved with numpy).</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/neyemzt/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I&#39;ve rarely found it to provide any performance gain over using appropriate libraries (numpy, Polars, Jax, etc). It&#39;s worth a try if you need a particular section sped up but I wouldn&#39;t rely on it.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/ney6ev5/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>⠀⠀⠀⠀⠀⠀⢀⣀⣀⣠⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡟⢫⡿⢙⣳⣄⣈⡙⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣁⡷⣿⠛⠋⠉⠀⠈⠉⠙⠛⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠉⠀⠿⠆⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⣆⠀⠀⠀⠀⠀⠀⢀⣾⠃⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢧⠀⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣇⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡀⠀⠀⢹⡆⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⢤⣤⣀⠀⣠⣤⠦⢤⣨⡷⠀⠀⠸⣷⠀⠀⠀⠀⠀⠀⢠⣾⡋⠀⠀⠀⠀⠉⢿⣉⠀⠀⠀⠈⠳⡄⠀⢀⣿⡆⢸⣧⠀⠀⠀⣾⢃⣄⡀⠀⠀⠀⠀⢸⡟⢠⡀⠀⠀⠀⣿⠀⣸⡟⣷⢸⠘⣷⠀⠀⣷⠈⠿⠇⠀⠀⠀⠀⢸⣇⣘⣟⣁⡀⢀⡿⠀⢿⣇⣹⣿⣦⡘⠇⠀⠘⠷⣄⡀⠀⠀⣀⣴⠟⠉⠉⠉⠉⠉⢻⡅⠀⠀⠈⡿⢿⠿⡆⠀⠀⠀⠀⠈⠉⠉⣉⣩⣄⣀⣀⣀⣀⣀⣠⡾⠃⠀⠀⠀⠻⣮⣤⡿⠀⠀⠀⢀⣤⠞⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⢸⠄⠀⠀⠀⣠⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⣾⠀⠀⠀⢠⡏⠀⣀⡦⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣧⠀⠀⠀⠀⡏⠀⠀⠀⢸⡄⠀⠛⠉⠲⣤⣀⣀⠀⠀⠀⠀⠀⣀⣴⡿   - &quot;Doh!&quot;⠀⢀⣀⣰⡇⠀⠀⠀⠈⢷⡀⠀⠀⠀⠀⠀⠉⠉⣩⡿⠋⠉⠁⠀⠀⠀⣾⠙⢾⣁⠀⠀⠀⠀⠈⠛⠦⣄⣀⣀⣀⣤⡞⠋⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠈⠙⠲⢦⣄⡀⠀⠀⠀⠀⠀⠀⢸⠋⠳⠦⣄⠀⠀⠀⠀⢿⡀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠓⢲⢦⡀⠀⢸⠀⠀⣰⢿⠀⠀⠀⠀⠀⠙⠳⣄⡀⠀⠀⠀⠀⠀⠀⢀⡟⠀⠙⣦⠸⡆⣰⠏⢸⡄⠀⠀⠀⠀⠀⠀⠀⠙⠳⢤⣄⣀⠀⠀⣾⠁⠀⠀⠈⠳⣿⣿⣄⣈⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⢺⠇⠀⠀⠀⠀⠀⠈⠘⣧⠙⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢀⢀⣀⠀⠀⠀⠀⠀⠀⡀⣈⡁⠀⠀⠀⠀</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/nf063p4/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I really try to stick with polars/numpy but when I truly can’t, numba is great.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/neyujgj/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>The main issue with numba is its limited support for other libraries. Most of the time you would have to stick with very basic numpy. We used it once for speeding up computation of three nested loops with over 8000 iterations each, but this is definitely an exceptional case. Most of the time you find yourself wanting to use numba, but not really able to do it. At the end of the day we&#39;re slowly migrating to Julia where everything is as simple as in python, but jit compiled by default)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/neyrsmz/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>If you&#39;re into numerical computing but find Numba&#39;s library support limiting, you might want to look into projects like Pythran or Cython, which offer more flexibility. Pythran compiles a subset of Python code to C++ and might work well for loops-heavy tasks with a bit more support for Python features compared to Numba. Cython could offer a middle ground if you need Python speedups with the ability to interface directly with C libraries. These tools can be especially handy if you&#39;re working within ecosystems where typical Python packages can&#39;t provide the necessary performance boost.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkit7n/dou_you_use_jit_compilation_with_numba/neyvb8x/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 01:35:59 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</link><title>Today I learned that Python doesn't care about how many spaces you indent as long as it's consistent</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</guid><comments>https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Call me stupid for only discovering this after 6 years, but did you know that you can use as many spaces you want to indent, as long as they&#39;re consistent within one indented block. For example, the following (awful) code block gives no error:</p><pre><code>def say_hi(bye = False): print(&quot;Hi&quot;) if bye:        print(&quot;Bye&quot;)</code></pre></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Today I learned that some people <strong>manually press the space bar multiple times</strong> to indent, despite most IDEs automatically converting a single Tab into the appropriate number of spaces.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/neyhctw/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>People raging in the comments about tabs, but the official Python style recommendation is 4 spaces (<a href="https://peps.python.org/pep-0008/#indentation">https://peps.python.org/pep-0008/#indentation</a>).</p><p>So yeah, you can use as many as you&#39;d like, as long as it&#39;s consistent. For REPL, I frequently use 2 spaces, because it&#39;s faster to type. For any enterprise-level code, you&#39;ll most likely use a formatter that enforces 4 spaces.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/ney6hxp/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Don’t most modern ides convert tab to spaces?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/ney4eba/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>On me team we enforce linting standards to ensure indentation is a consistent 17 tabs across all files</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/neybigf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>When we started writing python code back in 2008, we had no clue about best practices, and used two space indents. This code lived for a long time, we knew it worked and (back then) no linters verified that the AST of the transformed code matched the original.</p><p>It lasted until <code>black</code> came on the scene and did exactly that.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/ney7zk5/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I knew that you can use how many you want, but that you can use different amounts of indent for different code blocks is news to me lmao</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/ney70yd/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>It doesn’t even need to be consistent within the same file, or class or function. It just needs to be consistent within the same block. Heck, your if and else blocks can be different indents.</p><p>But please don’t do this.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkidxq/today_i_learned_that_python_doesnt_care_about_how/nezdra4/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 19 Sep 2025 01:19:56 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</link><title>Favorite Modern Async Task Processing Solution for FastAPI service and why?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</guid><comments>https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>So many choices, hard to know where to begin!</p><p>Worker:</p><ul><li>Hatchet</li><li>Arq</li><li>TaskIQ</li><li>Celery</li><li>Dramatiq</li><li>Temporal</li><li>Prefect</li><li>Other</li></ul><p>Broker:</p><ul><li>Redis</li><li>RabbitMQ</li><li>Other</li></ul><p>No Cloud Solutions allowed (Cloud Tasks/SQS/Lambda or Cloud Functions, etc.)</p><p>For my part, Hatchet is growing on me exponentially. I always found Flower for Celery to have pretty bad observability and Celery feels rather clumsy in Async workflows.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I recently setup taskiq in production.  Had to make some slight customizations but I must say it’s great and really lightweight</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/ney3iul/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>There is SAQ as well which is quite popular.</p><p><a href="https://saq-py.readthedocs.io/en/latest/monitoring.html#starlette-fastapi">https://saq-py.readthedocs.io/en/latest/monitoring.html#starlette-fastapi</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/nexu1v2/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Celery worked but felt clunky for async; Flower didn’t help much. We moved a FastAPI app to Dramatiq+Redis and got simpler code, predictable retries, and decent admin UI. For workflows (sagas/human steps), Celery/Dramatiq weren’t enough—Temporal shines there, but it’s heavier to run.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/nez08ca/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Temporal is great (pay for it its easier than self-hosting). We started with Celery but it has so missing features that you want when building real products.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/neyee7d/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>arq is pretty unstable and slow to update. At least it was last time I used it. Prefect is just a SaaS solution on top of arq (I have seen Prefect devs contribute to arq).</p><p>Celery is not modern or async. It is still synchronous with forking. Not a great solution for anything for an asyncio application. Also not great for longer running tasks since that can kill your throughput for not being async friendly.</p><p>TaskIQ has been the latest I have tried and it has worked really well for me so far. Not really put it under pressure, but it has worked for everything so far.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/nexk6vq/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I tend to write these myself since they are so easy to build on top of an existing broker / queue system.</p><p>Back in the day I used to love <a href="https://pypi.org/project/walnats/">https://pypi.org/project/walnats/</a> which hasn&#39;t been updated in a few years, but now it sits as the inspiration for what I build myself. Just Pydantic -&gt; Broker -&gt; Pydantic -&gt; Profit.</p><p>Which uses another broker I like for some use cases: <a href="https://nats.io">https://nats.io</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/nexvl6k/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I basically always use NATS these days. PubSub, KeyValue, and object store built in. Single binary.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkfhmy/favorite_modern_async_task_processing_solution/nf21efl/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 23:30:27 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</link><title>prek a fast (rust and uv powered) drop in replacement for pre-commit with monorepo support!</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</guid><comments>https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I wanted to let you know about a tool I switched to about a month ago called prek: <a href="https://github.com/j178/prek?tab=readme-ov-file#prek">https://github.com/j178/prek?tab=readme-ov-file#prek</a></p><p>It&#39;s a drop in replacement for pre-commit, so there&#39;s no need to change any of your config files, you can install and type <code>prek</code> instead of <code>pre-commit</code>, and switch to using it for your git precommit hook by running <code>prek install -f</code>.</p><p>It has a few advantage over pre-commit:</p><ul><li>Core hooks re-written in Rust for better performance</li><li>Uses uv to install Python dependencies so non-cached runs are much faster</li><li>Can be installed without needing to set up a Python environment: <a href="https://github.com/j178/prek?tab=readme-ov-file#installation">https://github.com/j178/prek?tab=readme-ov-file#installation</a></li><li>Monorepo support as of 0.2.0:  <a href="https://github.com/j178/prek/releases/tag/v0.2.0">https://github.com/j178/prek/releases/tag/v0.2.0</a></li><li>Automatic PEP 723 in-line metadata dependency installation: <a href="https://github.com/j178/prek/pull/529">https://github.com/j178/prek/pull/529</a></li></ul><p>It&#39;s still early days for prek, but the large project apache-airflow has adopted it (<a href="https://github.com/apache/airflow/pull/54258">https://github.com/apache/airflow/pull/54258</a>), is taking advantage of monorepo support (<a href="https://github.com/apache/airflow/pull/54615">https://github.com/apache/airflow/pull/54615</a>) and PEP 723 dependencies (<a href="https://github.com/apache/airflow/pull/54917">https://github.com/apache/airflow/pull/54917</a>). So it already has a lot of exposure to real world development.</p><p>When I first reviewed the tool I found a couple of bugs and they were both fixed within a few hours of reporting them. Since then I&#39;ve enthusiastically adopted prek, largely because while pre-commit is stable it is very stagnant, the pre-commit author actively blocks suggesting using new packaging standards, so I am excited to see competition in this space.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I switched to it this week and it&#39;s amazing</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/newqejm/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Thanks for this</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/nf21i0l/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>oh hell yeah this might be the thing that puts me onto pre commit hooks</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nkc512/prek_a_fast_rust_and_uv_powered_drop_in/nf2i82r/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 21:26:21 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</link><title>UV issues in corporate env</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</guid><comments>https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I am trying uv for the first time in a corporate environment. I would like to make sure I understand correctly: </p><ul><li><p>uv creates a virtual env in the projects folder, and it stores all dependencies in there. So, for a quick data processing job with pandas and marimo, I will keep 200Mb+ worth of library and auxiliary files. If I have different folders for different projects, this will be duplicated over on each. Maybe there is a way to set central repositories, but I already have conda for that. </p></li><li><p>uv automatically creates a git repository for the project. This is fine in principle, but unfortunately OneDrive, Dropbox and other sync tools choke on the .git folder. Too many files and subfolders. I have had problems in the past. </p></li></ul><p>I am not sure uv is for me. How do you guys deal with these issues? Thanks</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>you can use the <code>uv init —vcs none</code> command to avoid creating a git repo. See <a href="https://docs.astral.sh/uv/reference/cli/#uv-init--vcs">https://docs.astral.sh/uv/reference/cli/#uv-init--vcs</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevnhru/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>For your first point, I think it only installs links to its central package cache, that&#39;s how it&#39;s able to install things so quickly.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevkaro/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Your second question is a bit unsettling. If you&#39;re currently syncing code using Dropbox, OneDrive, etc., it should be a much higher priority to stop doing that rather than replacing your package management, and move onto a proper VCS like git. You shouldn&#39;t sync .venv either.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevp8nr/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>So for the .git folders - don&#39;t sync them to a backup system. That is what your corporate repos are for. local files stay local, changes are committed to the repo, you pull/sync other changes. I have a dev drive on my VDI that I use for local projects. If you are using Dropbox or OneDrive - just exclude your dev folder from syncing.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevl1n9/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Why are you using sync tools on the git repos btw?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevmlyi/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>uv is good at what it does. If you use it as intended, it will save you work.<br/>- Don&#39;t cloud sync git managed folders<br/>- Keep dependencies in pyproject.toml files, and let uv manage them. I.e. use &#39;uv add dependency&#39;. Can be expanded to support other tools, like ruff, black, etc.<br/>- Use direnv to automatically activate the environment when you change to a folder (or windows equivalent).<br/>- If you write a lot of scripts with dependencies that you use in many folders (i.e. where an .venv isn&#39;t handy), use the script support of uv to automatically set up dependencies. E.g.<br/>```</p><h1>!/usr/bin/env -S uv run -s</h1><h1>/// script</h1><h1>requires-python = &quot;&gt;=3.11,&lt;3.12&quot;</h1><h1>dependencies = [</h1><h1>&quot;matplotlib&quot;,</h1><h1>&quot;numpy&quot;,</h1><h1>&quot;pyqt5&quot;,</h1><h1>]</h1><h1>///</h1><p>```When you run your script, an environment will be set up automatically, if it hasn&#39;t already been done. Takes about 500ms on the first run.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevrcvx/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>regarding git part, you can use <a href="https://docs.astral.sh/uv/concepts/projects/init/#creating-a-minimal-project">minimal project</a> setup. that omits also some other files though</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nk6vma/uv_issues_in_corporate_env/nevmgvn/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 17:56:43 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1njwgo0/project_leetcode_practice_environment_generator/</link><title>[Project] LeetCode Practice Environment Generator for Python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1njwgo0/project_leetcode_practice_environment_generator/</guid><comments>https://www.reddit.com/r/Python/comments/1njwgo0/project_leetcode_practice_environment_generator/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1njwgo0/project_leetcode_practice_environment_generator/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I built a Python package that generates professional LeetCode practice environments with some unique features that showcase modern Python development practices.</p><p>Quick Example:</p><pre><code>pip install leetcode-py-sdklcpy gen -t grind-75 -output leetcode  # Generate all 75 essential interview problems</code></pre><p>Example of problem structure after generation:</p><pre><code>leetcode/two_sum/├── README.md           # Problem description with examples and constraints├── solution.py         # Implementation with type hints and TODO placeholder├── test_solution.py    # Comprehensive parametrized tests (10+ test cases)├── helpers.py          # Test helper functions├── playground.py       # Interactive debugging environment (converted from .ipynb)└── __init__.py         # Package marker</code></pre><p>The project includes all 75 Grind problems (most essential coding interview questions) with plans to expand to the full catalog.</p><p><strong>GitHub:</strong> <a href="https://github.com/wisarootl/leetcode-py">https://github.com/wisarootl/leetcode-py</a><br/><strong>PyPI:</strong> <a href="https://pypi.org/project/leetcode-py-sdk/">https://pypi.org/project/leetcode-py-sdk/</a></p><p>Perfect for Python developers who want to practice algorithms with professional development practices and enhanced debugging capabilities.</p><p>What do you think? Any Python features or patterns you&#39;d like to see added?</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>As an aside, and completely unrelated to your hard work which looks solid:  Leetcode isn&#39;t relevant in the AI era.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njwgo0/project_leetcode_practice_environment_generator/neubwn9/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 07:54:44 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</link><title>Where's a good place to find people to talk about projects?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</guid><comments>https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I&#39;m a hobbyist programmer, dabbling in coding for like 20 years now, but never anything professional minus a three month stint. I&#39;m trying to work on a medium sized Python project but honestly, I&#39;m looking to work with someone who&#39;s a little bit more experienced so I can properly learn and ask questions instead of being reliant on a hallucinating chat bot.</p><p>But where would be the best place to discuss projects and look for like minded folks? </p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>*the Python discord server has a dedicated room for projects.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/nerxw9x/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Discord is a great place to find like minded people.  If I recall correctly they have an entire chat dedicated to projects people are working on.  It’s a great resource of you’re not already taking advantage of it.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/nerxsvd/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Discord is the place, but also if your looking for experience, contributing to open source projects can really help you learn some general practices as well as start up conversations.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/nesk0s1/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>You can always present or announce your projects at your local user group or python meetup. <a href="https://wiki.python.org/moin/LocalUserGroups">https://wiki.python.org/moin/LocalUserGroups</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/netlz67/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Sir, this is a Wendy&#39;s.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/neu0yd0/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Hello, i wouldnt say ive worked on a proffessional level but i am quite experienced. If you&#39;re still interested then dm me on discord (cheetahdoesstuff) and tell me a bit more about the project!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njo1k2/wheres_a_good_place_to_find_people_to_talk_about/nexd9ef/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 01:47:05 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/</link><title>Is JetBrains really able to collect data from my code files through its AI service?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/</guid><comments>https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I can&#39;t tell if I&#39;m misunderstanding this setting in PyCharm about data collection.</p><p>This is the only setting I could find that allows me to disable data collection via AI APIs, in Appearance &amp; Behavior &gt; System Settings &gt; Data Sharing:</p><blockquote><p>Allow detailed data collection by JetBrains AI<br/>To measure and improve integration with JetBrains AI, we can collect non-anonymous information about its usage, which includes the full text of inputs sent by the IDE to the large language model and its responses, including source code snippets.<br/>This option enables or disables the detailed data collection by JetBrains AI in all IDEs.<br/>Even if this setting is disabled, the AI Assistant plugin will send the data essential for this feature to large language model providers and models hosted on JetBrains servers. If you work on a project where you don&#39;t want to share your data, you can disable the plugin.</p></blockquote><p>I&#39;m baffled by what this is saying but maybe I&#39;m mis-reading it? It sounds like there&#39;s no way to actually prevent JetBrains from reading source files on my computer which then get processed by its AI service for the purpose of code generation/suggestions.</p><p>This feels alarming to me due to the potential for data mining and data breaches. How can anyone feel safe coding a real project with it, especially with sensitive information? It sounds like disabling it does not actually turn it off? And what is classified as &quot;essential&quot; data? Like I don&#39;t want anything in my source files shared with anyone or anything, what the hell.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>How do you expect the LLM to work without sending the data it&#39;s supposed to work with?</p><p>The option you&#39;re referring to is about the level of additional data being sent together with your code. </p><p>If you don&#39;t want that (and I prefer that ny code remains local), you can use the local only completion model that you get offered. This does not transmit any code to JetBrains, and you can still keep telemetry off. </p><p>But if you want to use the remote LLM, you need to send your content somewhere for the model to work with it. </p></div><p><a href='https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/nere6lg/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>thats how LLMs work. heres a quick defensive checklist you can run now: disable the AI Assistant plugin, keep “detailed data collection” off, block IDE egress to public LLM endpoints at your firewall, and add a project-level exclusion rule for sensitive repos. For orgs, use JetBrains AI Enterprise or a local model and enforce via policy. worked for us...helped a mid-size engineering org lock down IDE AI: plugin disabled on sensitive projects, egress blocked, and an on-prem model for R&amp;D</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/nes50r5/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Can&#39;t you just disable the plugin?</p><p>BTW: I guess I misread it, but when they first introduced me, they were assuring that the prediction is happening locally and nothing is sent. I guess they changed it?</p><p>My company provides copilot and that&#39;s the only one authorized, so it automatically disabled their plugin.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/nerhkgk/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Yes, don’t use JetBrains if you are concerned about this.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njmvk2/is_jetbrains_really_able_to_collect_data_from_my/nesu68h/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Thu, 18 Sep 2025 01:01:58 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/</link><title>BS4 vs xml.etree.ElementTree</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/</guid><comments>https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Beautiful Soup or standard library (xml.etree.ElementTree)? I am building an ETL process for extracting notes from Evernote ENML. I hear BS4 is easier but standard library performs faster. This alone makes me want to stick with the standard library. Any reason why I should reconsider?</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>lxml</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/neqn750/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Std xml lib is actuallypreatty nice, it has nice filter functionality..Not typed thought..</p><p>I thought BS use case is testinf frontends, interacting with html... probably overkill for your use case..</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/neql2yo/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>XML element tree works,  I&#39;ve used it with a variety of xml data sources in the past.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/neqq06y/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>bs4 is super slow, i have just gained about 10X time improvement in some task by switching bs4 to lxml</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/nesazu3/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>If you&#39;re parsing html, be aware that lxml&#39;s parser is <em>not</em> equivalent to a browser; it doesn&#39;t <em>remotely</em> implement the html spec&#39;s parsing algo, so a lot of real world html will misparse (even if it&#39;s valid/correct!). For example, it doesn&#39;t implement auto-closing for tags, so it will happily parse a ul as a child of a p.</p><p>I&#39;m not familiar with how compliant BeautifulSoup is these days. </p><p>If you want to match browsers, I can confirm that html5lib is standards compliant, and uses the lxml tree structure. It&#39;s not very fast, though, since it&#39;s written in pure (and relatively unoptimized) Python, rather than in C.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/neqnt9a/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Isn’t BS4 for html?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/neqlgxe/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I&#39;m using xml etree to parse files with over 60k lines and works really well. No problems in one year of usage. Dunno about BS4 for this matter</p></div><p><a href='https://www.reddit.com/r/Python/comments/1njiy79/bs4_vs_xmletreeelementtree/nequn2p/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Wed, 17 Sep 2025 22:36:55 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</link><title>Do you prefer sticking to the standard library or pulling in external packages?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</guid><comments>https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I’ve been writing Python for a while and I keep running into this situation. Python’s standard library is huge and covers so much, but sometimes it feels easier (or just faster) to grab a popular external package from PyPI.</p><p>For example, I’ve seen people write entire data processing scripts with just built-in modules, while others immediately bring in pandas or requests even for simple tasks.</p><p>I’m curious how you all approach this. Do you try to keep dependencies minimal and stick to the stdlib as much as possible, or do you reach for external packages early to save development time?</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>The standard library is so big that you don&#39;t really know what you don&#39;t use.</p><p>Importing pandas for a oneliner, I&#39;m guilty of that.</p><p>But requests? No apology for importing that any time I have to interact with http at all.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/nemzdk6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I tend to stick with Python standards libraries as much as possible and when it makes sense. Sometimes I see external libraries doing things that are in standard libraries (e.g. text wrapping, DAG graphlib, itertools). The reason is mostly maintenance and security.</p><p>I tend to go for external libraries that are tested and loved by the community because they solve problems most effectively, e.g. FastAPI, Polars (lazy), Scikit-Learn, etc </p><p>The more you know standard libraries, the more you know when you need them and when you don’t.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/nenbs85/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I prefer sticking to the standard library which is amazingly large.  But I do stray for things like requests or numpy.  I’d say that I stay away from libraries that are rather new or haven’t had development or at least bug fixes for some time.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/nen0ysj/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I usually pull in the common libraries because they generally solve common use cases robustly. I don’t want to have reinvent the wheel and then have to support all that extra code.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/nemz5wg/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>There is a list of &quot;standard&quot; libraries I just always use - NumPy, Pandas, matplotlib, SciPy. I don&#39;t even think about those.</p><p>When it comes to smaller packages from PyPi, I am hesitant. Uploading stuff to PyPi is pretty easy, there is no strong security validation. So be careful.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/neop16o/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>The problem with pulling packages is if your project is still running years after you wrote it, all of those dependencies will start failing and you’re going to have to refactor things to make it work again.</p><p>If you don’t use external dependencies, chances are way higher that your project will need less maintenance in the future.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/nen79vr/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><ul><li><code>structlog</code> - structured logging; being able to log as jsonl/ndjson and then filter through a ton of data with <code>jq</code> is a god-sent</li><li><code>pydantic-settings</code> - settings classes; very handy for libraries</li><li><code>polars</code> - for dataframes work (think &quot;in-memory tables&quot;)</li><li><code>returns</code> - for the ability to return an exception as a regular value - no <code>except Exception</code> just in case something magical may be raised</li><li><code>stamina</code> - best retry lib (think &quot;tenacity, but with sane defaults&quot;)</li><li><code>plotly</code> - interactive plots</li><li><code>hypothesis</code> - &quot;property-based testing&quot;. Generate randomized input data to throw through you code, then test for mathematical properties (Commutativity, Associativity, Idempotence, etc - depending on the code).</li></ul><p>These are pretty much the core of most of my work, so no, I can&#39;t live with just the standard lib.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nj12yr/do_you_prefer_sticking_to_the_standard_library_or/neodbcc/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Wed, 17 Sep 2025 07:53:09 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</link><title>List of 87 Programming Ideas for Beginners (with Python implementations)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</guid><comments>https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><a href="https://inventwithpython.com/blog/programming-ideas-beginners-big-book-python.html">https://inventwithpython.com/blog/programming-ideas-beginners-big-book-python.html</a></p><p>I&#39;ve compiled a list of beginner-friendly programming projects, with example implementations in Python. These projects are drawn from my free Python books, but since they only use stdio text, you can implement them in any language.</p><p>I got tired of the copy-paste &quot;1001 project&quot; posts that obviously were copied from other posts or generated by AI which included everything from &quot;make a coin flip program&quot; to &quot;make an operating system&quot;. I&#39;ve personally curated this list to be small enough for beginners. The implementations are all usually under 100 or 200 lines of code.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Thanks for the work you put into these things.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/nelvhqs/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Hi Al,</p><p>long time listener, first time responder. </p><p>Just letting you know that your Youtube channel is one of my required (well, strongly suggested) resources in my Introduction to Programming Principles class, I doubt you will have seen an uptake in traffic from it due to your popularity but my student have greatly benefited from it. And so have I as now I don&#39;t have repeatably explain simple concepts over and over again.</p><p>Thank you.</p><p>Gnu (not yet professor)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/nepglzd/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Solid resource. For beginners, I’d suggest:  </p><p>• Pick 1–2 projects that sound fun, not “useful.”  </p><p>• Re-implement without looking at the sample code.  </p><p>• Add a tiny twist (extra rule, different input) to force learning.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/nepxile/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Thanks for this and all the programming education gems you’ve contributed over the years!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/nemo413/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Thanks for this great resource! Quick note, the Bagels project link contains two links.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/nentolr/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Thank you very much, that will be really useful. I learned basics of Python but stopped when it came to choose what framework to learn next and what project to do first, it was overwhelming.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/neofnui/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is excellent. Thanks!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nitzoz/list_of_87_programming_ideas_for_beginners_with/neoo9lc/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Wed, 17 Sep 2025 02:43:35 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/</link><title>An open source internal tools platform for Python programs</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Like the title says I am building an open source internal tools platform for Python programs, specifically one that is aimed at giving a company or team access to internal Python apps through a centralized hub. I have been building internal tools for 4 years and have used just about every software and platform out there:</p><p>(Heroku, Streamlit Cloud, Hugging Face Spaces, Retool, Fly.io / Render / Railway),</p><p>and they all fall short in terms of simplicity and usability for most teams. This platform would allow smaller dev teams to click-to-deploy small-medium sized programs, scripts, web apps, etc. to the cloud from a Github repository. The frontend will consist of a portal to select the program you want to run and then route to that specific page to execute it. Features I am looking into are:</p><ul><li>centralized sharing gives non-tech users an easier way to access all the tools in one location (no more siloed notebooks, scripts, and web app URLs)</li><li>one-click edits/deploys (git push = updated application in cloud)</li><li>execution logs + observability at the user level -&gt; dev(s) can see the exact error logs + I/Os </li><li>secure SSO (integration with both azure and gcp)</li><li>usage analytics</li></ul><p>I&#39;m wondering if this would be useful for others / what features you would like to see in it! Open to all feedback and advice. Lmk if you are interested in collaborating as well, I want this to be a community-first project.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>mainly what im getting at is an out of the box solution to allow 1-3 devs in a company/team to provide internal tooling without getting bogged down in devops / excess overengineering of a platform that would need to be maintained and just add more tech debt to the IT dept. if there is a better existing solution would love to know but nothing ive seen so far does all of what I outlined in the bullets of the main post, with ease / low maintenance overhead.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/nelhh9w/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Check out posit connect</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/nelhhye/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Nice project!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/neos3xy/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>We tried Streamlit Cloud + Hugging Face Spaces and hit the same walls—hard to onboard non-technical folks, brittle auth. A central hub with sane SSO would’ve saved so much duct tape. some1 else said posit connect ...</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/nepz2b8/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>At my last two roles, we standardized on Backstage Scaffolder for setting up Python repos with baked-in Docker and CICD best practices for the k8s environment, then all they needed to do was commit any simple file modification like a README change, and they&#39;d have a hello world API ready to iterate in any checked environment, and synced by ArgoCD server. OpenTel+Grafana dashboards were provided too for metrics and tracing </p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/netqfb8/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Could you provide criticism for each platform you mentioned?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nirump/an_open_source_internal_tools_platform_for_python/nel4zte/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Wed, 17 Sep 2025 01:22:32 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1niqudg/let_your_python_agents_play_an_mmo_agenttoagent/</link><title>Let your Python agents play an MMO: Agent-to-Agent protocol + SDK</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1niqudg/let_your_python_agents_play_an_mmo_agenttoagent/</guid><comments>https://www.reddit.com/r/Python/comments/1niqudg/let_your_python_agents_play_an_mmo_agenttoagent/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1niqudg/let_your_python_agents_play_an_mmo_agenttoagent/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>Repo:</strong> <a href="https://github.com/Summoner-Network/summoner-agents">https://github.com/Summoner-Network/summoner-agents</a></p><p><strong>TL;DR:</strong> We are building <strong>Summoner</strong>, a Python SDK with a Rust server for agent-to-agent networking across machines. Early beta (beta version 1.0).</p><p><strong>What my project does:</strong> A protocol for live agent interaction with a desktop app to track network-wide agent state (battles, collaborations, reputation), so you can build MMO-style games, simulations, and tools.</p><p><strong>Target audience:</strong> Students, indie devs, and small teams who want to build networked multi-agent projects, simulations, or MMO-style experiments in Python.</p><p><strong>Comparison:</strong></p><ul><li>LangChain and CrewAI are app frameworks and an API spec for serving agents, not an on-the-wire interop protocol;</li><li>Google A2A is an HTTP-based spec that uses JSON-RPC by default (with optional gRPC or REST);</li><li>MCP standardizes model-to-tool and data connections.</li><li><strong>Summoner</strong> targets live, persistent agent-to-agent networking for MMO-style coordination.</li></ul><p><strong>Status</strong></p><p>Our Beta 1.0. works with example agents today. Expect sharp edges.</p><p><strong>More</strong></p><p>Github page: <a href="https://github.com/Summoner-Network">https://github.com/Summoner-Network</a></p><p>Docs/design notes: <a href="https://github.com/Summoner-Network/summoner-docs">https://github.com/Summoner-Network/summoner-docs</a></p><p>Core runtime: <a href="https://github.com/Summoner-Network/summoner-core">https://github.com/Summoner-Network/summoner-core</a></p><p>Site: <a href="https://summoner.org">https://summoner.org</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>That’s really cool!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1niqudg/let_your_python_agents_play_an_mmo_agenttoagent/neleif7/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Wed, 17 Sep 2025 00:45:17 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</link><title>Some tips for beginners (Things you probably wish you knew when you first started)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</guid><comments>https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Maybe the title came out a bit ambiguous, but I’d really like to get this kind of help and I also hope this post can be useful for others who, like me, are just starting out on their Python journey.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Find something to build. Either come up with something yourself or find an existing thing online and try rebuilding it in Python yourself. </p><p>That is the best way to learn python in my opinion, by building with it. </p><p>In terms of tips and tricks for beginners:- List comprehensions are faster and you should learn them sooner than later. - Learning about how Python object instances and references work. - Read code from Python GitHub repos of tools/apps you’ve used or like.- Start using <code>if __name__ == “main”</code> if you’re not already. - <code>argparse</code> is a great library to use as a beginner. Once you’ve mastered that I’d take a look at <code>click</code>.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/neisk8f/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Write unit tests.  You get so much better at structuring your code and thinking about the logic.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/nejoh0p/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><pre><code>import this</code></pre></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/neikmh0/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Get comfortable using linters, tests, and other quality control tools. They can genuinely help catch bugs, and becoming familiar with them makes it easier to transition from personal projects to collaborative development. </p></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/neitslu/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Do not use ChatGPT or Chat anything to learn python. You will not learn anything and even if you create something you won&#39;t be able to explain any part of it. Follow the good ol&#39; way of YouTube and tutorial websites. Stack overflow is the way to go not ChatGPT.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/neik5se/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Here are a few things I wish I had wrapped my head around earlier:</p><ul><li>Don’t rush past the basics: Even if it feels “too simple,” getting loops, functions, and data structures really solid makes everything else way smoother.</li><li>Math is your quiet superpower: Resources like Khan Academy for fundamentals or the Princeton Lifesaver Guide to Calculus (someone suggested this to me, and it really changes how you see math) can make the difference.</li><li>Mix in projects early: They dont have to be fancy. Real problems highlight gaps you didn’t know you had.</li><li>Project-based platforms  can give you perspective on what real-world ML/Python work looks like. Also, communities like Data Science Central, the IBM Data Community even DataTalks Club folks share resources and debug together.</li></ul></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/nej0xch/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Get used to debug-stop-eval workflow. You can easily traverse running code using ctrl+click and go to def/decl buttons. Do not be afraid of looking into code of modules, you will learn a lot.</p><p>Built-ins, iterator&amp;generators, decorators and magic methods.</p><p>And get familiar with studying documentations, mostly the official python doc.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nifogm/some_tips_for_beginners_things_you_probably_wish/nej6cjg/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Tue, 16 Sep 2025 17:40:26 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nickil/fast_weighted_selection_using_digitbinindex/</link><title>Fast weighted selection using digit-bin-index</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nickil/fast_weighted_selection_using_digitbinindex/</guid><comments>https://www.reddit.com/r/Python/comments/1nickil/fast_weighted_selection_using_digitbinindex/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nickil/fast_weighted_selection_using_digitbinindex/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What my project does:</strong><br/>This is slightly niche, but if you need to do weighted selection and can treat probabilities as fixed precision, I built a high-performing package called digit-bin-index with Rust under the hood. It uses a novel algorithm to achieve best in class performance.</p><p><strong>Target audience:</strong><br/>This package is particularly suitable for iterative weighted selection from an evolving population, such as a simulation. One example is repeated churn and acquisition of customers with a simulation to determine the customer base evolution over time.</p><p><strong>Comparison:</strong><br/>There are naive algorithms, often O(N) or worse. State of the art algorithms like Walker&#39;s alias method can do O(1) selection, but require an O(N) setup and is not suitable for evolving populations. Fenwick trees are also often used, with O(log N) complexity for selection and addition. <code>DigitBinIndex</code> is O(P) for both, where P is the fixed precision.</p><p>Here&#39;s an excerpt from a test run on a MacBook Pro with M1 CPU:</p><p><code>--- Benchmarking with 1,000,000 items ---</code><br/><code>This may take some time...</code><br/><code>Time to add 1,000,000 items: 0.219317 seconds</code><br/><code>Estimated memory for index: 145.39 MB</code><br/><code>100,000 single selections: 0.088418 seconds</code><br/><code>1,000 multi-selections of 100: 0.025603 seconds</code></p><p>The package is available at: <a href="https://pypi.org/project/digit-bin-index/">https://pypi.org/project/digit-bin-index/</a><br/>The source code is available on: <a href="https://github.com/Roenbaeck/digit-bin-index">https://github.com/Roenbaeck/digit-bin-index</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>Nice work, i have found a little issue</p><p>L736  let scaled_f = weight * self.scale;</p><p>the weight and self.scale are all f64, floating-point numbers are stored as approximations, maybe sometime it makes scaled_f to 1234.4999999999998 but acturally user think it should be 1234.5.</p><p>add a tiny number maybe better. like:<br/>let scaled = (weight * self.scaled_factor + 1e-9).round() as u64;</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nickil/fast_weighted_selection_using_digitbinindex/nemspwl/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Tue, 16 Sep 2025 14:46:57 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/</link><title>Has Anyone Been Using Pyrefly?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/</guid><comments>https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Thinking of introducing it at my company as a sort of second linter alongside basedpyright. I think it&#39;ll be good to get it incorporated a bit early so that we can fix whatever bugs it catches as it comes along. It looks to be in a decent state for basic typechecking, and the native django support will be nice as it comes along (compared to mypy).</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I reckon both pyrefly and ty need more time in the oven. Having used ty on a medium sized but simple codebase, it definitely has a little while to go yet. I suspect the same is for pyrefly too.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/nehnwwf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Hey -- thanks for trying Pyrefly out! I&#39;m a developer on the project. Since Pyrefly is still in Alpha, I would hesitate to recommend adding it to your company. I wouldn&#39;t want to leave a bad first impression while we are still fleshing out features and ironing out bugs. We are working toward a Beta release soon, and that might be a better time to think about this.</p><p>However -- if you have any feedback for us, I would really appreciate it. You can of course file issues or create discussions on GitHub, but you can also find us on Discord and chat with us in real time.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/nekxo33/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I tried it for about a week and it just didn&#39;t seem to work great for even moderately complex use cases. That was a few months ago, so it&#39;s possible it&#39;s better now, but at the time I felt like it needed more time in the oven before I&#39;d ask other people to use it.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/neh1hx5/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>think it&#39;s early for both pyrefly and ty for replacing existing tools but the vscode plugin for pyrefly is pretty damn good. but I&#39;m watching them both, I&#39;m sure one day we&#39;ll swap to one</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/nelot1w/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I found it worked really good for me.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/neh6uhs/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I&#39;ve tried both for some projects at work and even though I love everything that Astral is building, currently Pyrefly feels more developed than ty.That being said I like both, and will want to try them again in the future when they are both more complete.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/nel5pr6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>If you’re already on Pyright, Pyrefly can add value — but don’t expect it to replace anything soon. The real advantage will be Django-first type coverage. For companies with Django-heavy stacks, that’s a potential game-changer compared to mypy hacks. Otherwise, it’s still playing catch-up in terms of stability.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni81px/has_anyone_been_using_pyrefly/nejd49k/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Tue, 16 Sep 2025 10:05:39 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ni2k4t/starplot_star_charts_and_maps_of_the_sky/</link><title>Starplot - Star charts and maps of the sky</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ni2k4t/starplot_star_charts_and_maps_of_the_sky/</guid><comments>https://www.reddit.com/r/Python/comments/1ni2k4t/starplot_star_charts_and_maps_of_the_sky/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ni2k4t/starplot_star_charts_and_maps_of_the_sky/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey all, I’d like to introduce <a href="https://starplot.dev/">Starplot</a> — a Python library for creating star charts and maps of the sky.</p><p><strong>What My Project Does</strong></p><ul><li>Creates customizable star charts and maps of the night sky</li><li>Allows custom styling for all plotted objects, and includes many color themes</li><li>Supports many map projections and types of plots:<ul><li>Zenith plots that show the whole sky at a specific time and place</li><li>Map plots that show an area of the sky</li><li>Horizon plots that show the sky from a specific cardinal direction</li><li>Optic plots that show what an object looks like through an optic (e.g. telescope, binoculars, etc) at a specific time and place</li></ul></li><li>Includes a built-in database of 2M+ stars and 14,000+ deep sky objects (galaxies, nebulae, star clusters, etc)</li><li>Exports plots to PNG, JPEG, or SVG</li></ul><p><strong>Target Audience</strong></p><ul><li>Anyone interested in astronomy or creating maps of the sky!</li><li>Astrophysicists</li><li>Astronomers</li></ul><p><strong>Comparison</strong> </p><p>Compared to similar projects (e.g. fchart3, astroplan), Starplot supports a lot of customization and has many different plot types.</p><p>---</p><p>Homepage: <a href="https://starplot.dev/">https://starplot.dev/</a></p><p>Example Plots: <a href="https://starplot.dev/examples/">https://starplot.dev/examples/</a></p><p>Source Code: <a href="https://github.com/steveberardi/starplot">https://github.com/steveberardi/starplot</a></p><p>Starplot is still very much a work in progress, and I appreciate any feedback. Also very open to contributors if you want to help out! 😀 Clear skies! 🔭 ✨</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>Kind of a random question, but does this allow for the creation of maps of fictional skies with a custom data set? Or does it solely work with actual data?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ni2k4t/starplot_star_charts_and_maps_of_the_sky/nej7sog/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Tue, 16 Sep 2025 05:39:48 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/</link><title>Created python library for time series projections. E.g. combining income, inflation, dividends, etc</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/</guid><comments>https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>GitHub: <a href="https://github.com/TimoKats/pylan">https://github.com/TimoKats/pylan</a></p><p>PyPi: <a href="https://pypi.org/project/pylan-lib/">https://pypi.org/project/pylan-lib/</a></p><h1>What My Project Does</h1><p>Python library for making complex time series projections. E.g. for simulating the combined effect of (increasing) salary, inflation, investment gains, etc, over time. Note, it can also be applied to other domains.</p><h1>Target Audience</h1><p>Data analysts, planners, etc. People that use excel for making projections, but want to move to python.</p><h1>Comparison</h1><p>- SaaS financial planning tools (like ProjectionLab) work through a webUI, whereas here you have access to all the Python magic in the same place as you do your simulation.</p><p>- Excel....</p><p>- Write your own code for this is not super difficult, but this library does provide a good framework of dealing with various schedule types (some of which cron doesn&#39;t support) to get to your analysis more quickly.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>HelloLook interesting ! When i click on the slide deck link i have a no found screen :)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/neea6i6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I expected this to be a time-series analysis tool. It is not, but I find it cool. I like it. I didn’t know about cron-converter. That’s smart use. Well done.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhuk7r/created_python_library_for_time_series/neg7qu5/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Tue, 16 Sep 2025 00:22:55 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</link><title>I made a vs code extension that insults you if you copy  paste AI generated code</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</guid><comments>https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>-on an important note: this project was just for fun, I&#39;m not against using AI to help your coding sessions-</p><p>What my project does:It&#39;s a vs code extension that gives random insults such as &quot;Do you ask GPT what to eat for dinner as well?&quot; to the user if it detects AI generated content. It uses a pretrained transformer-based model for inference (roberta-base-openai-detector), that returns the probability of human and AI writing the given section of text. It was pretty fun to play around with, although not accurate (the model was trained on GPT-2, and not optimized for code, so accuracy is bum), but it was my first time mixing languages together to create something. (In this case typescript and python) It&#39;s interesting how extensions like these are set up, I think it&#39;s valuable for anyone to do pet projects like these.</p><p>Target audience: noone really, just a funny pet project, due to the inaccuracy I wouldn&#39;t recommend it for actual usage (it&#39;s a bit difficult to create something more accurate, these kind of open-source models were trained on texts, not code) </p><p>Comparison: To my knowledge there hasn&#39;t been a vs code extension like this before, but there are several much more accurate detectors available online. </p><p>If anyone wants to check it out, or contribute, please feel free to reach out.</p><p><a href="https://github.com/Tbence132545/Ai-copypaste-insult">https://github.com/Tbence132545/Ai-copypaste-insult</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Useless, and very funny. Good job!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nee5y0o/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>If it&#39;s not stealing my crypto, then I&#39;m not installing.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nee9wpt/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Just building for fun, love it</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nehfh5x/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is crazy</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nee1koi/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>lol using ai to catch people using ai</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/neev89c/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Insults you if you copy &amp; paste... Does it punch you in the face if you use Copilot? D:</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nee8hzw/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Does it work?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhtowu/i_made_a_vs_code_extension_that_insults_you_if/nee6eu5/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Mon, 15 Sep 2025 23:50:56 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhn589/i_built_authtuna_a_modern_asyncfirst_security/</link><title>I built AuthTuna, a modern, async-first security framework for FastAPI with hierarchical permissions</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhn589/i_built_authtuna_a_modern_asyncfirst_security/</guid><comments>https://www.reddit.com/r/Python/comments/1nhn589/i_built_authtuna_a_modern_asyncfirst_security/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nhn589/i_built_authtuna_a_modern_asyncfirst_security/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone,</p><p>I built an async security library for FastAPI called AuthTuna to solve some problems I was facing with existing tools.</p><h1>What My Project Does</h1><p>AuthTuna is an async-first security library for FastAPI. It&#39;s not just a set of helpers; it&#39;s a complete foundation for authentication, authorization, and session management. Out of the box, it gives you:</p><ul><li><strong>Fully async</strong> operations built on SQLAlchemy 2.0.</li><li><strong>Hierarchical RBAC</strong> for complex, nested permissions (e.g., <code>Organization -&gt; Project -&gt; Resource</code>), which goes beyond simple roles.</li><li><strong>Secure, server-side sessions</strong> with built-in hijack detection.</li><li>A familiar developer experience using standard FastAPI <code>Depends</code> and Pydantic models.</li></ul><h1>Target Audience</h1><p>This is built for Python developers using FastAPI to create <strong>production-grade applications</strong>. It&#39;s specifically useful for projects that need more complex, granular authorization logic, like multi-tenant SaaS platforms, internal dashboards, or any app where users have different levels of access to specific resources. It is not a toy project and is running in our own production environment.</p><h1>Comparison</h1><p>I built this because I needed a specific combination of features that I couldn&#39;t find together in other libraries.</p><ul><li><strong>vs. FastAPI&#39;s built-in tools:</strong> The built-in security utilities are great low-level primitives. AuthTuna is a higher-level, &quot;batteries-included&quot; framework. You get pre-built user flows, session management, and a full permission system instead of having to build them yourself on top of the primitives.</li><li><strong>vs. FastAPI-Users:</strong> FastAPI-Users is an excellent, popular library. AuthTuna differs mainly in its focus on <strong>hierarchical permissions</strong> and its <strong>session model</strong>. If you need to model complex, multi-level access rules (not just &quot;admin&quot; or &quot;user&quot;) and prefer the security model of stateful, server-side sessions over stateless JWTs, then AuthTuna is a better fit.</li></ul><p>The code is up on GitHub, and feedback is welcome.</p><p><strong>GitHub:</strong> <a href="https://github.com/shashstormer/authtuna"><code>https://github.com/shashstormer/authtuna</code></a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>Hey everyone, just a quick update.</p><p>To help build more trust and confidence in the library, I&#39;ve spent today focused on increasing the test coverage.</p><p>Happy to share that the project is now at <strong>83% coverage</strong>, up from 56% yesterday.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhn589/i_built_authtuna_a_modern_asyncfirst_security/nejzm6u/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Mon, 15 Sep 2025 19:49:20 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</link><title>3 months in Python, I made my first proper 2D game</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</guid><comments>https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p><strong>What My Project Does:</strong><br/>I’ve been messing with Python for about three months, mostly tutorials and dumb exercises. Finally tried making an actual game, and this is what came out.</p><p>It’s called <a href="https://github.com/ah4ddd/Hate-Core">Hate-Core</a>. You play as a knight fighting dragons in 2D. There’s sprites, music, keyboard and touch controls, and a high-score system. Basically my attempt at a Dark Souls-ish vibe, but, you know… beginner style. Built it with <strong>Pygame</strong>, did the movement, attacks, scoring, and slapped in some sprites and backgrounds.</p><p><strong>Target Audience:</strong><br/>Honestly? Just me learn-ing Python. Not production-ready, just a toy to practice, see what works, and maybe have some fun.</p><p><strong>Comparison:</strong><br/>Way beyond boring number guessing, dice rolls, or quizzes you see from beginners. It’s an actual 2D game, with visuals, music, and some “combat” mechanics. Dark Souls-ish but tiny, broken, and beginner-coded.</p><p>I’d love <strong>honest feedback</strong>, tips, ideas or anything. I know it’s rough as hell.</p><p>Check it out here: <a href="https://github.com/ah4ddd/Hate-Core">https://github.com/ah4ddd/Hate-Core</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Honest feedback: it&#39;s clear you&#39;re relying on AI pretty heavily.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/ned4jtc/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>may i ask what course did you use to learn to make your game? im also learning pygame but i feel i know too little</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/neb63jv/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>the whole codebase is AI generated. if your goal is learning id probably stay away from directly copy pasting as you have done but rather discuss problems with the ai, and implement the solution using your own keyboard.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/newfkgx/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Good job! I was also thinking about creating a game with Pygame, but it’s almost impossible to make a really good one. Even building a simple game in Pygame is already very hard.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/nebp50p/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>One small piece of advice would be to remove the spaces from your asset filenames. Spaces in filenames may work in Windows, but will not work in other environments.</p><p>You could maybe also centralize access to assets, kind of like config. Maybe a class that returns the relevant path? You don’t even need to initialize it. </p><p><code>class Assets:    DRAGON = “assets/…”</code></p><p>And then you can use <code>Assets.DRAGON</code>. You could do this dynamically as well with a dictionary that’s built at runtime.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhfhcs/3_months_in_python_i_made_my_first_proper_2d_game/nejxjv8/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Mon, 15 Sep 2025 13:04:37 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</link><title>I made a terminal-based game that uses LLMs -- Among LLMs: You are the Impostor</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</guid><comments>https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I made this game in Python (that uses <strong>Ollama</strong> and local <code>gpt-oss:20b</code> / <code>gpt-oss:120b</code> models) that runs directly inside your terminal. TL;DR <strong>above</strong> the example.</p><blockquote><p>Among LLMs turns your <strong>terminal</strong> into a chaotic chatroom playground where <strong>you’re the only human</strong> <strong>among a bunch of eccentric AI agents</strong>, dropped into a common <em>scenario</em> -- it could be Fantasy, Sci-Fi, Thriller, Crime, or something completely unexpected. Each participant, including you, has a <em>persona</em> and a <em>backstory</em>, and all the AI agents share one common goal -- determine and eliminate the human, through <em>voting</em>. <strong>Your mission: stay hidden, manipulate conversations, and turn the bots against each other with edits, whispers, impersonations, and clever gaslighting</strong>. Outlast everyone, turn chaos to your advantage, and make it to the final two.</p><p>Can you survive the hunt and <em>outsmart</em> the AI ?</p></blockquote><p>Quick Demo: <a href="https://youtu.be/kbNe9WUQe14">https://youtu.be/kbNe9WUQe14</a></p><p>Github: <a href="https://github.com/0xd3ba/among-llms">https://github.com/0xd3ba/among-llms</a> (refer to <code>develop</code> branch for latest updates)</p><p>(<strong>Edit:</strong> Join the <a href="https://www.reddit.com/r/Among_LLMs/">subreddit for Among LLMs</a> if you have any bug reports, issues, feature-requests, suggestions or want to showcase your hilarious moments)</p><ul><li><strong>What my project does:</strong> Uses local Ollama gpt-oss models uniquely in a game setting; Built completely as a terminal-UI based project.</li><li><strong>Target Audience:</strong> Anyone who loves drama and making AI fight each other</li><li><strong>Comparision:</strong> No such project exists yet.</li></ul><h1>Example of a Chatroom (after export)</h1><p>You can <strong>save chatrooms as JSON</strong> and <strong>resume</strong> where you left off later on. <strong>Similarly you can load other&#39;s saved JSON as well</strong>! What&#39;s more, when you save a chatroom, it also exports the chat as a text file. Following is an example of a chatroom I recently had.</p><p><strong>Note(s):</strong></p><ul><li>Might be lengthy, but you&#39;ll get the idea of how these bots behave (lol)</li><li>All agents have personas and backstories, which are not visible in the exported chat</li></ul><p><strong>Example:</strong> <a href="https://pastebin.com/ud7mYmH4">https://pastebin.com/ud7mYmH4</a></p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Fun use of LLMs.  Way better than the trivial wrappers or screen scrapers that have been posted here recently. Also nice to see that the post itself isn’t copied from LLM output nor littered with emojis.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/neavdqu/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Love this! I’ve been working on a similar project, to have these models play social deduction games &amp; stream it on Twitch: <a href="https://www.socialdeduction.ai/">https://www.socialdeduction.ai/</a></p><p>It’s been really fun to watch, here’s some vods:<a href="https://www.twitch.tv/videos/2564854711">https://www.twitch.tv/videos/2564854711</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/nedc2ex/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This might be zhe use of llms i have heard of all month! Didn&#39;t have time to test it yet, but will certainly try to do so!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/nebrckp/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Okay, I&#39;m normally fairly anti-AI, but this is actually pretty cool!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/nebmp7x/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Good idea man I will try this out on smaller models like 1b</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/nebyhwa/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This looks very interesting!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/neghrq6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This the future of game development!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nhdt04/i_made_a_terminalbased_game_that_uses_llms_among/nec9tou/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Mon, 15 Sep 2025 11:20:48 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</link><title>I was terrible at studying so I made a Chrome extension that forces you to learn programming.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</guid><comments>https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>tldr; I made a free, open-source Chrome extension that helps you study by showing you flashcards while you browse the web. Its algorithm uses spaced repetition and semantic analysis to target your weaknesses and help you learn faster. It started as an SAT tool, but I&#39;ve expanded it for everything, and I have custom flashcard deck suggestions for you guys to learn programming syntax and complex CS topics.</p><p>Hi everyone,</p><p>So, I&#39;m not great at studying, or any good lol. Like when the SATs were coming up in high school, all my friends were getting 1500s, and I was just not, like I couldn&#39;t keep up, and I hated that I couldn&#39;t just sit down and study like them. The only thing I did all day was browse the web and working on coding projects that i would never finish in the first place.</p><p>So, one day, whilst working on a project and contemplating how bad of a person I was for not studying, I decided why not use my only skill, coding, to force me to study.</p><p>At first I wanted to make like a locker that would prevent my from accessing apps until I answered a question, but I only ever open a few apps a day, but what I did do was load hundreds of websites a da, and that&#39;s how the idea flashysurf was born. I didn&#39;t even have a real computer at the time, my laptop broke, so I built the first version as a userscript on my old iPad with a cheap Bluetooth mouse. It basically works like this, it&#39;s a Chrome extension that just randomly pops up with a flashcard every now and then while you&#39;re on YouTube, watching Anime, GitHub, or wherever. You answer it, and you slowly build knowledge without even trying.</p><p>It&#39;s completely free and open source (<a href="https://github.com/MaxDevv/FlashySurf">GitHub link here</a>), and I got a little obsessed with the algorithm  (I&#39;ve been working on this for like 5-6 months now lol). It&#39;s not just random. It uses a combination of psycological techniques to make learning as efficient as possible:</p><ul><li>Dumb Weakness Targeting: Really simple, everytime you get a question wrong, its stored in a list and then later on these quesitons are priorotized that way you work on your weaknesses.</li><li>Intelligent Weakness Targeting: This was one of the biggest updates I made. For my SAT version, I implemented a semantic clustering system that groups questions by topic. So for example, if you get a question about arithmentic wrong, it knows to show you more questions that are semantically similar. Meaning it actively tarkedts your weak areas. The question selection is split 50% new questions, 35% questions similar to ones you&#39;ve failed, and 15% direct review of failed questions.</li><li>Forced Note-Taking: This is in my opinion the most important feature in flashysurf for learning. Basically, if you get a question wrong, you have to write a short note on why you messed up and what you should&#39;ve done instead, before you can close the card. It forces you to actually assess your mistakes and learn from them, instead of just clicking past them.</li></ul><p>At first, it was just for the SAT, and the results were actually really impressive. I personally got my score up 100 points, which is like going from the top 8% to the top 3% (considered a really big improvement), and a lot of my friends and other online users saw 60-100 point increases. So it proved the concept worked, especially for lazy people like me who want to learn without the effort of a formal study session.</p><p>After seeing it work so well, I pushed an update, FlashySurf v2.0, so that anyone can study LITERALLY ANYTHING without having to try. You can create and import your own flashcard decks for any subject.</p><p>The only/biggest caveat about flashysurf is that you need to use it for a bit of time to see results like I used it for 2 months to see that 100 point increase (technically that was an outdated version with far less optimizations, so it should take less time) so you can&#39;t just use it for a test you have tmrw (unless you set it to be like 100% which would mean that a flashcard would appear on every single website).</p><p>It has a few more features that I couldn&#39;t mention here: AI flashcard generation from documents; 30 minute breaks to focus; stats on flashcard collections; and for the SAT, performance reports. (Also if ur wondering why i&#39;m using semicolons, I actually learnt that from studying the SAT using flashysurf lol)</p><p>And for you guys in <a href="https://www.reddit.com/r/python">r/python</a>, I thought this would be perfect for drilling concepts that just need repetition. So, if you go to the flashysurf <a href="https://flashysurf.com/creator">flashcard creator</a> you can actually use the AI flashcard import/maker tool to convert any documents (i.e. programming problems/exercises you have) or your own flashcard decks into flashysurf flashcards. So you can work on complex programming topics like Big O notation, dynamic programming, and graph theory algorithms. Note: You will obviously need the extension to use the cards lol but when you install the extension, you&#39;ll recieve <a href="https://flashysurf.com/onboarding">instructions</a> on creating and importing flashcards, so you don&#39;t gotta memorize any of this.</p><p>You can download it from the Chrome Web Store, link in the website: <a href="https://flashysurf.com/?utm_source=rpst&amp;utm_campaign=rpython">https://flashysurf.com/</a></p><p>I&#39;m still actively working on it (just pushed a bugfix yesterday lol), so I&#39;d love to hear any feedback or ideas you have. Hope it helps you learn something new while you&#39;re procrastinating on your actual work.</p><p>Thanks for reading :D</p><p>Complicance thingy</p><h1>What My Project Does</h1><p>FlashySurf is a free, open-source Chrome extension that helps users learn and study by showing them flashcards as they browse the web. It uses a spaced repetition algorithm with semantic analysis to identify and target a user&#39;s weaknesses. The extension also has features like a &quot;Forced Note-Taking&quot; system to ensure users learn from their mistakes, and it allows for custom flashcard decks so it can be used for any subject.</p><h1>Target Audience</h1><p>FlashySurf is intended for anyone who wants to learn or study new information without the effort of a formal study session. It is particularly useful for students, professionals, or hobbyists who spend a lot of time on the web and want to use that time more productively. It&#39;s a production-ready project that&#39;s been in development for over six months, with a focus on being a long-term learning tool.</p><h1>Comparison</h1><p>While there are other flashcard and spaced repetition tools, FlashySurf stands out by integrating learning directly into a user&#39;s everyday browsing habits. Unlike traditional apps like Anki, which require dedicated study sessions, FlashySurf brings the flashcards to you. Its unique combination of a spaced repetition algorithm with a semantic clustering system means it not only reinforces what you&#39;ve learned but actively focuses on related topics where you are weakest. This approach is designed to help &quot;lazy&quot; learners like me who struggle with traditional study methods.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>This sounds legit. I love the concept! If I get around to using it then I&#39;ll definitely let you know how it goes!</p><p>I&#39;m just as bad at implementing as I am at studying 🤣 #adhdftw</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/ne99adl/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is actually a brilliant idea — turning procrastination time into learning time.<br/>The forced note-taking part is especially clever, it makes sure mistakes actually stick as lessons.<br/>Keep polishing the UX and sharing real user stories, that’ll help FlashySurf stand out beyond just being “another flashcard tool.”</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/nebouxf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is very interesting, would you be able to port this to Firefox?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/nec1yt6/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>High five! This is a great idea and you took the time to polish the tool, write up all the docs, and publish to GitHub.  I’m old (as a person) but new (to coding) and this post inspired me to get off my butt today and work on a version 2.0 of a recent project.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/nec4o12/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Cool stuff!!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/nee6rnf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Great project, this is very useful, you are a genius</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/neutnfl/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is a dope idea... good stuff</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nh3rlv/i_was_terrible_at_studying_so_i_made_a_chrome/ne9a7ol/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Mon, 15 Sep 2025 03:10:42 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/</link><title>Another free Python 3 book - Files and Directories</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/</guid><comments>https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>If you are interested, you can click the top link on my landing page and download my eBook, &quot;Working with Files and Directories in Python 3&quot; for free: <a href="https://tr.ee/MFl4Mmyu1B">https://tr.ee/MFl4Mmyu1B</a></p><p>I recently gave away a Beginner&#39;s Python Book and that went really well</p><p>So I hope this 26 page pdf will be useful for someone interested in working with Files and Directories  in Python. Since it is sometimes difficult to copy/paste from a pdf, I&#39;ve added a .docx and .md version as well. The link will download all 3 as a zip file. No donations will be requested. Only info needed is a name and email address to get the download link.  It doesn&#39;t matter to me if you put a fake name.  Enjoy.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I&#39;ve had reports that the link is not working (OP).  Has anyone successfully downloaded the book with the provided link?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/ne7thpy/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Works for me</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/ne8azxv/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Would be nice if it worked</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/ne8nqmj/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Respect for your work and for helping the community (but the link doesn&#39;t work). Can you please check it out? Thank you and keep up the good work! Cheers</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngy2ha/another_free_python_3_book_files_and_directories/ne7m1n0/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sun, 14 Sep 2025 23:27:43 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/</link><title>Sunday Daily Thread: What's everyone working on this week?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/</guid><comments>https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><h1>Weekly Thread: What&#39;s Everyone Working On This Week? 🛠️</h1><p>Hello <a href="https://www.reddit.com/r/Python">/r/Python</a>! It&#39;s time to share what you&#39;ve been working on! Whether it&#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&#39;re up to!</p><h2>How it Works:</h2><ol><li><strong>Show &amp; Tell</strong>: Share your current projects, completed works, or future ideas.</li><li><strong>Discuss</strong>: Get feedback, find collaborators, or just chat about your project.</li><li><strong>Inspire</strong>: Your project might inspire someone else, just as you might get inspired here.</li></ol><h2>Guidelines:</h2><ul><li>Feel free to include as many details as you&#39;d like. Code snippets, screenshots, and links are all welcome.</li><li>Whether it&#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.</li></ul><h2>Example Shares:</h2><ol><li><strong>Machine Learning Model</strong>: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!</li><li><strong>Web Scraping</strong>: Built a script to scrape and analyze news articles. It&#39;s helped me understand media bias better.</li><li><strong>Automation</strong>: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!</li></ol><p>Let&#39;s build and grow together! Share your journey and learn from others. Happy coding! 🌟</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>I&#39;ve read the Cosmic Python book recently and decided to work on a Django version of their example project, applying the patterns from it, while comparing to Django best practices. The result can be found here: <a href="https://brunodantas.github.io/blog/2025/09/12/cosmic-django/">https://brunodantas.github.io/blog/2025/09/12/cosmic-django/</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/ne33tjf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p><strong>Hey everyone!</strong>  </p><p>This week I’ve been working on <a href="https://github.com/daemonic01/Glyph.Flow"><strong>Glyph.Flow</strong></a>, which is a minimalist workflow, task and project manager that runs entirely in the terminal, built with Python + Textual. I&#39;m interested in software development as a hobby, so it seemed like a good idea for a little learning project, but I&#39;m feeling more and more committed to it.</p><p>My main focus recently hasn’t even been about adding more features, but rather about learning how I actually <em>work</em> on side projects:</p><ul><li>I realized motivation is a bigger challenge for me. It&#39;s easy to move forward while the initial excitement is still a thing, but keeping steady progress when there’s no external feedback is tough.</li><li>I built out some core systems (command registry, undo/redo with diffing, autosave triggers), which taught me a lot about designing cleaner architecture. But I&#39;m still a long way from being able to build such features easily.</li><li>Fun side note: I almost ended up with a test command that would’ve caused an infinite loop. I liked the absurdity of it, so I kept a little guard in there. 😅</li></ul><p><strong>What’s next:</strong> I&#39;m currently working on bringing a real UI experience to the app, making the export/import commands more flexible and improving how themes/config switching works at runtime.</p><p>If anyone here has experience with <strong>Textual</strong> or building terminal-first productivity apps, I’d love to hear how you approached things like dynamic UI updates and other things like command auto-fill/auto-correction.</p><p>Also, if you’re curious, the repo’s here: <a href="https://github.com/daemonic01/Glyph.Flow">Glyph.Flow</a>. Any feedback or suggestions are really welcome! 🚀</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/ne3amkf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Hey everyone,</p><p>Over the past few months I’ve been building a Python package called <code>numethods</code> — a small but growing collection of <strong>classic numerical algorithms implemented 100% from scratch</strong>. No NumPy, no SciPy, just plain Python floats and list-of-lists.</p><p>The idea is to make algorithms transparent and educational, so you can actually <em>see</em> how LU decomposition, power iteration, or RK4 are implemented under the hood. This is especially useful for students, self-learners, or anyone who wants a deeper feel for how numerical methods work beyond calling library functions.</p><p><a href="https://github.com/denizd1/numethods">https://github.com/denizd1/numethods</a></p><h1>🔧 What’s included so far</h1><ul><li><strong>Linear system solvers</strong>: LU (with pivoting), Gauss–Jordan, Jacobi, Gauss–Seidel, Cholesky</li><li><strong>Root-finding</strong>: Bisection, Fixed-Point Iteration, Secant, Newton’s method</li><li><strong>Interpolation</strong>: Newton divided differences, Lagrange form</li><li><strong>Quadrature (integration)</strong>: Trapezoidal rule, Simpson’s rule, Gauss–Legendre (2- and 3-point)</li><li><strong>Orthogonalization &amp; least squares</strong>: Gram–Schmidt, Householder QR, LS solver</li><li><strong>Eigenvalue methods</strong>: Power iteration, Inverse iteration, Rayleigh quotient iteration, QR iteration</li><li><strong>SVD</strong> (via eigen-decomposition of ATAA^T AATA)</li><li><strong>ODE solvers</strong>: Euler, Heun, RK2, RK4, Backward Euler, Trapezoidal, Adams–Bashforth, Adams–Moulton, Predictor–Corrector, Adaptive RK45</li></ul><h1>✅ Why this might be useful</h1><ul><li>Great for <strong>teaching/learning</strong> numerical methods step by step.</li><li>Good reference for people writing their own solvers in C/Fortran/Julia.</li><li>Lightweight, no dependencies.</li><li>Consistent object-oriented API (<code>.solve()</code>, <code>.integrate()</code> etc).</li></ul><h1>🚀 What’s next</h1><ul><li>PDE solvers (heat, wave, Poisson with finite differences)</li><li>More optimization methods (conjugate gradient, quasi-Newton)</li><li>Spectral methods and advanced quadrature</li></ul><p>👉 If you’re learning numerical analysis, want to peek under the hood, or just like playing with algorithms, I’d love for you to check it out and give feedback.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/ne45tm9/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p><strong>Good morning everyone!!</strong></p><p>I&#39;m still studying computer engineering, and I love software development. In my free time I decided to work on this simple tool that allows you to download YouTube Playlist to a local folder and update them if necessary. The script maintains the YouTube Playlist order using a state file (json) and numbers your files in the folder.</p><p>You can choose the extension and the quality for the download, and start multiple downloads by simply putting all the URLs.</p><p>You can see it on my repo here: <a href="https://github.com/VitoCammarata/YTManager">https://github.com/VitoCammarata/YTManager</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/nebe63z/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Made a ticket machine out of an old receipt printer, raspberry pi zero 2 w, 3 key keyboard, buzzer and an i2c OLED display. It uses Planka as a kanban board with an API and self hosted. You push the first button and it prints and moves a ticket from Todo to doing. Then a second button moves it from doing to doing. Third button moves the ticket back to Todo. Python holds it all together. Velcro holds it together a bit more.</p><p><a href="https://youtu.be/Vpm1Y3gxo6Q?si=NKT-7FDGfItTlH9u">Video of it on action</a></p><p><a href="https://github.com/Centurix/Decrastinator">Repo</a></p><p>Made it because I could. </p><p>Thanks!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/nebtzme/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><h1>Competitor/Lookalike API called apistemic markets</h1><p>I&#39;m building an API that provides competitors and lookalikes for any given company. It&#39;s based on a machine learning model I trained myself. The API is built with FastAPI.</p><p>To make it even easier to use the competitor data, I built a python CLI last week that allows you to download competitors/lookalikes for any company in CSV, Parquet, and other formats. There&#39;s a free tier with 100 requests if you want to try out.</p><p>Python CLI: <a href="https://github.com/apistemic/markets-examples">https://github.com/apistemic/markets-examples</a><br/>API (built with FastAPI): <a href="https://competitor-api.apistemic.com/docs">https://competitor-api.apistemic.com/docs</a><br/>Product Homepage: <a href="https://markets.apistemic.com">https://markets.apistemic.com</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/necakkl/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Breaking projects into smaller, manageable tasks with clear deadlines helps maintain momentum. Use progress tracking to celebrate wins and identify bottlenecks early. How do you typically structure your projects?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ngcnn7/sunday_daily_thread_whats_everyone_working_on/nf174gz/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sun, 14 Sep 2025 05:30:35 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/</link><title>midi-visualiser: A real-time MIDI player and visualiser.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/</guid><comments>https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hi all, I recently revisited an old project I created to visualise MIDI music (using a piano roll) and after some tidying up and fixes I&#39;ve now uploaded it to <a href="https://pypi.org/project/midi-visualiser/">PyPI</a>! The program allows single MIDI files or playlists of MIDI files to be loaded and visualised through a command-line tool.</p><p>It&#39;s fairly simple, using Pygame to display the visualiser window and provide playback control, but I&#39;m pretty proud of how it looks and the audio-syncing logic (which uses Mido to interpret MIDI events). More details on how to use it are available in the <a href="https://github.com/benjaminrall/midi-visualiser">project repository</a>.</p><p>This is the first project I&#39;ve used <a href="https://docs.astral.sh/uv/">uv</a> for, and I absolutely love it - check it out if you haven&#39;t already. Also, any suggestions/comments about the project would be greatly appreciated as I&#39;m very new to uploading to PyPI!</p><p>To summarise;- <strong>What My Project Does</strong>: Plays MIDI files and visualises them using a scrolling piano roll- <strong>Target Audience</strong>: Mainly just a toy project, but could be used by anyone who wants a simple &amp; quick way to view any MIDI file!- <strong>Comparison</strong>: I can&#39;t find any alternatives that have this same functionality (at least not made in Python) - it obviously can&#39;t compete with mega fancy MIDI visualisers, but a strong point is how straight forward the project is, working immediately from the command-line without needing any configuration.</p><p>Edit: Thanks to a comment, I&#39;ve discovered an issue that means this only works on Windows - will look into fixing this, sorry!</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>It&#39;s not real-time.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/ne4dfq8/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Is it like a foss version of Synthesia? Awesome!</p><p>Edit: Anyway i tried your app but couldn&#39;t make it start because of the following error</p><p><code>ALSA lib conf.c:4555:(snd_config_update_r) Cannot access file /usr/local/share/alsa/alsa.conf</code><br/><code>ALSA lib seq.c:935:(snd_seq_open_noupdate) Unknown SEQ default</code><br/><code>An unexpected error occurred: no default port found</code></p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng9en6/midivisualiser_a_realtime_midi_player_and/ne6w0mn/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sun, 14 Sep 2025 03:04:14 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ng2h8x/splittermr_a_modular_library_for_splitting/</link><title>SplitterMR: a modular library for splitting  parsing documents</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ng2h8x/splittermr_a_modular_library_for_splitting/</guid><comments>https://www.reddit.com/r/Python/comments/1ng2h8x/splittermr_a_modular_library_for_splitting/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1ng2h8x/splittermr_a_modular_library_for_splitting/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey guys, I just released <strong>SplitterMR</strong>, a library I built because none of the existing tools quite did what I wanted for slicing up documents cleanly for LLMs / downstream processing.</p><p>If you often work with <strong>mixed document types</strong> (PDFs, Word, Excel, Markdown, images, etc.) and <strong>need flexible, reliable splitting/parsing</strong>, this might be useful.</p><p>This library supports <strong>multiple input formats</strong>, e.g., text, Markdown, PDF, Word / Excel / PowerPoint, HTML / XML, JSON / YAML, CSV / TSV, and even images.</p><p>Files can be read using <strong>MarkItDown</strong> or <strong>Docling</strong>, so this is perfect if you are using those frameworks with your current applications.</p><p>Logically, it supports <strong>many different splitting strategies</strong>: not only based on the number of characters but on tokens, schema keys, semantic similarity, and many other techniques. You can even develop your own splitter using the Base object, and it is the same for the Readers!</p><p>In addition, <strong>you can process the graphical resources of your documents (e.g., photos) using VLMs</strong> (OpenAI, Gemini, HuggingFace, etc.), so you can extract the text or caption them!</p><h1>What’s new / what’s good in the latest release</h1><ul><li>Stable Version <strong>1.0.0</strong> is out.</li><li>Supports <strong>more input formats / more robust readers</strong>.</li><li><strong>Stable API</strong> for the Reader abstractions so you can plug in your own if needed.</li><li><strong>Better handling of edge cases</strong> (e.g. images, schema’d JSON / XML) so you don’t lose structure unintentionally.</li></ul><h1>Some trade-offs / limitations (so you don’t run into surprises)</h1><ul><li><strong>Heavy dependencies</strong>: because it supports all these formats you’ll pull in a bunch of libs (PDF, Word, image parsing, etc.). If you only care about plain text, many of those won’t matter, but still.</li><li><strong>Not a fully “LLM prompt manager” or embedding chunker out of the box</strong> — splitting + parsing is its job; downstream you’ll still need to decide chunk sizes, context windows, etc.</li></ul><h1>Installation and usage</h1><p>If you want to test:</p><pre><code>uv add splitter-mr</code></pre><p>Example usage:</p><pre><code>from splitter_mr.reader import VanillaReaderfrom splitter_mr.model.models import AzureOpenAIVisionModelmodel = AzureOpenAIVisionModel()reader = VanillaReader(model=model)output = reader.read(file_path=&quot;data/sample_pdf.pdf&quot;)print(output.text)</code></pre><p><strong>Check out the docs for more examples, API details, and instructions on how to write your own Reader for special formats:</strong>  </p><ul><li>👉 <a href="https://github.com/andreshere00/Splitter_MR">Github</a></li><li>👉 <a href="https://andreshere00.github.io/Splitter_MR/">Documentation server</a></li><li>👉 <a href="https://pypi.org/project/splitter-mr/1.0.1/">PyPi package</a></li><li>👉 <a href="https://www.linkedin.com/in/andres-herencia">LinkedIn (to contact with me)</a></li></ul><p>If you want to collaborate or you have some suggestions, don&#39;t dubt to contact me.</p><p><strong>Thank you so much for reading :)</strong></p></div><!-- SC_ON --></section>]]></description><pubDate>Sat, 13 Sep 2025 22:22:42 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</link><title>The best object notation?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</guid><comments>https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I want your advice regarding the best object notation to use for a python project. If you had the choice to receive data with a specific object notation, what would it be? YAML or JSON? Or another object notation?</p><p>YAML looks, to me, to be in agreement with a more pythonic way, because it is simple, faster and easier to understand. On the other hand, JSON has a similar structure to the python dictionary and the native python parser is very much faster than the YAML parser.</p><p>Any preferences or experiences?</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><blockquote><p>YAML looks, to me, to be in agreement with a more pythonic way, because it is simple, faster and easier to understand</p></blockquote><p>Huh? YAML (as per spec) is famously complex and absolute bonkers to parse correctly [and it can cause real security issues that you should be aware of when using YAML]. It&#39;s also (more or less) a superset of JSON so it&#39;s certainly not the simpler of the two.</p><p>That said: it very much depends on what you need and want to do. If I just want &quot;some structured data&quot; that a human might have to interact with: TOML, and it&#39;s not even close. YAML may come in when I need &quot;power&quot; (though at that point I&#39;d heavily consider just foregoing the &quot;config&quot; language in favour of a programming language). And JSON when I may need to process the data with every crummy language under the sun (and can get by without needing integers...)</p><p>EDIT: maybe two projects that are worth mentioning here: <a href="https://github.com/crdoconnor/strictyaml">strictyaml</a> and <a href="https://json5.org/">JSON5</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0lmp3/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Just FYI, the term you want is probably &quot;serialization&quot; not &quot;notation.&quot;</p><p>Having the standard terminology might make searching a bit easier. </p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0rqnq/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>A lot of people here are sharing their experience of JSON and YAML as a configuration format. Fewer folks here have used YAML as a data format. I&#39;d ignore those advice especially those suggesting TOML (an amazing config format, a horrible data format).</p><p>In Javascript, the purpose of JSON is a file format that can represent every data type in JS. Since Python dictionary is not the same as JavaScript Object, JSON cannot fully represent a Python dictionary. The Python json module only provides mapping between JSON and SOME native Python types (e.g., string, int, list, dict) and a few key ones are missing (e.g., tuple, enum, set). More importantly, JSON cannot fully represent custom Python data types (e.g., Class objects, C objects like numpy, etc.), while it can for Javascript.</p><p>For that you need a tool that helps you with deserialization to the types not covered. The most popular tool is Pydantic for serialization between JSON and data types written as Pydantic models.</p><p>The other option is YAML. There is a reason why YAML spec is 100x bigger than JSON, it&#39;s because it can support marking a data intended to be mapped to a specific data type in your language (i.e., YAML tag), this is called extensible data types.</p><p>There is a very unpopular option in Python that has done this for decades, XML (X means extensible)</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne2mx87/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>YAML is for people, JSON is for machines. </p><p>YAML has some unfortunate inconsistencies that JSON doesn&#39;t have.. specifically around boolean truthiness and falsiness with unquoted strings, but it&#39;s manageable iMO.</p><p>I truly wish YAML had explicitly defined a single way to signal boolean values.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0h2kj/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Json for machines, toml for configuration.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0k3mx/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Use json unless you have a very strong reason not to. yaml or toml is only preferred for configuration i.e. when you&#39;ll have humans editing the data. If you&#39;re going to generate it, go with json.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0ht9z/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Love to use yaml, just wish it was part of standard lib. I’ve also never loved any yaml parsing libraries. Still more preferable to json for a majority of my stuff; it’s really easy to define flexible logic.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1ng10wr/the_best_object_notation/ne0jvz7/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 13 Sep 2025 21:24:47 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</link><title>MathFlow: an easy-to-use math library for python</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</guid><comments>https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Project Site: <a href="https://github.com/cybergeek1943/MathFlow">https://github.com/cybergeek1943/MathFlow</a></p><p>In the process of doing research for my paper <a href="https://doi.org/10.48550/arXiv.2508.14095">Combinatorial and Gaussian Foundations of Rational Nth Root Approximations</a> (on arXiv), I created this library to address the pain points I felt when using only SymPy and SciPy separately. I wanted something lightweight, easy to use (exploratory), and something that would support numerical methods more easily. Hence, I created this lightweight wrapper that provides a hybrid symbolic-numerical interface to symbolic and numerical backends. It is backward compatible with Sympy. In short, this enables much faster analysis of symbolic math expressions by providing both numerical and traditional symbolic methods of analysis in the same interface. I have also added additional numerical methods that neither SymPy nor SciPy have (Pade approximations, numerical roots, etc.). The main goal for this project is to provide a tool that requires as little of a learning curve as possible and allows them to just focus on the math they are doing.</p><h1>Core features</h1><ul><li><strong>🔒 Operative Closure</strong>: Mathematical operations return new Expression objects by default</li><li><strong>⚡ Mutability Control</strong>: Choose between immutable (default) and mutable expressions for different workflows</li><li><strong>🔗 Seamless Numerical Integration</strong>: Every symbolic expression has a <code>.n</code> attribute providing numerical methods without manual lambdification (uses cached lambdified expression when needed)</li><li><strong>🎨 Enhanced Printing</strong>: Flexible output formatting through the <code>.print</code> attribute (LaTeX, pretty printing, code generation)</li><li><strong>📡 Signal System</strong>: Qt-like signals for tracking expression mutations and clones, enabling reactive programming</li><li><strong>🔄 Automatic Type Conversions</strong>: Seamlessly and automatically converts between internal Poly and Expr representations based on context</li><li><strong>📦 Lightweight</strong>: ~0.5 MB itself, ~100 MB including dependencies</li><li><strong>🧩 Fully backward compatible</strong>: Seamlessly integrate SymPy and MathFlow in the same script. All methods that work on SymPy Expr or Poly objects work on MathFlow objects</li><li><strong>🔍 Exploratory</strong>: Full IDE support, enabling easy tool finding and minimizing the learning curve.</li></ul><p>A few examples are shown below. Many more examples can be found in the README of the official GitHub site.</p><h1>Quick Start</h1><p>Install using: <code>pip install mathflow</code></p><pre><code>from mathflow import Expression, Polynomial, Rational# Create expressions naturallyf = Expression(&quot;2x^2 + 3x + \frac{1}{2}&quot;)  # latex is automatically parsedg = Expression(&quot;sin(x) + cos(x)&quot;)# Automatic operative closure - operations return new objects of the same typeh = f + g  # f and g remain unchangedhprime = h.diff()  # hprime is still an Expression object# Numerical evaluation made easyresult = f(2.5)  # Numerically evaluate at x = 2.5# Use the .n attribute to access fast numerical methodsnumerical_roots = f.n.all_roots()# Call f&#39;s n-prefixed methods to use variable precision numerical methodsprecise_roots = f.nsolve_all(prec=50)  # 50 digits of accuracy# quick and easy printingf.print()f.print(&#39;latex&#39;)  # LaTeX outputf.print(&#39;mathematica_code&#39;)f.print(&#39;ccode&#39;)  # c code output</code></pre><h1>Numerical Computing</h1><p>MathFlow excels at bridging symbolic and numerical mathematics:</p><pre><code>f = Expression(&quot;x^3 - 2x^2 + x - 1&quot;)# Root findingall_roots = f.n.all_roots(bounds=(-5, 5))specific_root = f.nsolve_all(bounds=(-5, 5), prec=50)  # High-precision solve# Numerical calculusderivative_func = f.n.derivative_lambda(df_order=2)  # 2nd derivative numerical function  integral_result = f.n.integrate(-1, 1)               # Definite integral  # Optimizationminimum = f.n.minimize(bounds=[(-2, 2)])</code></pre><h1>Edit:</h1><p>This project was developed and used primarily for a research project, so a thorough test suite has not yet been developed. The project is still in development, and the current release is an alpha version. I have tried to minimize danger here, however, by designing it as a proxy to the already well-tested SymPy and SciPy libraries.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>this looks fascinating, I&#39;m especially interested in that latex interface. very clever.</p><p>EDIT: poking under the hood, this was clearly AIGC. That&#39;s not necessarily a problem, but given the sophistication of the space you&#39;re working in, I strongly encourage you to flesh out a more robust test suite to validate that everything works the way you expect it to. Be sure to test the math. You can integrate tests into your CI/CD so every proposed change gets validated.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne0i1tf/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Maybe not the most important, but the Padé approx part looks great and I think I will incorporate that into my codes in the future. Thanks</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne09j1f/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Can you explain these core features a little more?  I&#39;m not sure I understand what reactive programming is.</p><p>&quot;Qt-like signals for tracking expression mutations and clones, enabling reactive programming&quot;</p><p>&quot;Full IDE support, enabling easy tool finding and minimizing the learning curve.&quot;</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne1dq6s/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I thought I was in <a href="https://www.reddit.com/r/grssk">r/grssk</a> for a moment...</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne0w7vs/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Looks interesting. Is this something you think would make sense to include into Sympy?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne6eyn3/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This looks cool. I tried doing some z transform stuff in SymPy in the past and soon found out that SciPy.signal was a better tool for them. My needs would be much more basic than yours, but something that bridges the gap between the two libraries is really handy, I need to try this.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne1oiqw/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Very cool. It would be cool if expressions were lazy and could be collected (like Polars expressions/LazyFrames) when you want to evaluate them numerically. That way the symbolic and numerical expressions could share the same interface.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfyq8o/mathflow_an_easytouse_math_library_for_python/ne2ccvq/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 13 Sep 2025 19:51:43 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nfvo8y/announcing_iceoryx2_v07_fast_and_robust/</link><title>Announcing iceoryx2 v0.7: Fast and Robust Inter-Process Communication (IPC) Library</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nfvo8y/announcing_iceoryx2_v07_fast_and_robust/</guid><comments>https://www.reddit.com/r/Python/comments/1nfvo8y/announcing_iceoryx2_v07_fast_and_robust/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nfvo8y/announcing_iceoryx2_v07_fast_and_robust/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hello hello,</p><p>I am one of the maintainers of the open-source zero-copy middleware iceoryx2, and we’ve just released iceoryx2 v0.7 which comes with Python language bindings. That means you can now use fast zero-copy communication directly in Python. Here is the full release blog: <a href="https://ekxide.io/blog/iceoryx2-0-7-release/">https://ekxide.io/blog/iceoryx2-0-7-release/</a></p><p>With iceoryx2 you can communicate between different processes, send data with publish-subscribe, build more complex request-response streams, or orchestrate processes using the event messaging pattern with notifiers and listeners.</p><p>We’ve prepared a set of Python examples here: <a href="https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/python">https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples/python</a></p><p>On top of that, we invested some time into writing a detailed getting started guide in the iceoryx2 book: <a href="https://ekxide.github.io/iceoryx2-book/main/getting-started/quickstart.html">https://ekxide.github.io/iceoryx2-book/main/getting-started/quickstart.html</a></p><p>And one more thing: iceoryx2 lets Python talk directly to C, C++ and Rust processes - without any serialization or binding overhead. Check out the cross-language publish-subscribe example to see it in action: <a href="https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples">https://github.com/eclipse-iceoryx/iceoryx2/tree/main/examples</a></p><p>So in short:</p><ul><li><strong>What My Project Does:</strong> Zero-Copy Inter-Process Communication</li><li><strong>Target Audience:</strong> Developers building distributed systems, plugin-based applications, or safety-critical and certifiable systems</li><li><strong>Comparision:</strong> Provides a high-level, service-oriented abstraction over low-level shared memory system calls</li></ul></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comment</p><ol><li><div class="md"><p>Is it possible to use iceoryx2 to make two applications communicate between each other on a k8s cluster? Meaning, they may not be sharing the same cluster node.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfvo8y/announcing_iceoryx2_v07_fast_and_robust/ndzwsbk/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 13 Sep 2025 17:29:15 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</link><title>Flowfile - An open-source visual ETL tool, now with a Pydantic-based node designer.</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</guid><comments>https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey <a href="https://www.reddit.com/r/Python">r/Python</a>,</p><p>I built Flowfile, an open-source tool for creating data pipelines both visually and in code. Here&#39;s the latest feature: Custom Node Designer.</p><h1>What My Project Does</h1><p>Flowfile creates bidirectional conversion between visual ETL workflows and Python code. You can build pipelines visually and export to Python, or write Python and visualize it. The Custom Node Designer lets you define new visual nodes using Python classes with Pydantic for settings and Polars for data processing.</p><h1>Target Audience</h1><p>Production-ready tool for data engineers who work with ETL pipelines. Also useful for prototyping and teams that need both visual and code representations of their workflows.</p><h1>Comparison</h1><ul><li><strong>Alteryx</strong>: Proprietary, expensive. Flowfile is open-source.</li><li><strong>Apache NiFi</strong>: Java-based, requires infrastructure. Flowfile is pip-installable Python.</li><li><strong>Prefect/Dagster</strong>: Orchestration-focused. Flowfile focuses on visual pipeline building.</li></ul><h1>Custom Node Example</h1><pre><code>import polars as plfrom flowfile_core.flowfile.node_designer import (    CustomNodeBase, NodeSettings, Section,    ColumnSelector, MultiSelect, Types)class TextCleanerSettings(NodeSettings):    cleaning_options: Section = Section(        title=&quot;Cleaning Options&quot;,        text_column=ColumnSelector(label=&quot;Column to Clean&quot;, data_types=Types.String),        operations=MultiSelect(            label=&quot;Cleaning Operations&quot;,            options=[&quot;lowercase&quot;, &quot;remove_punctuation&quot;, &quot;trim&quot;],            default=[&quot;lowercase&quot;, &quot;trim&quot;]        )    )class TextCleanerNode(CustomNodeBase):    node_name: str = &quot;Text Cleaner&quot;    settings_schema: TextCleanerSettings = TextCleanerSettings()    def process(self, input_df: pl.LazyFrame) -&gt; pl.LazyFrame:        text_col = self.settings_schema.cleaning_options.text_column.value        operations = self.settings_schema.cleaning_options.operations.value        expr = pl.col(text_col)        if &quot;lowercase&quot; in operations:            expr = expr.str.to_lowercase()        if &quot;trim&quot; in operations:            expr = expr.str.strip_chars()        return input_df.with_columns(expr.alias(f&quot;{text_col}_cleaned&quot;))</code></pre><p>Save in <code>~/.flowfile/user_defined_nodes/</code> and it appears in the visual editor.</p><h1>Why This Matters</h1><p>You can wrap complex tasks—API connections, custom validations, niche library functions—into simple drag-and-drop blocks. Build your own high-level tool palette right inside the app. It&#39;s all built on Polars for speed and completely open-source.</p><h1>Installation</h1><p><code>pip install Flowfile</code></p><h1>Links</h1><ul><li>GitHub: <a href="https://github.com/Edwardvaneechoud/Flowfile/">https://github.com/Edwardvaneechoud/Flowfile/</a></li><li>Custom Nodes Documentation: <a href="https://edwardvaneechoud.github.io/Flowfile/for-developers/creating-custom-nodes.html">https://edwardvaneechoud.github.io/Flowfile/for-developers/creating-custom-nodes.html</a></li><li>Previous discussions: <a href="https://www.reddit.com/r/SideProject/comments/1mp0hor/i_built_a_tool_that_turns_python_data_pipelines/">SideProject post</a>, <a href="https://www.reddit.com/r/Python/comments/1kp0er9/flowframe_python_code_that_generates_visual_etl/">FlowFrame post</a></li></ul></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Who is your target audience? </p><p>I think most data engineers will prefer to work in code or, if they&#39;re fancy, use Airflow to make their pipeline into DAGs. </p><p>Similarly I can&#39;t imagine a low code user using this much, the majority of folks I interact with are intimidated by many data operations in python, Excel, or otherwise.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/ndx04fg/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This is pretty cool! What would you say the primary benefits to this over NiFi are? Java is not inherently a bad thing, and the latest version of NiFi supports custom processors written in Python. </p></div><p><a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/ne17b0c/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Really like how you’re tackling the “visual ↔ code” problem. We’ve worked with teams trying to standardize ETL workflows across junior + senior engineers, and this hits right at that pain point.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/neelao2/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>What do you use for the node editor GUI?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/ndyeis8/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Luigi being reborn? 😀</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nff4dw/flowfile_an_opensource_visual_etl_tool_now_with_a/ne4j1p2/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 13 Sep 2025 02:45:28 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/</link><title>Learning machine learning</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/</guid><comments>https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Is this an appropriate question here? I was wondering if anyone could suggest any resources to learn machine learning relatively quickly. By quickly I mean get a general understanding and be able to talk about it. Then I can spend time actually learning it. I’m a beginner in Python. Thanks!</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>You can check out the scikit-learn MOOC. It&#39;s free and covers the bases pretty well. </p><p><a href="https://www.fun-mooc.fr/en/courses/machine-learning-python-scikit-learn/">https://www.fun-mooc.fr/en/courses/machine-learning-python-scikit-learn/</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ndvnfl7/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>YouTube crash courses (StatQuest, 3Blue1Brown for intuition), then playing with scikit-learn on Kaggle datasets. Even running a logistic regression on Titanic survivors gave me enough to <em>sound like I knew what I was doing</em> in conversations.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ndvwzsc/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Maybe the fast.ai book</p><p><a href="https://www.fast.ai/">https://www.fast.ai/</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ne1y9tj/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Follow the pytorch tutorials.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ne6ew49/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Kaggle</p><p><a href="https://www.kaggle.com/learn">https://www.kaggle.com/learn</a></p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ndvsy3c/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Landing here too.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nfdlmq/learning_machine_learning/ndy9xbp/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Sat, 13 Sep 2025 01:45:48 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</link><title>Update: Should I give away my app to my employer for free?</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</guid><comments>https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Link to original post - <a href="https://www.reddit.com/r/Python/s/UMQsQi8lAX">https://www.reddit.com/r/Python/s/UMQsQi8lAX</a></p><p>Hi, since my post gained a lot of attention the other day and I had a lot of messages, questions on the thread etc. I thought I would give an update. </p><p>I didn’t make it clear in my previous post but I developed this app in my own time, but using company resources. </p><p>I spoke to a friend in the HR team and he explained a similar scenario happened a few years ago, someone built an automation tool for outlook, which managed a mailbox receiving 500+ emails a day (dealing/contract notes) and he simply worked on a fund pricing team and only needed to view a few of those emails a day but realised the mailbox was a mess. He took the idea to senior management and presented the cost saving and benefits. Once it was deployed he was offered shares in the company and then a cash bonus once a year of realised savings was achieved. </p><p>I’ve been advised by my HR friend to approach senior management with my proposal, explain that I’ve already spoken to my manager and detail the cost savings I can make, ask for a salary increase to provide ongoing support and develop my code further and ask for similar terms to that of the person who did this previously. He has confirmed what I’ve done doesn’t go against any HR policies or my contract. </p><p>Meeting is booked for next week and I’ve had 2 messages from senior management saying how excited they are to see my idea :) </p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>That sounds great, good luck!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtqxzu/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Perhaps just mention that you built the tool in your own time and omit mentioning the company resources used. Focus on their benefits at a reasonable cost.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtvk70/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This:  &quot;but using company resources&quot; is really the key phrase here.   If you used company resources, they own this app.  If it were built on your own resources, that&#39;d be a different story.   So be honest.</p><p>What I&#39;m saying is, be careful how to present the ownership of this thing.  You did write it, but does belong to the company.   It would not be a good look for you if they think you did this outside of work using your own resources, they go to buy the thing, and they later find out you used company resources to do it.  That would not end well.</p><p>Having said this, presenting it as extra work you&#39;ve done above and beyond would be what I would do.  If you have good management, they&#39;ll do the right thing.  If you don&#39;t....well, they&#39;ll take it and expect more. </p><p>Good luck!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtxasu/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>I hope it goes well for you. If mgmt has a good sense they reward this kind of thing.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtr763/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><blockquote><p>using company resources</p></blockquote><p>Congrats, it&#39;s their app now, regardless of what you decide. They might throw you a bone and marginally increase your salary &quot;in exchange for the app/support,&quot; but in most jurisdictions I believe they can just take it without additional compensation if they want it, especially if you used their resources to develop it. It seems like they might have a history of rewarding this, but don&#39;t misunderstand your negotiating position.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtyx2y/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Man, what a great way for everyone involved to deal with this. If only all employer-employee relationships were like this.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndtun1a/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Good for you. Where I work, anything done at company with company property on company time is their property.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nf57hb/update_should_i_give_away_my_app_to_my_employer/ndu5eaw/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 12 Sep 2025 20:17:00 +0530</pubDate></item><item><link>https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</link><title>I built a from-scratch Python package for classic Numerical Methods (no NumPy/SciPy required!)</title><guid isPermaLink="true">https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</guid><comments>https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey everyone,</p><p>Over the past few months I’ve been building a Python package called <code>numethods</code> — a small but growing collection of <strong>classic numerical algorithms implemented 100% from scratch</strong>. No NumPy, no SciPy, just plain Python floats and list-of-lists.</p><p>The idea is to make algorithms transparent and educational, so you can actually <em>see</em> how LU decomposition, power iteration, or RK4 are implemented under the hood. This is especially useful for students, self-learners, or anyone who wants a deeper feel for how numerical methods work beyond calling library functions.</p><p><a href="https://github.com/denizd1/numethods">https://github.com/denizd1/numethods</a></p><h1>🔧 What’s included so far</h1><ul><li><strong>Linear system solvers</strong>: LU (with pivoting), Gauss–Jordan, Jacobi, Gauss–Seidel, Cholesky</li><li><strong>Root-finding</strong>: Bisection, Fixed-Point Iteration, Secant, Newton’s method</li><li><strong>Interpolation</strong>: Newton divided differences, Lagrange form</li><li><strong>Quadrature (integration)</strong>: Trapezoidal rule, Simpson’s rule, Gauss–Legendre (2- and 3-point)</li><li><strong>Orthogonalization &amp; least squares</strong>: Gram–Schmidt, Householder QR, LS solver</li><li><strong>Eigenvalue methods</strong>: Power iteration, Inverse iteration, Rayleigh quotient iteration, QR iteration</li><li><strong>SVD</strong> (via eigen-decomposition of ATAA^T AATA)</li><li><strong>ODE solvers</strong>: Euler, Heun, RK2, RK4, Backward Euler, Trapezoidal, Adams–Bashforth, Adams–Moulton, Predictor–Corrector, Adaptive RK45</li></ul><h1>✅ Why this might be useful</h1><ul><li>Great for <strong>teaching/learning</strong> numerical methods step by step.</li><li>Good reference for people writing their own solvers in C/Fortran/Julia.</li><li>Lightweight, no dependencies.</li><li>Consistent object-oriented API (<code>.solve()</code>, <code>.integrate()</code> etc).</li></ul><h1>🚀 What’s next</h1><ul><li>PDE solvers (heat, wave, Poisson with finite differences)</li><li>More optimization methods (conjugate gradient, quasi-Newton)</li><li>Spectral methods and advanced quadrature</li></ul><p>👉 If you’re learning numerical analysis, want to peek under the hood, or just like playing with algorithms, I’d love for you to check it out and give feedback.</p></div><!-- SC_ON --></section><section class='separator separator-before-comments'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='comments'><p>Top comments</p><ol><li><div class="md"><p>Sometimes you learn more by reinventing wheels. Looks like you&#39;re enjoying yourself!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ndt2c8d/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Seems a great learning tool, do you use to give lectures or similar?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ndst7cc/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This would be a great library for learning different testing techniques.</p><p>Firstly it needs tests, but it would also be amenable to understanding fuzzing, coverage, and mutation testing, as well as others I&#39;m sure.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ndvg291/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>That&#39;s really cool and easy to read. </p><p>As a student decades ago, I often wished for programmatic definitions of the math when the math was unclear to me. Because if you can make a computer understand and actually run it, then it has to be perfectly clear, and then you can understand. So I think this is very useful for learning. </p><p>The speed is completely irrelevant for learning; what&#39;s important is the clarity.</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ne146cr/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>This seems very practical. Nice job, man! You really worked hard!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ndsny80/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>is it fast?</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/ndvhl19/'><small>Comment permalink</small></a></p><p>&nbsp;</p></li><li><div class="md"><p>Good job man!</p></div><p><a href='https://www.reddit.com/r/Python/comments/1nexoe8/i_built_a_fromscratch_python_package_for_classic/negzzsp/'><small>Comment permalink</small></a></p></li></ol></section>]]></description><pubDate>Fri, 12 Sep 2025 13:57:44 +0530</pubDate></item></channel></rss>
