<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=programming&amp;averagePostsPerDay=5&amp;content&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/programming</title><description>Hot posts in /r/programming (roughly 5 posts per day)</description><link>https://www.reddit.com/r/programming/</link><language>en-us</language><lastBuildDate>Mon, 08 Sep 2025 01:09:00 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>https://styles.redditmedia.com/t5_2fwo/styles/communityIcon_1bqa1ibfp8q11.png</url><title>/r/programming</title><link>https://www.reddit.com/r/programming/</link></image><item><link>https://krispy-the-goat.itch.io/prey-2006</link><title>Prey 2006 project to create open-source FPS game port by integrating its codebase with Doom 3 GPL release (krispy-the-goat.itch.io)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</guid><comments>https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/'>Post permalink</a></p></section><section class='preview-image'><img src='https://img.itch.zone/aW1nLzE4NzcxNzQ2LnBuZw==/original/fp8nmE.png' /></section><section class='parsed-content'><div><h4>Introduction</h4><p>This project is a code integration of the Prey 2006 SDK against the Doom 3 GPL codebase. This means this includes new engine side features that were in the Prey 2006 engine, and some adjustments to the Prey 2006 SDK code.</p><p>This runs in a semi vanilla&nbsp;<a href="https://github.com/dhewm/dhewm3/releases/tag/1.5.4">Dhewm3 v1.5.4</a> fork that specifically removes imgui, soft particles and joystick support for the time being.</p><h4>How To Run</h4><p>You <strong>MUST&nbsp;</strong>source your own legal copy of Prey (2006) to run this, i wouldn't provide any links for this.</p><h5>Why Release in a premature state?</h5><p>I'm releasing this build <strong><em>as-is with limit or lack thereof support</em></strong>, in hopes of attracting people that loves about this game and its, and since my lack of knowledge limits severely.</p><p>The source code of this project would be linked at the end of this but to summarize the current issues of this here are:</p><ol><li>Death Walk a key feature of Prey is missing meaning that in some parts you need to do noclip.</li><li>Spirit Walk visual are broken (in parts where spirit walking is mandatory noclip may or may not be needed)<br> </li><li>Multiplayer may work but has not been tested.<br> </li></ol> <h4>Credits</h4><p>This fork wouldn't be possible by the 3 previous attempts of porting Prey before me:</p><ul><li><a href="https://github.com/jmarshall23/PreyDoom">PreyDoom - By jmarshall23</a></li><li><a href="https://github.com/neitey/PreyVR">PreyVR - By neitey</a><br> </li><li><a href="https://github.com/glKarin/com.n0n3m4.diii4a">com.n0n3m4.diii4a - By GLKarin</a></li><li><a href="https://github.com/dhewm/dhewm3">dhewm3 - By dhew</a></li></ul> <h4>Conclusion</h4><p>Has i state before, here is the link for the&nbsp;&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006">Source Code</a>&nbsp;of this project, and here is the link for reporting&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006/issues">Issues</a> but like i say before support may or may not be limited.<span></span><br></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 21:35:18 +0530</pubDate></item><item><link>https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time</link><title>Stop writing CLI validation. Parse it right the first time. (hackers.pub)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</guid><comments>https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 16 min | <a href='https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/'>Post permalink</a></p></section><section class='preview-image'><img src='https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time/ogimage?l=en' /></section><section class='parsed-content'><div><p>I have this bad habit. When something annoys me enough times, I end up building a library for it. This time, it was CLI validation code.</p><p>See, I spend a lot of time reading other people's code. Open source projects, work stuff, random GitHub repos I stumble upon at 2 AM. And I kept noticing this thing: every CLI tool has the same ugly validation code tucked away somewhere. You know the kind:</p><pre><code><span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server flag</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span><span> // default port</span></span> <span><span>}</span></span> <span><span>// wait, what if they pass --port without a value?</span></span> <span><span>// what if the port is out of range?</span></span> <span><span>// what if...</span></span></code></pre><p>It's not even that this code is hard to write. It's that it's <em>everywhere</em>. Every project. Every CLI tool. The same patterns, slightly different flavors. Options that depend on other options. Flags that can't be used together. Arguments that only make sense in certain modes.</p><p>And here's what really got me: we solved this problem years ago for other types of data. Just&hellip; not for CLIs.</p><h2>The problem with validation <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--the-problem-with-validation"></a></h2><p>There's this blog post that completely changed how I think about parsing. It's called <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"><em>Parse, don't validate</em></a> by Alexis King. The gist? Don't parse data into a loose type and then check if it's valid. Parse it directly into a type that can only be valid.</p><p>Think about it. When you get JSON from an API, you don't just parse it as <code>any</code> and then write a bunch of <code>if</code>-statements. You use something like <a href="https://zod.dev/">Zod</a> to parse it directly into the shape you want. Invalid data? The parser rejects it. Done.</p><p>But with CLIs? We parse arguments into some bag of properties and then spend the next 100 lines checking if that bag makes sense. It's backwards.</p><p>So yeah, I built <a href="https://optique.dev/">Optique</a>. Not because the world desperately needed another CLI parser (it didn't), but because I was tired of seeing&mdash;and writing&mdash;the same validation code everywhere.</p><h2>Three patterns I was sick of validating <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--three-patterns-i-was-sick-of-validating"></a></h2> <h3>Dependent options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--dependent-options"></a></h3><p>This one's everywhere. You have an option that only makes sense when another option is enabled.</p><p>The old way? Parse everything, then check:</p><pre><code><span><span>const </span><span>opts</span><span> =</span><span> parseArgs</span><span>(</span><span>process</span><span>.</span><span>argv</span><span>);</span></span> <span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span></span> <span><span>}</span></span> <span><span>// More validation probably lurking elsewhere...</span></span></code></pre><p>With Optique, you just describe what you want:</p><pre><code><span><span>const </span><span>config</span><span> =</span><span> withDefault</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> server</span><span>: </span><span>flag</span><span>(</span><span>"</span><span>--server</span><span>"</span><span>),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>()),</span></span> <span><span> workers</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--workers</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> }),</span></span> <span><span> { </span><span>server</span><span>: </span><span>false</span><span> }</span></span> <span><span>);</span></span></code></pre><p>Here's what TypeScript infers for <code>config</code>'s type:</p><pre><code><span><span>type</span><span> Config</span><span> =</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>false</span><span> }</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>true</span><span>;</span><span> readonly</span><span> port</span><span>: </span><span>number</span><span>;</span><span> readonly</span><span> workers</span><span>: </span><span>number</span><span> }</span></span></code></pre><p>The type system now understands that when <code>server</code> is false, <code>port</code> literally doesn't exist. Not <code>undefined</code>, not <code>null</code>&mdash;it's not there. Try to access it and TypeScript yells at you. No runtime validation needed.</p><h3>Mutually exclusive options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--mutually-exclusive-options"></a></h3><p>Another classic. Pick one output format: JSON, YAML, or XML. But definitely not two.</p><p>I used to write this mess:</p><pre><code><span><span>if</span><span> ((</span><span>opts</span><span>.</span><span>json</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>yaml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>xml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> &gt;</span><span> 1</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>'</span><span>Choose only one output format</span><span>'</span><span>);</span></span> <span><span>}</span></span></code></pre><p>(Don't judge me, you've written something similar.)</p><p>Now?</p><pre><code><span><span>const </span><span>format</span><span> =</span><span> or</span><span>(</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--json</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>json</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--yaml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>yaml</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--xml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>xml</span><span>"</span><span> as</span><span> const</span><span>)</span></span> <span><span>);</span></span></code></pre><p>The <code>or()</code> combinator means exactly one succeeds. The result is just <code>"json" | "yaml" | "xml"</code>. A single string. Not three booleans to juggle.</p><h3>Environment-specific requirements <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--environment-specific-requirements"></a></h3><p>Production needs auth. Development needs debug flags. Docker needs different options than local. You know the drill.</p><p>Instead of a validation maze, you just describe each environment:</p><pre><code><span><span>const </span><span>envConfig</span><span> =</span><span> or</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>prod</span><span>"</span><span>),</span></span> <span><span> auth</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--auth</span><span>"</span><span>, </span><span>string</span><span>()), </span><span>// Required in prod</span></span> <span><span> ssl</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--ssl</span><span>"</span><span>),</span></span> <span><span> monitoring</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--monitoring</span><span>"</span><span>, </span><span>url</span><span>())</span></span> <span><span> }),</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>dev</span><span>"</span><span>),</span></span> <span><span> debug</span><span>: </span><span>optional</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--debug</span><span>"</span><span>)), </span><span>// Optional in dev</span></span> <span><span> verbose</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--verbose</span><span>"</span><span>)</span></span> <span><span> })</span></span> <span><span>);</span></span></code></pre><p>No auth in production? Parser fails immediately. Trying to access <code>--auth</code> in dev mode? TypeScript won't let you&mdash;the field doesn't exist on that type.</p><h2>&ldquo;But parser combinators though&hellip;&rdquo; <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--but-parser-combinators-though"></a></h2><p>I know, I know. &ldquo;Parser combinators&rdquo; sounds like something you'd need a CS degree to understand.</p><p>Here's the thing: I don't have a CS degree. Actually, I don't have any degree. But I've been using parser combinators for years because they're actually&hellip; not that hard? It's just that the name makes them sound way scarier than they are.</p><p>I'd been using them for other stuff&mdash;parsing config files, DSLs, whatever. But somehow it never clicked that you could use them for CLI parsing until I saw Haskell's <a href="https://github.com/pcapriotti/optparse-applicative">optparse-applicative</a>. That was a real &ldquo;wait, of course&rdquo; moment. Like, why are we doing this any other way?</p><p>Turns out it's stupidly simple. A parser is just a function. Combinators are just functions that take parsers and return new parsers. That's it.</p><pre><code><span><span>// This is a parser</span></span> <span><span>const </span><span>port</span><span> =</span><span> option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>,</span><span> integer</span><span>());</span></span> <span><span>// This is also a parser (made from smaller parsers)</span></span> <span><span>const </span><span>server</span><span> =</span><span> object</span><span>({</span></span> <span><span> port</span><span>: </span><span>port</span><span>,</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>())</span></span> <span><span>});</span></span> <span><span>// Still a parser (parsers all the way down)</span></span> <span><span>const </span><span>config</span><span> =</span><span> or</span><span>(</span><span>server</span><span>,</span><span> client</span><span>);</span></span></code></pre><p>No monads. No category theory. Just functions. Boring, beautiful functions.</p><h2>TypeScript does the heavy lifting <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--typescript-does-the-heavy-lifting"></a></h2><p>Here's the thing that still feels like cheating: I don't write types for my CLI configs anymore. TypeScript just&hellip; figures it out.</p><pre><code><span><span>const </span><span>cli</span><span> =</span><span> or</span><span>(</span></span> <span><span> command</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>),</span></span> <span><span> environment</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> replicas</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--replicas</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> })),</span></span> <span><span> command</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>),</span></span> <span><span> version</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> force</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--force</span><span>"</span><span>)</span></span> <span><span> }))</span></span> <span><span>);</span></span> <span><span>// TypeScript infers this type automatically:</span></span> <span><span>type</span><span> Cli</span><span> =</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>deploy</span><span>"</span></span> <span><span> readonly</span><span> environment</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> replicas</span><span>: </span><span>number</span></span> <span><span> }</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>rollback</span><span>"</span></span> <span><span> readonly</span><span> version</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> force</span><span>: </span><span>boolean</span></span> <span><span> }</span></span></code></pre><p>TypeScript knows that if <code>action</code> is <code>"deploy"</code>, then <code>environment</code> exists but <code>version</code> doesn't. It knows <code>replicas</code> is a <code>number</code>. It knows <code>force</code> is a <code>boolean</code>. I didn't tell it any of this.</p><p>This isn't just about nice autocomplete (though yeah, the autocomplete is great). It's about catching bugs before they happen. Forget to handle a new option somewhere? Code won't compile.</p><h2>What actually changed for me <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--what-actually-changed-for-me"></a></h2><p>I've been dogfooding this for a few weeks. Some real talk:</p><p><strong>I delete code now.</strong> Not refactor. Delete. That validation logic that used to be 30% of my CLI code? Gone. It feels weird every time.</p><p><strong>Refactoring isn't scary.</strong> Want to know something that usually terrifies me? Changing how a CLI takes its arguments. Like going from <code>--input file.txt</code> to just <code>file.txt</code> as a positional argument. With traditional parsers, you're hunting down validation logic everywhere. With this? You change the parser definition, TypeScript immediately shows you every place that breaks, you fix them, done. What used to be an hour of &ldquo;did I catch everything?&rdquo; is now &ldquo;fix the red squiggles and move on.&rdquo;</p><p><strong>My CLIs got fancier.</strong> When adding complex option relationships doesn't mean writing complex validation, you just&hellip; add them. Mutually exclusive groups? Sure. Context-dependent options? Why not. The parser handles it.</p><p>The reusability is real too:</p><pre><code><span><span>const </span><span>networkOptions</span><span> =</span><span> object</span><span>({</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>()),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span>});</span></span> <span><span>// Reuse everywhere, compose differently</span></span> <span><span>const </span><span>devServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> debugOptions</span><span>);</span></span> <span><span>const </span><span>prodServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> authOptions</span><span>);</span></span> <span><span>const </span><span>testServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> mockOptions</span><span>);</span></span></code></pre><p>But honestly? The biggest change is trust. If it compiles, the CLI logic works. Not &ldquo;probably works&rdquo; or &ldquo;works unless someone passes weird arguments.&rdquo; It just works.</p><h2>Should you care? <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--should-you-care"></a></h2><p>If you're writing a 10-line script that takes one argument, you don't need this. <code>process.argv[2]</code> and call it a day.</p><p>But if you've ever:</p><ul> <li>Had validation logic get out of sync with your actual options</li> <li>Discovered in production that certain option combinations explode</li> <li>Spent an afternoon tracking down why <code>--verbose</code> breaks when used with <code>--json</code></li> <li>Written the same &ldquo;option A requires option B&rdquo; check for the fifth time</li> </ul><p>Then yeah, maybe you're tired of this stuff too.</p><p>Fair warning: Optique is young. I'm still figuring things out, the API might shift a bit. But the core idea&mdash;parse, don't validate&mdash;that's solid. And I haven't written validation code in months.</p><p>Still feels weird. Good weird.</p><h2>Try it or don't <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--try-it-or-dont"></a></h2><p>If this resonates:</p><ul> <li><a href="https://optique.dev/tutorial"><em>Tutorial</em></a>: Build something real, see if you hate it</li> <li><em>Concepts</em>: <a href="https://optique.dev/concepts/primitives">Primitives</a>, <a href="https://optique.dev/concepts/constructs">constructs</a>, <a href="https://optique.dev/concepts/modifiers">modifiers</a>, <a href="https://optique.dev/concepts/valueparsers">value parsers</a>, the whole thing</li> <li><a href="https://github.com/dahlia/optique"><em>GitHub</em></a>: The code, issues, angry rants</li> </ul><p>I'm not saying Optique is the answer to all CLI problems. I'm just saying I was tired of writing the same validation code everywhere, so I built something that makes it unnecessary.</p><p>Take it or leave it. But that validation code you're about to write? You probably don't need it.</p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 23:49:10 +0530</pubDate></item><item><link>https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html</link><title>Microsoft’s first-ever programming language was just open-sourced (pcworld.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</guid><comments>https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/'>Post permalink</a></p></section><section class='preview-image'><img src='https://www.pcworld.com/wp-content/uploads/2025/09/Commodore-64.jpg?quality=50&strip=all&w=1024' /></section><section class='parsed-content'><div><article><div><div><div><body><p>Did you know that, between 1976 and 1978, Microsoft developed its own version of the BASIC programming language? It was initially called Altair BASIC before becoming Microsoft BASIC, and it was designed for the 6502 (a microprocessor used in the Apple II, Atari 2600, VIC-20, Commodore 64, and Nintendo Entertainment System).</p><p>As of yesterday, Microsoft has released the version 1.1 source code of &ldquo;Microsoft BASIC for 6502 Microprocessor&rdquo; on <a href="https://go.skimresources.com?id=111346X1569483&amp;xs=1&amp;url=https://github.com/microsoft/BASIC-M6502&amp;xcust=2-1-2898698-1-0-0-0-0&amp;sref=https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html">GitHub</a>, which means you can freely view the assembly code and even download it if you want to.</p><p>Why did Microsoft publish this code? Because it has historical significance and was one of the pillars of modern software:</p><blockquote><p>This source code represents the foundation upon which the modern software industry was built. The techniques, patterns, and business models pioneered in this BASIC interpreter directly influenced:</p><ul> <li>The development of MS-DOS and subsequent Microsoft operating systems</li> <li>The standardization of programming language implementations</li> <li>The establishment of software licensing as a business model</li> <li>The democratization of computer programming</li> </ul> </blockquote><p>Microsoft&rsquo;s version of BASIC was one of the first programming languages that the general public came into contact with, making it an important milestone in computer history. While Microsoft BASIC is no longer used in earnest, its spirit lives on with Visual Basic .NET.</p></body></div><p>This article originally appeared on our sister publication <a href="https://www.pcforalla.se">PC f&ouml;r Alla</a> and was translated and localized from Swedish.</p><div><h3> <a href="https://www.pcworld.com/author/mikael_markander"> Author: Mikael Markander</a>, Contributor, PCWorld </h3><div><p>Mikael writes news across all our consumer tech categories. He has previously worked with Macworld, but today mainly writes for our sister sites PC f&ouml;r Alla and M3. Mikael has a firm grasp on which gadgets are released, and what is happening with the streaming services and the latest AI tools.</p></div></div></div></div></article> </div><div class="gallery"><p><img src="https://www.pcworld.com/wp-content/uploads/2025/09/1380047922-4.jpg?quality=50&amp;strip=all&amp;w=150&amp;h=150&amp;crop=1"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 20:41:56 +0530</pubDate></item><item><link>https://medium.com/@vbilopav/business-rules-in-database-movement-e0167dba19b7</link><title>Business Rules In Database Movement (medium.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</guid><comments>https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>Neither did I.</p><p>So I did some research to create a post, and it turned out to be an entire article that digs into this movement a little bit deeper.</p><p>I hope you like it. It is important to know history.</p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://miro.medium.com/v2/resize:fit:650/1*lZynIQzxJtEgajCU50kQ4Q.png' /></section><section class='parsed-content'><div><figure></figure><blockquote><p><em>Those who cannot remember the past are condemned to repeat it.</em></p></blockquote><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>I certainly didn&rsquo;t. But it did happen in the late 1990s and early 2000s.</p><p>Their core philosophy was as follows:</p><p>- Data belongs to the organization, not the application. Today, we typically refer to the Bounded Context.</p><p>- Rules and constraints should be stored and enforced in the database (or a rules engine), not scattered across individual applications. Today, the Domain Model, of course. But, in essence, just don&rsquo;t repeat yourself. The database is the source of truth, and no point in having to repeat the same logic across different applications, services, and business reports.</p><p>- Rules should be declarative using natural language (not imperative or procedural) to make them easily accessible to a business non-tech audience. Today, we say the Domain Experts, but essentially, the same business people.</p><p>- We should be focused on managing business rules, not hardware/software platforms and technology. Today, we would say implementation details, but in essence, it&rsquo;s the same idea.</p><p>And so on. Does this sound familiar?</p><p>You can read the full manifesto here (PDF link): <a href="https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf">https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf</a></p><p>An even more fascinating story is why it fizzled out and almost completely disappeared.</p><p>According to my research, in the late 90s and early 20s, this movement was hyped, and indeed it was hyped, as confirmed by a stream of conferences, forums, workshops, and thought leaders from that era. Even the research and advisory companies like Gartner promoted the idea under the catchy motto &ldquo;change the rules, not the code&rdquo; and labeled it as &ldquo;hot&rdquo;.</p><p>And then there was a boom of startups building low-code platform tools on this idea, even industry giants like Oracle and IBM tried to incorporate some of these ideas into their own low-code, rule engines. However, the dot-com crash in the early 20s and many startups building BRMS/low-code tools died.</p><p>But much more importantly than the dot-com extinction event was a significant cultural shift in the software development world that occurred shortly thereafter:</p><h2>1) The Agile Movement</h2><p>Developers preferred flexibility and speed over centralized governance. DBAs and architects pushing data-centric models often lost out to agile, app-centric teams.</p><p>In simple terms, development teams from that era had dedicated DBAs, and a dedicated DBA is supposed to implement all those rules in the databases, close to data itself, using declarative SQL:</p><pre><span>ALTER TABLE loans ADD CONSTRAINT CHECK NOT (status = 'approved' AND credit_score &lt; 650);<br>ALTER TABLE users ADD CONSTRAINT UNIQUE(email);<br>ALTER TABLE users ALTER COLUMN email SET NOT NULL;</span></pre><p>That was not agile enough, obviously. Those rules should reside in an RDBMS or BRMS (Business Rules Management System), and you will need a specialized person for that.</p><h2>2) Vendor Lock-In</h2><p>Obviously, such centralization meant locking into proprietary platforms, which usually meant paying large tech companies a significant amount of money for an extended period, as free and open-source alternatives weren&rsquo;t yet viable solutions.</p><h2>3) Perceived Complexity and Technical Limitations</h2><p>A single, centralized solution is perceived as more complex than a decentralized one, which tends to be repetitive and scattered across various services.</p><p>Furthermore, some of the emerging development practices accepted as standard today, such as source control and automated testing, weren&rsquo;t exactly a priority for this new, centralized RDBMS and BRMS world managed by DBAs.</p><p>So what happened then?</p><h2>The Evolution</h2><p>The entire software development process started evolving in a different direction, one that is supposed to give more power to the individual programmer and take it away from those DBAs. Arguably, it was successful since dedicated DBAs have become a rare breed these days, at least from my perspective.</p><p>First, in the 2000s, after the dot-com crash, there was an emergence of alternative philosophies.</p><ul><li>First around in 2003 and onward, Eric Evans&rsquo; Blue Book and DDD.</li><li>And thereafter, in the 2010s and onward, Robert C. Martin and Clean Architecture.</li></ul><p>Both of these philosophies, which are now widely accepted, argue that business rules don&rsquo;t belong to a centralized data and business rules engines like RDBMS and similar &mdash; but rather to the domain model or the architecture core, respectively.</p><p>They argue that RDBMS and similar systems are and should be concerned only with storing and retrieving data, and the decision engine should be moved back to the application.</p><p>This meant reintroducing business rules back into the application layer, as the industry shifted toward 3-tier architectures with business logic in the middle tier, rather than in the database.</p><p>But this also meant that those same rules will inevitably have to be repeated across various applications, services, and reports, which is, of course, suboptimal, to say the least. To address this issue, we saw:</p><ul><li>First, the emergence of Service-Oriented Architecture or SOA in the mid-2000s. The idea was to centralize logic in services where programmers have control.</li><li>And then the emergence of Microservices in the 2010s and onward, with rules scattered across many different specialized services.</li></ul><h2>Where Are We Today</h2><p>Today, RDMBS are here to stay, and any component developer (at least the backend developer) should also be a DBA.</p><p>After 20+ years, perhaps it is time to revisit some of the arguments that led the industry to reject the Business Rules Movement in the late 90s and early 2000s.</p><h2>Vendor Lock In:</h2><p>PostgreSQL is free, open-source, portable, and has a massive ecosystem of support. You&rsquo;re no longer tied to Oracle licenses just to run stored procedures or triggers.</p><h2>Switching Scaling Issues</h2><p>DDD/CA proponents see relying on a database as dangerous: switching DBs or scaling across multiple persistence stores becomes nearly impossible. Scaling relational databases horizontally was <em>hard</em> and proprietary.</p><p>But today, there are also numerous distributed and extremely scalable Postgres-compatible free and open source variants as well, such as Citus, Timescale, etc. Scaling isn&rsquo;t much of a killer anymore. It is challenging, but then again, scaling will always be a challenge.</p><p>And with PostgreSQL and its variants, which offer advanced polyglot capabilities covering well over 90 percent of needs, is there still a need to switch? Portability is much less relevant today.</p><h2>Separation of Concenrs</h2><p>This was a misunderstanding from the beginning; SQL rules are domain semantics, and SQL is not storage code by any means. Postgres doesn&rsquo;t care <em>where</em> it runs; it enforces rules consistently.</p><h2>Testing &amp; Tooling</h2><p>Today, testing DB rules is very straightforward using rollbac-tests, migrations in containers, fixtures, and tools like pgTAP.</p><p>It is a weak spot compared to modern app languages with powerful IDEs, refactoring capabilities, and type systems, but it is very much doable and manageable.</p><p>The real gap is developer culture: fewer devs are fluent in SQL as a <em>primary modeling language</em>.</p><h2>Big Picture</h2><p>The database-centric philosophy is much more defensible in 2025 than it was in 2005. RDMBS and SQL are here to stay, and they are evolving and getting better.</p><p>The main &ldquo;barrier&rdquo; now is cultural: developers are trained to think in code-first terms, not data-first.</p><p>However, we do live in 2025, not in 2005.</p></div><div class="gallery"><p><img src="https://miro.medium.com/v2/resize:fill:64:64/1*bNH44cmtwewRk1TJ8kPLAw.jpeg"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 18:41:54 +0530</pubDate></item><item><link>https://hsu.cy/2025/09/is-ooxml-artificially-complex/</link><title>Is OOXML Artifically Complex? (hsu.cy)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/</guid><comments>https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 19 min | <a href='https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><section><p>A while ago, the official blog of LibreOffice published a provocative <a href="https://blog.documentfoundation.org/blog/2025/07/18/artificially-complex-xml-schema-as-lock-in-tool/">article</a>: &ldquo;An artificially complex XML schema as a lock-in tool.&rdquo; Its target is Microsoft&rsquo;s XML-based file formats &mdash; the Office Open XML (OOXML).</p><p>The article alleges that, although Microsoft put its Office formats through standardization, the spec is engineered to be so complex that it obstructs interoperability with third-party software. Moreover, the complexity is allegedly gratuitous and disconnected from real-world needs; it&rsquo;s like advertising an &ldquo;open&rdquo; railway system while designing the signaling so only one manufacturer can run trains. Users, the argument continues, often accept proprietary technology uncritically, which makes it easy for Microsoft to lock people into its ecosystem.</p><p>A quick refresher: historically, Office used binary formats (<code>.doc</code>, <code>.xls</code>, and <code>.ppt</code>) whose contents weren&rsquo;t human-readable. Starting with Office 2007, Microsoft switched the defaults to <code>.docx</code>, <code>.xlsx</code>, and <code>.pptx</code>, where the &ldquo;x&rdquo; stands for XML. These files are ZIP containers holding a set of XML parts and resources such as images. Both the XML structure and the packaging follow a published spec &mdash; OOXML.</p><p>With Microsoft&rsquo;s backing, OOXML was adopted by international standards bodies, first as <a href="https://ecma-international.org/publications-and-standards/standards/ecma-376/">ECMA-376</a> and later as <a href="https://www.iso.org/standard/71691.html">ISO/IEC 29500</a>. Microsoft also put it under the <a href="https://docs.microsoft.com/en-us/openspecs/dev_center/ms-devcentlp/1c24c7c8-28b0-4ce1-a47d-95fe1ff504bc">Open Specification Promise (OSP)</a>, committing not to assert certain patent claims against compliant implementations.</p><p>On paper, then, anyone can parse, create, and edit OOXML to be compatible with Microsoft Office, which sounds great. But the LibreOffice article calls this premise into question, arguing that OOXML&rsquo;s deliberate complexity turns this supposed openness into a trap, a tool for maintaining a monopoly.</p><p>Let&rsquo;s be honest: few people would describe their experience with Microsoft Office as satisfying, which is part of why this article resonated widely. In my past life doing legal grunt work, battling convoluted Word documents was a daily ritual. I also authored the Word section of an Office tutorial series, where my main approach was to explain Word&rsquo;s quirks by digging into the underlying OOXML format. Thus, I&rsquo;m intimately familiar with what makes Office and OOXML painful.</p><p>Despite this, I disagree with the LibreOffice&rsquo;s framing and conclusion. Aiming for mass appeal, the post is heavy on emotion and accusation but light on factual analysis, missing a solid educational opportunity. (LibreOffice later <a href="https://blog.documentfoundation.org/blog/2025/06/28/a-technical-dive-into-odf/">published</a> a more technical comparison, but it still jumped straight from code snippets to conclusions.)</p><p>In my view, OOXML is indeed complex, convoluted, and obscure. But that&rsquo;s likely less about a plot to block third-party compatibility and more about a self-interested negligence: Microsoft prioritized the convenience of its own implementation and neglected the qualities of clarity, simplicity, and universality that a general-purpose standard should have. Yes, that neglect has anticompetitive effects in practice, but the motive is different from deliberate sabotage and thus warrants a different judgment. (A detailed legal analysis is beyond the scope of this article.)</p><p>In other words, LibreOffice identified the right problem, it may have reached the wrong conclusion. Here&rsquo;s why.</p><h2>OOXML as a Sloppy Standard</h2><p>The LibreOffice article criticizes how &ldquo;a simple sentence such as &lsquo;To be, or not to be, that is the question&rsquo; becomes an inextricable sequence of tags that users cannot access.&rdquo; Let&rsquo;s use this very example to see what happens.</p><p>Create a Word document containing</p><blockquote><p><strong>To be</strong>, or not to be, that is the question.</p></blockquote><p>(with &ldquo;To be&rdquo; in bold), save, and peek at <code>word/document.xml</code> inside the resulting <code>.docx</code>:</p><pre><code><w:p><w:r> <w:rpr> <w:b></w:b> <w:bcs></w:bcs> </w:rpr> <w:t>To be</w:t> </w:r> <w:r> <w:t>, or not to be, that is the question</w:t> </w:r> <w:r> <w:t>.</w:t> </w:r> </w:p></code></pre><p>(line breaks added for readability.)</p><p>Take a breath &mdash; The core structure is a paragraph (<code><w:p></w:p></code>) containing three runs (<code><w:r></w:r></code>). A <em>run</em> is a contiguous span of text sharing the same formatting. In OOXML, every paragraph comprises one or more runs.</p><p>Breaking it further down:</p><ul> <li>The outer <code><w:p></w:p></code> element represents the paragraph. The attributes like <code>w14:paraId</code> and <code>w:rsidR</code> are internal identifiers Word uses for features like collaborative editing and tracking revisions.</li> <li>The first <code><w:r></w:r></code> represents the bolded text <em>To be</em>. It contains a <code><w:rpr></w:rpr></code> (Run Properties) element to define its formatting. Inside, <code><w:b></w:b></code> and <code><w:bcs></w:bcs></code> set the font to bold for Western and complex scripts, respectively (even though there are no complex scripts here). Only after all that does the <code><w:t></w:t></code> element hold the actual text.</li> <li>The second <code><w:r></w:r></code> contains the rest of the text up to the period. Since it uses the default formatting, it lacks a <code><w:rpr></w:rpr></code> element.</li> <li>The third <code><w:r></w:r></code> contains only the final period. There&rsquo;s no formatting difference, and it&rsquo;s split off the prior run simply because I pasted the sentence but typed the period, exactly the kind of &ldquo;surprise&rdquo; OOXML happily encodes.</li> </ul><p>Contrast that with the same content saved as ODF (<code>content.xml</code>):</p><pre><code><text:p><text:span>To be</text:span> , or not to be, that is the question. </text:p></code></pre><p>Even at a glance it&rsquo;s more intelligible. Strip the <code>text:</code> namespaces and it&rsquo;s nearly valid HTML.</p><p>The only thing that needs explaining is that ODF doesn&rsquo;t wrap <em>To be</em> with a dedicated &ldquo;bold&rdquo; tag. Instead, it applies an auto-style named <code>T1</code> to a <code><text:span></text:span></code>, an act of separating content and presentation that mirrors established web practices.</p><p>In short, if you have a basic understanding of the web stack, you can largely make sense of ODF&rsquo;s XML. On the other hand, OOXML, with its abstruse tag names, feels like it requires a PhD to decipher.</p><p>And this is just for simple text formatting. When you get into complex elements like tables and lists &mdash; a shared nightmare for every heavy Word user &mdash; OOXML&rsquo;s complexity only skyrockets. That thousand-page specification isn&rsquo;t just for show.</p><p>Beyond its formal complexity, the quality of OOXML as a standard is also questionable. Contemporary critiques of the submission <a href="https://noooxml.wdfiles.com/local--files/arguments/ODF-vs-OOXML-v1.2.pdf">catalogued</a> technical defects, for example:</p><ul> <li>Canonizing known bugs and compromises from Office (<em>e.g.</em>, maintaining two separate date systems starting in 1900 or 1904, and incorrectly <a href="https://learn.microsoft.com/en-us/troubleshoot/microsoft-365-apps/excel/wrongly-assumes-1900-is-leap-year">&ldquo;treating 1900 as a leap year&rdquo;</a>);</li> <li>Conflicting with established standards for language codes (ISO 639), vector graphics (W3C SVG), and mathematical notation (W3C MathML);</li> <li>Using vaguely defined and inconsistent units of measurement; and</li> <li>Lacking clear and consistent naming conventions for elements and attributes (<em>e.g.</em>, inconsistent ccase rules).</li> </ul><p><a href="https://en.wikipedia.org/wiki/Standardization_of_Office_Open_XML">The process of OOXML becoming an ISO standard</a> was itself highly dramatic. First, Microsoft chose to submit it via the &ldquo;fast track,&rdquo; a path intended for mature, widely implemented, and stable specifications. OOXML in 2006 met none of these criteria: it was new; its only complete implementation was the not-yet-released Office 2007; and nobody could plausibly review thousands of pages on that timetable. Organizations like Google and the Free Software Foundation Europe (FSFE), along with many technical experts, raised objections.</p><p>The voting that followed was among ISO&rsquo;s most contentious: several national bodies abruptly swelled with new members, many Microsoft partners, who then voted in favor. Sweden&rsquo;s initial approval was voided after incentives linked to support came to light.</p><p>In the end, OOXML squeaked through after two rounds, but Brazil, India, South Africa, Venezuela, and others filed formal appeals alleging procedural defects. Although these appeals failed to overturn the result, they underscored the divisive and chaotic nature of the standardization.</p><h2>Why Microsoft&rsquo;s Motive Wasn&rsquo;t Deliberate Sabotage</h2><p>So far, the evidence seems to support LibreOffice&rsquo;s claim: OOXML is a sloppy standard, both technically and procedurally. But facts don&rsquo;t directly prove intent. If we dig into the context of OOXML&rsquo;s creation, it can be argued that harming competitors was not Microsoft&rsquo;s <em>primary</em> aim.</p><p>First, OOXML was, in material part, a defensive posture under intensifying antitrust and &ldquo;open standards&rdquo; pressure. Microsoft <a href="https://news.microsoft.com/2005/11/21/qa-microsoft-co-sponsors-submission-of-office-open-xml-document-formats-to-ecma-international-for-standardization/">announced</a> OOXML in late 2005 while appealing an adverse European Commission <a href="https://en.wikipedia.org/wiki/Microsoft_Corp._v_European_Commission#Judgment">judgment</a> centered on interoperability disclosures. Thus, it was only a matter of time before Office file compatibility came under the regulatory microscope. (The Commission indeed opened a <a href="https://competition-cases.ec.europa.eu/cases/AT.39294">probe</a> in 2008.)</p><p>Meanwhile, the rival ODF matured and became an ISO standard in May 2006. Governments, especially in Europe, began to mandate open standards in public procurement. If Microsoft did nothing, Office risked exclusion from government deals.</p><p>Given that context, the sensible inference about Microsoft&rsquo;s goal is to create a format that it controlled but also carried the &ldquo;international standard&rdquo; seal of approval, which would be both a shield against potential regulation and a weapon against the challenge from ODF. Thus, the primary goal for this new format wasn&rsquo;t to be elegant, universal, or easy to implement; it was to placate regulators while preserving Microsoft&rsquo;s technological and commercial advantages. The easiest, cheapest way to do that, of course, is to package its existing complexity as the new &ldquo;standard.&rdquo;</p><p>To support this, it&rsquo;s worth noting a more fundamental difference between OOXML and ODF. Look again at the XML snippets, but this time, pay attention to where the actual text content appears:</p><pre><code><!-- OOXML --> <w:p><w:r><w:rpr>...</w:rpr><w:t>To be</w:t></w:r><w:r><w:t>, or not to be...</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><!-- ODF --> <text:p><text:span>To be</text:span>, or not to be...</text:p></code></pre><p>In ODF, the text content interleaves with XML tags, just like in HTML, while in OOXML, text is always buried inside <code><w:t></w:t></code> at the leaves, and never appears as a peer of structural elements.</p><p>That reflects two opposed uses of XML:</p><ul> <li>ODF uses XML as markup. Text is first-class; tags annotate spans with structure and styling. This matches XML&rsquo;s <a href="https://en.wikipedia.org/wiki/XML#History">original design goal</a> for information presentation.</li> <li>OOXML uses XML as a serialization format. In other words, OOXML isn&rsquo;t so much describing the document content as it is describing the abstract data structures that the Office application &ldquo;sees.&rdquo; Our example above serializes a &ldquo;paragraph&rdquo; object, which is an ordered array of &ldquo;run&rdquo; objects; some of these run objects have style properties, and each has a string property containing the actual text.</li> </ul><p>You can corroborate this by comparing OOXML to Office&rsquo;s VBA object model. For instance, the child elements allowed within OOXML&rsquo;s paragraph properties tag (<code><w:ppr></w:ppr></code>, specified in ECMA-376 Part 1, &sect; 17.3.2.28) map almost one-for-one to the properties of VBA&rsquo;s <a href="https://learn.microsoft.com/en-us/office/vba/api/word.paragraph"><code>Paragraph</code> object</a>. Many other OOXML&ndash;VBA pairings align the same way.</p><p>This explains the root of OOXML&rsquo;s complexity: it mirrors Office&rsquo;s sprawling features and legacy. To ensure fidelity and backward compatibility, Microsoft didn&rsquo;t design a format that describes a document&rsquo;s appearance; instead, it&rsquo;s much closer to a dump of the application&rsquo;s state. In this sense, OOXML is less of a standard and more of a projection of the Office application itself.</p><p>In fact, Office&rsquo;s legacy is so heavy that even Microsoft doesn&rsquo;t fully implement OOXML as standardized. ECMA-376 defines Strict and Transitional variants, with Transitional intended to preserve behaviors needed for old Office versions (e.g., <code>footnoteLayoutLikeWW8</code>, <code>autoSpaceLikeWord9</code>, <code>useWord97LineBreakRules</code>). To this day, Office saves Transitional by default. Microsoft even maintains a lengthy <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/21b45168-16f9-466d-9445-1992a02c517a">document</a> detailing the ways in which Office deviates from the ECMA-376 standard, including different interpretations of default values and non-standard extensions.</p><p>Furthermore, binding the format tightly to program state is not a novel, muddy-the-water trick, but merely how Office has long worked. Joel Spolsky, in a <a href="https://www.joelonsoftware.com/2008/02/19/why-are-the-microsoft-office-file-formats-so-complicated-and-some-workarounds/">famous blog post</a>, analyzed the complexity of the old binary Office formats, showing that they were even more akin to a direct memory dump, and was also of the opinion that this design was driven more by performance and practical constraints than by malice or incompetence.</p><p>Nor did OOXML spring from nowhere. Even before it, Microsoft had already been exploring a transition from binary to XML. Office XP and 2003 supported more primitive XML formats like <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-xp/aa140066(v=office.10)">Excel XML</a> and <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-2003/aa174023(v=office.11)">Word XML</a>, just without ZIP packaging and with all parts mashed into a single XML file (binary resources base64-encoded). This provides further evidence that OOXML is less an act of sabotage than the continuation of a flawed, inelegant lineage.</p><h2>Conclusion</h2><p>The argument of this article is not to let Microsoft off the hook; they could have done much better. Faced with demands for openness, Microsoft could have produced a clean, modern spec and keep the mass pile of legacy inside the application. Instead, it poured all that baggage into an XML container, pushed it to the world with market power, and shifted the comprehension cost onto everyone else. While this article argues for distinguishing this from the deliberate sabotage that LibreOffice alleges, a broken, low-quality standard is damaging to the ecosystem, whether born of negligence or conspiracy.</p><p>On the other hand, the LibreOffice post reflects a counterproductive reflex that&rsquo;s common in open-source circles: scolding users for accepting proprietary tech. But users aren&rsquo;t foolish. Elegance and openness are virtues, but they are only a few of the factors most people weigh, and often not the decisive ones. LibreOffice itself, as ODF&rsquo;s flagship, still suffers from rough edges in design, interaction, and performance. As a result, even as Office hobble itself with bloat, most people still find it <em>easier</em>. Without a clear-eyed, systematic push to improve those fundamentals, cheerleading for open software and open formats will remain slogan and self-pity, an approach that is unlikely to win a broader audience or to dent an incumbent&rsquo;s dominance.</p><h2>&#20013;&#25991;&#29256;</h2> <h2>&#24341;&#35328;</h2><p>&#21069;&#27573;&#26102;&#38388;&#65292;&#24320;&#28304;&#21150;&#20844;&#36719;&#20214; LibreOffice &#30340;&#23448;&#26041;&#21338;&#23458;<a href="https://blog.documentfoundation.org/blog/2025/07/18/artificially-complex-xml-schema-as-lock-in-tool/">&#21457;&#34920;</a>&#20102;&#19968;&#31687;&#39047;&#20855;&#35805;&#39064;&#24615;&#30340;&#25991;&#31456;&#65306;&#12298;&#21051;&#24847;&#22797;&#26434;&#21270;&#30340; XML &#35268;&#33539;&#26159;&#19968;&#31181;&#38145;&#23450;&#29992;&#25143;&#30340;&#24037;&#20855;&#12299;&#65288;An artificially complex XML schema as a lock-in tool&#65289;&#12290;</p><p>&#36825;&#31687;&#25991;&#31456;&#25226;&#25209;&#21028;&#30340;&#30683;&#22836;&#25351;&#21521;&#20102;&#24494;&#36719;&#22522;&#20110; XML &#30340;&#25991;&#20214;&#26684;&#24335;&mdash;&mdash;Office Open XML&#65288;&#31616;&#31216; OOXML&#65289;&#12290;&#25991;&#31456;&#25351;&#25511;&#65292;&#24494;&#36719;&#34429;&#28982;&#34920;&#38754;&#19978;&#24320;&#25918;&#20102; Office &#25991;&#20214;&#26684;&#24335;&#26631;&#20934;&#65292;&#20294;&#36890;&#36807;&#23558;&#20854;&#35774;&#35745;&#24471;&#26497;&#20026;&#22797;&#26434;&#65292;&#23454;&#38469;&#19978;&#38459;&#30861;&#20102;&#19982;&#31532;&#19977;&#26041;&#36719;&#20214;&#30340;&#20114;&#25805;&#20316;&#24615;&#12290;&#25991;&#31456;&#35748;&#20026;&#65292;&#36825;&#31181;&#22797;&#26434;&#24615;&#26159;&#21051;&#24847;&#20026;&#20043;&#65292;&#19982;&#23454;&#38469;&#38656;&#27714;&#33073;&#33410;&#12290;&#36825;&#23601;&#22909;&#27604;&#36816;&#33829;&#19968;&#26465;&#21517;&#20041;&#19978;&#24320;&#25918;&#30340;&#36712;&#36947;&#65292;&#21364;&#23558;&#25511;&#21046;&#31995;&#32479;&#35774;&#35745;&#24471;&#21482;&#26377;&#19968;&#23478;&#21046;&#36896;&#21830;&#25165;&#33021;&#36816;&#33829;&#65292;&#20174;&#32780;&#24418;&#25104;&#20107;&#23454;&#22404;&#26029;&#12290;&#21516;&#26102;&#65292;&#29992;&#25143;&#24448;&#24448;&#19981;&#21152;&#25209;&#21028;&#22320;&#25509;&#21463;&#36825;&#20123;&#19987;&#26377;&#25216;&#26415;&#65292;&#36825;&#20351;&#24471;&#24494;&#36719;&#33021;&#36731;&#26131;&#23558;&#29992;&#25143;&#38145;&#23450;&#22312;&#33258;&#24049;&#30340;&#29983;&#24577;&#31995;&#32479;&#20013;&#12290;</p><p>&#20026;&#19981;&#22826;&#29087;&#24713;&#36825;&#20010;&#35805;&#39064;&#30340;&#26379;&#21451;&#34917;&#20805;&#19968;&#20123;&#32972;&#26223;&#12290;Office &#21150;&#20844;&#36719;&#20214;&#21382;&#21490;&#19978;&#32463;&#21382;&#36807;&#19968;&#27425;&#37325;&#35201;&#30340;&#25991;&#20214;&#26684;&#24335;&#21464;&#21270;&#12290;Office 2003 &#21450;&#26356;&#26089;&#29256;&#26412;&#30340;&#40664;&#35748;&#26684;&#24335;&#65288;<code>.doc</code>&#12289;<code>.xls</code>&#12289;<code>.ppt</code> &#31561;&#65289;&#26159;&#25152;&#35859;&#30340;&#12300;&#20108;&#36827;&#21046;&#26684;&#24335;&#12301;&#65292;&#20854;&#20869;&#23481;&#24182;&#38750;&#20154;&#31867;&#21487;&#30452;&#25509;&#38405;&#35835;&#30340;&#25991;&#26412;&#12290;&#20174; Office 2007 &#24320;&#22987;&#65292;&#24494;&#36719;&#20999;&#25442;&#21040;&#26032;&#30340;&#40664;&#35748;&#26684;&#24335; <code>.docx</code>&#12289;<code>.xlsx</code> &#21644; <code>.pptx</code>&#65292;&#20854;&#20013;&#30340; <code>x</code> &#23601;&#20195;&#34920; XML&#12290;&#36825;&#20123;&#26032;&#26684;&#24335;&#30340;&#25991;&#20214;&#26412;&#36136;&#19978;&#26159;&#19968;&#20010; ZIP &#21387;&#32553;&#21253;&#65292;&#37324;&#38754;&#21253;&#21547;&#20102;&#19968;&#31995;&#21015; XML &#25991;&#20214;&#21644;&#22270;&#29255;&#31561;&#36164;&#28304;&#12290;&#20174; XML &#30340;&#32467;&#26500;&#21040;&#25171;&#21253;&#26041;&#24335;&#65292;&#37117;&#36981;&#24490;&#19968;&#22871;&#20844;&#24320;&#30340;&#26631;&#20934;&#65292;&#20063;&#23601;&#26159; OOXML&#12290;</p><p>&#22312;&#24494;&#36719;&#30340;&#25512;&#21160;&#19979;&#65292;OOXML &#20808;&#21518;&#34987;&#22269;&#38469;&#26631;&#20934;&#32452;&#32455;&#37319;&#32435;&#20026; <a href="https://ecma-international.org/publications-and-standards/standards/ecma-376/">ECMA-376</a> &#21644; <a href="https://www.iso.org/standard/71691.html">ISO/IEC 29500</a>&#12290;&#24494;&#36719;&#20063;&#23558;&#20854;&#32435;&#20837;&#25152;&#35859;&#12300;<a href="https://docs.microsoft.com/en-us/openspecs/dev_center/ms-devcentlp/1c24c7c8-28b0-4ce1-a47d-95fe1ff504bc">&#24320;&#25918;&#35268;&#33539;&#25215;&#35834;</a>&#12301;&#65292;&#20445;&#35777;&#19981;&#20250;&#23545;&#23454;&#29616;&#35813;&#26631;&#20934;&#30340;&#34892;&#20026;&#25552;&#20986;&#19987;&#21033;&#26435;&#20027;&#24352;&#12290;</p><p>&#22240;&#27492;&#65292;&#29702;&#35770;&#19978;&#65292;&#20219;&#20309;&#20010;&#20154;&#25110;&#31532;&#19977;&#26041;&#36719;&#20214;&#37117;&#21487;&#20197;&#33258;&#30001;&#22320;&#35299;&#26512;&#12289;&#21019;&#24314;&#21644;&#20462;&#25913; OOXML &#25991;&#20214;&#65292;&#23454;&#29616;&#19982; Microsoft Office &#30340;&#20860;&#23481;&#12290;&#36825;&#21548;&#36215;&#26469;&#24456;&#32654;&#22909;&#65292;&#20294; LibreOffice &#30340;&#25991;&#31456;&#27491;&#26159;&#23545;&#27492;&#25552;&#20986;&#36136;&#30097;&#65292;&#35748;&#20026; OOXML &#21051;&#24847;&#30340;&#22797;&#26434;&#24615;&#20351;&#25152;&#35859;&#30340;&#12300;&#24320;&#25918;&#12301;&#21464;&#25104;&#20102;&#19968;&#20010;&#21482;&#36827;&#19981;&#20986;&#30340;&#38519;&#38449;&#65292;&#26159;&#24494;&#36719;&#32500;&#25252;&#22404;&#26029;&#30340;&#24037;&#20855;&#12290;</p><p>&#22914;&#20309;&#30475;&#24453;&#36825;&#31181;&#35266;&#28857;&#65311;&#22374;&#30333;&#22320;&#35828;&#65292;&#30456;&#20449;&#27809;&#26377;&#20960;&#20010;&#20154;&#23545; Office &#30340;&#20351;&#29992;&#20307;&#39564;&#21360;&#35937;&#23436;&#32654;&#65292;&#36825;&#20063;&#26159;&#27492;&#25991;&#39047;&#20855;&#20256;&#25773;&#21147;&#30340;&#21407;&#22240;&#12290;&#22312;&#25105;&#36807;&#21435;&#30340;&#19968;&#27573;&#27861;&#24459;&#27665;&#24037;&#29983;&#28079;&#20013;&#65292;&#36319;&#22797;&#26434;&#30340; Word &#25991;&#26723;&#26007;&#20105;&#26159;&#27599;&#22825;&#30340;&#24517;&#20462;&#35838;&#12290;&#25105;&#36824;&#36127;&#36131;&#32534;&#20889;&#36807;&#19968;&#20221; <a href="https://sspai.com/series/226">Office &#25945;&#31243;</a>&#30340; Word &#37096;&#20998;&#65292;&#24403;&#26102;&#30340;&#20027;&#35201;&#24605;&#36335;&#23601;&#26159;&#36890;&#36807;&#20171;&#32461; OOXML &#26684;&#24335;&#65292;&#26469;&#35299;&#37322; Word &#30340;&#19968;&#20123;&#24618;&#30294;&#21644;&#30456;&#24212;&#30340;&#26368;&#20339;&#23454;&#36341;&#12290;&#22240;&#27492;&#65292;&#25105;&#23545; Office &#21644; OOXML &#30340;&#38590;&#29992;&#20043;&#22788;&#20063;&#31639;&#28145;&#26377;&#20307;&#20250;&#12290;</p><p>&#20294;&#21363;&#20351;&#22914;&#27492;&#65292;&#25105;&#24182;&#19981;&#36190;&#21516; LibreOffice &#27492;&#25991;&#30340;&#20889;&#27861;&#21644;&#32467;&#35770;&#65306;&#21487;&#33021;&#26159;&#20026;&#20102;&#22823;&#20247;&#20256;&#25773;&#25928;&#26524;&#65292;&#36825;&#31687;&#25991;&#31456;&#24773;&#32490;&#12289;&#25351;&#25511;&#36807;&#22810;&#65292;&#32780;&#20998;&#26512;&#12289;&#20107;&#23454;&#22826;&#23569;&#65292;&#23454;&#38469;&#19978;&#38169;&#36807;&#20102;&#19968;&#27425;&#24456;&#22909;&#30340;&#31185;&#26222;&#26426;&#20250;&#12290;&#65288;LibreOffice &#21518;&#26469;&#21448;<a href="https://blog.documentfoundation.org/blog/2025/06/28/a-technical-dive-into-odf/">&#21457;&#24067;</a>&#20102;&#19968;&#31687;&#26356;&#25216;&#26415;&#24615;&#30340;&#23545;&#27604;&#65292;&#20294;&#20173;&#28982;&#30452;&#25509;&#20174;&#20195;&#30721;&#36339;&#21040;&#20102;&#32467;&#35770;&#12290;&#65289;</p><p>&#22312;&#25105;&#30475;&#26469;&#65292;OOXML &#26684;&#24335;&#30830;&#23454;&#22797;&#26434;&#12289;&#32321;&#29712;&#12289;&#26214;&#28073;&#12290;&#20294;&#36825;&#24456;&#21487;&#33021;&#19981;&#26159;&#22240;&#20026;&#24494;&#36719;&#33988;&#24847;&#38459;&#27490;&#31532;&#19977;&#26041;&#20860;&#23481;&#65292;&#32780;&#26356;&#22810;&#26159;&#20986;&#20110;&#19968;&#31181;&#19981;&#20316;&#20026;&#30340;&#33258;&#31169;&#24515;&#24577;&#65306;&#22312;&#21046;&#23450;&#26631;&#20934;&#26102;&#65292;&#21482;&#32771;&#34385;&#33258;&#36523;&#23454;&#29616;&#30340;&#20415;&#21033;&#65292;&#32780;&#24573;&#30053;&#20102;&#19968;&#20010;&#36890;&#29992;&#26631;&#20934;&#24212;&#26377;&#30340;&#36136;&#37327;&#12289;&#31616;&#27905;&#21644;&#26222;&#36866;&#12290;&#24403;&#28982;&#65292;&#36825;&#31181;&#19981;&#20316;&#20026;&#23458;&#35266;&#19978;&#20063;&#36896;&#25104;&#20102;&#38459;&#30861;&#31454;&#20105;&#30340;&#32467;&#26524;&#65292;&#20294;&#36825;&#22312;&#21160;&#26426;&#19978;&#19982;&#33988;&#24847;&#30772;&#22351;&#26377;&#21035;&#65292;&#22240;&#27492;&#20063;&#24212;&#21463;&#21040;&#19981;&#21516;&#30340;&#35780;&#20215;&#12290;&#65288;&#20855;&#20307;&#30340;&#27861;&#24459;&#20998;&#26512;&#36229;&#20986;&#20102;&#26412;&#25991;&#30340;&#35752;&#35770;&#33539;&#22260;&#12290;&#65289;</p><p>&#20026;&#27492;&#65292;&#26412;&#25991;&#23558;&#22522;&#20110; OOXML &#30340;&#35821;&#27861;&#21644;&#21046;&#23450;&#32972;&#26223;&#65292;&#35770;&#35777;&#20026;&#20160;&#20040; LibreOffice &#30340;&#25991;&#31456;&#25351;&#20986;&#20102;&#27491;&#30830;&#30340;&#38382;&#39064;&#65292;&#21364;&#21487;&#33021;&#24471;&#20986;&#20102;&#38169;&#35823;&#30340;&#32467;&#35770;&#12290;</p><h2>&#20026;&#20160;&#20040;&#35828; OOXML &#26159;&#19968;&#20010;&#28518;&#33609;&#30340;&#26631;&#20934;</h2><p>LibreOffice &#30340;&#25991;&#31456;&#20013;&#25209;&#35780;&#35828;&#65292;&#12300;&#31616;&#21333;&#22914;&#12302;&#29983;&#23384;&#36824;&#26159;&#27585;&#28781;&#65292;&#36825;&#26159;&#20010;&#38382;&#39064;&#12303;&#30340;&#21477;&#23376;&#65292;&#37117;&#20250;&#21464;&#25104;&#29992;&#25143;&#26080;&#27861;&#35299;&#35835;&#30340;&#30456;&#20114;&#32416;&#32544;&#30340;&#26631;&#31614;&#32452;&#21512;&#12301;&#12290;&#25105;&#20204;&#19981;&#22952;&#23601;&#20197;&#27492;&#20026;&#20363;&#65292;&#26032;&#24314;&#19968;&#20010; Word &#25991;&#26723;&#65292;&#36755;&#20837;</p><blockquote><p>To be or not to be.</p></blockquote><p>&#65288;&#20854;&#20013; <em>To be</em> &#21152;&#31895;&#65289;&#65292;&#28982;&#21518;&#20445;&#23384;&#65292;&#30475;&#30475;&#37117;&#20250;&#23384;&#20648;&#20986;&#20160;&#20040;&#26679;&#30340;&#32467;&#26524;&#12290;</p><p>&#29992;&#20219;&#24847;&#21387;&#32553;&#24037;&#20855;&#35299;&#21387;&#36825;&#20010; <code>.docx</code> &#25991;&#20214;&#65292;&#20174;&#25152;&#24471;&#30340; <code>word/document.xml</code> &#25991;&#20214;&#20013;&#23601;&#33021;&#30475;&#21040;&#22914;&#19979;&#20869;&#23481;&#65306;</p><pre><code><w:p><w:r> <w:rpr> <w:b></w:b> <w:bcs></w:bcs> </w:rpr> <w:t>To be</w:t> </w:r> <w:r> <w:t>, or not to be, that is the question</w:t> </w:r> <w:r> <w:t>.</w:t> </w:r> </w:p></code></pre><p>&#65288;&#26377;&#33410;&#36873;&#65292;&#39069;&#22806;&#28155;&#21152;&#20102;&#25442;&#34892;&#21644;&#32553;&#36827;&#20197;&#20415;&#38405;&#35835;&#65307;&#21518;&#21516;&#12290;&#65289;</p><p>&#21487;&#33021;&#20320;&#24050;&#32463;&#26197;&#20102;&hellip;&hellip;&#20294;&#35753;&#25105;&#20204;&#24378;&#25171;&#31934;&#31070;&#26469;&#20998;&#26512;&#19968;&#19979;&#12290;&#36825;&#27573; XML &#30340;&#26680;&#24515;&#32467;&#26500;&#26159;&#19968;&#20010;&#27573;&#33853;&#65288;<code><w:p></w:p></code>&#65289;&#65292;&#23427;&#21253;&#21547;&#20102;&#19977;&#20010;&#12300;&#25991;&#26412;&#22359;&#12301;&#65288;run&#65292;&#29992; <code><w:r></w:r></code> &#20803;&#32032;&#26469;&#20195;&#34920;&#65289;&#12290;&#25152;&#35859;&#12300;&#25991;&#26412;&#22359;&#12301;&#65292;&#26159;&#25351;&#19968;&#27573;&#20855;&#26377;&#30456;&#21516;&#26684;&#24335;&#30340;&#36830;&#32493;&#25991;&#26412;&#12290;&#22312; OOXML &#20013;&#65292;&#27599;&#20010;&#27573;&#33853;&#37117;&#30001;&#19968;&#20010;&#25110;&#22810;&#20010;&#25991;&#26412;&#22359;&#32452;&#25104;&#12290;</p><p>&#20855;&#20307;&#32780;&#35328;&mdash;&mdash;</p><ul> <li>&#22806;&#23618; <code><w:p></w:p></code> &#20803;&#32032;&#20195;&#34920;&#25972;&#20010;&#27573;&#33853;&#12290;&#20854;&#20013;&#30340; <code>w14:paraId</code>&#12289;<code>w14:textId</code> &#21644; <code>w:rsidR</code> &#31561;&#23646;&#24615;&#26159; Word &#20869;&#37096;&#29992;&#20110;&#21327;&#21516;&#32534;&#36753;&#12289;&#36861;&#36394;&#20462;&#35746;&#21382;&#21490;&#30340;&#26631;&#35782;&#31526;&#65307;</li> <li>&#31532;&#19968;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#20195;&#34920;&#21152;&#31895;&#30340; <em>To be</em>&#12290;&#23427;&#21253;&#21547;&#19968;&#20010; <code><w:rpr></w:rpr></code> (Run Properties) &#20803;&#32032;&#26469;&#23450;&#20041;&#26684;&#24335;&#12290;&#20854;&#20013;&#65292;<code><w:b></w:b></code> &#21644; <code><w:bcs></w:bcs></code> &#20998;&#21035;&#23558;&#35199;&#25991;&#21644;&#20013;&#25991;&#31561;&#22797;&#26434;&#20070;&#20889;&#31995;&#32479;&#65288;complex script&#65292;&#23613;&#31649;&#36825;&#37324;&#27809;&#26377;&#65289;&#30340;&#23383;&#20307;&#35774;&#32622;&#20026;&#31895;&#20307;&#12290;&#20043;&#21518;&#65292;<code><w:t></w:t></code> &#20803;&#32032;&#25165;&#21253;&#21547;&#23454;&#38469;&#30340;&#25991;&#26412;&#20869;&#23481;&#65307;</li> <li>&#31532;&#20108;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#21253;&#21547;&#20102;&#21518;&#38754;&#30452;&#21040;&#21477;&#21495;&#21069;&#30340;&#25152;&#26377;&#25991;&#26412;&#12290;&#30001;&#20110;&#36825;&#27573;&#25991;&#26412;&#20351;&#29992;&#40664;&#35748;&#26684;&#24335;&#65292;&#25152;&#20197;&#27809;&#26377; <code><w:rpr></w:rpr></code> &#20803;&#32032;&#65307;</li> <li>&#31532;&#19977;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#21482;&#21253;&#21547;&#26368;&#21518;&#30340;&#21477;&#21495;&#65292;&#19982;&#21069;&#38754;&#30340;&#25991;&#26412;&#22312;&#26684;&#24335;&#19978;&#24182;&#26080;&#24046;&#24322;&#12290;&#20043;&#25152;&#20197;&#34987;&#21333;&#29420;&#20998;&#21106;&#20986;&#26469;&#65292;&#20165;&#20165;&#26159;&#22240;&#20026;&hellip;&hellip;&#21069;&#38754;&#30340;&#25991;&#23383;&#26159;&#25105;&#31896;&#36148;&#30340;&#65292;&#32780;&#36825;&#20010;&#21477;&#21495;&#26159;&#25105;&#25163;&#21160;&#36755;&#20837;&#30340;&#12290;&#26159;&#30340;&#65292;OOXML &#23601;&#26159;&#20250;&#22240;&#20026;&#21508;&#31181;&#24847;&#24819;&#19981;&#21040;&#30340;&#21407;&#22240;&#65292;&#32473;&#20320;&#21046;&#36896;&#31867;&#20284;&#30340;&#12300;&#24778;&#21916;&#12301;&#12290;</li> </ul><p>&#20316;&#20026;&#23545;&#27604;&#65292;&#30456;&#21516;&#20869;&#23481;&#33509;&#20351;&#29992; LibreOffice &#30340; OpenDocument &#26684;&#24335;&#65288;ODF&#65289;&#23384;&#20648;&#65292;&#20854;&#23545;&#24212;&#30340; XML &#25991;&#20214; (<code>content.xml</code>) &#21017;&#35201;&#22909;&#25026;&#24471;&#22810;&#65306;</p><pre><code><text:p><text:span>To be</text:span> , or not to be, that is the question. </text:p></code></pre><p>&#20320;&#21487;&#33021;&#19968;&#30524;&#23601;&#35273;&#24471;&#36825;&#26159;&#19968;&#31181;&#26356;&#31616;&#26126;&#30340;&#26684;&#24335;&#12290;&#20107;&#23454;&#19978;&#65292;&#22914;&#26524;&#21435;&#25481;&#26631;&#31614;&#21644;&#23646;&#24615;&#24320;&#22836;&#30340;&#21629;&#21517;&#31354;&#38388; <code>text:</code>&#65292;&#23427;&#20960;&#20046;&#23601;&#26159;&#19968;&#27573;&#21512;&#27861;&#30340; HTML&#12290;&#21807;&#19968;&#38656;&#35201;&#35299;&#37322;&#30340;&#26159;&#31895;&#20307;&#25991;&#26412;&#30340;&#22788;&#29702;&#26041;&#24335;&#65306;ODF &#27809;&#26377;&#29992;&#19968;&#20010;&#12300;&#31895;&#20307;&#12301;&#26631;&#31614;&#30452;&#25509;&#21253;&#35065; <em>To be</em>&#65292;&#32780;&#26159;&#21019;&#24314;&#20102;&#19968;&#20010;&#21517;&#20026; <code>T1</code> &#30340;&#33258;&#21160;&#26679;&#24335;&#65292;&#24182;&#23558;&#20854;&#24212;&#29992;&#21040;&#21253;&#35065;&#25991;&#26412;&#30340; <code><text:span></text:span></code> &#20803;&#32032;&#19978;&#12290;&#36825;&#31181;&#20570;&#27861;&#20063;&#20307;&#29616;&#20102; Web &#20013;&#21463;&#25512;&#23815;&#30340;&#12300;&#20869;&#23481;&#19982;&#26679;&#24335;&#20998;&#31163;&#12301;&#21407;&#21017;&#12290;</p><p>&#24635;&#30340;&#26469;&#35828;&#65292;&#21482;&#35201;&#20320;&#30053;&#25026; Web &#22522;&#30784;&#65292;&#23601;&#33021;&#22823;&#33268;&#30475;&#25026; ODF &#30340; XML&#12290;&#30456;&#27604;&#20043;&#19979;&#65292;OOXML &#20013;&#37027;&#20123;&#26214;&#28073;&#30340;&#26631;&#31614;&#21517;&#65292;&#22823;&#27010;&#37117;&#38656;&#35201;&#21338;&#22763;&#21518;&#23398;&#20301;&#25165;&#33021;&#29468;&#20986;&#26469;&#26159;&#20160;&#20040;&#24847;&#24605;&#12290;</p><p>&#20197;&#19978;&#20998;&#26512;&#30340;&#36824;&#21482;&#26159;&#26368;&#31616;&#21333;&#30340;&#25991;&#26412;&#26684;&#24335;&#12290;&#22914;&#26524;&#28041;&#21450;&#34920;&#26684;&#12289;&#21015;&#34920;&#31561;&#22797;&#26434;&#20803;&#32032;&#65288;&#30456;&#20449;&#36825;&#26159;&#27599;&#20010;&#37325;&#24230; Word &#29992;&#25143;&#20849;&#20139;&#30340;&#22121;&#26790;&#65289;&#65292;OOXML &#30340;&#22797;&#26434;&#31243;&#24230;&#21482;&#20250;&#35753;&#20320;&#26356;&#21152;&#25376;&#22836;&mdash;&mdash;&#20960;&#21315;&#39029;&#30340;&#25991;&#26723;&#19981;&#26159;&#21507;&#24178;&#39277;&#30340;&#12290;</p><p>&#38500;&#20102;&#24418;&#24335;&#19978;&#30340;&#22797;&#26434;&#65292;OOXML &#20316;&#20026;&#19968;&#20010;&#26631;&#20934;&#30340;&#36136;&#37327;&#20063;&#20196;&#20154;&#22570;&#24551;&#12290;&#22312; OOXML &#30340;&#21046;&#23450;&#38454;&#27573;&#65292;&#23601;&#26377;&#22823;&#37327;&#25991;&#31456;&#25351;&#20986;&#24494;&#36719;&#25552;&#20132;&#30340;&#35268;&#33539;&#25991;&#26723;&#23384;&#22312;<a href="https://noooxml.wdfiles.com/local--files/arguments/ODF-vs-OOXML-v1.2.pdf">&#35832;&#22810;&#25216;&#26415;&#32570;&#38519;</a>&#65292;&#20363;&#22914;&mdash;&mdash;</p><ul> <li>&#23558; Office &#20013;&#24050;&#30693;&#30340;&#38169;&#35823;&#25110;&#32773;&#22949;&#21327;&#32435;&#20837;&#26631;&#20934;&#65288;&#20363;&#22914;&#21516;&#26102;&#20445;&#30041; 1900 &#25110; 1904 &#24180;&#20026;&#36215;&#22987;&#28857;&#30340;&#20004;&#22871;&#26085;&#26399;&#31995;&#32479;&#65292;&#24182;&#19988;&#38169;&#35823;&#22320;<a href="https://learn.microsoft.com/en-us/troubleshoot/microsoft-365-apps/excel/wrongly-assumes-1900-is-leap-year">&#23558; 1900 &#24180;&#35270;&#20026;&#38384;&#24180;</a>&#65289;&#65307;</li> <li>&#19982;&#35821;&#35328;&#21306;&#22495;&#20195;&#30721;&#65288;ISO 639&#65289;&#12289;&#30690;&#37327;&#22270;&#24418;&#65288;W3C SVG&#65289;&#12289;&#25968;&#23398;&#31526;&#21495;&#65288;W3C MathML&#65289;&#31561;&#24050;&#30830;&#31435;&#30340;&#29616;&#23384;&#26631;&#20934;&#23384;&#22312;&#20914;&#31361;&#65307;</li> <li>&#20351;&#29992;&#23450;&#20041;&#19981;&#26126;&#30830;&#30340;&#35745;&#37327;&#21333;&#20301;&#65292;&#24182;&#19988;&#21069;&#21518;&#30683;&#30462;&#65307;&#20197;&#21450;</li> <li>&#23545;&#20803;&#32032;&#21644;&#23646;&#24615;&#30340;&#21629;&#21517;&#32422;&#23450;&#65288;&#20363;&#22914;&#22823;&#23567;&#20889;&#35268;&#21017;&#65289;&#26082;&#19981;&#28165;&#26224;&#20063;&#19981;&#19968;&#33268;&#12290;</li> </ul><p><a href="https://en.wikipedia.org/wiki/Standardization_of_Office_Open_XML">OOXML &#25104;&#20026; ISO &#26631;&#20934;&#30340;&#36807;&#31243;</a>&#20063;&#26497;&#23500;&#25103;&#21095;&#24615;&#12290;&#39318;&#20808;&#65292;&#24494;&#36719;&#36873;&#25321;&#36890;&#36807;&#12300;&#24555;&#36895;&#36890;&#36947;&#12301;&#25552;&#20132;&#26631;&#20934;&#12290;&#36825;&#26465;&#36890;&#36947;&#26412;&#26159;&#20026;&#37027;&#20123;&#25216;&#26415;&#25104;&#29087;&#12289;&#19994;&#30028;&#24191;&#27867;&#23454;&#26045;&#30340;&#31283;&#23450;&#35268;&#33539;&#25152;&#35774;&#12290;&#26174;&#28982;&#65292;OOXML &#22312; 2006 &#24180;&#34987;&#25552;&#20132;&#26102;&#23436;&#20840;&#19981;&#31526;&#21512;&#36825;&#20123;&#26465;&#20214;&#65306;&#23427;&#26159;&#19968;&#20010;&#20840;&#26032;&#30340;&#35268;&#33539;&#65292;&#21807;&#19968;&#30340;&#23436;&#25972;&#23454;&#29616;&#26159;&#23578;&#26410;&#27491;&#24335;&#21457;&#24067;&#30340; Office 2007&#65292;&#20854;&#20960;&#21315;&#39029;&#30340;&#35268;&#33539;&#25991;&#26723;&#26356;&#26159;&#26681;&#26412;&#19981;&#21487;&#33021;&#22312;&#30701;&#26102;&#38388;&#20869;&#23436;&#25104;&#23457;&#38405;&#12290;&#35895;&#27468;&#12289;&#33258;&#30001;&#36719;&#20214;&#22522;&#37329;&#20250;&#27431;&#27954;&#20998;&#37096;&#65288;FSFE&#65289;&#31561;&#32452;&#32455;&#21644;&#20247;&#22810;&#25216;&#26415;&#19987;&#23478;&#37117;&#23545;&#27492;&#25552;&#20986;&#20102;&#24322;&#35758;&#12290;</p><p>&#20854;&#21518;&#30340; ISO &#25237;&#31080;&#36807;&#31243;&#26356;&#26159;&#35813;&#32452;&#32455;&#21382;&#21490;&#19978;&#20105;&#35758;&#26368;&#22823;&#30340;&#19968;&#27425;&#12290;&#20363;&#22914;&#65292;&#22312;&#25237;&#31080;&#26399;&#38388;&#65292;&#32654;&#22269;&#12289;&#24847;&#22823;&#21033;&#31561;&#22269;&#30340;&#26631;&#20934;&#22996;&#21592;&#20250;&#25104;&#21592;&#25968;&#37327;&#28608;&#22686;&#65292;&#26032;&#25104;&#21592;&#22823;&#22810;&#26159;&#24494;&#36719;&#30340;&#21830;&#19994;&#20249;&#20276;&#65292;&#24182;&#19968;&#33268;&#25237;&#31080;&#25903;&#25345; OOXML&#12290;&#29790;&#20856;&#26631;&#20934;&#26426;&#26500;&#26368;&#21021;&#25237;&#20102;&#36190;&#25104;&#31080;&#65292;&#20294;&#38543;&#21518;&#22240;&#26333;&#20986;&#24494;&#36719;&#21521;&#21512;&#20316;&#20249;&#20276;&#25552;&#20379;&#25253;&#37228;&#20197;&#25442;&#21462;&#25903;&#25345;&#30340;&#19985;&#38395;&#65292;&#35813;&#25237;&#31080;&#34987;&#23459;&#24067;&#26080;&#25928;&#12290;</p><p>&#26368;&#32456;&#65292;ISO &#32463;&#21382;&#20102;&#33392;&#38590;&#30340;&#20004;&#36718;&#25237;&#31080;&#25165;&#35753; OOXML &#24471;&#20197;&#36890;&#36807;&#12290;&#20294;&#36825;&#19968;&#32467;&#26524;&#24182;&#26410;&#24179;&#24687;&#20105;&#35758;&#65292;&#24052;&#35199;&#12289;&#21360;&#24230;&#12289;&#21335;&#38750;&#12289;&#22996;&#20869;&#29790;&#25289;&#31561;&#22269;&#27491;&#24335;&#21521; ISO &#25552;&#20986;&#19978;&#35785;&#65292;&#35748;&#20026;&#25972;&#20010;&#36807;&#31243;&#23384;&#22312;&#31243;&#24207;&#29781;&#30133;&#12290;&#34429;&#28982;&#36825;&#20123;&#31243;&#24207;&#26368;&#32456;&#26410;&#33021;&#25512;&#32763;&#32467;&#26524;&#65292;&#20294;&#36275;&#20197;&#34920;&#26126;&#36825;&#27425;&#26631;&#20934;&#21270;&#36807;&#31243;&#30340;&#20998;&#35010;&#19982;&#28151;&#20081;&#12290;</p><h2>&#20026;&#20160;&#20040;&#35828;&#24494;&#36719;&#30340;&#21160;&#26426;&#24182;&#38750;&#33988;&#24847;&#30772;&#22351;&#31454;&#20105;</h2><p>&#21040;&#30446;&#21069;&#20026;&#27490;&#65292;&#35777;&#25454;&#20284;&#20046;&#37117;&#25903;&#25345; LibreOffice &#30340;&#35266;&#28857;&#65306;OOXML &#20316;&#20026;&#19968;&#20010;&#26631;&#20934;&#65292;&#26080;&#35770;&#22312;&#25216;&#26415;&#23618;&#38754;&#36824;&#26159;&#21046;&#23450;&#31243;&#24207;&#23618;&#38754;&#37117;&#26159;&#30456;&#24403;&#28518;&#33609;&#30340;&#12290;&#20294;&#20107;&#23454;&#24182;&#19981;&#33021;&#30452;&#25509;&#25512;&#20986;&#24847;&#22270;&#21644;&#21160;&#26426;&#12290;&#22914;&#26524;&#36827;&#19968;&#27493;&#20102;&#35299; OOXML &#30340;&#21046;&#23450;&#32972;&#26223;&#65292;&#23601;&#20250;&#21457;&#29616;&#30772;&#22351;&#31454;&#20105;&#33267;&#23569;&#24182;&#19981;&#26159;&#24494;&#36719;&#30340;&#39318;&#35201;&#30446;&#30340;&#12290;</p><p>&#39318;&#20808;&#24212;&#24403;&#30475;&#21040;&#65292;OOXML &#22312;&#26576;&#31181;&#31243;&#24230;&#19978;&#26159;&#24494;&#36719;&#22312;&#26085;&#30410;&#20005;&#26684;&#30340;&#21453;&#22404;&#26029;&#23457;&#26597;&#21644;&#24320;&#25918;&#26631;&#20934;&#31454;&#20105;&#21387;&#21147;&#19979;&#65292;&#37319;&#21462;&#30340;&#19968;&#31181;&#38450;&#24481;&#24615;&#23039;&#24577;&#12290;OOXML &#26684;&#24335;&#20110; 2005 &#24180;&#24213;<a href="https://news.microsoft.com/2005/11/21/qa-microsoft-co-sponsors-submission-of-office-open-xml-document-formats-to-ecma-international-for-standardization/">&#23459;&#24067;</a>&#12290;&#24403;&#26102;&#65292;&#24494;&#36719;&#27491;&#22312;&#19978;&#35785;&#27431;&#30431;&#22996;&#21592;&#20250;&#21069;&#19968;&#24180;&#23545;&#20854;&#20570;&#20986;&#30340;<a href="https://en.wikipedia.org/wiki/Microsoft_Corp._v_European_Commission#Judgment">&#21453;&#22404;&#26029;&#21028;&#20915;</a>&#12290;&#35813;&#26696;&#30340;&#19968;&#20010;&#26680;&#24515;&#38382;&#39064;&#23601;&#26159;&#24494;&#36719;&#25298;&#32477;&#21521; Sun &#20844;&#21496;&#25552;&#20379;&#24517;&#35201;&#30340;&#21327;&#35758;&#35268;&#33539;&#65292;&#38459;&#30861;&#20102;&#36328;&#31995;&#32479;&#20860;&#23481;&#12290;&#19981;&#38590;&#24819;&#35265;&#65292;Office &#30340;&#25991;&#20214;&#20860;&#23481;&#24615;&#25104;&#20026;&#19979;&#19968;&#20010;&#30417;&#31649;&#28966;&#28857;&#21482;&#26159;&#26102;&#38388;&#38382;&#39064;&#12290;&#65288;&#20107;&#23454;&#20063;&#30340;&#30830;&#22914;&#27492;&#65292;&#27431;&#30431;&#22312; 2008 &#24180;&#23545; Office &#31561;&#20135;&#21697;&#30340;&#20860;&#23481;&#24615;&#38382;&#39064;&#23637;&#24320;&#20102;<a href="https://competition-cases.ec.europa.eu/cases/AT.39294">&#35843;&#26597;</a>&#12290;&#65289;</p><p>&#19982;&#27492;&#21516;&#26102;&#65292;&#31454;&#20105;&#26631;&#20934; ODF &#36880;&#28176;&#25104;&#22411;&#65292;&#24182;&#20110; 2006 &#24180; 5 &#26376;&#34987;&#27491;&#24335;&#25209;&#20934;&#20026; ISO &#22269;&#38469;&#26631;&#20934;&#12290;&#20840;&#29699;&#22810;&#22269;&#12289;&#29305;&#21035;&#26159;&#27431;&#27954;&#22269;&#23478;&#25919;&#24220;&#65292;&#24320;&#22987;&#20542;&#21521;&#20110;&#22312;&#25919;&#24220;&#25991;&#20214;&#20013;&#24378;&#21046;&#37319;&#29992;&#24320;&#25918;&#26631;&#20934;&#12290;&#22914;&#26524;&#24494;&#36719;&#19981;&#37319;&#21462;&#34892;&#21160;&#65292;Office &#23601;&#21487;&#33021;&#22240;&#19981;&#31526;&#21512;&#37319;&#36141;&#35201;&#27714;&#32780;&#34987;&#25490;&#38500;&#22312;&#25919;&#24220;&#35746;&#21333;&#20043;&#22806;&#12290;</p><p>&#22522;&#20110;&#27492;&#65292;&#25105;&#20204;&#21487;&#20197;&#23545;&#24494;&#36719;&#30340;&#21160;&#26426;&#20570;&#20986;&#21512;&#29702;&#25512;&#27979;&#65306;&#23427;&#36843;&#20999;&#38656;&#35201;&#19968;&#20010;&#30001;&#33258;&#24049;&#20027;&#23548;&#12289;&#19988;&#24102;&#26377;&#12300;&#22269;&#38469;&#26631;&#20934;&#12301;&#20809;&#29615;&#30340;&#26684;&#24335;&#65292;&#20197;&#24212;&#23545;&#28508;&#22312;&#30340;&#30417;&#31649;&#23457;&#26597;&#65292;&#24182;&#23545;&#25239; ODF &#30340;&#25361;&#25112;&#12290;&#36825;&#20010;&#26032;&#26684;&#24335;&#30340;&#39318;&#35201;&#30446;&#26631;&#19981;&#26159;&#31616;&#27905;&#12289;&#36890;&#29992;&#25110;&#26131;&#20110;&#23454;&#29616;&#65292;&#32780;&#26159;&#12300;&#23433;&#25242;&#12301;&#30417;&#31649;&#26426;&#26500;&#65292;&#21516;&#26102;&#26368;&#22823;&#38480;&#24230;&#22320;&#20445;&#30041;&#33258;&#36523;&#30340;&#25216;&#26415;&#20248;&#21183;&#21644;&#21830;&#19994;&#21033;&#30410;&#12290;&#35201;&#23454;&#29616;&#36825;&#19968;&#28857;&#65292;&#26368;&#20415;&#25463;&#12289;&#25104;&#26412;&#26368;&#20302;&#30340;&#36335;&#24452;&#65292;&#23601;&#26159;&#23558;&#33258;&#24049;&#29616;&#26377;&#30340;&#22797;&#26434;&#29983;&#24577;&#30452;&#25509;&#25171;&#21253;&#25104;&#19968;&#20010;&#25152;&#35859;&#30340;&#12300;&#26631;&#20934;&#12301;&#12290;</p><p>&#20026;&#20102;&#35828;&#26126;&#36825;&#19968;&#28857;&#65292;&#20540;&#24471;&#25351;&#20986; OOXML &#21644; ODF &#36824;&#23384;&#22312;&#19968;&#20010;&#26356;&#21152;&#26412;&#36136;&#30340;&#19981;&#21516;&#12290;&#20026;&#27492;&#65292;&#20877;&#27425;&#35266;&#23519;&#21069;&#38754;&#32473;&#20986;&#30340; XML &#20195;&#30721;&#29255;&#27573;&#65292;&#24182;&#19988;&#27880;&#24847;&#20004;&#31181;&#26684;&#24335;&#20013;&#25991;&#26412;&#20869;&#23481;&#30340;&#20986;&#29616;&#20301;&#32622;&#12290;</p><pre><code><!-- OOXML --> <w:p><w:r><w:rpr><w:b></w:b><w:bcs></w:bcs></w:rpr><w:t>To be</w:t></w:r><w:r><w:t>, or not to be, that is the question</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><!-- ODF --> <text:p><text:span>To be</text:span>, or not to be, that is the question.</text:p></code></pre><p>&#21487;&#20197;&#30475;&#21040;&#65292;&#22312; ODF &#20013;&#65292;&#25991;&#26412;&#20869;&#23481;&#21487;&#20197;&#19982; XML &#26631;&#31614;&#31359;&#25554;&#20986;&#29616;&#65292;&#23601;&#20687;&#22312; HTML &#20013;&#19968;&#26679;&#12290;&#32780;&#22312; OOXML &#20013;&#65292;&#25991;&#26412;&#20869;&#23481;&#27704;&#36828;&#34987;&#21253;&#35065;&#22312;&#26368;&#24213;&#23618;&#30340; <code><w:t></w:t></code> &#20803;&#32032;&#37324;&#65292;&#32477;&#19981;&#20250;&#19982;&#20854;&#20182;&#32467;&#26500;&#21270;&#26631;&#31614;&#24179;&#32423;&#12290;</p><p>&#36825;&#31181;&#24046;&#24322;&#21453;&#26144;&#20986;&#20004;&#31181;&#26684;&#24335;&#20351;&#29992; XML &#30340;&#26041;&#24335;&#23436;&#20840;&#19981;&#21516;&mdash;&mdash;</p><ul> <li>ODF &#30340;&#35821;&#27861;&#26159;&#23558; XML &#20316;&#20026;&#19968;&#31181;&#26631;&#35760;&#35821;&#35328;&#65288;markup language&#65289;&#20351;&#29992;&#30340;&#12290;&#25442;&#21477;&#35805;&#35828;&#65292;&#25991;&#26412;&#20869;&#23481;&#26159;&#36825;&#31181;&#35821;&#27861;&#20013;&#30340;&#20027;&#35282;&#65292;&#23574;&#25324;&#21495;&#25324;&#36215;&#30340; XML &#26631;&#31614;&#29615;&#32469;&#22312;&#25991;&#26412;&#29255;&#27573;&#21608;&#22260;&#65292;&#26631;&#35760;&#20854;&#20869;&#37096;&#25991;&#26412;&#30340;&#22806;&#35266;&#12289;&#20301;&#32622;&#12289;&#23618;&#32423;&#31561;&#29305;&#24449;&#12290;&#36825;&#20854;&#23454;&#20063;&#26159; XML &#30340;<a href="https://en.wikipedia.org/wiki/XML#History">&#35774;&#35745;&#21021;&#34935;</a>&mdash;&mdash;&#20419;&#36827;&#25968;&#23383;&#23186;&#20307;&#20013;&#30340;&#20449;&#24687;&#23637;&#31034;&#65307;</li> <li>OOXML &#21017;&#23558; XML &#25386;&#29992;&#20026;&#20102;&#19968;&#31181;&#24207;&#21015;&#21270;&#65288;serialization&#65289;&#26684;&#24335;&#12290;&#25152;&#35859;&#12300;&#24207;&#21015;&#21270;&#12301;&#65292;&#26159;&#25351;&#23558;&#31243;&#24207;&#20869;&#23384;&#20013;&#30340;&#25968;&#25454;&#32467;&#26500;&#25110;&#23545;&#35937;&#36716;&#21270;&#20026;&#19968;&#20018;&#21487;&#23384;&#20648;&#25110;&#20256;&#36755;&#30340;&#25991;&#26412;&#12290;&#25442;&#21477;&#35805;&#35828;&#65292;OOXML &#19982;&#20854;&#35828;&#26159;&#22312;&#25551;&#36848;&#25991;&#26723;&#20869;&#23481;&#65292;&#19981;&#22914;&#35828;&#26159;&#22312;&#25551;&#36848; Office &#36719;&#20214;&#12300;&#30475;&#21040;&#12301;&#30340;&#25277;&#35937;&#32467;&#26500;&#12290;&#20363;&#22914;&#65292;&#19978;&#25991;&#20363;&#23376;&#23601;&#24207;&#21015;&#21270;&#20102;&#19968;&#20010;&#27573;&#33853;&#31867;&#22411;&#23545;&#35937;&#65292;&#23427;&#26159;&#30001;&#22810;&#20010;&#25991;&#26412;&#29255;&#27573;&#31867;&#22411;&#23545;&#35937;&#32452;&#25104;&#30340;&#26377;&#24207;&#38598;&#21512;&#12290;&#20854;&#20013;&#65292;&#26377;&#30340;&#25991;&#26412;&#29255;&#27573;&#23545;&#35937;&#20855;&#26377;&#26679;&#24335;&#23646;&#24615;&#65292;&#24182;&#19988;&#27599;&#20010;&#25991;&#26412;&#23545;&#35937;&#37117;&#26377;&#19968;&#20010;&#23383;&#31526;&#20018;&#23646;&#24615;&#29992;&#26469;&#35760;&#24405;&#25991;&#23383;&#20869;&#23481;&#12290;</li> </ul><p>&#36825;&#20010;&#32467;&#35770;&#21487;&#20197;&#36890;&#36807;&#27604;&#36739; OOXML &#26631;&#20934;&#21644; Office &#30340;&#32534;&#31243;&#35821;&#35328; Visual Basic for Applications (VBA) &#24471;&#21040;&#21360;&#35777;&#12290;&#20363;&#22914;&#65292;OOXML &#20013;&#27573;&#33853;&#23646;&#24615; <code><w:ppr></w:ppr></code> &#25152;&#20801;&#35768;&#30340;&#23376;&#20803;&#32032;&#65288;ECMA-376 Part 1, &sect; 17.3.2.28&#65289;&#65292;&#19982; VBA &#20013;<a href="https://learn.microsoft.com/en-us/office/vba/api/word.paragraph">&#27573;&#33853;&#23545;&#35937; (<code>Paragraph</code>)</a> &#30340;&#23646;&#24615;&#20960;&#20046;&#19968;&#19968;&#23545;&#24212;&#12290;&#20854;&#20182;&#35768;&#22810; OOXML &#20803;&#32032;&#21644;&#23545;&#24212;&#30340; VBA &#23545;&#35937;&#20063;&#26377;&#36825;&#31181;&#23545;&#24212;&#20851;&#31995;&#12290;</p><p>&#36825;&#23601;&#35299;&#37322;&#20102; OOXML &#22797;&#26434;&#24615;&#30340;&#25104;&#22240;&#65306;&#23427;&#21407;&#23553;&#19981;&#21160;&#22320;&#21453;&#26144;&#20102; Office &#36719;&#20214;&#30340;&#32321;&#22797;&#21151;&#33021;&#21644;&#21382;&#21490;&#21253;&#34993;&#12290;&#20026;&#20102;&#20445;&#35777;&#23384;&#20648;&#26684;&#24335;&#30340;&#36824;&#21407;&#24230;&#21644;&#20860;&#23481;&#24615;&#65292;&#24494;&#36719;&#27809;&#26377;&#36873;&#25321;&#22312;&#25991;&#20214;&#20013;&#25551;&#36848;&#25991;&#26723;&#30340;&#22806;&#35266;&#65292;&#28982;&#21518;&#29992;&#31243;&#24207;&#26469;&#35299;&#26512;&#21644;&#36824;&#21407;&#36825;&#20123;&#25551;&#36848;&#65292;&#32780;&#26356;&#20687;&#26159;&#30452;&#25509;&#25226;&#31243;&#24207;&#30340;&#36816;&#34892;&#29366;&#24577;&#36716;&#20648;&#21040;&#25991;&#20214;&#20013;&#12290;&#20174;&#36825;&#20010;&#24847;&#20041;&#19978;&#35828;&#65292;OOXML &#19982;&#20854;&#35828;&#26159;&#19968;&#20010;&#12300;&#26631;&#20934;&#12301;&#65292;&#19981;&#22914;&#35828;&#23601;&#26159;&#24212;&#29992;&#31243;&#24207;&#26412;&#36523;&#65292;&#26159; Office &#36719;&#20214;&#30340;&#23556;&#24433;&#12290;</p><p>&#20107;&#23454;&#19978;&#65292;&#30001;&#20110; Office &#30340;&#21382;&#21490;&#21253;&#34993;&#36807;&#20110;&#27785;&#37325;&#65292;&#24494;&#36719;&#33258;&#24049;&#21040;&#29616;&#22312;&#37117;&#27809;&#26377;&#20570;&#21040;&#23436;&#20840;&#36981;&#24490; OOXML &#26631;&#20934;&#12290;ECMA-376 &#23558; OOXML &#20998;&#20026;&#12300;&#20005;&#26684;&#12301;&#65288;Strict&#65289;&#21644;&#12300;&#36807;&#28193;&#12301;&#65288;Transitional&#65289;&#20004;&#20010;&#29256;&#26412;&#12290;&#25152;&#35859;&#12300;&#36807;&#28193;&#12301;&#65292;&#23601;&#26159;&#20026;&#20102;&#20860;&#23481;&#26087;&#29256; Office &#30340;&#21508;&#31181;&#29305;&#27530;&#34892;&#20026;&#32780;&#20445;&#30041;&#30340;&#21151;&#33021;&#65292;&#35760;&#24405;&#22312;&#26631;&#20934;&#30340;&#31532;&#22235;&#37096;&#20998;&#65292;&#20363;&#22914; <code>footnoteLayoutLikeWW8</code>&#12289;<code>autoSpaceLikeWord9</code>&#12289;<code>useWord97LineBreakRules</code> &#31561;&#31561;&#12290;&#26102;&#33267;&#20170;&#26085;&#65292;Office &#40664;&#35748;&#20445;&#23384;&#30340;&#20173;&#28982;&#26159;&#36825;&#31181;&#12300;&#36807;&#28193;&#12301;&#26684;&#24335;&#12290;&#24494;&#36719;&#36824;&#26377;&#19968;&#20221;&#20887;&#38271;&#30340;<a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/21b45168-16f9-466d-9445-1992a02c517a">&#25991;&#26723;</a>&#35828;&#26126; Office &#22312;&#21738;&#20123;&#26041;&#38754;&#36829;&#21453;&#20102; ECMA-376 &#26631;&#20934;&#65292;&#20363;&#22914;&#23545;&#35768;&#22810;&#40664;&#35748;&#20540;&#30340;&#19981;&#21516;&#35808;&#37322;&#21644;&#22788;&#29702;&#12289;&#33258;&#23450;&#20041;&#37096;&#20214;&#21644;&#25193;&#23637;&#24615;&#31561;&#12290;</p><p>&#27492;&#22806;&#65292;&#23558;&#25991;&#20214;&#26684;&#24335;&#19982;&#31243;&#24207;&#29366;&#24577;&#39640;&#24230;&#32465;&#23450;&#65292;&#20063;&#19981;&#26159;&#19968;&#31181;&#25925;&#24847;&#12300;&#25605;&#27985;&#27700;&#12301;&#30340;&#26032;&#21457;&#26126;&#65292;&#32780;&#26159; Office &#30340;&#12300;&#31062;&#20256;&#12301;&#24605;&#36335;&#12290;&#30693;&#21517;&#36719;&#20214;&#24037;&#31243;&#21338;&#20027; Joel Spolsky &#22312;<a href="https://www.joelonsoftware.com/2008/02/19/why-are-the-microsoft-office-file-formats-so-complicated-and-some-workarounds/">&#19968;&#31687;&#32463;&#20856;&#25991;&#31456;</a>&#20013;&#20998;&#26512;&#36807;&#26087;&#29256; Office &#20108;&#36827;&#21046;&#26684;&#24335;&#30340;&#22797;&#26434;&#24615;&#65292;&#20854;&#20013;&#34920;&#26126;&#36825;&#20123;&#26087;&#26684;&#24335;&#36824;&#35201;&#26356;&#31867;&#20284;&#20110;&#20869;&#23384;&#30340;&#30452;&#25509;&#36716;&#20648;&#65292;&#24182;&#19988;&#20063;&#35748;&#20026;&#36825;&#31181;&#35774;&#35745;&#26356;&#22810;&#26159;&#20986;&#20110;&#24615;&#33021;&#21644;&#29616;&#23454;&#30340;&#32771;&#37327;&#65292;&#32780;&#38750;&#24694;&#24847;&#25110;&#26080;&#33021;&#12290;</p><p>&#20854;&#23454;&#65292;&#26089;&#22312; OOXML &#20043;&#21069;&#65292;&#24494;&#36719;&#23601;&#24050;&#32463;&#22312;&#25506;&#32034;&#20174;&#20108;&#36827;&#21046;&#26684;&#24335;&#21521; XML &#36716;&#22411;&#65292;&#24182;&#19988;&#22312; Office XP &#21644; 2003 &#20013;&#20998;&#21035;&#25903;&#25345;&#20102;&#19968;&#31181;&#26356;&#12300;&#21407;&#22987;&#12301;&#30340; <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-xp/aa140066(v=office.10)">Excel XML</a> &#21644; <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-2003/aa174023(v=office.11)">Word XML</a> &#26684;&#24335;&#12290;&#36825;&#20123;&#26684;&#24335;&#30340;&#35821;&#27861;&#24050;&#32463;&#20307;&#29616;&#20986; OOXML &#30340;&#38607;&#24418;&#65292;&#20294;&#27809;&#26377;&#37319;&#29992; ZIP &#25171;&#21253;&#65292;&#32780;&#26159;&#23558;&#25152;&#26377;&#32452;&#20214;&#21644;&#36164;&#28304;&#25991;&#20214;&#65288;&#32534;&#30721;&#20026;&#20108;&#36827;&#21046;&#25968;&#25454;&#65289;&#37117;&#22534;&#25918;&#22312;&#21333;&#20010; XML &#25991;&#20214;&#20013;&#12290;&#36825;&#20063;&#20174;&#20391;&#38754;&#34920;&#26126;&#65292;OOXML &#24182;&#19981;&#26159;&#24494;&#36719;&#20026;&#20102;&#12300;&#25630;&#20081;&#12301;&#31454;&#20105;&#32780;&#23450;&#21046;&#30340;&#65292;&#32780;&#26159;&#19968;&#20123;&#24050;&#26377;&#24605;&#36335;&#21644;&#25104;&#26524;&#30340;&#24310;&#32493;&mdash;&mdash;&#23613;&#31649;&#24182;&#19981;&#26159;&#29305;&#21035;&#20248;&#38597;&#30340;&#24605;&#36335;&#21644;&#25104;&#26524;&#12290;</p><h2>&#32467;&#35821;</h2><p>&#26412;&#25991;&#30340;&#30446;&#30340;&#24182;&#19981;&#26159;&#20026;&#24494;&#36719;&#24320;&#33073;&#65307;&#23427;&#26412;&#21487;&#20197;&#20570;&#24471;&#26356;&#22909;&#12290;&#24403;&#38754;&#20020;&#12300;&#24320;&#25918;&#12301;&#30340;&#22806;&#37096;&#35201;&#27714;&#26102;&#65292;&#24494;&#36719;&#26412;&#21487;&#20197;&#25512;&#20986;&#19968;&#20010;&#26356;&#24178;&#20928;&#21644;&#29616;&#20195;&#30340;&#26631;&#20934;&#65292;&#23558;&#24222;&#26434;&#12289;&#20805;&#28385;&#30683;&#30462;&#30340;&#12300;&#36951;&#20135;&#12301;&#20445;&#30041;&#22312;&#31243;&#24207;&#20869;&#37096;&#33258;&#34892;&#28040;&#21270;&#12290;&#30456;&#21453;&#65292;&#23427;&#36873;&#25321;&#23558;&#36825;&#20123;&#36951;&#20135;&#32479;&#32479;&#25171;&#21253;&#65292;&#25172;&#36827;&#19968;&#20010; XML &#23481;&#22120;&#65292;&#28982;&#21518;&#21033;&#29992;&#20854;&#24066;&#22330;&#21147;&#37327;&#25512;&#21521;&#19990;&#30028;&#65292;&#24182;&#36843;&#20351;&#20854;&#20182;&#20154;&#26469;&#25215;&#25285;&#29702;&#35299;&#21644;&#28040;&#21270;&#30340;&#25104;&#26412;&#12290;&#23613;&#31649;&#26412;&#25991;&#20027;&#24352;&#23558;&#36825;&#19982; LibreOffice &#25152;&#25351;&#25511;&#30340;&#12300;&#33988;&#24847;&#30772;&#22351;&#31454;&#20105;&#12301;&#20316;&#20986;&#21306;&#20998;&#65292;&#20294;&#26174;&#28982;&#65292;&#19968;&#20010;&#30772;&#30862;&#12289;&#20302;&#36136;&#37327;&#30340;&#26631;&#20934;&#65292;&#26080;&#35770;&#20854;&#24418;&#25104;&#26159;&#28304;&#20110;&#38452;&#35851;&#36824;&#26159;&#30095;&#24573;&#65292;&#37117;&#26159;&#20250;&#23545;&#29983;&#24577;&#31995;&#32479;&#36896;&#25104;&#25439;&#23475;&#30340;&#12290;</p><p>&#20294;&#21478;&#19968;&#26041;&#38754;&#65292;LibreOffice &#25991;&#31456;&#25152;&#21453;&#26144;&#20986;&#30340;&#26576;&#20123;&#24605;&#32500;&#20063;&#19981;&#20540;&#24471;&#40723;&#21169;&#12290;&#23427;&#20687;&#35768;&#22810;&#24320;&#28304;&#25317;&#36280;&#30340;&#24120;&#35265;&#35770;&#35843;&#19968;&#26679;&#65292;&#12300;&#24680;&#38081;&#19981;&#25104;&#38050;&#12301;&#22320;&#25351;&#36131;&#29992;&#25143;&#19981;&#21152;&#25209;&#21028;&#22320;&#25509;&#21463;&#24494;&#36719;&#30340;&#23553;&#38381;&#25216;&#26415;&#12290;&#20294;&#29992;&#25143;&#24182;&#19981;&#20667;&#12290;&#25216;&#26415;&#30340;&#20248;&#38597;&#12289;&#25480;&#26435;&#30340;&#24320;&#25918;&#22266;&#28982;&#26159;&#20248;&#28857;&#65292;&#20294;&#23545;&#22823;&#22810;&#25968;&#29992;&#25143;&#26469;&#35828;&#65292;&#36825;&#21482;&#26159;&#20915;&#31574;&#30340;&#20247;&#22810;&#32771;&#37327;&#20043;&#19968;&#65292;&#29978;&#33267;&#19981;&#26159;&#26368;&#20027;&#35201;&#30340;&#22240;&#32032;&#12290;&#20316;&#20026; ODF &#26684;&#24335;&#30340;&#12300;&#26071;&#33328;&#12301;&#36719;&#20214;&#65292;LibreOffice &#33258;&#36523;&#20174;&#35774;&#35745;&#21040;&#20132;&#20114;&#20877;&#21040;&#24615;&#33021;&#65292;&#37117;&#23384;&#22312;&#35768;&#22810;&#31895;&#31961;&#20043;&#22788;&#12290;&#20197;&#33267;&#20110;&#21363;&#20351; Office &#19981;&#26029;&#29992;&#33219;&#32959;&#30340;&#21151;&#33021;&#33258;&#24223;&#27494;&#21151;&#65292;&#22312;&#22810;&#25968;&#20154;&#30524;&#20013;&#23427;&#20381;&#28982;&#27604; LibreOffice &#26356;&#12300;&#26131;&#29992;&#12301;&#12290;&#22914;&#26524;&#19981;&#33021;&#27491;&#35270;&#24182;&#31995;&#32479;&#22320;&#25913;&#21892;&#36825;&#20123;&#38382;&#39064;&#65292;&#37027;&#20040;&#23545;&#24320;&#28304;&#36719;&#20214;&#21644;&#24320;&#25918;&#26684;&#24335;&#30340;&#40723;&#21561;&#65292;&#23601;&#21482;&#33021;&#20572;&#30041;&#22312;&#21898;&#21475;&#21495;&#21644;&#39038;&#24433;&#33258;&#24604;&#30340;&#23618;&#38754;&#65292;&#26082;&#26080;&#27861;&#35753;&#20854;&#22768;&#38899;&#34987;&#26356;&#24191;&#27867;&#30340;&#20154;&#32676;&#25509;&#32435;&#65292;&#20063;&#38590;&#20197;&#23545;&#22404;&#26029;&#24066;&#22330;&#26500;&#25104;&#23454;&#36136;&#24615;&#30340;&#25361;&#25112;&#12290;</p></section> </section>]]></description><pubDate>Sat, 06 Sep 2025 04:39:06 +0530</pubDate></item><item><link>https://dannorth.net/blog/cupid-the-back-story/</link><title>I just want to know if there are more people thinking that SOLID is overrated and sometimes add unnecessary complexity (dannorth.net)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/</guid><comments>https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 17 min | <a href='https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I think SOLID it could be good, however try to follows strictly SOLID principles can easily become a problem. I have been working in software industry for around 15 years. I remember one time when I had to debug old code that abuse so much about using inheritance/interfaces. There was around 8 levels of inheritance/interfaces, all clases are almos empty with only skeleton just to support next class, at the end the source file that made the magic was only a simple division, something like </p><p>double myVal=a/b;</p><p>I&#39;m pretty sure that was donde because original team did it just to &quot;prepare&quot; code for the future, but the truth is that only brings more problem that solutions</p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><details> <summary>Table of Contents</summary> <nav> <ul> <li><a href="https://dannorth.net#why-every-single-element-of-solid-is-wrong">Why every single element of SOLID is wrong</a> <ul> <li><a href="https://dannorth.net#single-responsibility-principle">Single Responsibility Principle</a></li> <li><a href="https://dannorth.net#open-closed-principle">Open-Closed Principle</a></li> <li><a href="https://dannorth.net#liskov-substitution-principle">Liskov Substitution Principle</a></li> <li><a href="https://dannorth.net#interface-segregation-principle">Interface Segregation Principle</a></li> <li><a href="https://dannorth.net#dependency-inversion-principle">Dependency Inversion Principle</a></li> </ul> </li> <li><a href="https://dannorth.net#if-you-dont-like-them-i-have-others">&lsquo;If you don&rsquo;t like them, I have others&rsquo;</a></li> </ul> </nav> </details> <blockquote><p>&ldquo;If you had to offer some principles for modern software development, which would you choose?&rdquo;</p></blockquote><p>At a recent <a href="https://www.extremetuesday.com">Extreme Tuesday Club</a> (XTC) virtual meet-up, we were discussing <a href="https://www.meetup.com/eXtreme-Tuesday-Club-XTC/events/xhgncsyccfbdb/">whether the SOLID principles are outdated</a>. A while ago I gave a tongue-in-cheek talk on the topic, so ahead of the meet-up one of the organizers asked what principles I would replace SOLID with since I disagreed with them. I have been thinking about this for some time and I proposed five of my own, which form the acronym <em>CUPID</em>.</p><p>This article isn&rsquo;t about those principles, that will be my next post. This is about why I think we need them. I want to share the back story and explain why I&rsquo;ve never really bought into SOLID. To do that, let&rsquo;s talk about the talk.</p><h2>Why every single element of SOLID is wrong<a href="https://dannorth.net#why-every-single-element-of-solid-is-wrong"></a> </h2><p><a href="https://pubconf.io">PubConf</a> was invented as a kind of afterparty to the NDC conferences. As the name suggests, it takes place in a pub. Several speakers give an Ignite-style talk - 20 slides, 15 seconds per slide, auto-advancing - and the audience roars, stamps, claps and thunders its approval accordingly. The winner gets something and everyone has a great time.</p><p>A few years ago I was invited to speak at a PubConf event in London. I like the challenge of a constrained talk. This one had to be drunk-people funny and Ignite-shaped. I had been thinking about Robert C. Martin&rsquo;s <a href="https://www.baeldung.com/solid-principles">SOLID principles</a>, and in the spirit of &ldquo;it depends&rdquo; I thought it would be fun to see whether I could refute each principle with a straight face. I also wanted to propose an alternative in each case.</p><p>Now some talks write themselves: I figured I could use one slide to introduce each principle, one to challenge it, one to pitch an alternative, five times. That&rsquo;s 15 slides, with 45 seconds per principle. Top-and-tail it, and there were my 20 slides!</p><p>As I wrote the talk I noticed two things. First, it was much easier to refute each principle than I thought (apart from Liskov&rsquo;s Substitution Principle, so I had to tackle that a different way). Second, the alternative kept turning out to be the same thing: <em>Write simple code</em>. It is easy to challenge that with &ldquo;What does &lsquo;simple&rsquo; even mean?&rdquo; but I had a good working definition for that so I wasn&rsquo;t too worried.</p><p>After the conference I put <a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong">the slides up on SpeakerDeck</a> and a whole load of people I have never met started attacking first the premise of the talk, then the detail of slides from a talk they never heard me give, then <a href="https://www.entropywins.wtf/blog/2017/02/17/why-every-single-argument-of-dan-north-is-wrong/">me personally</a>.</p><p>Since I&rsquo;ve never written it up, here is roughly how the talk went. Bear in mind that for each principle, I had 15 seconds to introduce it, 15 seconds to challenge it, and 15 seconds to propose an alternative. Ready? Go!</p><h3>Single Responsibility Principle<a href="https://dannorth.net#single-responsibility-principle"><svg><path></path></svg></a> </h3><p>The Single Responsibility Principle says that code should only do one thing. Another framing is that it should have &ldquo;one reason to change&rdquo;. I called this the &ldquo;Pointlessly Vague Principle&rdquo;. What is one thing anyway? Is ETL - Extract-Transform-Load - one thing (a <code>DataProcessor</code>) or three things? Any non-trivial code can have any number of reasons to change, which may or may not include the one you had in mind, so again this doesn&rsquo;t make much sense to me.</p><p>Instead I suggested to <em>write simple code</em> using the heuristic that it &ldquo;Fits In My Head&rdquo;. What does that mean? You can only reason about something if it fits in your head. Conversely, if something doesn&rsquo;t fit in your head, you can&rsquo;t reason about it. Code should fit in your head at any level of granularity, whether it is at method/function level, class/module level, components made up of classes, or entire distributed applications.</p><p>You might ask &lsquo;Whose head?&rsquo; For the purpose of the heuristic I assume the owner of the head can read and write idiomatic code in whichever languages are in play, and that they are familiar with the problem domain. If they need more esoteric knowledge than that, for instance knowing which of the many undocumented internal systems we need to integrate with to get any work done, then that should be made explicit in the code so that it will fit in their head.</p><p>At each scale there should be enough conceptual integrity that you can grasp &ldquo;the whole&rdquo; at that level. If you can&rsquo;t, then that is a heuristic to strive for in your restructuring activities. Sometimes you can bundle several things together and they still fit in your head. The bundling even makes them easier to reason about than if they are artificially split out because someone insisted on Single Responsibility. In other cases, it makes sense to decompose a single responsibility artificially into several steps just to make each one easier to reason about.</p><h3>Open-Closed Principle<a href="https://dannorth.net#open-closed-principle"></a> </h3><p>This is the idea that code should be <em>open for extension</em>, i.e. easy to extend without changing, and <em>closed for modification</em>, i.e. you can trust what it does so you don&rsquo;t need to go in and tinker with it.</p><p>This was sage advice in an age where code was:</p><ul> <li><strong>expensive to change:</strong> Try making a small change and then compiling and linking a few million lines of C++ in the 1990s. I&rsquo;ll wait.</li> <li><strong>risky to change</strong>, because we hadn&rsquo;t figured out <a href="https://www.refactoring.com">refactoring</a> yet, never mind <a href="https://www.jetbrains.com">refactoring IDEs</a> (outside of Smalltalk) or <a href="https://www.martinfowler.com/bliki/TestDrivenDevelopment.html">example-guided programming</a>.</li> <li><strong>mostly additive:</strong> You would write some code, check it in (if you were down with the kids and using a version control system like RCS or SCCS), and then move on to the next file. You were translating the detailed functional spec into code, one lump at a time. Renaming things was uncommon; renaming files doubly so. CVS, which became the ubiquitous source control system, would <em>literally forget the entire history of a file</em> if you renamed it, it was such an uncommon activity. This is easy to overlook in an age of automated refactoring, and changeset-based version control.</li> </ul><p>Nowadays, the equivalent advice if you need code to do something else is: <em>Change the code to make it do something else!</em> It sounds trite, but we think of code as malleable now <a href="https://www.artima.com/articles/working-the-program">like clay</a>, where in the Olden Days the metaphor was more like building blocks. There was no feedback loop between The Spec and The Code like we have with automated examples.</p><p>In this case I railed against the &lsquo;Cruft Accretion Principle". Code is not an &ldquo;asset&rdquo; to be carefully shrink-wrapped and preserved, but a cost, a debt. <em>All code is cost.</em> So if I can take a big pile of existing cost and replace it with a smaller more specific cost, then I&rsquo;m winning at code! <em>Write simple code</em> that is easy to change, and you have code that is both open and closed, however you need it.</p><h3>Liskov Substitution Principle<a href="https://dannorth.net#liskov-substitution-principle"><svg><path></path></svg></a> </h3><p>This is just the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of Least Surprise</a> applied to code substitution, and as such is pretty sensible. If I tell you something is a valid subtype of the thing you have, then you should be able to assume it will act the same in any sense that you care about.</p><p>However, the language LSP uses of &ldquo;subtypes&rsquo;, coupled with the way most developers conflate subtypes with subclasses, and the vagaries of &ldquo;desirable properties&rsquo;, means that it tends to evoke the class-based inheritance language of &ldquo;<em>is-a</em>&rdquo; and &ldquo;<em>has-a</em>&rdquo;, and its corresponding 1980s entity modelling.</p><p>In the spirit of using a butter knife as a screwdriver, many objects can &ldquo;<em>act-like-a</em>&rdquo; or &ldquo;<em>sometimes-be-used-as-a</em>&rdquo; or &ldquo;<em>pass-off-as-a-if-you-squint</em>&rdquo;. In this context what we really want is small, simple types that we can compose into whatever more complex structures we need, and to make our peace with all the nuances that go along with that. My advice, <em>quelle surprise</em>, is to &ldquo;write simple code&rdquo; that is easy to reason about.</p><h3>Interface Segregation Principle<a href="https://dannorth.net#interface-segregation-principle"></a> </h3><p>This really is fish-in-a-barrel as principles go. For some reason, this one caused the most controversy, but to me it is the easiest to debunk. While <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">researching</a> this talk I discovered that this pattern came about when Robert C. Martin was wrangling a <a href="https://en.wikipedia.org/wiki/God_object">God object</a> in the middle of some printing software at Xerox. Everything was happening in a class called <code>Job</code>. His approach to simplifying it was to find each place where it was used, figure out which methods &ldquo;went together&rdquo; and put those in an intermediate interface. This had several immediate benefits:</p><ul> <li>Collecting related methods into different interfaces showed all the different responsibilities the <code>Job</code> class was performing.</li> <li>Giving each interface an intention-revealing name made the code easier to reason about than just passing a <code>Job</code> object around.</li> <li>It created the option to break the <code>Job</code> class out into smaller classes fronted by each interface. (Arguably they didn&rsquo;t need the interface any more now.)</li> </ul><p>All of this makes sense, it&rsquo;s just that it isn&rsquo;t a principle, it is a pattern. A principle is something that is generally good advice in any context: Seek first to understand, then to be understood; Be excellent to each other.</p><p>A pattern is a strategy that works in a given context (God class) that has benefits (smaller components) and trade-offs (more separate things to manage). The principle would have been about not getting into that mess in the first place!</p><p>Thus I argued that if this were a principle at all, it was the &ldquo;Stable Door Principle&rdquo;. If you had small, role-based classes in the first place, you wouldn&rsquo;t be in the position of trying to decompose a huge, tangled mess.</p><p>Sure, we may find ourselves in that context from time to time, and when we do, interface segregation is a perfectly cromulent strategy for slicing your way towards sanity, along with building a suite of <a href="https://michaelfeathers.silvrback.com/characterization-testing">characterization tests</a> and all of the other advice in Mike Feathers&rsquo; brilliant <a href="https://www.pearson.com/us/higher-education/program/Feathers-Working-Effectively-with-Legacy-Code/PGM254740.html">Working Effectively With Legacy Code</a>.</p><h3>Dependency Inversion Principle<a href="https://dannorth.net#dependency-inversion-principle"><svg><path></path></svg></a> </h3><p>While there is nothing fundamentally wrong with DIP, I don&rsquo;t think it is an overstatement to say that our obsession with dependency inversion has single-handedly caused billions of dollars in irretrievable sunk cost and waste over the last couple of decades.</p><p>The real principle here is <em>option</em> inversion. A dependency is only interesting when there might be multiple ways of providing it, and you only need to invert the relationship when you believe the wiring is important enough to become a separate concern. That&rsquo;s quite a high bar, and mostly all you ever need is a <code>main</code> method.</p><p>If instead you subscribe to the idea that all dependencies should be inverted all the time, you end up with J2EE, OSGi, Spring, or any other &ldquo;declarative assembly&rdquo; framework where the structuring of the components is itself a twisty maze of config. J2EE deserves a special mention for deciding that each type of dependency inversion - EJBs, servlets, web domains, remote service location, even the configuration configuration - should be owned by different roles.</p><p>In the wild, there are entire shadow codebases where each class is backed by exactly one interface, which only exists to satisfy a wiring framework or to inject a mock or stub for automated testing theatre. The promise of &ldquo;you can just swap out the database&rdquo; evaporates as soon as you try to, well, swap out the database.</p><p>Most dependencies don&rsquo;t need inverting, because most dependencies aren&rsquo;t options, they are just the way we are going to do it this time. So my - by now entirely unsurprising - suggestion is to <em>write simple code</em>, by focusing on use rather than reuse.</p><h2>&lsquo;If you don&rsquo;t like them, I have others&rsquo;<a href="https://dannorth.net#if-you-dont-like-them-i-have-others"></a> </h2><p>When I look at SOLID, I see a mix of things that were once good advice, patterns that apply in a context, and advice that is easy to misapply. I wouldn&rsquo;t offer any of it as context-free advice to new programmers. So what would I do instead? I thought there might be a one-to-one correspondence for each of the SOLID principles and patterns, since there is nothing inherently bad or wrong with any of them, but as the saying goes, &lsquo;If I were going to Dublin, I wouldn&rsquo;t start from here.&rsquo;</p><p>So, given what I have learned about software development over the last 30 years, are there any principles that I would offer instead? And could they form a pithy acronym? The answer is in yes, and I will outline them in the next article.</p><p>Check out <a href="https://goalwards.co">Goalwards</a><sup>&reg;</sup>, our new business agility practice! </p><section> <hyvor-talk-comments></hyvor-talk-comments> </section> </div></section>]]></description><pubDate>Fri, 05 Sep 2025 22:23:43 +0530</pubDate></item><item><link>https://www.bitflux.ai/blog/memory-is-slow-part2/</link><title>io_uring is faster than mmap (bitflux.ai)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/</guid><comments>https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 41 min | <a href='https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><section> <h2>TL;DR</h2><p>Sourcing data directly from disk <em>IS</em> faster than caching in memory. I brought receipts. Because hardware got wider but not faster, the old methods don't get you there. You need new tools to use what is scaling and avoid what isn't.</p><h2>Introduction</h2><p>In part 1 I showed how some computer performance factors are scaling exponentially while others have been stagnant for decades. I then asserted, without proof, that sourcing data from disk can be faster than from memory. What follows is the proof.</p><p>Computer Science dogma says that unused memory should be used to cache things from the filesystem because the disk is slow and memory is fast. Given that disk bandwidth is growing exponentially and memory access latency has stagnated this isn't always true anymore.</p><h2>Experimental set up</h2><p>We need data and something straight forward to do with the data. I used my free will or the illusion thereof to create a benchmark I cleverly call "counting 10s". I write some pseudo random integers between 0 and 20 to a buffer and then count how many of the integers are 10. I want to make sure we are doing all the counting in a single thread to simulate an Amdahl's Law situation.</p><p>So how fast can we expect this to run? The upper limit would be the memory bandwidth.</p><p>My testing rig is a server with an old AMD EPYC 7551P 32-Core Processor on a Supermicro H11SSL-i and 96GB of DDR4 2133 MHz and a couple of 1.92TB Samsung PM983a PCIe 3.0 SSDs I pieced together from EBay parts. Given the way this server is configured, the upper limit for memory bandwidth can be calculated as 3 channels * 2133MT/s * 8B/T / 4 numa domains = ~13GB/s for a single thread. It's kind of an odd system but that just makes it more fun to optimize for!</p><p>The disks are rated at 3.1GB/s read BW each for an upper limit of 6.2GB/s. I made a raid0 volume with 4KB stripe size, formatted the the raid as ext4 with no journaling, and made sure it fully finished initializing the metadata before running the tests.</p><pre><code><span>sudo</span><span> mdadm</span><span> --create</span><span> /dev/md0</span><span> --level</span><span>=0</span><span> --raid-devices</span><span>=2</span><span> --chunk</span><span>=4K /dev/nvme1n1 /dev/nvme2n1 </span><span>sudo</span><span> mkfs.ext4</span><span> -F -L</span><span> data</span><span> -O</span><span> ^has_journal</span><span> -E</span><span> lazy_itable_init=0 /dev/md0 </span><span>sudo</span><span> mount</span><span> -o</span><span> noatime /dev/md0 mnt </span></code></pre><p>We'll use a 50GB dataset for most benchmarking here, because when I started this I thought the test system only had 64GB and it stuck.</p><h2>Simple Loop</h2><p>The simple and cleanest way to do this in C would look like this.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>// count_10_loop </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>int</span><span>* data = (</span><span>int</span><span>*)</span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span> </span><span>printf</span><span>("</span><span>Found </span><span>%ld</span><span> 10s</span><span>\n</span><span>", count); </span><span>} </span></code></pre><p>Just mmap() the file which will give us a buffer that we can read from. Then we just loop and count the 10s.</p><p>Because the point is to benchmark we will integrate some timing mechanisms before we move on.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>// count_10_loop </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>int</span><span>* data = (</span><span>int</span><span>*)</span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>simple loop found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>For the first run we're going to be reading from the disk. The disk/filesystem read is going to limit the performance before the memory bandwidth can.</p><pre><code><span>&#10095; sudo ./count_10_loop ./mnt/datafile.bin 53687091200 </span><span>simple loop found 167802249 10s processed at 0.61 GB/s </span></code></pre><p>As expected, it's not anywhere near memory speeds because as everyone knows, disk is slow. We can look at the system and confirm that the first run cached the data to memory.</p><p>Our expectation is that the second run will be faster because the data is already in memory and as everyone knows, memory is fast.</p><pre><code><span>&#10095; sudo ./count_10_loop ./mnt/datafile.bin 53687091200 </span><span>simple loop found 167802249 10s processed at 3.71 GB/s </span></code></pre><p>It is faster, but clearly that&rsquo;s slower than the memory can feed it to the processor. What bottleneck might we be hitting? This speed does look possibly correlated to the instructions per second limit for this generation of CPU (between 2GHz * 1.5 IPC = 3G and 3GHz boost * 1.5 IPC = 4.5G instructions per second).</p><p>We can use perf to see if the CPU is using vector instructions, if not then the actual compute is the bottleneck.</p><pre><code><span>Percent&#9474; test %rbp,%rbp </span><span> &#9474; &darr; je 84 </span><span> &#9474; lea (%rbx,%rbp,4),%rcx </span><span> &#9474; mov %rbx,%rax </span><span> &#9474; xor %ebp,%ebp </span><span> &#9474; nop </span><span> &#9474;70: xor %edx,%edx </span><span> 1.31 &#9474; cmpl $0xa,(%rax) </span><span> 42.38 &#9474; sete %dl </span><span> 45.72 &#9474; add $0x4,%rax </span><span> 0.01 &#9474; add %rdx,%rbp </span><span> 10.42 &#9474; cmp %rax,%rcx </span><span> 0.16 &#9474; &uarr; jne 70 </span><span> &#9474;84: xor %eax,%eax </span><span> &#9474; shr $0x14,%r12 </span><span> &#9474; &rarr; call get_time_us </span><span> &#9474; pxor %xmm0,%xmm0 </span><span> &#9474; pxor %xmm1,%xmm1 </span></code></pre><p>Confirmed. We're running non-vectorized instructions, with a single thread counting that's as fast as it can go with a 2GHz CPU. Well crap. We&rsquo;ve hit our first non-exponential limit. Even a brand new CPU running this machine code would probably struggle to do much better than a 50% improvement, still well below the memory bandwidth limit.</p><h2>Unrolling the loop</h2><p>Good news is this code can definitely be vectorized if we help the compiler. Unroll the loop!</p><p>We're gonna make it very obvious to the compiler that it's safe to use vector instructions which could process our integers up to 8x faster.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>// count_10_unrolled </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>void</span><span>* buffer = </span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> data = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>(buffer, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(data[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(data[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(data[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(data[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(data[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(data[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(data[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(data[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(data[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(data[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(data[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(data[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(data[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(data[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(data[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(data[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> count = (t0 + t1) + (t2 + t3); </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>unrolled loop found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>Check if we now have vectorized instructions with <code>perf</code>.</p><pre><code><span>Percent&#9474; movq %xmm0,%rcx </span><span> &#9474; movdqa %xmm7,%xmm14 </span><span> &#9474; pxor %xmm0,%xmm0 </span><span> &#9474; nop </span><span> &#9474; e8: movdqa %xmm6,%xmm4 </span><span> 0.30 &#9474; movdqa %xmm6,%xmm3 </span><span> 0.12 &#9474; movdqa %xmm6,%xmm2 </span><span> 0.35 &#9474; add $0x1,%rdx </span><span> 1.54 &#9474; pcmpeqd (%rax),%xmm4 </span><span> 54.64 &#9474; pcmpeqd 0x10(%rax),%xmm3 </span><span> 1.62 &#9474; movdqa %xmm6,%xmm1 </span><span> 0.99 &#9474; add $0x40,%rax </span><span> 0.12 &#9474; pcmpeqd -0x20(%rax),%xmm2 </span><span> 3.03 &#9474; pcmpeqd -0x10(%rax),%xmm1 </span><span> 1.32 &#9474; pand %xmm5,%xmm4 </span><span> 1.25 &#9474; pand %xmm5,%xmm3 </span><span> 1.55 &#9474; movdqa %xmm4,%xmm15 </span><span> 0.24 &#9474; punpckhdq %xmm0,%xmm4 </span></code></pre><p>Confirmed. We're using 128bit vector instructions, this should be up to 4x faster than the original.</p><blockquote><p>NOTE: These are 128-bit vector instructions, but I expected 256-bit. I dug deeper here and found claims that Gen1 EPYC had unoptimized 256-bit instructions. I forced the compiler to use 256-bit instructions and found it was actually slower. Looks like the compiler was smart enough to know that here.</p></blockquote><p>Let's benchmark this unrolled version with the data as page cache in memory.</p><pre><code><span>&#10095; sudo ./count_10_unrolled ./mnt/datafile.bin 53687091200 </span><span>unrolled loop found 167802249 10s processed at 5.51 GB/s </span></code></pre><p>We're still nowhere close to hitting the memory bus speed limit of 13GB/s but 50% faster than the original is a win. There must be some other bottleneck.</p><h2>Can the SSDs beat that?</h2><p>5.51GB/s? On paper the SSDs can read at 6.2GB/s, but the first run from disk only did 0.61GB/s. How can I meet or beat this performance sourcing the data directly from disk?</p><p>Consider how the default mmap() mechanism works, it is a background IO pipeline to transparently fetch the data from disk. When you read the empty buffer from userspace it triggers a fault, the kernel handles the fault by reading the data from the filesystem, which then queues up IO from disk. Unfortunately these legacy mechanisms just aren't set up for serious high performance IO. Note that at 610MB/s it's faster than what a disk SATA can do. On the other hand, it only managed 10% of our disk's potential. Clearly we're going to have to do something else.</p><p>SSDs don't just automatically read data at multigigabyte speeds. You need to put some real effort into an IO pipeline to get serious performance.</p><p>I made a io_uring based IO engine, a kind of userspace driver, that can hit these speeds. The main thread will request data, the IO engine will handle the IO, then the main thread will do the counting when the data is in a buffer. We will use a set of queues to manage the IO requests, responses, and buffers. The IO engine will start 6 workers, target a queue depth of 8192, and have a buffer size of 16KB.</p><p>I wish I had tighter code here, but A) I didn&rsquo;t have time to clean it up B) some of the complexity is intractable. The IO engine code was a lot to scroll through so I moved it to github <a href="https://github.com/bitflux-ai/blog_notes/tree/main/memory_is_slow_part2/diskbased">link</a></p><pre><code><span>#include </span><span>"</span><span>io_engine.h</span><span>" </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>getopt.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>#define </span><span>DEFAULT_WORKERS </span><span>6 </span><span>#define </span><span>DEFAULT_BLOCK_SIZE </span><span>16384 </span><span>#define </span><span>DEFAULT_QUEUE_DEPTH </span><span>8192 </span><span>// Count the number of "10" (int format) in the buffer </span><span>static inline </span><span>size_t </span><span>count_tens_unrolled</span><span>(</span><span>void</span><span>* </span><span>data</span><span>, size_t </span><span>size_bytes</span><span>) { </span><span>const </span><span>size_t total = size_bytes / sizeof(</span><span>int</span><span>); </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> p = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>(data, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(p[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(p[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(p[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(p[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(p[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(p[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(p[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(p[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(p[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(p[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(p[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(p[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(p[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(p[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(p[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(p[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> </span><span>return </span><span>(t0 + t1) + (t2 + t3); </span><span>} </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> </span><span>// Set up the io engine </span><span> ioengine_t* na = </span><span>ioengine_alloc</span><span>(filename, size_bytes, DEFAULT_QUEUE_DEPTH, DEFAULT_BLOCK_SIZE, DEFAULT_WORKERS); </span><span> </span><span>sleep</span><span>(</span><span>1</span><span>); </span><span> </span><span>// Use the background workers to read file directly </span><span> size_t total_blocks = na-&gt;file_size / na-&gt;block_size; </span><span> uint64_t uid = </span><span>1</span><span>; </span><span> size_t count = </span><span>; </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span> </span><span>// Read all blocks </span><span> size_t blocks_queued = </span><span>; </span><span> size_t blocks_read = </span><span>; </span><span>int</span><span> buffer_queued = </span><span>; </span><span>while </span><span>(blocks_read &lt; total_blocks) { </span><span>//// Queue IO phase ////// </span><span>// Do we have more blocks to queue up? </span><span>if </span><span>(buffer_queued &lt; na-&gt;num_io_buffers/</span><span>2 </span><span>&amp;&amp; blocks_queued &lt;= total_blocks) { </span><span>// Calculate how many blocks on average we want our workers to queue up </span><span> size_t free_buffers = (size_t)(na-&gt;num_io_buffers - buffer_queued - </span><span>4</span><span>); </span><span>// hold back a few buffers </span><span> size_t blocks_remaining = total_blocks - blocks_queued; </span><span>// how many blocks have we not queued </span><span> size_t blocks_to_queue = free_buffers &gt; blocks_remaining ? blocks_remaining : free_buffers; </span><span>int</span><span> blocks_to_queue_per_worker = (</span><span>int</span><span>) (blocks_to_queue + na-&gt;num_workers - </span><span>1</span><span>) / na-&gt;num_workers; </span><span>// Iterate through workers and assign work </span><span>for </span><span>(</span><span>int</span><span> i = </span><span>; i &lt; na-&gt;num_workers; i++) { </span><span> worker_thread_data_t* worker = &amp;na-&gt;workers[i]; </span><span>// Try to queue N blocks to this worker </span><span>for </span><span>(</span><span>int</span><span> j = </span><span>; j &lt; blocks_to_queue_per_worker; j++) { </span><span>if </span><span>(blocks_queued == total_blocks) </span><span>break</span><span>; </span><span>int</span><span> bgio_tail = worker-&gt;bgio_tail; </span><span>int</span><span> bgio_head = worker-&gt;bgio_head; </span><span>int</span><span> bgio_next = (bgio_tail + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span>int</span><span> next_bhead = (worker-&gt;buffer_head + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span>if </span><span>(bgio_next == bgio_head) </span><span>break</span><span>; </span><span>// queue for send requests is full </span><span>if </span><span>(next_bhead == worker-&gt;buffer_tail) </span><span>break</span><span>; </span><span>// queue for recieving completed IO is full </span><span>// Queue this block with the worker. We have to track which buffer it's going to. </span><span>int</span><span> buffer_idx = worker-&gt;buffer_start_idx + worker-&gt;buffer_head; </span><span> na-&gt;buffer_state[buffer_idx] = BUFFER_PREFETCHING; </span><span> worker-&gt;bgio_uids[bgio_tail] = (uid++)&lt;&lt;</span><span>16</span><span>; </span><span>// unique id helps track IOs in io_uring, we encode 4 bytes later </span><span> worker-&gt;bgio_buffer_idx[bgio_tail] = buffer_idx; </span><span> worker-&gt;bgio_block_idx[bgio_tail] = blocks_queued++; </span><span>// block sized index into file </span><span> worker-&gt;bgio_queued[bgio_tail] = -</span><span>1</span><span>; </span><span>// Requested but not yet queued </span><span>int</span><span> next_tail = (bgio_tail + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> worker-&gt;bgio_tail = next_tail; </span><span>// Log the buffer in an ordered queue for us to read </span><span> worker-&gt;complete_ring[worker-&gt;buffer_head] = buffer_idx; </span><span> worker-&gt;buffer_head = next_bhead; </span><span> buffer_queued++; </span><span> } </span><span>// Tell the worker to submit IOs as a group </span><span> worker-&gt;bgio_submit++; </span><span> } </span><span> } </span><span> </span><span>//// Completion Phase ////// </span><span>// Iterate through worker and check if they have complete IOs </span><span>for </span><span>(</span><span>int</span><span> i = </span><span>; i &lt; na-&gt;num_workers; i++) { </span><span> worker_thread_data_t* worker = &amp;na-&gt;workers[i]; </span><span>int</span><span> current = worker-&gt;buffer_tail; </span><span>// We know what IO's we're waiting on, but we have to poll </span><span>// to see if they are done. </span><span>for </span><span>(</span><span>int</span><span> scan = </span><span>; scan &lt; worker-&gt;num_max_bgio; scan++) { </span><span>// Scan until we get to the end of the list </span><span>if </span><span>(current == worker-&gt;buffer_head) </span><span>break</span><span>; </span><span>int</span><span> buffer_idx = worker-&gt;complete_ring[current]; </span><span>int</span><span> state = na-&gt;buffer_state[buffer_idx]; </span><span>if </span><span>(state == BUFFER_PREFETCHED) { </span><span>// This buffer is completed - Process this buffer. </span><span> count += </span><span>count_tens_unrolled</span><span>(na-&gt;io_buffers[buffer_idx], na-&gt;block_size); </span><span> na-&gt;buffer_state[buffer_idx] = BUFFER_UNUSED; </span><span> blocks_read++; </span><span> buffer_queued--; </span><span> } </span><span> current = (current + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> } </span><span>// IO's might have been completed out of order, advance the tail when we can </span><span> current = worker-&gt;buffer_tail; </span><span>while </span><span>(current != worker-&gt;buffer_head) { </span><span>int</span><span> buffer_idx = worker-&gt;complete_ring[current]; </span><span>int</span><span> state = na-&gt;buffer_state[buffer_idx]; </span><span>if </span><span>(state != BUFFER_UNUSED) </span><span>break</span><span>; </span><span> current = (current + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> } </span><span> worker-&gt;buffer_tail = current; </span><span> worker-&gt;bgio_submit++; </span><span>// probably unnecessary </span><span> } </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span>printf</span><span>("</span><span>diskbased found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span> </span><span>// Cleanup I/O system </span><span>ioengine_free</span><span>(na); </span><span> </span><span>return </span><span>; </span><span>} </span></code></pre><p>I hope all this extra code makes it faster.</p><pre><code><span>&#10095; sudo ./diskbased/benchmark ./mnt/datafile.bin 53687091200 </span><span>diskbased found 167802249 10s processed at 5.81 GB/s </span></code></pre><p>Boom! Disk is faster than memory! It takes several hundred lines of code but now we can source the data from my SSDs faster than the copy from the page cache in memory.</p><h2>So what's going on here?</h2><p>Of course my 6GB/s disk stripe isn&rsquo;t actually faster than the memory bus, even on this weird hack of a system. So what is happening? Where is the bottleneck? It's got to be the way the data is being read from the page cache in memory.</p><p>What if we replace the mmap() with a read() from disk into a preallocated buffer. That way we can measure the counting with the data in-memory without any page cache related overhead mmap() can introduce.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/stat.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>unistd.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>string.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY|O_DIRECT); </span><span>void </span><span>*buf; </span><span>posix_memalign</span><span>(&amp;buf, </span><span>4096</span><span>, size_bytes); </span><span>int </span><span>*data = buf; </span><span> size_t off = </span><span>; </span><span>while </span><span>(off &lt; size_bytes) { </span><span> ssize_t n = </span><span>read</span><span>(fd, (</span><span>char</span><span>*)data + off, size_bytes - off); </span><span> off += (size_t)n; </span><span>// YOLO: assume n &gt; 0 until done </span><span> } </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>simple loop </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", </span><span> count, </span><span> (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span> </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> p = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>((</span><span>void</span><span>*)data, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> start = </span><span>get_time_us</span><span>(); </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(p[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(p[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(p[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(p[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(p[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(p[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(p[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(p[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(p[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(p[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(p[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(p[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(p[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(p[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(p[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(p[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> count = (t0 + t1) + (t2 + t3); </span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>unrolled loop </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", </span><span> count, </span><span> (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>If we keep the dataset smaller than a numa domain and we bind this to a single numa node to prevent numa overheads we see that the theoretical memory bandwidth we projected seems to be the primary bottleneck for the unrolled loop as we hoped to see at the outset.</p><pre><code><span>&#10095; sudo numactl --cpunodebind=0 ./in_ram mnt/datafile.bin 2147483648 </span><span>simple loop 6709835 10s processed at 4.76 GB/s </span><span>unrolled loop 6709835 10s processed at 13.04 GB/s </span></code></pre><p>But this isn't useful to compare the with the other runs with the 50GB dataset. However if we do the full 50GB dataset the performance suffers. We have to get much of the data across numa domains which is going to be higher cost.</p><pre><code><span>&#10095; sudo ./in_ram ./mnt/datafile.bin 53687091200 </span><span>simple loop 167802249 10s processed at 3.76 GB/s </span><span>unrolled loop 167802249 10s processed at 7.90 GB/s </span></code></pre><p>Comparing the results of "fully in-memory (50GB)" which is pre-loaded in memory before measuring against the "unrolled loop" that is only cached in memory we see 40% overhead. That's 2.75 seconds out of 9 seconds that was spent waiting on the caching system instead of counting. Why so much?</p><p><strong>mmap()</strong></p><p>The mmap() call presents the process with a buffer that is a blank slate even when the data is already in memory. The buffer is populated page by page as it's accessed from the page cache. This isn't a copy, it's just the operating system mapping the cached memory into the process. This costs more than it might seem. The worst case with mmap() the counting has to pause at every 4KB page boundary while the kernel processes a fault, tracks down the page of data in the page cache, then updates the page table of the process to insert the memory into the process. Fundamentally this is a process that is limited by the memory latency, not the CPU speed or memory bandwidth. With the potential for TLB walks and searching lists that track the page cache, we&rsquo;re taking potentially dozens of CPU cache misses and several microseconds of waiting on memory for every 4KB page.</p><p><strong>direct IO</strong></p><p>Using our direct from disk approach uses pipelines and streams which avoids the kind of memory latency dominated bottleneck that mmap() has. In our case we're limited by the bandwidth of our disks yet because of the pipelining, the larger latency of the IOs doesn't get in the critical path of the counting very much. Allowing for higher throughput.</p><h2>Scaling</h2><p>Consider the implications of these experiments as we scale. The well vetted solution to get data from memory to a process is slower than using the disk directly. This isn't because the memory is slower than the disk. The memory has higher bandwidth than the disk, not by an order of magnitude, but a decent margin. But the latency of the memory is orders of magnitude lower than the disk. Nevertheless the <em>way</em> the data in memory is accessed is the culprit. Its a synchronous approach that assumes memory operations are cheap and low latency. These accesses add up and it ends up waiting on memory latencies. The disk method on the other hand is as a streaming approach built to leverage bandwidth and hide latencies.</p><p><strong>extending the existing rig</strong></p><p>If I got a few more of these disks I could push the IO bandwidth to be greater than the 13GB/s per thread memory bandwidth limit. IO is DMA'ed to buffers that are pretty small compared to the total dataset. These buffers scale with the throughput capabilities of the CPU and the disks, not the dataset size. The buffers can be located in a single numa domain allowing us to avoid the overhead of accessing the buffers between NUMA domains. Add more disks to this system I might be able to create a disk based solution to count at the full 13GB/s rather than be limited to the 7.90GB/s we see with the in memory example at the full 50GB dataset. With such a system our throughput would not be affected by the dataset size, unlike the in-memory case, which has numa overhead and eventually runs out of memory to scale.</p><p><strong>faster than memory is possible</strong></p><p>On a proper modern server the CPUs will let you do IO directly to the L3 cache, bypassing memory altogether. Because PCIe bandwidth is higher than memory bandwidth, on paper we could even get more max bandwidth than we can get from memory if we carefully pin the buffers into the CPU cache. I haven't confirm this works in practice, however, it could be made to work and is the sort of thing that CPU designs will be forced to lean into to push performance forward.</p><p><strong>memory is changing too</strong></p><p>This isn't just about disks vs memory. Similar techniques and principles apply to memory. Memory bandwidth is still scaling even if the latency is not. This means to take advantage of memory performance you have to actually treat it more like a disk and less like Random Access Memory. To scale performance with generational updates you have to make sure to stream data from memory into the CPU caches in blocks, similar to how data is streamed from disk to memory. If not you end up with 90s level memory throughput. A custom mechanism to cache data in memory could easily avoid the memory latency problems seen with the default mmap() solution with much less code than the io_uring solution.</p><h2>Is this worth it?</h2><p>I'm not going to say that going to the effort of implementing something like this is always worth it. The mmap() method is sure elegant from a coding perspective, especially when compared to all the code I had to write to get the io_uring setup working. Sometimes the simple way is the way to go.</p><p>Is using 6 cores of IO for 1 core of compute is always the right answer? Probably not. This was an extreme situation to prove a point. In realworld situations you'll need to look at the tradeoffs and decide what's best for your use case. Correctly understanding the strengths and weaknesses of the hardware can open up a number of possibilities where you can get a lot more performance for a lot less money.</p><p>The kind of overhead demonstrated with mmap() isn&rsquo;t going to go away, new hardware isn't going to fix it. At the same time disk bandwidth and the number of cores are scaling each generation. But doing things that scale performance with new technology is going to take extra code and effort.</p><p>But don't just blow this stuff off. Sure you <em>can</em> dedicate a server with 3TB of memory to serve 10K client connections. Memory in the cloud is like ~$5/GB/month, if you can afford it, then you do you. However it is worth considering that humanity doesn't have the silicon fabs or the power plants to support this for every moron vibe coder out there making an app. I figure either the karmic debt to the planet, or a vengeful AI demigod hungry for silicon and electricity will come for those that don't heed this warning, eventually. Either way my conscience is clear.</p><h2>Recap</h2> <ul> <li>Memory is slow - when you use it oldschool.</li> <li>Disk is fast - when you are clever with it.</li> <li>Test the dogma - compounded exponentials are flipping somethings from true to false.</li> </ul><p><strong>Bad news</strong> is that this cleverness requires extra code and effort.</p><p><strong>Good news</strong> is we now have AI to write and test the extra code this cleverness requires.</p><p><strong>Better news</strong> is that, for those that are willing to learn, AI's don't do this unless you know how to ask them.</p><p>Lean into things that scale, avoid things that don&rsquo;t.</p><h2>Next Time</h2><p>What will be revealed in the next episode?</p><ul> <li>Is O(&radic;n) actually faster than O(log n)? Will the foundations of Computer Science survive this unveiling?</li> <li>Will traditional code be consumed into the latent space of our AI overlords?</li> <li>Is AI hiding these performance gains from me? Is AI even capable of writing optimized code?</li> </ul> <hr><p><em>Jared Hulbert</em></p><blockquote><p>A few notes for the "um actually" haters commenting on Hacker News:</p><ul> <li>This is not and does not claim to be an academic paper.</li> <li>I do not intend to prove that NAND is a drop in replacement for DRAM.</li> <li>Tis but a humble and hopefully fun exercise in exploring the limits and trends of modern hardware and the tradeoffs needed to maximize performance.</li> <li>As I stated before I have no problem with your choice to ignore this and write lazy code that will perform just as fast on new hardware in 15 years as it does on todays hardware. In fact I applaud your choice. Jeff Bezos has an orbital yacht to build, someone has to pay for it, why not you?</li> <li>I am not an AI. I am a human with a computer that don't write perfect.</li> </ul> </blockquote> <blockquote><p>source code can be found <a href="https://github.com/bitflux-ai/blog_notes">here</a>.</p></blockquote> </section> </section>]]></description><pubDate>Fri, 05 Sep 2025 22:20:55 +0530</pubDate></item><item><link>https://reasonablypolymorphic.com/blog/protos-are-wrong/</link><title>Protobuffers Are Wrong (reasonablypolymorphic.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/</guid><comments>https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 18 min | <a href='https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>I&rsquo;ve spent a good deal of my professional life arguing against using protobuffers. They&rsquo;re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.</p><h2>Ad-Hoc and Built By Amateurs</h2><p>Stop. Put away your email client that is half-way through writing me about how &ldquo;Google is filled with the world&rsquo;s best engineers,&rdquo; and that &ldquo;anything they build is, by definition, not built by amateurs.&rdquo; I don&rsquo;t want to hear it.</p><p>Let&rsquo;s just get this out of the way. Full disclosure: I used to work at Google. It was the first (but unfortunately, not the last) place I ever used protobuffers. All of the problems I want to talk about today exist inside of Google&rsquo;s codebase; it&rsquo;s not just a matter of &ldquo;using protobuffers wrong&rdquo; or some such nonsense like that.</p><p>By far, the biggest problem with protobuffers is their terrible type-system. Fans of Java should feel right at home with protobuffers, but unfortunately, literally nobody considers Java to have a well-designed type-system. The dynamic typing guys complain about it being too stifling, while the static typing guys like me complain about it being too stifling without giving you any of the things you actually want in a type-system. Lose lose.</p><p>The ad-hoc-ness and the built-by-amateurs-itude go hand-in-hand. So much of the protobuffer spec feels bolted on as an afterthought that it clearly <em>was</em> bolted on as an afterthought. Many of its restrictions will make you stop, scratch your head and ask &ldquo;wat?&rdquo; But these are just symptoms of the deeper answer, which is this:</p><p>Protobuffers were obviously built by amateurs because they offer <em>bad solutions to widely-known and already-solved problems.</em></p><h3>No Compositionality</h3><p>Protobuffers offer several &ldquo;features&rdquo;, but none of them see to work with one another. For example, look at the list of orthogonal-yet-constrained typing features that I found by skimming the <a href="https://developers.google.com/protocol-buffers/docs/proto3">documentation</a>.</p><ul> <li><code>oneof</code> fields can&rsquo;t be <code>repeated</code>.</li> <li><code>map<k></k></code> fields have dedicated syntax for their keys and values, but this isn&rsquo;t used for any other types.</li> <li>Despite <code>map</code> fields being able to be parameterized, no user-defined types can be. This means you&rsquo;ll be stuck hand-rolling your own specializations of common data structures.</li> <li><code>map</code> fields cannot be <code>repeated</code>.</li> <li><code>map</code> keys <em>can</em> be <code>string</code>s, but <em>can not</em> be <code>bytes</code>. They also can&rsquo;t be <code>enum</code>s, even though <code>enum</code>s are considered to be equivalent to integers everywhere else in the protobuffer spec.</li> <li><code>map</code> values cannot be other <code>map</code>s.</li> </ul><p>This insane list of restrictions is the result of unprincipled design choices and bolting on features after the fact. For example, <code>oneof</code> fields can&rsquo;t be <code>repeated</code> because rather than resulting in a coproduct type, instead the code generator will give you a product of mutually-exclusive optional fields. Such a transformation is only valid for a singular field (and, as we&rsquo;ll see later, not even then.)</p><p>The restriction behind <code>map</code> fields being unable to be <code>repeated</code> is related, but shows off a different limitation of the type-system. Behind the scenes, a <code>map<k></k></code> is desugared into something spiritually similar to <code>repeated Pair<k></k></code>. And because <code>repeated</code> is a magical language keyword rather than a type in its own right, it doesn&rsquo;t compose with itself.</p><p>Your guess is as good as mine for why an <code>enum</code> can&rsquo;t be used as a <code>map</code> key.</p><p>What&rsquo;s so frustrating about all of this is a little understanding of how modern type-systems work would be enough to <em>drastically simplify</em> the protobuffer spec and simultaneously <em>remove all of the arbitrary restrictions.</em></p><p>The solution is as follows:</p><ul> <li>Make all fields in a message <code>required</code>. This makes messages <em>product types</em>.</li> <li>Promote <code>oneof</code> fields to instead be standalone data types. These are <em>coproduct types</em>.</li> <li>Give the ability to parameterize product and coproduct types by other types.</li> </ul><p>That&rsquo;s it! These three features are all you need in order to define any possible piece of data. With these simpler pieces, we can re-implement the rest of the protobuffer spec in terms of them.</p><p>For example, we can rebuild <code>optional</code> fields:</p><div><pre><code><span>product Unit <span>{</span></span> <span> <span>// no fields</span></span> <span><span>}</span></span> <span>coproduct Optional<span>&lt;</span>t<span>&gt;</span> <span>{</span></span> <span> t value <span>=</span> <span>;</span></span> <span> Unit unset <span>=</span> <span>1</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>Building <code>repeated</code> fields is simple too:</p><div><pre><code><span>coproduct List<span>&lt;</span>t<span>&gt;</span> <span>{</span></span> <span> Unit empty <span>=</span> <span>;</span></span> <span> Pair<span>&lt;</span>t<span>,</span> List<span>&lt;</span>t<span>&gt;&gt;</span> cons <span>=</span> <span>1</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>Of course, the actual serialization logic is allowed to do something smarter than pushing linked-lists across the network&mdash;after all, <a href="https://reasonablypolymorphic.com/blog/follow-the-denotation/">implementations and semantics don&rsquo;t need to align one-to-one</a>.</p><h3>Questionable Choices</h3><p>In the vein of Java, protobuffers make the distinction between <em>scalar</em> types and <em>message</em> types. Scalars correspond more-or-less to machine primitives&mdash;things like <code>int32</code>, <code>bool</code> and <code>string</code>. Messages, on the other hand, are everything else. All library- and user-defined types are messages.</p><p>The two varieties of types have completely different semantics, of course.</p><p>Fields with scalar types are always present. Even if you don&rsquo;t set them. Did I mention that (at least in proto3<a href="https://reasonablypolymorphic.com#fn1"><sup>1</sup></a>) all protobuffers can be zero-initialized with absolutely no data in them? Scalar fields get false-y values&mdash;<code>uint32</code> is initialized to <code>0</code> for example, and <code>string</code> is initialized as <code>""</code>.</p><p>It&rsquo;s impossible to differentiate a field that was missing in a protobuffer from one that was assigned to the default value. Presumably this decision is in place in order to allow for an optimization of not needing to send default scalar values over the wire. Presumably, though the <a href="https://developers.google.com/protocol-buffers/docs/encoding">encoding guide</a> makes no mention of this optimization being performed, so your guess is as good as mine.</p><p>As we&rsquo;ll see when we discuss protobuffers&rsquo; claim to being god&rsquo;s gift to backwards- and forwards-compatible APIs, this inability to distinguish between unset and default values is a nightmare. Especially if indeed it&rsquo;s a design decision made in order to save one bit (set or not) per field.</p><p>Contrast this behavior against message types. While scalar fields are dumb, the behavior for message fields is outright <em>insane.</em> Internally, message fields are either there or they&rsquo;re not&mdash;but their behavior is crazy. Some pseudocode for their accessor is worth a thousand words. Pretend this is Java or something similar:</p><div><pre><code><span><span>private</span> Foo m_foo<span>;</span></span> <span><span>public</span> Foo foo <span>{</span></span> <span> <span>// only if `foo` is used as an expression</span></span> <span> get <span>{</span></span> <span> <span>if</span> <span>(</span>m_foo <span>!=</span> <span>null</span><span>)</span></span> <span> <span>return</span> m_foo<span>;</span></span> <span> <span>else</span></span> <span> <span>return</span> <span>new</span> <span>Foo</span><span>();</span></span> <span> <span>}</span></span> <span> <span>// instead if `foo` is used as an lvalue</span></span> <span> mutable get <span>{</span></span> <span> <span>if</span> <span>(</span>m_foo <span>=</span> <span>null</span><span>)</span></span> <span> m_foo <span>=</span> <span>new</span> <span>Foo</span><span>();</span></span> <span> <span>return</span> m_foo<span>;</span></span> <span> <span>}</span></span> <span><span>}</span></span></code></pre></div><p>The idea is that if the <code>foo</code> field is unset, you&rsquo;ll see a default-initialized copy whenever you ask for it, but won&rsquo;t actually modify its container. But if you modify <code>foo</code>, it will modify its parent as well! All of this just to avoid using a <code>Maybe Foo</code> type and the associated &ldquo;headaches&rdquo; of the nuance behind needing to figure out what an unset value should mean.</p><p>This behavior is especially egregious, because it breaks a law! We&rsquo;d expect the assignment <code>msg.foo = msg.foo;</code> to be a no-op. Instead the implementation will actually silently change <code>msg</code> to have a zero-initialized copy of <code>foo</code> if it previously didn&rsquo;t have one.</p><p>Unlike scalar fields, at least it&rsquo;s possible to detect if a message field is unset. Language bindings for protobuffers offer something along the lines of a generated <code>bool has_foo()</code> method. In the frequent case of copying a message field from one proto to another, iff it was present, you&rsquo;ll need to write the following code:</p><div><pre><code><span><span>if</span> <span>(</span>src<span>.</span>has_foo<span>(</span>src<span>))</span> <span>{</span></span> <span> dst<span>.</span>set_foo<span>(</span>src<span>.</span>foo<span>());</span></span> <span><span>}</span></span></code></pre></div><p>Notice that, at least in statically-typed languages, this pattern <em>cannot be abstracted</em> due to the nominal relationship between the methods <code>foo()</code>, <code>set_foo()</code> and <code>has_foo()</code>. Because all of these functions are their own <em>identifiers</em>, we have no means of programmatically generating them, save for a preprocessor macro:</p><div><pre><code><span><span>#define COPY_IFF_SET</span><span>(</span>src<span>,</span>dst<span>,</span>field<span>)</span><span>\</span></span> <span><span>if</span><span>(</span>src<span>.</span><span>has_</span><span>##</span>field<span>(</span>src<span>))</span><span>{</span><span>\</span></span> <span>dst<span>.</span><span>set_</span><span>##</span>field<span>(</span>src<span>.</span>field<span>());</span><span>\</span></span> <span><span>}</span></span></code></pre></div><p>(but preprocessor macros are verboten by the <a href="https://google.github.io/styleguide/cppguide.html#Preprocessor_Macros">Google style guide</a>.)</p><p>If instead all optional fields were implemented as <code>Maybe</code>s, you&rsquo;d get abstract-able, referentially transparent call-sites for free.</p><p>To change tack, let&rsquo;s talk about another questionable decision. While you can define <code>oneof</code> fields in protobuffers, their semantics are <em>not</em> of coproduct types! Rookie mistake my dudes! What you get instead is an optional field for each case of the <code>oneof</code>, and magic code in the setters that will just unset any other case if this one is set.</p><p>At first glance, this seems like it should be semantically equivalent to having a proper union type. But instead it is an accursed, unutterable source of bugs! When this behavior teams up with the law-breaking implementation of <code>msg.foo = msg.foo;</code>, it allows this benign-looking assignment to silently delete arbitrary amounts of data!</p><p>What this means at the end of the day is that <code>oneof</code> fields do not form law-abiding <code>Prism</code>s, nor do messages form law-abiding <code>Lens</code>es. Which is to say good luck trying to write bug-free, non-trivial manipulations of protobuffers. It is <em>literally impossible to write generic, bug-free, polymorphic code over protobuffers.</em></p><p>That&rsquo;s not the sort of thing anybody likes to hear, let alone those of us who have grown to love parametric polymorphism&mdash;which gives us the <em>exact opposite promise.</em></p><h2>The Lie of Backwards- and Forwards-Compatibility</h2><p>One of the frequently cited killer features of protobuffers is their &ldquo;hassle-free ability to write backwards- and forwards-compatible APIs.&rdquo; This is the claim that has been pulled over your eyes to blind you from the truth.</p><p>What protobuffers are is <em>permissive.</em> They manage to not shit the bed when receiving messages from the past or from the future because they make absolutely no promises about what your data will look like. Everything is optional! But if you need it anyway, protobuffers will happily cook up and serve you something that typechecks, regardless of whether or not it&rsquo;s meaningful.</p><p>This means that protobuffers achieve their promised time-traveling compatibility guarantees by <em>silently doing the wrong thing by default.</em> Of course, the cautious programmer can (and should) write code that performs sanity checks on received protobuffers. But if at every use-site you need to write defensive checks ensuring your data is sane, maybe that just means your deserialization step was too permissive. All you&rsquo;ve managed to do is decentralize sanity-checking logic from a well-defined boundary and push the responsibility of doing it throughout your entire codebase.</p><p>One possible argument here is that protobuffers will hold onto any information present in a message that they don&rsquo;t understand. In principle this means that it&rsquo;s nondestructive to route a message through an intermediary that doesn&rsquo;t understand this version of its schema. Surely that&rsquo;s a win, isn&rsquo;t it?</p><p>Granted, on paper it&rsquo;s a cool feature. But I&rsquo;ve never once seen an application that will actually preserve that property. With the one exception of routing software, nothing wants to inspect only some bits of a message and then forward it on unchanged. The vast majority of programs that operate on protobuffers will decode one, transform it into another, and send it somewhere else. Alas, these transformations are bespoke and coded by hand. And hand-coded transformations from one protobuffer to another don&rsquo;t preserve unknown fields between the two, because it&rsquo;s literally meaningless.</p><p>This pervasive attitude towards protobuffers always being compatible rears its head in other ugly ways. Style guides for protobuffers actively advocate against DRY and suggest inlining definitions whenever possible. The reasoning behind this is that it allows you to evolve messages separately if these definitions diverge in the future. To emphasize that point, the suggestion is to fly in the face of 60 years&rsquo; worth of good programming practice just in case <em>maybe</em> one day in the future you need to change something.</p><p>At the root of the problem is that Google conflates the meaning of data with its physical representation. When you&rsquo;re at Google scale, this sort of thing probably makes sense. After all, they have an internal tool that allows you to compare the finances behind programmer hours vs network utilization vs the cost to store <span>\(x\)</span> bytes vs all sorts of other things. Unlike most companies in the tech space, paying engineers is one of Google&rsquo;s smallest expenses. Financially it makes sense for them to waste programmers&rsquo; time in order to shave off a few bytes.</p><p>Outside of the top five tech companies, none of us is within five orders of magnitude of being Google scale. Your startup <em>cannot afford</em> to waste engineer hours on shaving off bytes. But shaving off bytes and wasting programmers&rsquo; time in the process is exactly what protobuffers are optimized for.</p><p>Let&rsquo;s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because &ldquo;Google uses it&rdquo; and therefore &ldquo;it&rsquo;s an industry best-practice.&rdquo;</p><h2>Protobuffers Contaminate Codebases</h2><p>If it were possible to restrict protobuffer usage to network-boundaries I wouldn&rsquo;t be nearly as hard on it as a technology. Unfortunately, while there are a few solutions in principle, none of them is good enough to actually be used in real software.</p><p>Protobuffers correspond to the data you want to send over the wire, which is often <em>related</em> but not <em>identical</em> to the actual data the application would like to work with. This puts us in the uncomfortable position of needing to choose between one of three bad alternatives:</p><ol> <li>Maintain a separate type that describes the data you actually want, and ensure that the two evolve simultaneously.</li> <li>Pack rich data into the wire format for application use.</li> <li>Derive rich information every time you need it from a terse wire format.</li> </ol><p>Option 1 is clearly the &ldquo;right&rdquo; solution, but its untenable with protobuffers. The language isn&rsquo;t powerful enough to encode types that can perform double-duty as both wire and application formats. Which means you&rsquo;d need to write a completely separate datatype, evolve it synchronously with the protobuffer, and <em>explicitly write serialization code between the two.</em> Seeing as most people seem to use protobuffers in order to not write serialization code, this is obviously never going to happen.</p><p>Instead, code that uses protobuffers allows them to proliferate throughout the codebase. True story, my main project at Google was a compiler that took &ldquo;programs&rdquo; written in one variety of protobuffer, and spit out an equivalent &ldquo;program&rdquo; in another. Both the input and output formats were expressive enough that maintaining proper parallel C++ versions of them could never possibly work. As a result, my code was unable to take advantage of any of the rich techniques we&rsquo;ve discovered for writing compilers, because protobuffer data (and resulting code-gen) is simply too rigid to do anything interesting.</p><p>The result is that a thing that could have been 50 lines of <a href="https://github.com/passy/awesome-recursion-schemes">recursion schemes</a> was instead 10,000 lines of ad-hoc buffer-shuffling. The code I wanted to write was literally impossible when constrained by having protobuffers in the mix.</p><p>While this is an anecdote, it&rsquo;s not in isolation. By virtue of their rigid code-generation, manifestations of protobuffers in languages are never idiomatic, nor can they be made to be&mdash;short of rewriting the code-generator.</p><p>But even then, you still have the problem of needing to embed a shitty type-system into the targeted language. Because most of protobuffers&rsquo; features are ill-conceived, these unsavory properties leak into our codebases. It means we&rsquo;re forced to not only implement, but also use these bad ideas in any project which hopes to interface with protobuffers.</p><p>While it&rsquo;s easy to implement inane things out of a solid foundation, going the other direction is challenging at best and the dark path of Eldrich madness at worst.</p><p>In short, abandon all hope ye who introduce protobuffers into your projects.</p><section> <hr> <ol> <li><p>To this day, there&rsquo;s a raging debate inside Google itself about proto2 and whether fields should ever be marked as <code>required</code>. Manifestos with both titles &ldquo;<code>optional</code> considered harmful&rdquo; <em>and</em> &ldquo;<code>required</code> considered harmful.&rdquo; Good luck sorting that out.<a href="https://reasonablypolymorphic.com#fnref1">&#8617;&#65038;</a></p></li> </ol> </section><p><span> <a href="https://reasonablypolymorphic.com/blog/book-of-types">&larr;</a> </span> <span> <a href="https://reasonablypolymorphic.com/blog/thinking-with-types">&rarr;</a> </span> </p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 22:18:24 +0530</pubDate></item><item><link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link><title>I Ditched Docker for Podman (codesmash.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</guid><comments>https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 13 min | <a href='https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/'>Post permalink</a></p></section><section class='preview-image'><img src='https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fstock%2Funsplash%2FqMVR2YhOVQI%2Fupload%2Fff5f28b79266f1737ba9b66092c75cde.jpeg%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng' /></section><section class='parsed-content'><div><h2>Beginnings</h2><p>I'm old enough to remember when Vagrant looked like a promised land where every development environment would look the same. Differences between language versions, as well as some unusual OS version differences, resulted in a few days of unproductive debugging of your development environment. I've had similar excitement when I started my first Docker Swarm (who uses that these days?!) - it felt revolutionary. Docker wasn't just a tool - it fundamentally changed how we thought about application development and deployment. Having a repeatable, separated environment from your local system was refreshing and looked like a superpower. It has become a must-have tool for every engineer. "<em>Just Dockerize it</em>" became my go-to solution for pretty much everything. Sure, architecture or defining a new Docker image could be a bit finicky at times, but hey, that's just how things worked. Is the persistent dockerd daemon eating upresources in the background with root privileges, just the price of doing business? I thought so.</p><p>If you are in this industry long enough, there is one pattern that emerges every day. Everybody begins questioning the "that's just how it's done" mentality. Along the way, the quiet Docker daemon running in the background felt less like a comfortable constant and more like a ticking bomb. More and more ways to explore this vulnerability emerged:</p><p><strong>2019-02-11 - CVE-2019-5736 (runC container escape):</strong> lets a process in a container overwrite the host&rsquo;s runc binary &rarr; full host compromise if exploited.</p><p><strong>2022-03-07 - CVE-2022-0847 &ldquo;Dirty Pipe&rdquo; (Linux kernel):</strong> read-only file overwrite in kernel; practical container-to-host abuse scenarios documented by Docker/Sysdig. </p><p><strong>2022-03-07 - CVE-2022-0492 (cgroups v1 release_agent):</strong> privilege escalation / container escape via cgroups v1; mitigations via seccomp/AppArmor/SELinux. </p><p><strong>2024-01-31 - CVE-2024-21626 (runC &ldquo;Leaky Vessels&rdquo;):</strong> fd leak + process.cwd issues enabling host FS access and potential escape; fixed in runC <strong>1.1.12</strong> (Docker Engine &ge; <strong>25.0.2</strong>). </p><p><strong>2024-02-01 - CVE-2024-23651/23652/23653 (BuildKit, &ldquo;Leaky Vessels&rdquo;):</strong> build-time issues that can affect host files; fixed in BuildKit <strong>0.12.5</strong>. </p><p><strong>2024-09-23 - In-the-wild cryptojacking campaign:</strong> attackers targeted exposed Docker APIs and microservices. </p><p><strong>2024-10-01 - Docker API swarm botnet campaign:</strong> cryptojacking via exposed Docker Engine API (<a href="https://securitylabs.datadoghq.com/articles/threat-actors-leveraging-docker-swarm-kubernetes-mine-cryptocurrency/">details</a>).</p><p>I had been seeking an alternative (I assumed that someone had already questioned the status quo), and that's how I stumbled into Podman territory. It began as casual curiosity - "<em>Hey, let me check out this thing</em>" - turned into a complete overhaul of my container workflows and pulled me into using Fedora in my home lab. And honestly? I wish I'd made the switch sooner.</p><h2>Daemonless</h2><p>Here's the fundamental issue that kept me awake: Docker's entire architecture is built around a persistent background service - the dockerd daemon. Whenever you run a docker command, you're actually talking to this daemon, which then does the heavy lifting. Sounds about right?</p><p>Yes?!</p><p>Or rather NO, because this daemon runs with root privileges. Always. And if something goes south with a daemon - innocent bug, a crash, or worst case scenario, a security exploit - your entire container ecosystem is potentially compromised. Not just the containers, daemon, or resource that you assigned to it, but the whole host system. It was a huge relief that Podman threw this model out the window. No daemon, no processes running in the background. When you run <code>podman run my-app</code>, the container becomes a direct child of your command. And it is running under your user privileges. Simple architecture change with huge implications:</p><h3>Security that actually makes sense:</h3><p>Remember those late-night security advisories about Docker daemon vulnerabilities (ex., when dockerd was misconfigured to listen on TCP:2375 without TLS, attackers could spin up privileged containers remotely)? With Podman, even if someone somehow escalates privileges inside a container to root level, they're still just an unprivileged user on the actual host. It significantly reduces the surface of an attack.</p><h3>No more single points of failure:</h3><p>Usually Docker daemon runs just fine. But when hiccups kick in - oh boy, hold your hats, as it will take down multiple containers at once. With Podman when one container crashed, the other kept running like nothing happened. It makes so much sense, and it's built in the spirit of hermetization.</p><h3>Lighter resource footprint:</h3><p>I had been surprised when my MacBook M2 Pro started to get warmer when left unattended. After a brief investigation (with Activity Monitor), it was obvious - Docker never knows when to stop. No constantly running daemon means less memory usage. Unfortunately, running a container using Podman can be a different story (ekhm: <a href="https://blog.podman.io/2025/06/podman-and-apple-rosetta/">blog.podman.io/2025/06/podman-and-apple-ros..</a>) - yet the thing is getting better: <a href="https://blog.podman.io/2025/08/podman-5-6-released-rosetta-status-update/">blog.podman.io/2025/08/podman-5-6-released-..</a>.</p><h2>Where Podman Really Shines</h2><p>Beyond the obvious daemon advantages, Podman brings some genuinely clever features that make day-to-day container work more pleasant:</p><p><strong>Systemd integration that doesn't suck:</strong> This one's huge if you're working on Linux servers (most of us are). Podman justgenerates proper systemd unit files. Boom, your container is a first-class citizen in the Linux service ecosystem. Boot dependencies, automatic restarts, resource limits - it all just works. I can run <code>podman generate systemd --name my-app</code> and get a clean service file. Afterwards, I can enable, start, stop, and monitor with standard systemctl commands. Say bye-bye to third-party process managers.</p><p><strong>Kubernetes alignment that's not just marketing:</strong> Since Red Hat (the folks behind Podman) is also a major Kubernetes contributor, the tool feels like it was designed with K8s in mind from day one. The native pod support isn't just a bolt-on feature - it's central to how Podman works. I do not need to run k3s or any local substitute for Kubernetes. Now, I can prototype multi-container applications as Podman pods locally. Then I just generate Kubernetes YAML directly from those pods with podman generate kube. My local development environment actually looks like what I'm going to deploy. This was revolutionary when I had to take over the responsibility of managing and developing a quite complex cluster.</p><p><strong>The Unix philosophy done right:</strong> Instead of trying to be everything to everyone, Podman focuses on running containers well and delegates specialized tasks to purpose - built tools. Need to build images with fine - grained control? That's Buildah. Want to inspect or copy images between registries? Skopeo's your friend. I can use the best tool for each job. I'm no longer stuck with whatever image-building quirks Docker decides to implement.</p><h2>The Migration That Wasn't Really a Migration</h2><p>Here's the part that surprised me most: switching from Docker to Podman was almost seamless. The Podman folks clearly understood that creating the next standard would not let them win the market, and they just adhered to the known CLI tool. I literally just aliased <code>docker=podman</code> in my shell and carried on with life. <code>podman run, podman build, podman ps</code> - they all behave exactly like their Docker counterparts. My existing Dockerfiles worked without modification. My muscle memory didn't need retraining.</p><p>Though there were a few places where I did hit differences that were actually improvements in disguise:</p><ul> <li><p>Privileged ports in rootless mode not working? Good! That's security working as intended. A reverse proxy setup is a better architecture anyway.</p></li> <li><p>Some volume permission quirks? Yes - but it's a small price, and again - if you do it right, you are limiting the scope of possible attack.</p></li> <li><p>A few legacy tools that expected the Docker socket? If there is no support by now, just remember that Podman can expose a Docker-compatible API if needed.</p></li> <li><p>If your Docker Compose workflow is overly complex, just convert it to Kubernetes YAML. We all use Kubernetes these days, so why even bother about this? Having the same layout for development and production is a huge bonus of doing so.</p></li> </ul> <h2>The Real-World Difference</h2><p>After six months of running Podman in production, here's what I've noticed:</p><p>I'm sleeping much better. Because I'm personally responsible for security, I do not have to check if every container is running in rootless mode. Something that I did not think I would benefit from is that my monitoring dashboards show cleaner resource usage patterns. Don't get me wrong - Docker isn't going anywhere. It has massive momentum, a mature ecosystem, and plenty of organizational inertia keeping it in place. But for new projects, or if you are able to make technical decisions based on merit rather than legacy, Podman represents a clear evolution in container technology. More secure by design, more aligned with Linux system management practices, and more thoughtfully architected for the way we actually deploy containers in 2025. The best way forward is to question the assumptions you didn't even realize you were making.</p><h2>FastAPI Migration Guide: From Docker to Podman</h2><p>Just to prove how easy transition can be, here's a practical walkthrough of migrating a FastAPI application from Docker to Podman. </p><h3>What You'll Need</h3><p>Your existing FastAPI project with its Dockerfile and requirements.txt</p><p>Podman is installed on your system:</p><ul> <li><p>Ubuntu/Debian: sudo apt update &amp;&amp; sudo apt install podman</p></li> <li><p>Fedora/RHEL: sudo dnf install podman</p></li> <li><p>macOS: Grab Podman Desktop for a GUI experience</p></li> <li><p>Windows: If you are not a C# developer - stop doing this to yourself and just use Linux: <a href="https://www.youtube.com/watch?v=S_RqZG6YR5M">youtube.com/watch?v=S_RqZG6YR5M</a></p></li> </ul> <h3>Step 1: Your Dockerfile Probably Just Works</h3><p>This is the beautiful part&mdash;Podman uses the same OCI container format as Docker. Your existing Dockerfile should work without any changes. Here's a typical FastAPI setup:</p><pre><code>FROM python:3.10-slim-buster WORKDIR /app COPY requirements.txt . RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8000 CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"] </code></pre> <h3>Step 2: Build Your Image</h3><p>Instead of docker build, just run:</p><pre><code>podman build -t my-fastapi-app:latest . </code></pre><p>That's it. Same flags, same behavior, same output. If you want to ease the transition, create an alias:</p><pre><code><span>alias</span> docker=podman </code></pre><p>Now you can use your existing docker build commands without thinking about it.</p><h3>Step 3: Run Your Container</h3><p>For development and testing:</p><pre><code>podman run --rm -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest </code></pre><p>For background services:</p><pre><code>podman run -d -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest </code></pre><p>Your app should be accessible at <a href="http://localhost:8000">localhost:8000</a> just like before.</p><p><strong>Important note:</strong> <em>By default, Podman runs in rootless mode. This is a security win, but it means you can't bind directly to privileged ports (below 1024). For production, you'll want a reverse proxy anyway, so this pushes you toward better architecture.</em></p><h3>Step 4: Production Deployment with Systemd</h3><p>This is where Podman really shines. Instead of wrestling with custom service management, generate a proper systemd unit file:</p><pre><code><span># First, make sure your container is running</span> podman run -d -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest <span># Generate the systemd service file</span> mkdir -p ~/.config/systemd/user/ podman generate systemd --name my-fastapi-container &gt; ~/.config/systemd/user/my-fastapi-container.service <span># Enable and start the service</span> systemctl --user daemon-reload systemctl --user <span>enable</span> my-fastapi-container.service systemctl --user start my-fastapi-container.service </code></pre><p>Now your FastAPI app is managed like any other system service. It'll start on boot, restart on failure, and integrate with standard Linux logging and monitoring tools.</p><p>For server deployments where you want the service to persist even when you're not logged in:</p><p>loginctl enable-linger $(whoami)</p><h3>Step 5: Multi-Service Applications with Pods</h3><p>If your FastAPI app needs a database or other services, Podman's pod concept is cleaner than Docker Compose for simple setups:</p><pre><code><span># Create a pod that shares networking</span> podman pod create --name my-fastapi-pod -p 8000:8000 -p 5432:5432 <span># Run your FastAPI app in the pod</span> podman run -d --pod my-fastapi-pod --name fastapi-app my-fastapi-app:latest <span># Run PostgreSQL in the same pod</span> podman run -d --pod my-fastapi-pod --name postgres-db -e POSTGRES_PASSWORD=mysecretpassword postgres:13 </code></pre><p>Now your FastAPI app can reach PostgreSQL at localhost:5432 because they share the same network namespace.</p><h3>Step 6: Docker Compose Compatibility</h3><p>For existing Docker Compose setups, you have options:</p><p><strong>Option 1:</strong> Use podman-compose as a drop-in replacement:</p><pre><code>pip install podman-compose podman-compose up -d </code></pre><p><strong>Option 2:</strong> Convert to Kubernetes YAML for a more cloud-native approach:</p><pre><code><span># Install kompose first</span> kompose convert -f docker-compose.yml -o k8s-manifest.yaml podman play kube k8s-manifest.yaml </code></pre><p>This second option is particularly nice if you're planning to deploy to Kubernetes eventually.</p><p><strong>Common Gotchas and Solutions</strong></p><p><strong>Volume permissions:</strong> If you hit permission issues with mounted volumes, remember that rootless containers run as your user. Make sure your user owns the directories you're mounting:</p><pre><code>chown -R $(id -un):$(id -gn) /path/to/your/data </code></pre><p><strong>Legacy tooling:</strong> Some tools expect the Docker socket at /var/run/docker.sock. Podman can provide a compatible API:</p><pre><code>systemctl --user <span>enable</span> podman.socket systemctl --user start podman.socket <span>export</span> DOCKER_HOST=unix://<span>$XDG_RUNTIME_DIR</span>/podman/podman.sock </code></pre><p><strong>Performance tuning:</strong> For production workloads, you might want to tune the rootless networking stack or consider running specific containers in rootful mode for maximum performance.</p><p>The migration process is usually much smoother than people expect. Start with a development environment, get comfortable with the workflow differences, then gradually move production workloads. The security and operational benefits make it worth the effort.</p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 20:30:48 +0530</pubDate></item><item><link>https://shkspr.mobi/blog/2025/09/40-years-later-are-bentleys-programming-pearls-still-relevant/</link><title>40 years later, are Bentley's "Programming Pearls" still relevant? (shkspr.mobi)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</guid><comments>https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 21 min | <a href='https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/'>Post permalink</a></p></section><section class='preview-image'><img src='https://shkspr.mobi/blog/wp-content/uploads/2025/09/pp-fs8.png' /></section><section class='parsed-content'><div><p>In September 1985, Jon Bentley published <a href="https://dl.acm.org/doi/10.1145/4284.315122">Programming Pearls</a>. A collection of aphorisms designed to reveal truths about the field of programming.</p><p>It's 40 years later - long enough to see several revolutions in the field - so surely these are obsolete, right? They belong in the same category as "always carry a bundle of hay for the horses" or "you won't always have a pocket calculator with you" or "tie an onion on your belt to stay stylish".</p><p>Ah, my sweet summer child! <i>Plus &ccedil;a change, plus c'est la m&ecirc;me chose.</i> You'll find nearly everything in here depressingly relevant.</p><p>Before we dive in, a word for Bentley on the provenance of this collection:</p><p><a href="https://shkspr.mobi/blog/wp-content/uploads/2025/09/4284.315122.pdf">Programming Pearls.</a></p><blockquote><p>Although there is some truth in each saying in this column, all should be taken with a grain of salt. A word about credit. The name associated with a rule is usually the person who sent me the rule, even if they in fact attributed it to their Cousin Ralph (sorry, Ralph). In a few cases I have listed an earlier reference, together with the author&rsquo;s current affiliation (to the best of my knowledge). I&rsquo;m sure that I have slighted many people by denying them proper attribution, and to them I offer the condolence that Plagiarism is the sincerest form of flattery.</p></blockquote><p>Here we go!</p><h2> <a href="https://shkspr.mobi#coding">Coding</a> </h2> <blockquote><p>When in doubt, use brute force. Ken Thompson - Bell Labs</p></blockquote><p>Straight off the bat, a winner! Almost all problems are solvable through brute force. It may take time - but throw more resources at it! Once you know it <em>can</em> be done, then it is time to see <em>how</em> it can be done better.</p><blockquote><p>Avoid arc-sine and arc-cosine functions - you can usually do better by applying a trig identity or computing a vector dot-product. Jim Conyngham - Arvin/Calspan Advanced Technology Center</p></blockquote><p>And then, just like that, something broadly irrelevant today. These sorts of mathematical functions have been optimised so far that it probably doesn't matter which way you calculate them.</p><blockquote><p>Allocate four digits for the year part of a date: a new millenium is coming. David Martin - Norristown, Pennsylvania</p></blockquote><p><em>*weeps*</em> Why didn't they listen to you, David? While I would hope any code written this side of Y2K uses ISO8601, it is amusing that you still occasionally encounter people who want to save two bytes <em>somewhere</em>. Handy in some small systems, but mostly just a recipe for disaster. Looking at you, <a href="https://www.gps.gov/support/user/rollover/">GPS</a>!</p><blockquote><p>Avoid asymmetry. Andy Huber - Data General Corporation</p></blockquote><p>I'll be honest, I'm not sure what Andy is going on about here. I <em>assume</em> that he's talking about having the ability to go A-&gt;B without being able to go B-&gt;A. Equally, it could be about accepting data in one format and outputting it in a different format. <a href="https://news.ycombinator.com/item?id=33739184">Some more discussion on the topic</a>.</p><blockquote><p>The sooner you start to code, the longer the program will take. Roy Carlson - University of Wisconsin</p></blockquote><p><em>Bam!</em> Right in the truth. Much like <a href="https://quoteinvestigator.com/2014/03/29/sharp-axe/">the woodsman who spends his time sharpening his axe</a>, we know that diving into code is probably the least efficient way to create something.</p><blockquote><p>If you can&rsquo;t write it down in English, you can&rsquo;t code it. Peter Halpern - Brooklyn, New York</p></blockquote><p>So many bugs come from us not understanding the requirements of the user / customer.</p><blockquote><p>Details count. Peter Wrinberger - Bell Labs</p></blockquote><p>Hard agree, Pete! It's very easy to go for the "big picture" view of the software. But unless all those sharp edges are filed down, the code isn't going to have a happy life.</p><blockquote><p>If the code and the comments disagree, then both are probably wrong. Norm Schyer - Belt Labs</p></blockquote><p>Ah, the dream of self-documenting code will never be realised. Again, this goes back to our (in)ability to properly describe our requirements and our (in)adequacies at turning those comments into code.</p><blockquote><p>A procedure should fit on a page. David Tribble - Arlington, Texas</p></blockquote><p>Famously, <a href="https://www.theguardian.com/technology/2018/apr/24/the-two-pizza-rule-and-the-secret-of-amazons-success">Amazon has a "Two Pizza" rule</a> which defines the maximum size of a team. The larger and more complex something is, the more likely it is to go wrong. Yes, there are limits to <abbr title="Don't repeat yourself">DRY</abbr> and <abbr title="You ain't gonna need it">YAGNI</abbr> - but we seem firmly in the paradigm that large procedures / functions are ruinous to one's health.</p><blockquote><p>If you have too many special cases, you are doing it wrong. Craig Zerouni - Computer FX Ltd. London, England</p></blockquote><p><code>IF/ELSE</code> and <code>CASE/SWITCH</code> still really test our patience. Beautifully clean code which is ruined by special subroutines for rarely occurring situations. But it is hard to call them "wrong". Sometimes the world is complex and it is the job of computers to do the hard work for us.</p><blockquote><p>Get your data structures correct first, and the rest of the program will write itself. David Jones. Assen, The Netherlands</p></blockquote><p>Dave is right. A well-defined data structure is <em>still</em> the essence of most <abbr title="Create, read, update and delete">CRUD</abbr> systems.</p><h2> <a href="https://shkspr.mobi#user-interfaces">User Interfaces</a> </h2> <blockquote><p>[The Principle of Least Astonishment] Make a user interface as consistent and as predictable as possible. Contributed by several readers</p></blockquote><p><em>*weeps*</em> Why isn't this hammered into every programmer? Today's tools are filled with hidden UI gestures, random menus, and a complete disregard for the user's time.</p><blockquote><p>A program designed for inputs from people is usually stressed beyond the breaking point by computer-generated inputs. Dennis Ritchie. Bell Labs</p></blockquote><p>I think this one is mostly irrelevant now. Humans can only type at a limited speed, but computers can generate massive amounts of data instantly. But our machines' abilities to ingest that data has also grown. I suppose the nearest thing is the DDoS - where a webserver designed for a few visitors is overwhelmed by a flood of automated and malicious requests.</p><blockquote><p>Twenty percent of all input forms filled out by people contain bad data. Vic Vyssotsky. Bell Labs</p></blockquote><p>Ha! Vic didn't know that we'd have <code><input> validation in the 21st century! But, yeah, people write all sorts of crap into forms.</code></p><blockquote><p>Eighty percent of all input forms ask questions they have no business asking. Mike Garey. Bell Labs</p></blockquote><p>Mike was sent from the future to warn the people of the past - but they paid him no heed.</p><blockquote><p>Don't make the user provide information that the system already knows. Rick Lemons. Cardinal Data Systems</p></blockquote><p>I'm going to slightly disagree with Rick here. Asking for repeated information is a reasonable way to double-check you've got that information correct. It also helps to validate that the user is who they say they are.</p><blockquote><p>For 80 percent of all data sets, 95 percent of the information can be seen in a good graph. William S. Cleveland. Bell Labs</p></blockquote><p>Those of us who have seen <a href="https://en.wikipedia.org/wiki/Anscombe's_quartet">Anscombe's quartet</a> know how true this is.</p><h2> <a href="https://shkspr.mobi#debugging">Debugging</a> </h2> <blockquote><p>Of all my programming bugs, 80 percent are syntax errors. Of the remaining 20 percent, 80 percent are trivial logical errors. Of the remaining 4 percent, 80 percent are pointer errors. And the remaining 0.8 percent are hard. Marc Donner. IBM T. J. Watson Research Center</p></blockquote><p>Syntax errors are rarer now that we have IDEs. And I hope visual programming languages will further reduce them. Logic errors still plague us. Pointer errors have been eradicated unless you're working at the very lowest levels. And I'd say the number of "hard" bugs is probably higher now due to the complex interaction of multiple libraries and systems.</p><blockquote><p>It takes three times the effort to find and fix bugs in system test than when done by the developer. It takes ten times the effort to find and fix bugs in the field than when done in system test. Therefore, insist on unit tests by the developer. Larry Bernstein. Bell Communications Research</p></blockquote><p>We can quibble about the numbers and the ratios - but it is generally harder to fix in prod. That said, getting crash logs from the field has considerable shortened those ratio.</p><blockquote><p>Don&rsquo;t debug standing up. It cuts your patience in half, and you need all you can muster. Dave Storer. Cedar Rapids, Iowa</p></blockquote><p>I'm with Team-Standing-Desk! So I think Dave is wrong.</p><blockquote><p>Don&rsquo;t get suckered in by the comments - they can be terribly misleading. Debug only the code. Dave Storer. Cedar Rapids, Iowa</p></blockquote><p>Hmmm. Yes, this is probably correct. I'm not going to say code is self-documenting these days; but it certainly is a lot easier to read.</p><blockquote><p>Testing can show the presence of bugs, but not their absence. Edsger W. Dijkstra. University of Texas</p></blockquote><p>Dare we disagree with Dijkstra?! Well, perhaps a little. With modern fuzzing tools we can show the absence of certain kinds of bugs.</p><blockquote><p>Each new user of a new system uncovers a new class of bugs. Brian Kernighan. Bell Labs</p></blockquote><p>Yup! Our code would be bug-free if it weren't for those pesky users!</p><blockquote><p>If it ain&rsquo;t broke, don&rsquo;t fix it. Ronald Reagan. Santa Barbara, California</p></blockquote><p>Amongst the many things about which to disagree with the former President, this is up there! Code needs maintenance. Some things aren't broke until all of a sudden they are. Sure, maybe don't change your app's layout because a manager wants a bonus; but things constantly need fixing.</p><blockquote><p>[The Maintainer&rsquo;s Motto] If we can&rsquo;t fix it, it ain&rsquo;t broke. Lieutenant Colonel Walt Weir. United States Army</p></blockquote><p>I believe in you. Self deprecation is fine, but self confidence is better.</p><blockquote><p>The first step in fixing a broken program is getting it to fail repeatably. Tom Duff. Bell Labs</p></blockquote><p>Yes! Transient errors are the worst! And a huge source of the "it works for me" antipattern.</p><h2> <a href="https://shkspr.mobi#performance">Performance</a> </h2> <blockquote><p>[The First Rule of Program Optimization] Don&rsquo;t do it. [The Second Rule of Program Optimization - for experts only] Don't do it yet. Michael Jackson. Michael Jackson Systems Ltd.</p></blockquote><p>As true now as it ever was.</p><blockquote><p>The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand. Douglas W. Jones. University of Iowa</p></blockquote><p>I'm only <em>mostly</em> in agreement here. Many of the security bugs we see in modern code are due to "clever" tricks which turn out to have nasty strings attached. But, at the microcode level, performance is still everything. And a well-tested fast algorithm may be necessary. As part of the climate crisis we should all be thinking about the efficiency of our code.</p><blockquote><p>On some machines indirection is slower with displacement, so the most-used member of a structure or a record should be first. Mike Morton. Boston, Massachusetts</p></blockquote><p>We live in an age of ridiculously fast SSD and RAM access times. Sequential reads are still slightly faster than random jumps, and structures like <a href="https://en.wikipedia.org/wiki/B-tree">B-Tree</a> give us a good mix of the two. We don't need to align data to the physical tracks of a spinning disk any more.</p><blockquote><p>In non-I/O-bound programs, a few percent of the source code typically accounts for over half the run time. Don Knuth. Stanford University</p></blockquote><p>I wonder how true this now is? Perhaps we could replace "I/O" with "Internet requests" and still be accurate?</p><blockquote><p>Before optimizing, use a profiler to locate the &ldquo;hot spots&rdquo; of the program. Mike Morton. Boston, Massachusetts</p></blockquote><p>Mostly true. But you don't lose much by doing some manual optimisations that you know (from bitter experience) will make a difference.</p><blockquote><p>[Conservation of Code Size] When you turn an ordinary page of code into just a handful of instructions for speed, expand the comments to keep the number of source lines, constant. Mike Morton. Boston, Massachusetts</p></blockquote><p>I don't think this is relevant these days. Perhaps it is useful to spend time explaining exactly what trickery you're pulling off with weird syntax. But our tools are now line-count agnostic. Mostly.</p><blockquote><p>If the programmer can simulate a construct faster than the compiler can implement the construct itself, then the compiler writer has blown it badly. Guy L. Steele, Jr. Tartan Laboratories</p></blockquote><p>I think this is rather self-evident. But compilers are so ridiculously optimised that this scenario is increasingly rare.</p><blockquote><p>To speed up an I/O-bound program, begin by accounting for all I/O. Eliminate that which is unnecessary or redundant, and make the remaining as fast as possible. David Martin. Norristown, Pennsylvania</p></blockquote><p>I think this can be generalised even further. I'm reminded of <a href="https://github.com/npm/npm/issues/11283">NPM's progress bar slowdown issue</a>. There's a lot of redundancy which can be removed in many programs.</p><blockquote><p>The fastest I/O is no I/O. Nils-Peter Nelson. Bell Labs</p></blockquote><p>Man! They were <em>obsessed</em> with I/O back in the day! At large volumes, it is still an issue. But perhaps now we can relax just a little?</p><blockquote><p>The cheapest, fastest, and most reliable components of a computer system are those that aren&rsquo;t there. Gordon Bell. Encore Computer Corporation</p></blockquote><p>A little unfair, I think. It's cheaper to have less RAM, but that doesn't make my laptop faster.</p><blockquote><p>[Compiler Writer&rsquo;s Motto-Optimization Pass] Making a wrong program worse is no sin. Bill McKeeman. Wang Znstitute</p></blockquote><p>Personally, I don't think it is the compiler's job to tell me I'm doing it wrong.</p><blockquote><p>Electricity travels a foot in a nanosecond. Commodore Grace Murray Hopper. United States Navy</p></blockquote><p>And a nano-Century is Pi seconds! One of those pub-trivia facts which are irrelevant to modern computing.</p><blockquote><p>LISP programmers know the value of everything but the cost of nothing. Alan Perlis. Yale University</p></blockquote><p>Nowadays LISP programmers are a protected species and shouldn't be subject to such harsh treatment.</p><blockquote><p>[Little&rsquo;s Formula] The average number of objects in a queue is the product of the entry rate and the average holding time. Richard E. Fairley. Wang Institute</p></blockquote><p>Another of those truisms which kinda don't matter in a world with infinite disk space. Speed is our greatest worry.</p><h2> <a href="https://shkspr.mobi#documentation">Documentation</a> </h2> <blockquote><p>[The Test of Negation] Don&rsquo;t include a sentence in documentation if its negation is obviously false. Bob Martin. AT&amp;T Technologies</p></blockquote><p>I don't know if that's the same guy as <a href="https://blog.wesleyac.com/posts/robert-martin">Uncle Bob</a> - but it sounds like the sort of claptrap he'd come up with. What's obvious to you might not be obvious to others. Test your writing with your audience to see if they understand your meaning.</p><blockquote><p>When explaining a command, or language feature, or hardware widget, first describe the problem it is designed to solve. David Martin. Norristown, Pennsylvania</p></blockquote><p>Agreed. It doesn't need to be an essay, but documentation needs context.</p><blockquote><p>[One Page Principle] A (specification, design, procedure, test plan) that will not fit on one page of 8.5-by-11 inch paper cannot be understood. Mark Ardis. Wang Institute</p></blockquote><p>I do have some sympathy with this - see the Two-Pizza rule above - but I think this ignores the reality of modern systems. Yes, we should keep things simple, but we also have to recognise that complexity is unavoidable.</p><blockquote><p>The job&rsquo;s not over until the paperwork&rsquo;s done. Anon</p></blockquote><p>Amen!</p><h2> <a href="https://shkspr.mobi#managing-software">Managing Software</a> </h2> <blockquote><p>The structure of a system reflects the structure of the organization that built it. Richard E. Fairley. Wang Institute</p></blockquote><p>This is <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> and it is still fairly true. <a href="https://dl.acm.org/doi/10.1109/RESER.2013.14">Some studies show it is possible to break out of the paradigm</a> but it holds remarkable power.</p><blockquote><p>Don&rsquo;t keep doing what doesn&rsquo;t work. Anon</p></blockquote><p>If only we could tattoo this on the inside of our eyelids, eh?</p><blockquote><p>[Rule of Credibility] The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time. Tom Cargill. Bell Labs</p></blockquote><p>Agile methodology has <em>somewhat</em> dimmed the potency of this prediction. I think people are <em>generally</em> better at estimating now. But it is hard to escape <a href="https://shkspr.mobi/blog/2022/12/zenos-paradox-and-why-modern-technology-is-rubbish/">Zeno's Paradox</a>.</p><blockquote><p>Less than 10 percent of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping. May Shaw. Carnegie-Mellon University</p></blockquote><p>How many times have you installed a simple program only to see it pull in every dependency under the sun? We need an awful lot of scaffolding to keep our houses standing.</p><blockquote><p>Good judgment comes from experience, and experience comes from bad judgment. Fred Brooks. University of North Carolina</p></blockquote><p>I lean <em>slightly</em> towards this. I also strongly believe that you can pick up a lot of good judgement by listening to your users.</p><blockquote><p>Don&rsquo;t write a new program if one already does more or less what you want. And if you must write a program, use existing code to do as much of the work as possible. Richard Hill. Hewlett-Packard S.A. Geneva, Switzerland</p></blockquote><p>This is the open source way. Much easier to fork than start again. But at some point you'll run up against an unwanted design decision which will be load-bearing. Think carefully before you re-use.</p><blockquote><p>Whenever possible, steal code. Tom Duff. Bell Labs</p></blockquote><p>ITYM "Respect the terms of an OSI approved Open Source licence" - don't you, Tom?</p><blockquote><p>Good customer relations double productivity. Larry Bernstein. Bell Communications Research</p></blockquote><p>A lesson learned by Apple and ignored by Google.</p><blockquote><p>Translating a working program to a new language or system takes 10 percent of the original development time or manpower or cost. Douglas W. Jones University of Iowa</p></blockquote><p>I honestly don't know how true that is any more. Automated tools must surely have improved that somewhat?</p><blockquote><p>Don&rsquo;t use the computer to do things that can be done efficiently by hand. Richard Hill. Hewlett-Packard S.A. Geneva, Switzerland</p></blockquote><p>A rare disagreement! Things can be efficiently done by hand <em>once or twice</em> but after that, go nuts! Even if it's something as simple as renaming a dozen files in a directory, you'll learn something interesting from automating it.</p><blockquote><p>I&rsquo;d rather write programs to write programs than write programs. Dick Sites. Digital Equipment Corporation</p></blockquote><p>There will always be people who love working on the meta-task. They're not wrong for doing so, but it can be an unhelpful distraction sometimes.</p><blockquote><p>[Brooks&rsquo;s Law of Prototypes] Plan to throw one away, you will anyhow. Fred Brooks. University of North Carolina</p></blockquote><p>I'd go further an suggest throwing out even more. It can be hard to sell that to management - but it is necessary.</p><blockquote><p>If you plan to throw one away, you will throw away two. Craig Zerouni. Computer FX Ltd. London, England</p></blockquote><p>Craig with the double-tap!</p><blockquote><p>Prototyping cuts the work to produce a system by 40 percent. Larry Bernstein. Bell Communications Research</p></blockquote><p>Minor disagreement. Prototyping <em>is</em> part of the work. And it should probably take a considerable amount of time.</p><blockquote><p>[Thompson&rsquo;s rule for first-time telescope makers] It is faster to make a four-inch mirror then a six-inch mirror than to make a six-inch mirror. Bill McKeeman. Wang Institute</p></blockquote><p>Yes. It is always tempting to go for the big win. But baby-steps!</p><blockquote><p>Furious activity is no substitute for understanding. H. H. Williams. Oakland, California</p></blockquote><p>Goodness me, yes! It's always tempting to rush in pell-mell. But that's a poor use of time.</p><blockquote><p>Always do the hard part first. If the hard part is impossible, why waste time on the easy part? Once the hard part is done, you&rsquo;re home free. Always do the easy part first. What you think at first is the easy part often turns out to be the hard part. Once the easy part is done, you can concentrate all your efforts on the hard part. Al Schapira. Bell Labs</p></blockquote><p>Oh, Al! You card! Luckily, there are very few "basic" problems to be solved in modern computing. We know what most of the hard problems are. Perhaps Agile teaches us to always leave software in a working state, so we start with the easy parts?</p><blockquote><p>If you lie to the computer, it will get you. Perry Farrar. Germantown, Maryland</p></blockquote><p>We shouldn't anthropomorphise computers; they don't like it. Actually, nowadays it's is quite common to "lie" to computers with dummy data and virtualised environments. It's fine.</p><blockquote><p>If a system doesn&rsquo;t have to be reliable, it can do anything else. H. H. Williams. Oakland, California</p></blockquote><p>Perhaps it is my imagination, but we seem less concerned with reliability these days. A Tesla car is a wonderful example of that.</p><blockquote><p>One person&rsquo;s constant is another person&rsquo;s variable. Susan Gerhart. Microelectronics and Computer Technology Corp.</p></blockquote><p>I wonder about this one a lot. Scoped access to variables possibly makes this less of an issue in the 21st century?</p><blockquote><p>One person&rsquo;s data is another person&rsquo;s program. Guy L. Steele, Jr. Tartan Laboratories</p></blockquote><p>I don't quite get this. Anyone care to explain?</p><blockquote><p>Eschew clever rules. Joe Condon. Bell Labs</p></blockquote><p>The pearls end with this gem.</p><h2> <a href="https://shkspr.mobi#what-have-we-learned-today">What have we learned today?</a> </h2><p>The majority of my disagreements are minor quibbles. And while disk-bound I/O is rarely a problem, network latency has replaced it as the main cause of delays. We've managed to fix some things, but many seem irrevocably tied to the human condition.</p><p>Which one was your favourite?</p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 19:45:00 +0530</pubDate></item><item><link>https://www.youtube.com/watch?v=uBhe1Rvp4PI</link><title>Made a tutorial Python in 10 minutes for beginners (with homework) (youtube.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</guid><comments>https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I just uploaded a short and beginner-friendly <strong>Python tutorial</strong> on YouTube where I explain the core concepts in only 10 minutes.<br/>Perfect if you&#39;re just starting out or need a quick refresher.<br/>Would love your feedback on whether you&#39;d like to see more quick lessons like this.</p><p>Thanks!</p></div><!-- SC_ON --></section><section class='embedded-media'><iframe width="356" height="200" src="https://www.youtube.com/embed/uBhe1Rvp4PI?feature=oembed&enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen title="Learn Python in 10 minutes for Beginners! (with homework)"></iframe></section>]]></description><pubDate>Fri, 05 Sep 2025 16:56:39 +0530</pubDate></item><item><link>https://github.com/StudioPlatforms/plain-lang</link><title>Building a programming language that reads like English: lessons from PlainLang (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</guid><comments>https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 26 min | <a href='https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Recently I started working on an experimental language called <strong>PlainLang</strong>, with the idea of making programming feel closer to natural conversation. Instead of symbols and punctuation, you write in full sentences like:</p><pre><code>set the greeting to &quot;Hello World&quot;.show on screen the greeting.</code></pre><p>From a technical standpoint, there were a few interesting challenges i thought might be worth sharing here:</p><ul><li><strong>Parsing “loose” English</strong>: Traditional parsers expect rigid grammar. PlainLang allows optional words like “the”, “a”, or “then”, so the parser had to be tolerant without losing structure. I ended up with a recursive descent parser tuned for flexibility, which was trickier than expected.</li><li><strong>Pronoun support</strong>: The language lets you use “it” to refer to the last computed result. That required carrying contextual state across statements in the runtime, a design pattern that feels simple in usage but was subtle to implement correctly.</li><li><strong>Error messages that feel human</strong>: If someone writes <code>add 5 to score</code> without first setting <code>score</code>, the runtime tries to explain it in plain terms rather than spitting out a stack trace. Writing helpful diagnostics for “English-like” code took some care.</li></ul><p>The project is still young, but it already supports variables, arithmetic, conditionals, loops, and an interactive REPL.</p><p>I’d be interested in hearing from others who have tried making more “human-readable” languages what trade-offs did you find between natural syntax and precise semantics?</p><p>The code is open source (MIT license)   </p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><article><h2>Plain Programming Language</h2><a href="https://github.com#plain-programming-language"></a><p><a href="https://opensource.org/licenses/MIT"><img src="https://camo.githubusercontent.com/6cd0120cc4c5ac11d28b2c60f76033b52db98dac641de3b2644bb054b449d60c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"></a> <a href="https://www.rust-lang.org/"><img src="https://camo.githubusercontent.com/b46f750af5c3a98977b2d984c82741c8b78d3e08b3621bfb890e2364200d7679/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f727573742d312e37302532422d6f72616e6765" alt="Rust"></a></p><p>Plain is a minimalist, English-like programming language designed to make programming feel like natural conversation. It combines the power of traditional programming with intuitive, human-readable syntax.</p><h2>Table of Contents</h2><a href="https://github.com#table-of-contents"></a> <ul> <li><a href="https://github.com#overview">Overview</a></li> <li><a href="https://github.com#features">Features</a></li> <li><a href="https://github.com#installation">Installation</a></li> <li><a href="https://github.com#quick-start">Quick Start</a></li> <li><a href="https://github.com#language-syntax">Language Syntax</a> <ul> <li><a href="https://github.com#variables-and-assignment">Variables and Assignment</a></li> <li><a href="https://github.com#arithmetic-operations">Arithmetic Operations</a></li> <li><a href="https://github.com#output-and-display">Output and Display</a></li> <li><a href="https://github.com#conditional-statements">Conditional Statements</a></li> <li><a href="https://github.com#loops">Loops</a></li> <li><a href="https://github.com#sequences-and-flow-control">Sequences and Flow Control</a></li> <li><a href="https://github.com#pronouns-and-context">Pronouns and Context</a></li> </ul> </li> <li><a href="https://github.com#architecture">Architecture</a></li> <li><a href="https://github.com#implementation-details">Implementation Details</a></li> <li><a href="https://github.com#cli-interface">CLI Interface</a></li> <li><a href="https://github.com#examples">Examples</a></li> <li><a href="https://github.com#api-reference">API Reference</a></li> <li><a href="https://github.com#development">Development</a></li> <li><a href="https://github.com#testing">Testing</a></li> <li><a href="https://github.com#contributing">Contributing</a></li> <li><a href="https://github.com#license">License</a></li> </ul><p></p><h2>Overview</h2><a href="https://github.com#overview"></a><p>Plain reimagines programming by using natural English sentences instead of cryptic symbols and keywords. Instead of writing:</p><div><pre><span>let</span> <span>distance</span> <span>=</span> <span>5</span><span>;</span> <span>distance</span> <span>+=</span> <span>18</span><span>;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>distance</span><span>)</span><span>;</span></pre></div><p>You can write:</p><div><pre><code>set the distance to 5. add 18 to the distance then display it. </code></pre></div><p>The language maintains full programming power while being accessible to beginners and readable like plain English.</p><h2>Features</h2><a href="https://github.com#features"></a> <ul> <li>&#9989; <strong>Natural English Syntax</strong>: Write code using everyday language patterns</li> <li>&#9989; <strong>Pronoun Support</strong>: Use "it" to refer to previous results</li> <li>&#9989; <strong>Flexible Statements</strong>: Support for sequences with "then"</li> <li>&#9989; <strong>Mathematical Operations</strong>: Addition, subtraction, and comparisons</li> <li>&#9989; <strong>Conditional Logic</strong>: If-then statements with natural syntax</li> <li>&#9989; <strong>Loop Constructs</strong>: Count-based iteration</li> <li>&#9989; <strong>Variable Management</strong>: Simple variable declaration and manipulation</li> <li>&#9989; <strong>Output Handling</strong>: Display results with natural phrasing</li> <li>&#9989; <strong>Interactive REPL</strong>: Command-line interface for experimentation</li> <li>&#9989; <strong>Extensible Architecture</strong>: Clean separation of concerns for future features</li> </ul><p></p><h2>Installation</h2><a href="https://github.com#installation"></a> <h3>Prerequisites</h3><a href="https://github.com#prerequisites"></a> <ul> <li><strong>Rust</strong>: Version 1.70 or later</li> <li><strong>Cargo</strong>: Rust's package manager (included with Rust)</li> </ul><p></p><h3>Building from Source</h3><a href="https://github.com#building-from-source"></a><div><pre><span><span>#</span> Clone the repository</span> git clone https://github.com/yourusername/plain-lang.git <span>cd</span> plain-lang <span><span>#</span> Build the project</span> cargo build --release <span><span>#</span> Run tests (optional)</span> cargo <span>test</span></pre></div><p>The compiled binary will be available at <code>target/release/plain-lang</code>.</p><h3>Direct Usage</h3><a href="https://github.com#direct-usage"></a><p>After building, you can run Plain programs directly:</p><div><pre><span><span>#</span> Run a Plain source file</span> ./target/release/plain-lang run examples/demo.plain <span><span>#</span> Start the interactive REPL</span> ./target/release/plain-lang</pre></div><h2>Quick Start</h2><a href="https://github.com#quick-start"></a><p>Create a file called <code>hello.plain</code>:</p><div><pre><code>set the greeting to "Hello World". show on screen the greeting. </code></pre></div><p>Run it:</p><div><pre>plain-lang run hello.plain</pre></div><p>Expected output:</p><h2>Language Syntax</h2><a href="https://github.com#language-syntax"></a><p></p><h3>Variables and Assignment</h3><a href="https://github.com#variables-and-assignment"></a><p><strong>Basic Assignment:</strong></p><div><pre><code>set the variable_name to 42. set my_name to "Alice". </code></pre></div><p><strong>With Articles:</strong></p><div><pre><code>set the distance to 100. set the message to "Welcome". </code></pre></div><p>Variables can hold integers or strings and are case-sensitive.</p><h3>Arithmetic Operations</h3><a href="https://github.com#arithmetic-operations"></a><p><strong>Addition:</strong></p><div><pre><code>set the score to 10. add 5 to the score. add 3 to score then display it. </code></pre></div><p><strong>Subtraction:</strong></p><div><pre><code>set the temperature to 72. subtract 10 from the temperature. </code></pre></div><p><strong>Result Tracking:</strong> All arithmetic operations automatically update the internal "last result" for pronoun usage.</p><h3>Output and Display</h3><a href="https://github.com#output-and-display"></a><p><strong>Basic Display:</strong></p><div><pre><code>set the message to "Hello". show on screen the message. display the message. </code></pre></div><p><strong>Pronoun Usage:</strong></p><div><pre><code>add 5 to the counter then display it. </code></pre></div><p><strong>Flexible Output:</strong></p><div><pre><code>show on screen the result. display the current_value. </code></pre></div><h3>Conditional Statements</h3><a href="https://github.com#conditional-statements"></a><p><strong>Simple Conditions:</strong></p><div><pre><code>set the age to 25. if age is greater than 18 then show on screen "Adult". </code></pre></div><p><strong>With Articles:</strong></p><div><pre><code>if the temperature is less than 0 then display "Freezing". </code></pre></div><p><strong>Comparison Operators:</strong></p><ul> <li><code>is greater than</code></li> <li><code>is less than</code></li> <li><code>is equal to</code></li> </ul> <h3>Loops</h3><a href="https://github.com#loops"></a><p><strong>Count-based Loops:</strong></p><div><pre><code>count to 5 and when you are done display "Done". set the counter to 0. count to 10 and when you are done show on screen the counter. </code></pre></div><p>The loop executes the body statement the specified number of times.</p><h3>Sequences and Flow Control</h3><a href="https://github.com#sequences-and-flow-control"></a><p><strong>Statement Chaining:</strong></p><div><pre><code>set the value to 10 then add 5 to value then display it. </code></pre></div><p><strong>Complex Sequences:</strong></p><div><pre><code>set the score to 0. add 10 to the score then display it. if score is greater than 5 then add 5 to score then display it. </code></pre></div><h3>Pronouns and Context</h3><a href="https://github.com#pronouns-and-context"></a><p><strong>Automatic Context Tracking:</strong></p><div><pre><code>set the distance to 100. add 50 to the distance. display it. </code></pre></div><p>In this example, "it" refers to the result of the addition (150).</p><p><strong>Pronoun Rules:</strong></p><ul> <li>"it" always refers to the most recent computed result</li> <li>Pronouns work across all operations that produce values</li> <li>Context is maintained throughout program execution</li> </ul> <h2>Architecture</h2><a href="https://github.com#architecture"></a><p></p><h3>Core Components</h3><a href="https://github.com#core-components"></a><div><pre><code>plain-lang/ &#9500;&#9472;&#9472; src/ &#9474; &#9500;&#9472;&#9472; main.rs # CLI entry point &#9474; &#9500;&#9472;&#9472; lexer.rs # Tokenization (logos-based) &#9474; &#9500;&#9472;&#9472; parser.rs # Recursive descent parsing &#9474; &#9500;&#9472;&#9472; ast.rs # Abstract Syntax Tree definitions &#9474; &#9500;&#9472;&#9472; runtime.rs # Execution engine &#9474; &#9500;&#9472;&#9472; repl.rs # Interactive REPL &#9474; &#9492;&#9472;&#9472; lib.rs # Module declarations &#9500;&#9472;&#9472; examples/ # Sample programs &#9492;&#9472;&#9472; Cargo.toml # Dependencies and metadata </code></pre></div><h3>Execution Pipeline</h3><a href="https://github.com#execution-pipeline"></a> <ol> <li><strong>Lexical Analysis</strong>: Source text &rarr; tokens</li> <li><strong>Parsing</strong>: Tokens &rarr; AST</li> <li><strong>Type Checking</strong>: Semantic validation (stub for future)</li> <li><strong>Code Generation</strong>: AST &rarr; executable form (interpreter)</li> <li><strong>Execution</strong>: Runtime evaluation with state management</li> </ol><p></p><h3>Key Design Decisions</h3><a href="https://github.com#key-design-decisions"></a> <ul> <li><strong>Interpreter Architecture</strong>: Tree-walking interpreter for simplicity and debugging</li> <li><strong>Context Tracking</strong>: <code>last_value</code> system for natural pronoun support</li> <li><strong>Flexible Parsing</strong>: Extensive optional tokens for natural language variation</li> <li><strong>Error Handling</strong>: Descriptive error messages for debugging</li> </ul> <h2>Implementation Details</h2><a href="https://github.com#implementation-details"></a><p></p><h3>Lexer (lexer.rs)</h3><a href="https://github.com#lexer-lexerrs"></a> <ul> <li>Uses the <code>logos</code> crate for efficient tokenization</li> <li>Case-insensitive keywords with regex patterns</li> <li>Comprehensive token set covering English-like constructs</li> </ul> <h3>Parser (parser.rs)</h3><a href="https://github.com#parser-parserrs"></a> <ul> <li>Recursive descent parser with manual precedence handling</li> <li>Extensive support for optional tokens ("the", articles, etc.)</li> <li>Context-aware parsing with position tracking</li> <li>Robust error reporting with position information</li> </ul><p></p><h3>Runtime (runtime.rs)</h3><a href="https://github.com#runtime-runtimers"></a> <ul> <li>Variable storage using <code>HashMap<string></string></code></li> <li>Result caching with <code>last_value</code> for pronoun support</li> <li>Tree-walking evaluation of AST nodes</li> <li>Type-safe operations with explicit error handling</li> </ul> <h3>AST (ast.rs)</h3><a href="https://github.com#ast-astrs"></a><div><pre><span>pub</span> <span>enum</span> <span>Stmt</span> <span>{</span> <span>Set</span><span>(</span><span>String</span><span>,</span> <span>Expr</span><span>)</span><span>,</span> <span>Add</span><span>(</span><span>Expr</span><span>,</span> <span>String</span><span>)</span><span>,</span> <span>Sub</span><span>(</span><span>Expr</span><span>,</span> <span>String</span><span>)</span><span>,</span> <span>Show</span><span>(</span><span>Expr</span><span>)</span><span>,</span> <span>If</span><span>(</span><span>Expr</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>Seq</span><span>(</span><span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>Loop</span><span>(</span><span>Expr</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>}</span> <span>pub</span> <span>enum</span> <span>Expr</span> <span>{</span> <span>Int</span><span>(</span><span>i64</span><span>)</span><span>,</span> <span>Str</span><span>(</span><span>String</span><span>)</span><span>,</span> <span>Var</span><span>(</span><span>String</span><span>)</span><span>,</span> <span>LastValue</span><span>,</span> <span>// For pronouns</span> <span>Gt</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>Lt</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>Eq</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>}</span></pre></div><p></p><h2>CLI Interface</h2><a href="https://github.com#cli-interface"></a> <h3>Commands</h3><a href="https://github.com#commands"></a><div><pre>plain-lang run <span>&lt;</span>file<span>&gt;</span> <span><span>#</span> Execute a Plain source file</span> plain-lang <span><span>#</span> Start interactive REPL</span> plain-lang --help <span><span>#</span> Display help information</span></pre></div><p></p><h3>REPL Mode</h3><a href="https://github.com#repl-mode"></a><div><pre><code>$ plain-lang Plain&gt; set the value to 42. Plain&gt; display it. 42 Plain&gt; add 8 to value then display it. 50 </code></pre></div><h3>File Execution</h3><a href="https://github.com#file-execution"></a><div><pre>$ plain-lang run examples/demo.plain 23 23 ...</pre></div><p></p><h2>Examples</h2><a href="https://github.com#examples"></a> <h3>Basic Arithmetic</h3><a href="https://github.com#basic-arithmetic"></a><div><pre><code>set the x to 10. add 5 to x. display it. </code></pre></div><p></p><h3>Conditional Logic</h3><a href="https://github.com#conditional-logic"></a><div><pre><code>set the temperature to 75. if temperature is greater than 70 then display "Warm". </code></pre></div><h3>Loops with Context</h3><a href="https://github.com#loops-with-context"></a><div><pre><code>set the counter to 0. count to 5 and when you are done display the counter. </code></pre></div><p></p><h3>Complex Sequences</h3><a href="https://github.com#complex-sequences"></a><div><pre><code>set the score to 100. add 25 to score then display it. if score is greater than 120 then show on screen "High Score". </code></pre></div><h2>API Reference</h2><a href="https://github.com#api-reference"></a><p></p><h3>Core Functions</h3><a href="https://github.com#core-functions"></a> <h4><code>parse(input: &amp;str) -&gt; Result<stmt></stmt></code></h4><a href="https://github.com#parseinput-str---resultstmt-string"></a><p>Parses Plain source code into an AST statement.</p><h4><code>Runtime::new() -&gt; Runtime</code></h4><a href="https://github.com#runtimenew---runtime"></a><p>Creates a new execution environment.</p><h4><code>Runtime::exec_stmt(&amp;mut self, stmt: &amp;Stmt) -&gt; Result&lt;(), String&gt;</code></h4><a href="https://github.com#runtimeexec_stmtmut-self-stmt-stmt---result-string"></a><p>Executes an AST statement in the current environment.</p><h3>Data Structures</h3><a href="https://github.com#data-structures"></a><p></p><h4><code>Runtime</code></h4><a href="https://github.com#runtime"></a> <ul> <li><code>vars: HashMap<string></string></code> - Variable storage</li> <li><code>last_value: Option<value></value></code> - Most recent result for pronouns</li> </ul> <h4><code>Value</code> enum</h4><a href="https://github.com#value-enum"></a> <ul> <li><code>Int(i64)</code> - Integer values</li> <li><code>Str(String)</code> - String values</li> </ul><p></p><h2>Development</h2><a href="https://github.com#development"></a> <h3>Project Structure</h3><a href="https://github.com#project-structure"></a><div><pre><code>plain-lang/ &#9500;&#9472;&#9472; src/ &#9474; &#9500;&#9472;&#9472; main.rs # CLI and main entry point &#9474; &#9500;&#9472;&#9472; lexer.rs # Tokenization logic &#9474; &#9500;&#9472;&#9472; parser.rs # Language grammar and parsing &#9474; &#9500;&#9472;&#9472; ast.rs # Abstract syntax tree definitions &#9474; &#9500;&#9472;&#9472; runtime.rs # Execution environment &#9474; &#9500;&#9472;&#9472; repl.rs # Interactive shell &#9474; &#9500;&#9472;&#9472; codegen.rs # Code generation (future JIT) &#9474; &#9492;&#9472;&#9472; typecheck.rs # Type checking (future features) &#9500;&#9472;&#9472; examples/ # Sample Plain programs &#9500;&#9472;&#9472; tests/ # Unit and integration tests &#9492;&#9472;&#9472; Cargo.toml # Project configuration </code></pre></div><p></p><h3>Adding New Features</h3><a href="https://github.com#adding-new-features"></a> <ol> <li><strong>Lexer</strong>: Add new tokens to <code>Token</code> enum in <code>lexer.rs</code></li> <li><strong>Parser</strong>: Extend <code>parse_stmt</code> and <code>parse_expr</code> functions</li> <li><strong>AST</strong>: Add new variants to <code>Stmt</code> and <code>Expr</code> enums</li> <li><strong>Runtime</strong>: Implement execution logic for new features</li> <li><strong>Tests</strong>: Add test cases for new functionality</li> </ol> <h3>Testing Framework</h3><a href="https://github.com#testing-framework"></a><div><pre><span><span>#</span> Run all tests</span> cargo <span>test</span> <span><span>#</span> Run specific test</span> cargo <span>test</span> test_parser <span><span>#</span> Run with verbose output</span> cargo <span>test</span> -- --nocapture</pre></div><p></p><h2>Testing</h2><a href="https://github.com#testing"></a> <h3>Test Categories</h3><a href="https://github.com#test-categories"></a> <ul> <li><strong>Unit Tests</strong>: Individual component testing</li> <li><strong>Integration Tests</strong>: End-to-end program execution</li> <li><strong>Parser Tests</strong>: Grammar and syntax validation</li> <li><strong>Runtime Tests</strong>: Execution correctness</li> </ul><p></p><h3>Writing Tests</h3><a href="https://github.com#writing-tests"></a><div><pre><span>#<span>[</span>test<span>]</span></span> <span>fn</span> <span>test_basic_assignment</span><span>(</span><span>)</span> <span>{</span> <span>let</span> input = <span>"set the value to 42."</span><span>;</span> <span>let</span> result = <span>parse</span><span>(</span>input<span>)</span><span>;</span> <span>assert</span><span>!</span><span>(</span>result<span>.</span>is_ok<span>(</span><span>)</span><span>)</span><span>;</span> <span>let</span> <span>mut</span> runtime = <span>Runtime</span><span>::</span><span>new</span><span>(</span><span>)</span><span>;</span> <span>let</span> stmt = result<span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span> <span>assert</span><span>!</span><span>(</span>runtime<span>.</span>exec_stmt<span>(</span><span>&amp;</span>stmt<span>)</span><span>.</span>is_ok<span>(</span><span>)</span><span>)</span><span>;</span> <span>assert_eq</span><span>!</span><span>(</span>runtime<span>.</span>vars<span>.</span>get<span>(</span><span>"value"</span><span>)</span><span>,</span> <span>Some</span><span>(</span><span>&amp;</span><span>Value</span><span>::</span><span>Int</span><span>(</span><span>42</span><span>)</span><span>)</span><span>)</span><span>;</span> <span>}</span></pre></div><h2>Contributing</h2><a href="https://github.com#contributing"></a><p>We welcome contributions! Please follow these guidelines:</p><h3>Development Workflow</h3><a href="https://github.com#development-workflow"></a> <ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature/new-feature</code></li> <li>Commit your changes: <code>git commit -am 'Add new feature'</code></li> <li>Push to the branch: <code>git push origin feature/new-feature</code></li> <li>Submit a pull request</li> </ol><p></p><h3>Code Standards</h3><a href="https://github.com#code-standards"></a> <ul> <li><strong>Rust Style</strong>: Follow standard Rust formatting (<code>cargo fmt</code>)</li> <li><strong>Documentation</strong>: Add doc comments for public APIs</li> <li><strong>Testing</strong>: Include tests for new functionality</li> <li><strong>Error Handling</strong>: Use descriptive error messages</li> <li><strong>Performance</strong>: Consider efficiency in algorithm design</li> </ul> <h3>Areas for Contribution</h3><a href="https://github.com#areas-for-contribution"></a> <ul> <li><strong>New Language Features</strong>: Control flow, functions, data structures</li> <li><strong>Performance Optimization</strong>: JIT compilation, caching</li> <li><strong>Error Handling</strong>: Better error messages and recovery</li> <li><strong>Tooling</strong>: IDE support, debuggers, formatters</li> <li><strong>Documentation</strong>: Tutorials, examples, language specification</li> </ul><p></p><h2>License</h2><a href="https://github.com#license"></a><p>This project is licensed under the MIT License - see the <a href="https://github.com/StudioPlatforms/plain-lang/blob/main/LICENSE">LICENSE</a> file for details.</p><h3>MIT License Summary</h3><a href="https://github.com#mit-license-summary"></a><p>Copyright (c) 2025 Studio Platforms</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><hr> <h2>Acknowledgments</h2><a href="https://github.com#acknowledgments"></a> <ul> <li><strong>Rust Community</strong>: For the excellent language and ecosystem</li> <li><strong>Logos</strong>: Efficient tokenization library</li> <li><strong>Chumsky</strong>: Parser combinator framework (inspiration)</li> <li><strong>Open Source Community</strong>: For inspiration and tools</li> </ul><p></p><h2>Future Roadmap</h2><a href="https://github.com#future-roadmap"></a> <ul> <li> <strong>Function Definitions</strong>: <code>define function_name as ...</code></li> <li> <strong>Data Structures</strong>: Arrays and objects</li> <li> <strong>File I/O</strong>: Reading and writing files</li> <li> <strong>Modules</strong>: Code organization and imports</li> <li> <strong>JIT Compilation</strong>: Performance optimization with Cranelift</li> <li> <strong>Debugger</strong>: Step-through execution and breakpoints</li> <li> <strong>Package Manager</strong>: Dependency management</li> <li> <strong>Web Integration</strong>: Browser-based execution</li> </ul> <hr><p><em>Plain: Making programming as natural as conversation.</em></p></article></div></section>]]></description><pubDate>Fri, 05 Sep 2025 16:23:29 +0530</pubDate></item><item><link>https://shiftmag.dev/saying-no-is-not-a-free-action-in-the-world-of-software-engineering-5339/</link><title>The hidden costs of saying “no” in software engineering (shiftmag.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/</guid><comments>https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>At ShiftMag we recently explored an angle of software engineering that doesn’t get much attention: the cost of saying “no”.</p><p>We often hear that being able to refuse is a vital soft skill – but refusing also carries a psychological and professional price. Declining can create stress, trigger anxiety, and even feel like a career risk, especially in environments where overcommitment is the norm. </p><p>Meanwhile, saying “yes” is usually rewarded in the short term, even if it leads to burnout later.This raises some questions for us as a profession:</p><p>How do you personally navigate the emotional toll of refusing requests at work?Have you seen “just say no” advice backfire in your teams?</p><p>What practices have you found effective for making refusal safer and healthier in professional environments?</p><p>We’d love to hear how others in the community experience and handle this dynamic.</p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>'Who could refuse that?' Turns out, almost no one - especially when faced with puppy eyes, heartfelt asks, or a desperate Pikachu. Refusing is hard, and it costs more than we admit. </p></div><div><figure><img width="1200" height="630" src="https://shiftmag.dev/wp-content/uploads/2025/06/saying-no.png?x73249" alt srcset="https://shiftmag.dev/wp-content/uploads/2025/06/saying-no.png 1200w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-300x158.png 300w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-1024x538.png 1024w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-768x403.png 768w"></figure><p>We all agree: <strong>saying <em>no</em> is important</strong> &ndash; it can be liberating, support work-life balance, and is a crucial life skill.</p><p>What&rsquo;s discussed far less is the cost of refusing, especially the <strong>psychological cost</strong>. That&rsquo;s what I&rsquo;d like to explore: the emotional toll of refusing &ndash; on ourselves and on those we ask for something, even when we reassure them, &ldquo;It&rsquo;s totally fine if you can&rsquo;t.&rdquo;</p><h2>It&rsquo;s hard to refuse &ndash; and all too easy to agree</h2><p>Overall, <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2443710/">saying <em>no</em> often carries negative connotations</a>, which is why we tend to avoid it. We dislike being in situations where <strong>our words or actions might be perceived as negative</strong>. It becomes even more difficult to decline in person &ndash; especially when we know the person well or feel emotionally connected to them or the topic.</p><blockquote><p>People are generally more dismissive online or in anonymous settings, where <strong>the perceived consequences are minimal</strong>. It&rsquo;s much easier to ignore or mock a request to &ldquo;like&rdquo; a post on social media than to say <em>no</em> to your mum when she asks for help picking apples.</p></blockquote><p>In a professional setting, declining becomes even more complicated.</p><p>We&rsquo;ve created a work culture where <strong>declining requests too often can feel like a career risk</strong>, especially for <a href="https://shiftmag.dev/the-journey-of-a-lone-female-software-developer-2876/">women</a> and members of <a href="https://www.harpersbazaar.com/culture/features/a36687625/naomi-osaka-and-the-cost-of-saying-no/">minority groups</a>. Declining isn&rsquo;t only disappointing for the person who asked; it might also mean missing out on a promotion or an exciting opportunity. <a href="https://en.wikipedia.org/wiki/Carp">Holy carp</a>!</p><p>Conversely, <strong>accepting is effortless</strong>. </p><p>It feels nice and positive. You&rsquo;re pleasing the other person, maybe even securing a future reward for yourself. What could be better? Since <a href="https://en.wikipedia.org/wiki/Hyperbolic_discounting">humans are wired to chase immediate rewards</a> and often <a href="http://spia.uga.edu/faculty_pages/tyler.scott/teaching/PADP6950_Spring2017/Readings/Odonoghue.Rabin.2000.pdf">overlook future pain</a>, we tend to say <em>yes</em> just to see that happy twinkle in someone&rsquo;s eye &ndash; consequences be damned!</p><p>If you Google <a href="https://www.google.com/search?q=how+to+say+no">&ldquo;how to say no&rdquo;</a>, you&rsquo;ll get a lot of results, mostly focused on the actual skill of rejecting something. If you Google <a href="https://www.google.com/search?q=how+to+say+yes">&ldquo;how to say yes&rdquo;</a>, you mostly get results about how to say words and phrases in different languages. <strong>Declining is a tricky soft skill</strong>; accepting is often just about language.</p><h2><span>Turning something down is&hellip; stressful.</span></h2><p>So, where are we with <em>no</em>?</p><ul> <li>We&rsquo;re not that great at saying it.</li> <li>It&rsquo;s not a pleasant thing to do.</li> <li>It can have negative consequences.</li> </ul><p>As a result,<strong> it&rsquo;s often stressful to refuse a request</strong>. </p><p>We tend to worry about it before, during, and after the fact. This stress can be even worse if we&rsquo;re already dealing with things like <strong>burnout, impostor syndrome, or anxiety</strong>. Saying <em>no</em> in those situations can feel like adding fuel to the fire. If I already don&rsquo;t believe I&rsquo;m doing a stellar job, turning something down might only reinforce the fear that others see me as a failure.</p><blockquote><p>Our tendency toward <a href="https://en.wikipedia.org/wiki/Herd_mentality">herd mentality</a> doesn&rsquo;t help either. When most of the team says <em>yes</em> and we&rsquo;re the only ones who want to say <em>no</em>, <strong>we often end up going along with the group</strong>, even if we feel conflicted inside.</p></blockquote><p>Many of us have experienced this in sprint planning and sprint reviews &ndash; the team takes on more work than necessary during planning to avoid refusing requests, and then feels deflated and disappointed when they can&rsquo;t deliver everything by the end. Over time, this can <strong>hurt team morale and spirit</strong>, lower motivation, and even create a toxic dynamic between teams and their stakeholders.</p><p>All of this leads to a simple point: <strong>refusing comes with its own burden</strong>. Telling someone to &ldquo;just say <em>no</em>&rdquo; can be disingenuous &ndash; placing the emotional and social cost of rejection on them, while pretending it&rsquo;s easy.</p><h2><span>Expecting a simple refusal hurts the ones who care most</span></h2><p>The people who are most invested in a project, those who care deeply about the quality of their work and their team&rsquo;s delivery, often your &ldquo;best performers&rdquo;, are <strong>usually the ones who find it hardest to say <em>no</em></strong>. As a result, they often take the initiative to pick up tasks that others might reject.</p><p>If you keep asking, they may continue to agree, depending on their situation, until they eventually hit a wall and burn out.</p><h2><span>Be kind. Don&rsquo;t act like <em>no</em> is just a simple word</span></h2><p>We should be<strong> mindful of our colleagues&rsquo; workloads</strong> and, whenever possible, avoid asking them for additional tasks if we know they might already have a full plate. </p><blockquote><p>It&rsquo;s important to recognize that they may feel unable or reluctant to refuse, even when they want to. And even when they do refuse, it can still come at a cost to their emotional well-being or personal life.</p></blockquote><p>We should also recognize that <strong>refusal comes in many forms</strong>. It can mean:</p><ul> <li>Literally saying <em>no</em>.</li> <li>Taking only 5 tasks out of 10 that were offered.</li> <li>Choosing not to volunteer when most others do.</li> <li>Not attending a meeting or participating in a Slack discussion.</li> </ul><p>All of the above can be difficult to do and <strong>may lead to negative consequences down the road</strong>, for both the individual and the team.</p><h2><span>What&rsquo;s the solution?</span></h2> <ul> <li><strong>Talk openly with your colleagues.</strong> Be aware of the challenges they face and the workloads they carry. Don&rsquo;t expect them to simply reject additional work &ndash; understand their situation through honest conversations.</li> <li><strong>Keep expectations realistic.</strong> Avoid presenting people or teams with overwhelming wish lists they can&rsquo;t reasonably deliver. Don&rsquo;t assume others will just say <em>no</em> to unreasonable demands.</li> <li><strong>Diversify your requests for help.</strong> Instead of always turning to the same people who tend to say <em>yes</em>, reach out to others and distribute the load more evenly.</li> <li><strong>Avoid herd mentality pressure.</strong> Give individuals space and time to make decisions independently, and encourage sharing outcomes in a safe environment. This is why practices like writing retrospective points individually or revealing estimations simultaneously in planning poker are important.</li> <li><strong>Lead by example.</strong> Show that saying <em>no</em> when it&rsquo;s appropriate is acceptable. Recognize that you might also struggle with this and discuss it openly with your team.</li> <li><strong>Establish fair systems and processes.</strong> Ensure workloads are distributed transparently and fairly, rather than relying on informal methods that often favor those who find it easier to say <em>no</em> &ndash; which can unfairly burden those who care most about the project&rsquo;s success.</li> <li><strong>Don&rsquo;t reward or idolize overwork.</strong> Encourage a culture that values balance and sustainable effort over relentless hustle.</li> </ul> </div></section>]]></description><pubDate>Thu, 04 Sep 2025 23:05:17 +0530</pubDate></item><item><link>https://open.substack.com/pub/softwarearthopod/p/vibe-coding-our-way-to-disaster?r=ww6gs&amp;&amp;&amp;showWelcomeOnShare=true</link><title>Are We Vibecoding Our Way to Disaster? (open.substack.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n8fqry/are_we_vibecoding_our_way_to_disaster/</guid><comments>https://www.reddit.com/r/programming/comments/1n8fqry/are_we_vibecoding_our_way_to_disaster/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 18 min | <a href='https://www.reddit.com/r/programming/comments/1n8fqry/are_we_vibecoding_our_way_to_disaster/'>Post permalink</a></p></section><section class='preview-image'><img src='https://substackcdn.com/image/fetch/$s_!Dwjn!,w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4defe298-7b3d-4fc0-8624-ff6bc2348103_2688x1792.png' /></section><section class='parsed-content'><div><article><div><p><span>In 2010 and 2011, </span><a href="https://en.wikipedia.org/wiki/Rich_Hickey">Rich Hickey</a><span>, the creator of Clojure, gave two talks that shaped how many developers think about software design. His talks have only become more relevant since then, as we are now being inundated with AI-written code.</span></p><p><a href="https://www.youtube.com/watch?v=SxdOUGdseq4">Simple Made Easy</a><span> distinguishes between simplicity (things that aren't intertwined with other things) and ease (things that are familiar or quick to use). The distinction matters because we often choose easy solutions that create complex, tangled systems.</span></p><p><a href="https://www.youtube.com/watch?v=f84n5oFoZBc">Hammock-Driven Development</a><span> advocates deep, unhurried thinking about problems before writing code. Hickey argues that most critical bugs actually result from misunderstanding the problem rather than implementation errors.</span></p><p>As I've worked with coding agents over the past year, I keep returning to these principles. They provide a framework for understanding why some AI-assisted development results in high-quality software, while others create a complex mess. The key insight: AI tools amplify whatever approach you bring to them. If you rush to code without understanding the problem, AI helps you build the wrong solution. If you think deeply first, AI becomes a powerful tool for implementing well-considered solutions.</p><p>Hickey makes a distinction between simple and easy that at first sounds pedantic. Simple meaning: a single braid, one responsibility, or one concept that doesn't touch anything else. Easy, meaning the thing you reach for automatically. The familiar choice. The solution you can implement without a design doc. The easy approach seduces you because it asks nothing of you in return for using it. The definition of simple really has no overlap with easy, but it is a common idea that simple things are easy, which is not always the case.</p><p>This distinction becomes clearer today when using AI coding agents. The easy approach is to open a chat and start vibe coding your app, iterating through conversation after conversation. It feels natural and productive. The AI responds quickly, code appears, and you can see immediate progress.</p><p>But this easy path comes at the cost of a special kind of complexity: context complexity. As conversations grow longer, the AI's context window fills with corrections, clarifications, searches, tool invocations, and evolving requirements. You are stacking complexity without realizing it. Earlier thoughtful design decisions get buried under the frustration of revisions. The AI starts making connections between these unrelated parts of the conversation, and your focused task dissolves into partial solutions and conflicting approaches, each one 'fixing' the problems created by the last.</p><p>Vibe coding is explicitly choosing ease over simplicity, just as Hickey warned. The comfortable, conversational interface of AI assistants makes it tempting to skip the hard work of clearly defining what we're building. We let the software evolve organically, which feels productive but inevitably creates exactly what Hickey calls "complected" (unnecessarily intertwined) systems. Our context complexity becomes code complexity, and every clarification and correction in the chat history gets woven into the implementation.</p><p>'Hammock-Driven Development' presents an idea that has influenced the way I work, even before working with AI tools. Rich Hickey argues that the most critical software bugs arise from misunderstanding the problem itself, not from implementation errors.</p><p>He demonstrates how our best solutions emerge from harnessing our brain's natural creative process. The analytical mind specializes in gathering information and critiquing ideas, but it gets trapped in familiar patterns of problems it has previously solved. The background mind synthesizes and connects ideas in new ways, but only when we give it space to work. You can't force it to work.</p><p>Hickey's approach maps directly onto the four stages of creative thought, a framework from Graham Wallas's work in the 1920s:</p><ol><li><p><strong>Preparation</strong><span>: Loading up your analytical mind with information. In software, this means understanding the problem domain, exploring existing solutions, and identifying constraints. Hickey emphasizes that we often rush this stage, but it's the foundation for everything else. You need to gather the raw material before your brain can do anything useful with it.</span></p></li><li><p><strong>Incubation</strong><span>: Stepping away from the keyboard. Your background mind processes the information you've gathered, making connections your conscious mind wouldn't make. This is why solutions often come during walks, showers, or lying in a hammock. The key is to actually step away after thorough preparation. (This can also show up as having nightmares about JavaScript)</span></p></li><li><p><strong>Illumination</strong><span>: The eureka moments when connections suddenly become clear. These insights feel like they come from nowhere, but they're actually the result of your background mind's processing during incubation. Hickey notes these moments often reveal simpler solutions than what your analytical mind was initially pursuing.</span></p></li><li><p><strong>Verification</strong><span>: Testing whether the insight actually works. This brings the analytical mind back into play, but now it's working with a fundamentally different approach born from synthesis rather than incremental analysis. Not every insight survives verification, but the ones that do often solve the real problem.</span></p></li></ol><p><span>This focus on disciplined thinking led me to a revelation about AI tools. As I've worked with coding agents over the last few months, I noticed that the most successful agent runs were not from writing the best prompts, but from applying Hickey's preparation phase upfront. This realization led me to develop what I at the time called</span><a href="https://x.com/nayshins/status/1925710279217754123">The Context Compression Funnel</a><span> - later coined by others as </span><a href="https://www.youtube.com/watch?v=8kMaTybvDUw">Context Engineering</a><span> (a much more marketable term, let's be honest). Context engineering is the discipline of designing what an AI sees before it responds - not just the prompt, but all the supporting information, tools, and structure needed to get reliable results.</span></p><div><figure><a href="https://substackcdn.com/image/fetch/$s_!Zov0!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4d3fb9-67eb-46dc-a2e9-26cb54884cba_589x652.png"></a></figure></div><p>The core insight is that we should treat AI agents not as conversational partners but as powerful tools whose context must be carefully managed. Just as Hickey advocates for choosing simple constructs over complex ones, we need to opt for simple interaction patterns that provide context upfront over the ease of conversational threads.</p><p>So how do we apply Hickey's principles to AI development? I've found success with three distinct phases that force us to think before we code. This approach directly applies Hickey's principles to prevent the complexity that naturally emerges from unstructured AI interactions.</p><p>The first phase treats the AI as a research assistant focused solely on understanding the problem space. Given a high-level goal, the AI explores the codebase to identify all relevant components. The output is a research document that maps the terrain we'll be working in.</p><p>This phase embodies Hickey's emphasis on thoroughly understanding the problem before attempting solutions. The AI can quickly traverse large codebases, identifying dependencies and relationships that provide crucial context. For instance, discovering that what seemed like a simple UI change actually touches three different API endpoints and a shared state manager. But the key to thinking deeply is that we stop here and review this research before proceeding.</p><p>The human review at this checkpoint represents the highest-leverage intervention in the entire process. By validating the AI's understanding of the problem space early on, we prevent cascading errors that would be far more costly to fix later. This is our "waking mind" actively framing the problem correctly.</p><p>With the validated research in hand, the second phase asks the AI to create a detailed implementation plan. This plan should be so explicit that any developer could follow it - specifying which files to modify, what functions to create, and how components will interact.</p><p>This phase directly implements the principle of separating concerns. By distinguishing the "what" (the plan) from the "how" (the implementation), we create a simple, reviewable specification. The plan itself becomes a design artifact that embodies our thinking about the solution.</p><p>The human review step is the opportunity for you to do a design review. We're not looking at code yet; we're just evaluating the approach. Does this plan maintain proper separation of concerns? Are we tangling together things that should remain separate? This is where we apply what Hickey calls our "entanglement radar" - spotting when things are getting unnecessarily intertwined.</p><p>Only after validating both our understanding and our plan do we move to implementation. This is where all of the upfront work pays off: the AI now has a clear specification to follow, dramatically reducing the chance of drift or confusion.</p><p>This final phase becomes pleasingly straightforward. Because we've already done the hard work of thinking and planning ahead of time, the AI can focus on translating the plan into code. The context remains clean and focused, preventing the accumulation of complexity that inevitably strangles long conversational sessions.</p><div><figure><a href="https://substackcdn.com/image/fetch/$s_!UC4a!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7aa3030-eec5-4b65-830f-c3f128ac5a2c_704x658.png"></a></figure></div><p>Hickey's emphasis on simplicity becomes even more valuable when working with AI agents. Their power and ease of use make it easy to create new applications faster than ever, but these vibe-coded applications are a mess of complexity (and hilarious security issues). By structuring our interactions to maintain simplicity, we harness AI's capabilities while avoiding its pitfalls.</p><p>The discipline of "hammock time" thinking is translated into our phased approach. We're building in moments of reflection and review, ensuring that human judgment guides the process. The AI amplifies our capabilities, but the crucial thinking work remains fundamentally human.</p><p>More importantly, we're maintaining focus on solving problems rather than just producing code. Hickey argued that we should think more about the problem space than the solution space. Our methodology ensures that two-thirds of the process (research and planning) is dedicated to understanding and designing before any implementation begins.</p><p>As AI coding assistants become more powerful and prevalent, the temptation to use them in "easy" ways will only grow stronger. We'll see tools that promise even more magical transformations from description to implementation. But Hickey's warnings about choosing ease over simplicity will remain relevant.</p><p>The methodology I've outlined goes beyond productivity with AI tools. At its core, it maintains the discipline and thoughtfulness that creates maintainable, understandable systems. It recognizes that the hard work of thinking can't be outsourced to AI, only amplified by it.</p><p>I encourage you to experiment with this approach in your own AI-assisted development. Start by being deliberate about the phases of Research, Planning, and Implementation. Resist the temptation to jump straight into code generation. Permit yourself to spend time thinking. You might find, as I have, that slowing down at key moments actually speeds up the overall process while producing dramatically simpler results.</p><p>AI assistants are here to stay in software development. We must choose to do the work to build elegantly simple systems rather than succumb to the ease of vibe-coded complexity. Hickey gave us the principles. Now we need the discipline to apply them before we are buried in slop.</p></div></article></div><div><h4>Discussion about this post</h4></div><div class="gallery"><p><img src="https://substackcdn.com/image/fetch/$s_!t5z0!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5da078b8-d849-44ca-9330-17ea619df199_667x406.png"></p><p><img src="https://substackcdn.com/image/fetch/$s_!Zov0!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F5a4d3fb9-67eb-46dc-a2e9-26cb54884cba_589x652.png"></p><p><img src="https://substackcdn.com/image/fetch/$s_!UC4a!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc7aa3030-eec5-4b65-830f-c3f128ac5a2c_704x658.png"></p></div></section>]]></description><pubDate>Thu, 04 Sep 2025 22:28:58 +0530</pubDate></item><item><link>https://github.com/carbon-language/carbon-lang/blob/trunk/docs/design/safety/README.md</link><title>Carbon Language Plans Seamless Interop with Rust, Kotlin, and Swift (To Avoid Ecosystem Duplication) (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n83xib/carbon_language_plans_seamless_interop_with_rust/</guid><comments>https://www.reddit.com/r/programming/comments/1n83xib/carbon_language_plans_seamless_interop_with_rust/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 4 min | <a href='https://www.reddit.com/r/programming/comments/1n83xib/carbon_language_plans_seamless_interop_with_rust/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>So ive just been reading the Carbon Safety documents as I wanted to catch up with what the Google folks have got cooking over there..</p><p>....And what intrigued me is instead of building out their own safe STL type framework library of code they are instead going to re-use the already large collection of libraries from the Rust Cargo System through interop!!  </p><p>They say, and I quote: &quot;The Carbon project will work to avoid creating duplication between the growing Rust library ecosystem and any future Carbon library ecosystem&quot;</p><p>I guess it makes sense as there is a shed load of libraries available in Cargo (apparently over 100,000) ..  I guess that means you will also be able to use Cargo in Carbon!</p><p>Its been a while since I looked at Rust, but I didnt think it had a stable ABI for interop! </p><p>They also then talk about interop with &quot;Swift for Apple platforms or Kotlin for Android&quot;.  And of course their main focus is seamless interop with C++..  So it sounds like they want all the interops!! </p><p>I just thought id post this here as I am genuinely intruiged that they have publicly acknowledged the goal for their &quot;Safe Library Ecosystem&quot; is to use Rusts to avoid ecosytem duplication.  </p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://opengraph.githubassets.com/30eede381b9531b484e00d2a364d1de5eba867c0781d6e0feb870bf4a03fff62/carbon-language/carbon-lang' /></section><section class='parsed-content'><div><qbsearch-input><div><dialog-helper> <dialog><div><h2> Provide feedback </h2> </div><scrollable-region><div><form><p>We read every piece of feedback, and take your input very seriously.</p><label>Include my email address so I can be contacted</label> </form></div></scrollable-region> </dialog></dialog-helper> <custom-scopes> <dialog-helper> <dialog><div><h2> Saved searches </h2> <h2>Use saved searches to filter your results more quickly</h2> </div><scrollable-region> </scrollable-region> </dialog></dialog-helper> </custom-scopes> </div></qbsearch-input><div><p><a href="/login?return_to=https%3A%2F%2Fgithub.com%2Fcarbon-language%2Fcarbon-lang%2Fblob%2Ftrunk%2Fdocs%2Fdesign%2Fsafety%2FREADME.md"> Sign in </a> </p></div><p><a href="https://github.com/signup?ref_cta=Sign+upref_loc=header+logged+out&amp;ref_page=%2F%3Cuser-name%3E%2F%3Crepo-name%3E%2Fblob%2Fshow&amp;source=header-repo&amp;source_repo=carbon-language%2Fcarbon-lang">/<repo-name>/blob/show;ref_cta:Sign up;ref_loc:header logged out"}"&gt; Sign up </repo-name></a></p><p><react-partial-anchor> <tool-tip>Appearance settings</tool-tip><template> <react-partial> </react-partial> </template> </react-partial-anchor> </p></div></section>]]></description><pubDate>Thu, 04 Sep 2025 13:17:06 +0530</pubDate></item><item><link>https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding</link><title>Where's the Shovelware? Why AI Coding Claims Don't Add Up (mikelovesrobots.substack.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7vpvi/wheres_the_shovelware_why_ai_coding_claims_dont/</guid><comments>https://www.reddit.com/r/programming/comments/1n7vpvi/wheres_the_shovelware_why_ai_coding_claims_dont/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 16 min | <a href='https://www.reddit.com/r/programming/comments/1n7vpvi/wheres_the_shovelware_why_ai_coding_claims_dont/'>Post permalink</a></p></section><section class='preview-image'><img src='https://substackcdn.com/image/fetch/$s_!wZwr!,w_1200,h_600,c_fill,f_jpg,q_auto:good,fl_progressive:steep,g_auto/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2Fc4476935-b0de-4a02-91a8-8d0cd92f4b54_664x415.png' /></section><section class='parsed-content'><div><article><div><p>I&rsquo;m furious. I&rsquo;m really angry. I&rsquo;m angry in a knocking down sandcastles and punching Daniel LaRusso in the face and talking smack about him to his girl kind of way.</p><p>I&rsquo;m not an angry person generally, but I can&rsquo;t stand what&rsquo;s happening to my industry. </p><p><span>I know software development. I&rsquo;ve been doing it for 25 years, maybe even 28 years</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-1-172538377">1</a></span><span> if you count market research tabulation on amber monochrome screens. Yes, I&rsquo;m old. I&rsquo;m a middle-aged programming nerd. My entire life and personal identity are wrapped up in this programming thing for better or worse. I thrive off the dopamine hits from shipping cool things.</span></p><p><span>I was an early adopter of AI coding and a fan until maybe two months ago, when I read the </span><a href="https://metr.org/blog/2025-07-10-early-2025-ai-experienced-os-dev-study/">METR study</a><span> and suddenly got serious doubts. In that study, the authors discovered that developers were unreliable narrators of their own productivity. They thought AI was making them 20% faster, but it was actually making them 19% slower. This shocked me because I had just told someone the week before that I thought AI was only making me about 25% faster, and I was bummed it wasn&rsquo;t a higher number. I was only off by 5% from the developer&rsquo;s own incorrect estimates.</span></p><p>This was unsettling. It was impossible not to question if I too were an unreliable narrator of my own experience. Was I hoodwinked by the screens of code flying by and had no way of quantifying whether all that reading and reviewing of code actually took more time in the first place than just doing the thing myself?</p><p>So, I started testing my own productivity using a modified methodology from that study. I&rsquo;d take a task and I&rsquo;d estimate how long it would take to code if I were doing it by hand, and then I&rsquo;d flip a coin, heads I&rsquo;d use AI, and tails I&rsquo;d just do it myself. Then I&rsquo;d record when I started and when I ended. That would give me the delta, and I could use the delta to build AI vs no AI charts, and I&rsquo;d see some trends. I ran that for six weeks, recording all that data, and do you know what I discovered?</p><p>I discovered that the data isn&rsquo;t statistically significant at any meaningful level. That I would need to record new datapoints for another four months just to prove if AI was speeding me up or slowing me down at all. It&rsquo;s too neck-and-neck.</p><p>That lack of differentiation between the groups is really interesting though. Yes, it&rsquo;s a limited sample and could be chance, but also so far AI appears to slow me down by a median of 21%, exactly in line with the METR study. I can say definitively that I&rsquo;m not seeing any massive increase in speed (i.e., 2x) using AI coding tools. If I were, the results would be statistically significant and the study would be over.</p><p>That&rsquo;s really disappointing.</p><p>I wish the AI coding dream were true. I wish I could make every dumb coding idea I ever had a reality. I wish I could make a fretboard learning app on Monday, a Korean trainer on Wednesday, and a video game on Saturday. I&rsquo;d release them all. I&rsquo;d drown the world in a flood of shovelware like the world had never seen. Well, I would &mdash; if it worked.</p><p><span>It turns out, though, and I&rsquo;ve collected a lot of data on this, it doesn&rsquo;t just not work for me, </span><strong>it doesn&rsquo;t work for anyone</strong><span>, and I&rsquo;m going to prove that.</span></p><p><span>But first, let&rsquo;s examine how extreme and widespread these productivity claims are. Cursor&rsquo;s tagline is &ldquo;Built to make you extraordinarily productive.&rdquo; Claude Code&rsquo;s is &ldquo;Build Better Software Faster.&rdquo; GitHub Copilot&rsquo;s is &ldquo;Delegate like a boss.&rdquo; Google says their LLMs make their developers 25% faster. OpenAI makes their own bombastic claims about their coding efficiencies and studies</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-2-172538377">2</a></span><span>. And my fellow developers themselves are no better, with 14% claiming they&rsquo;re seeing a 10x increase in output due to AI.</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-3-172538377">3</a></span></p><p><em>&ldquo;Delegate like a boss&rdquo; &ndash; Github Copilot</em></p><div><p><span>These claims wouldn't matter if the topic weren't so deadly serious. Tech leaders everywhere are buying into the FOMO, convinced their competitors are getting massive gains they're missing out on. This drives them to rebrand as AI-First companies</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-4-172538377">4</a></span><span>, justify layoffs with newfound productivity narratives, and lowball developer salaries under the assumption that AI has fundamentally changed the value equation.</span></p><p><span>And yet, despite the most widespread adoption one could imagine</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-5-172538377">5</a></span><span>, </span><strong>these tools don&rsquo;t work</strong><span>.</span></p></div><p><strong>My argument: If so many developers are so extraordinarily productive using these tools, where is the flood of shovelware?</strong><span> We should be seeing apps of all shapes and sizes, video games, new websites, mobile apps, software-as-a-service apps &mdash; we should be drowning in choice. We should be in the middle of an indie software revolution. We should be seeing 10,000 Tetris clones on Steam.</span></p><div><p><strong>Consider this: </strong><span>with all you know about AI-assisted coding and its wide adoption, if I showed you charts and graphs of new software releases across the world, what shape of that graph would you expect? Surely you&rsquo;d be seeing an exponential growth up-and-to-the-right as adoption took hold and people started producing more?</span></p><p><span>Now, I&rsquo;ve spent a lot of money and weeks putting the data for this article together, processing tens of terabytes of data in some cases. So I hope you appreciate how utterly uninspiring and flat these charts are across every major sector of software development. </span></p></div><div><figure><a href="https://substackcdn.com/image/fetch/$s_!eBmO!,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e23e3e0-d046-4b58-ab6d-bb8e78d38493_664x415.png"></a><figcaption><span>I spent $70 on BigQuery processing to make this chart. Via </span><a href="https://www.gharchive.org/">GH Archive</a></figcaption></figure></div><p>The most interesting thing about these charts is what they&rsquo;re not showing. They&rsquo;re not showing a sudden spike or hockey-stick line of growth. They&rsquo;re flat at best. There&rsquo;s no shovelware surge. There&rsquo;s no sudden indie boom occurring post-2022/2023. You could not tell looking at these charts when AI-assisted coding became widely adopted. The core premise is flawed. Nobody is shipping more than before.</p><p><span>The impact on human lives is incredible. People are being fired because they&rsquo;re not adopting these tools fast enough</span><span><a href="https://mikelovesrobots.substack.com/p/wheres-the-shovelware-why-ai-coding#footnote-6-172538377">6</a></span><span>. People are sitting in jobs they don&rsquo;t like because they&rsquo;re afraid if they go somewhere else it&rsquo;ll be worse. People are spending all this time trying to get good at prompting and feeling bad because they&rsquo;re failing.</span></p><p>This whole thing is bullshit.</p><p>So if you're a developer feeling pressured to adopt these tools &mdash; by your manager, your peers, or the general industry hysteria &mdash; trust your gut. If these tools feel clunky, if they're slowing you down, if you're confused how other people can be so productive, you're not broken. The data backs up what you're experiencing. You're not falling behind by sticking with what you know works. If you&rsquo;re feeling brave, show your manager these charts and ask them what they think about it.</p><p>If you take away anything from this it should be that (A) developers aren't shipping anything more than they were before (that&rsquo;s the only metric that matters), and (B) if someone &mdash; whether it's your CEO, your tech lead, or some Reddit dork &mdash; claims they're now a 10xer because of AI, that&rsquo;s almost assuredly untrue, demand they show receipts or shut the fuck up.</p><p>Now, I know the internet. I know what many of you chumps are going to say before you even say it, so let&rsquo;s just get into it:</p><ol><li><p><em>&ldquo;Well, if you just learned how to prompt properly, then you would be a 10x engineer like me.&rdquo;</em><br><span>Look at the data. There are no new 10xers. If there were &mdash; if the 14% of self-proclaimed AI 10xers were actually 10xers &mdash; that would more than double the worldwide output of new software. That didn&rsquo;t happen. And as for you, personally, show me the 30 apps you created this year. I&rsquo;m not entertaining this without receipts.</span></p></li><li><p><em><span>&ldquo;Well, it&rsquo;s a new technology and so much is invested, and it takes time&hellip;&rdquo;</span><br></em><span>Yes, billions of dollars have been invested in these tools. Billions of dollars will continue to be invested in these tools. The problem is that they&rsquo;re being sold and decisions are being made about them &mdash; which affect real people&rsquo;s lives &mdash; as if they work today. Don&rsquo;t parrot that nonsense to me that it&rsquo;s a work in progress. It&rsquo;s September 2025, and we&rsquo;ve had these tools for years now, and they still suck. Someday, maybe they won&rsquo;t suck, but we'd better see objective proof of them having an impact on actually shipping things on the large.</span></p></li><li><p><em><span>&ldquo;Well, maybe it kind of sucks now, but if you don&rsquo;t adopt it early, you&rsquo;ll be left behind.&rdquo;</span><br></em><span>There are no indicators that prompting is hard to learn. Github Copilot themselves say that </span><a href="https://github.blog/news-insights/research/the-economic-impact-of-the-ai-powered-developer-lifecycle-and-lessons-from-github-copilot/">initially, users only accept 29% of prompted coding suggestions</a><span> (which itself is a wild claim to inefficiency, why would you publicize that?), but with six months of experience, users naturally get better at prompting and that grows to a whopping 34% acceptance rate. Apparently, 6 months of experience only makes you 5% better at prompting.</span></p></li><li><p><em>&ldquo;Well, maybe quality is going up and things aren&rsquo;t necessarily shipping faster&hellip;&rdquo;</em><br><span>That doesn&rsquo;t make any sense. We all know that the industry has taken a step back in terms of code quality by at least a decade. Hardly anyone tests anymore. The last time I heard the phrase &ldquo;continuous improvement&rdquo; or &ldquo;test-driven development&rdquo; was before COVID. You know as well as I do that if there&rsquo;s a tool that can make people 10x coders, we&rsquo;d be drowning in shovelware.</span></p></li><li><p><em>&ldquo;Well, it&rsquo;s all website-driven, and people don&rsquo;t really care about domain names these days; it&rsquo;s all subdomains on sites like Vercel.&rdquo;</em><br><span>Shut up. People love their ego domains.</span></p></li><li><p><em>&ldquo;Well, .ai domain names are up 47% this year&hellip;&rdquo;</em><br><span>Yeah, that&rsquo;s cause all the startups pivoted to AI. It&rsquo;s the only way to get money out of investor FOMO. Has the overall amount of domain names gone up at an unprecedented rate, though? No, it hasn&rsquo;t. Look at the new domains chart.</span></p></li><li><p><em>&ldquo;Well, if you were a real engineer, you&rsquo;d know that most of software development is not writing code.&rdquo;</em><br><span>That&rsquo;s only true when you&rsquo;re in a large corporation. When you&rsquo;re by yourself, when you&rsquo;re the stakeholder as well as the developer, you&rsquo;re not in meetings. You're telling me that people aren&rsquo;t shipping anything solo anymore? That people aren&rsquo;t shipping new GitHub projects that scratch a personal itch? How does software creation not involve code?</span></p></li></ol></div></article></div><div><h4>Discussion about this post</h4></div><div class="gallery"><p><img src="https://substackcdn.com/image/fetch/$s_!DPg1!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F53c83842-05e1-4ca1-9021-c292e8f3a502_600x371.png"></p><p><img src="https://substackcdn.com/image/fetch/$s_!eBmO!,w_1456,c_limit,f_auto,q_auto:good,fl_progressive:steep/https%3A%2F%2Fsubstack-post-media.s3.amazonaws.com%2Fpublic%2Fimages%2F4e23e3e0-d046-4b58-ab6d-bb8e78d38493_664x415.png"></p></div></section>]]></description><pubDate>Thu, 04 Sep 2025 05:55:29 +0530</pubDate></item><item><link>https://github.com/microsoft/BASIC-M6502</link><title>Microsoft Releases Historic 6502 Basic (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7luaa/microsoft_releases_historic_6502_basic/</guid><comments>https://www.reddit.com/r/programming/comments/1n7luaa/microsoft_releases_historic_6502_basic/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 7 min | <a href='https://www.reddit.com/r/programming/comments/1n7luaa/microsoft_releases_historic_6502_basic/'>Post permalink</a></p></section><section class='preview-image'><img src='https://opengraph.githubassets.com/83ce2438b2e50bc33c8bc4795bcfe78e51b98315efc0947cca2a2f3cb1e0176c/microsoft/BASIC-M6502' /></section><section class='parsed-content'><div><article><h2>Microsoft BASIC for 6502 Microprocessor - Version 1.1</h2><a href="https://github.com#microsoft-basic-for-6502-microprocessor---version-11"></a><p></p><h2>Historical Significance</h2><a href="https://github.com#historical-significance"></a><p>This assembly language source code represents one of the most historically significant pieces of software from the early personal computer era. It is the complete source code for <strong>Microsoft BASIC Version 1.1 for the 6502 microprocessor</strong>, originally developed and copyrighted by Microsoft in 1976-1978.</p><h3>Why This Document is Historically Important</h3><a href="https://github.com#why-this-document-is-historically-important"></a><p></p><h4>1. Foundation of the Personal Computer Revolution</h4><a href="https://github.com#1-foundation-of-the-personal-computer-revolution"></a> <ul> <li>This BASIC interpreter was the software foundation that powered many of the most influential early personal computers</li> <li>It democratized programming by making it accessible to non-technical users through a simple, English-like programming language</li> <li>Without this software, the personal computer revolution might have developed very differently</li> </ul> <h4>2. Microsoft's Early Success</h4><a href="https://github.com#2-microsofts-early-success"></a> <ul> <li>This represents some of Microsoft's earliest and most successful software</li> <li>The licensing of this BASIC interpreter to multiple computer manufacturers was crucial to Microsoft's early business model</li> <li>It established Microsoft as a dominant force in personal computer software before MS-DOS or Windows</li> </ul><p></p><h4>3. Multi-Platform Compatibility</h4><a href="https://github.com#3-multi-platform-compatibility"></a> <ul> <li>This single codebase was designed to run on multiple different computer systems of the era</li> <li>The conditional compilation system allowed the same source code to target different hardware platforms</li> <li>This approach influenced how software would be developed for decades to come</li> </ul> <h2>Supported Computer Systems</h2><a href="https://github.com#supported-computer-systems"></a><p>The source code includes conditional compilation support for multiple pioneering computer systems:</p><ul> <li><strong>Apple II</strong> (<code>REALIO=4</code>) - Steve Jobs and Steve Wozniak's revolutionary home computer</li> <li><strong>Commodore PET</strong> (<code>REALIO=3</code>) - One of the first complete personal computers</li> <li><strong>Ohio Scientific (OSI)</strong> (<code>REALIO=2</code>) - Popular among hobbyists and schools</li> <li><strong>MOS Technology KIM-1</strong> (<code>REALIO=1</code>) - An influential single-board computer</li> <li><strong>PDP-10 Simulation</strong> (<code>REALIO=0</code>) - For development and testing purposes</li> </ul> <h2>Technical Specifications</h2><a href="https://github.com#technical-specifications"></a> <ul> <li><strong>Language</strong>: 6502 Assembly Language</li> <li><strong>Target Processor</strong>: MOS Technology 6502 8-bit microprocessor</li> <li><strong>Memory Footprint</strong>: 8KB ROM version</li> <li><strong>Features</strong>: Complete BASIC interpreter with floating-point arithmetic</li> <li><strong>Architecture</strong>: Designed for both ROM and RAM configurations</li> </ul><p></p><h2>Key Features</h2><a href="https://github.com#key-features"></a> <h3>Programming Language Support</h3><a href="https://github.com#programming-language-support"></a> <ul> <li>Full BASIC language implementation</li> <li>Floating-point arithmetic</li> <li>String handling and manipulation</li> <li>Array support (both integer and string arrays)</li> <li>Mathematical functions and operators</li> <li>Input/output operations</li> </ul><p></p><h3>Memory Management</h3><a href="https://github.com#memory-management"></a> <ul> <li>Efficient memory utilization for 8-bit systems</li> <li>String garbage collection</li> <li>Dynamic variable storage</li> <li>Stack-based expression evaluation</li> </ul> <h3>Hardware Abstraction</h3><a href="https://github.com#hardware-abstraction"></a> <ul> <li>Configurable I/O routines for different computer systems</li> <li>Terminal width adaptation</li> <li>Character input/output abstraction</li> <li>Optional disk storage support</li> </ul><p></p><h2>Development History</h2><a href="https://github.com#development-history"></a><p>The source code includes detailed revision history showing active development:</p><ul> <li><strong>July 27, 1978</strong>: Fixed critical bugs in FOR loop variable handling and statement parsing</li> <li><strong>July 1, 1978</strong>: Memory optimization and garbage collection improvements</li> <li><strong>March 9, 1978</strong>: Enhanced string function capabilities</li> <li><strong>February 25, 1978</strong>: Input flag corrections and numeric precision improvements</li> <li><strong>February 11, 1978</strong>: Reserved word parsing enhancements</li> <li><strong>January 24, 1978</strong>: User-defined function improvements</li> </ul> <h2>Cultural Impact</h2><a href="https://github.com#cultural-impact"></a><p></p><h3>Educational Influence</h3><a href="https://github.com#educational-influence"></a> <ul> <li>This BASIC interpreter introduced millions of people to computer programming</li> <li>It was the first programming language for countless programmers who later became industry leaders</li> <li>The simple, interactive nature of BASIC made computers approachable for non-technical users</li> </ul> <h3>Industry Standardization</h3><a href="https://github.com#industry-standardization"></a> <ul> <li>Microsoft's BASIC became the de facto standard for personal computer programming</li> <li>The design patterns and conventions established here influenced later programming languages and development tools</li> <li>The multi-platform approach pioneered techniques still used in modern software development</li> </ul><p></p><h3>Business Model Innovation</h3><a href="https://github.com#business-model-innovation"></a> <ul> <li>The licensing of this software to multiple hardware manufacturers created Microsoft's early business model</li> <li>It demonstrated the viability of software as a standalone business, separate from hardware</li> <li>This approach became the template for the entire software industry</li> </ul> <h2>Technical Innovation</h2><a href="https://github.com#technical-innovation"></a><p></p><h3>Compiler Technology</h3><a href="https://github.com#compiler-technology"></a> <ul> <li>Advanced macro system for code generation</li> <li>Sophisticated conditional compilation for multi-platform support</li> <li>Efficient symbol table management</li> <li>Optimized code generation for memory-constrained systems</li> </ul> <h3>Runtime System</h3><a href="https://github.com#runtime-system"></a> <ul> <li>Stack-based expression evaluator</li> <li>Dynamic memory management</li> <li>Real-time garbage collection</li> <li>Interactive command processing</li> </ul><p></p><h2>Legacy</h2><a href="https://github.com#legacy"></a><p>This source code represents the foundation upon which the modern software industry was built. The techniques, patterns, and business models pioneered in this BASIC interpreter directly influenced:</p><ul> <li>The development of MS-DOS and subsequent Microsoft operating systems</li> <li>The standardization of programming language implementations</li> <li>The establishment of software licensing as a business model</li> <li>The democratization of computer programming</li> </ul> <h2>File Information</h2><a href="https://github.com#file-information"></a> <ul> <li><strong>Filename</strong>: <code>m6502.asm</code></li> <li><strong>Lines of Code</strong>: 6,955 lines</li> <li><strong>Copyright</strong>: Microsoft Corporation, 1976-1978</li> <li><strong>Version</strong>: 1.1</li> <li><strong>Assembly Format</strong>: Compatible with period assemblers for 6502 development</li> </ul> <hr><p><em>This document represents a crucial piece of computing history - the source code that helped launch the personal computer revolution and established Microsoft as a software industry leader.</em></p></article></div></section>]]></description><pubDate>Wed, 03 Sep 2025 23:22:40 +0530</pubDate></item><item><link>https://wcff.bearblog.dev/i-replaced-redis-locks-with-database-atomicity-and-you-should-too/</link><title>I Replaced Redis Locks with Database Atomicity and You Should Too (wcff.bearblog.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7kcu9/i_replaced_redis_locks_with_database_atomicity/</guid><comments>https://www.reddit.com/r/programming/comments/1n7kcu9/i_replaced_redis_locks_with_database_atomicity/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 13 min | <a href='https://www.reddit.com/r/programming/comments/1n7kcu9/i_replaced_redis_locks_with_database_atomicity/'>Post permalink</a></p></section><section class='preview-image'><img src='https://miro.medium.com/v2/resize:fit:1200/0*n-2bW82Z6m6U2bij.jpeg' /></section><section class='parsed-content'><div><p><i> <time> 03 Sep, 2025 </time> </i> </p><p>Picture this: You are a dev in a payment services company. The thing with payment transactions is that you are supposed to process each transaction (e.g. send money from John's account to Jane) exactly once. It's 3 AM, your PagerDuty is blowing up with alerts about transactions being processed multiple times by cron jobs, and you're staring at Redis locks that <em>should</em> prevent this exact problem. Sound familiar?</p><p>We didn't end up sending money to someone 20 times, but our problem was similar. This is the story of how we went from a complex Redis-based locking nightmare to a beautifully simple database-centric solution, and why you should probably ditch those distributed locks too.</p><h2>The Great Redis Lock Disaster of 2025</h2><p>Let me set the scene. We have this automated testing platform where developers would push their OpenAPI specs, and our job workers would generate tests in the background. Think Postman, but the test generation is automated. Simple enough, right? Wrong.</p><p>The system worked like this:</p><ul> <li>Developer pushes an OpenAPI spec with 50 endpoints to our platform</li> <li>We create 50 "pending" test generation tasks in the database</li> <li>Multiple job instances fight over who gets to process what</li> <li>Chaos ensues, developers get duplicate test suites</li> </ul><p>Our "brilliant" solution was Redis user-level locking:</p><div><pre><span>def</span><span>main</span><span>():</span> <span>redis</span> <span>=</span> <span>redis_client</span><span>()</span> <span># Get users with pending tasks</span> <span>users_with_pending_tasks</span> <span>=</span> <span>get_users_with_pending_tasks</span><span>()</span> <span># Try to acquire lock for a user </span> <span>for</span> <span>user</span> <span>in</span> <span>users_with_pending_tasks</span><span>:</span> <span>user_id</span> <span>=</span> <span>user</span><span>[</span><span>"user_id"</span><span>]</span> <span>lock_acquired</span> <span>=</span> <span>redis</span><span>.</span><span>setnx</span><span>(</span><span>f</span><span>"process_lock_</span><span>{</span><span>user_id</span><span>}</span><span>"</span><span>,</span> <span>user_id</span><span>)</span> <span>if</span> <span>lock_acquired</span><span>:</span> <span>print</span><span>(</span><span>f</span><span>"Acquired lock for user </span><span>{</span><span>user_id</span><span>}</span><span>"</span><span>)</span> <span>process_user_tasks</span><span>(</span><span>user_id</span><span>)</span> <span>redis</span><span>.</span><span>delete</span><span>(</span><span>f</span><span>"process_lock_</span><span>{</span><span>user_id</span><span>}</span><span>"</span><span>)</span> <span># Release lock</span> <span>break</span> </pre></div><p>This looked solid on paper. One job per user, clean separation, what could go wrong?</p><p>Turns out, a lot. Here's what we discovered after days of debugging.</p><h3>The Ghost Lock Problem</h3><p>Jobs would crash (because who writes perfect code?), leaving behind zombie locks in Redis. Developer #12345's tasks would be forever locked, waiting for a job that no longer exists. We'd have to manually clean these up, which is about as fun as debugging CSS alignment issues.</p><h3>The Race Condition Ballet</h3><p>Even worse, we had this beautiful race condition where two jobs would:</p><ol> <li>Both check if a developer has pending tasks &#10003;</li> <li>Both try to acquire the same user's lock</li> <li>One succeeds, one fails, but...</li> <li>The winner sometimes processed tasks that were already being handled</li> </ol><p>It was like watching two developers simultaneously fix the same bug in different branches.</p><h3>The "It Should Work" Syndrome</h3><p>The most frustrating part? The logic was sound. User-level locking <em>should</em> prevent duplicate processing. But we were still getting duplicate test suites generated, and developers were opening GitHub issues faster than we could close them.</p><p>After staring at this code for the hundredth time, my teammate dropped this gem: "Why are we even using Redis for this? Isn't our database already designed to handle concurrency?"</p><h2>The Database Epiphany</h2><p>They were right. Here we were, adding this complex external dependency when PostgreSQL has been solving concurrency problems since before Redis was even a twinkle in antirez's eye.</p><p>The solution was embarrassingly simple:</p><div><pre><span>def</span><span>claim_task</span><span>(</span><span>task_id</span><span>):</span> <span>result</span> <span>=</span> <span>execute_query</span><span>(</span> <span>"UPDATE tasks SET status = 'processing' WHERE id = </span><span>%s</span><span> AND status = 'pending'"</span><span>,</span> <span>(</span><span>task_id</span><span>,)</span> <span>)</span> <span>return</span> <span>result</span><span>.</span><span>rowcount</span> <span>&gt;</span> <span># True if we successfully claimed it</span> </pre></div><p>That's it. Twelve lines of Redis complexity replaced by three lines of SQL.</p><h3>Why This Actually Works</h3><p>When two jobs try to claim the same task simultaneously:</p><ol> <li><strong>Job A</strong> executes the UPDATE first (we're talking microseconds here)</li> <li><strong>Job B</strong> executes the UPDATE immediately after</li> <li>Job A finds <code>status = 'pending'</code>, updates it to 'processing', returns <code>rowcount = 1</code></li> <li>Job B finds <code>status = 'processing'</code> (not 'pending'), updates nothing, returns <code>rowcount = 0</code></li> </ol><p>The database engine handles all the locking, isolation, and consistency for us. It's literally what ACID properties were designed for.</p><h2>The New Approach: Beautifully Boring</h2><p>Here's what our main processing loop became:</p><div><pre><span>def</span><span>main</span><span>():</span> <span># Get all pending tasks - dead simple</span> <span>pending_tasks</span> <span>=</span> <span>get_tasks_by_status</span><span>(</span><span>"pending"</span><span>)</span> <span>for</span> <span>task</span> <span>in</span> <span>pending_tasks</span><span>:</span> <span># Try to atomically claim this task</span> <span>if</span> <span>claim_task</span><span>(</span><span>task</span><span>[</span><span>"id"</span><span>]):</span> <span>print</span><span>(</span><span>f</span><span>"Got task </span><span>{</span><span>task</span><span>[</span><span>'id'</span><span>]</span><span>}</span><span>, let's go!"</span><span>)</span> <span>process_task</span><span>(</span><span>task</span><span>)</span> <span>else</span><span>:</span> <span>print</span><span>(</span><span>f</span><span>"Task </span><span>{</span><span>task</span><span>[</span><span>'id'</span><span>]</span><span>}</span><span> stolen by another worker, moving on..."</span><span>)</span> <span>def</span><span>claim_task</span><span>(</span><span>task_id</span><span>):</span> <span>result</span> <span>=</span> <span>execute_query</span><span>(</span> <span>"UPDATE tasks SET status = 'processing' WHERE id = </span><span>%s</span><span> AND status = 'pending'"</span><span>,</span> <span>(</span><span>task_id</span><span>,)</span> <span>)</span> <span>return</span> <span>result</span><span>.</span><span>rowcount</span> <span>&gt;</span> </pre></div><p>No Redis calls. No lock cleanup. No timeouts. No complex error handling. Just pure, boring database operations.</p><h2>Enter the Resource Hog Problem</h2><p>But wait, there's more! (There's always more, isn't there?)</p><p>Our celebration was short-lived. Within a week, we discovered a new problem: one startup uploaded their monolithic API spec with 1,000 endpoints (yes, we've all been there). Guess what happened? All our job instances started fighting over that user's tasks, completely ignoring everyone else.</p><p>Meanwhile, Sarah uploaded her simple microservice spec with 3 endpoints and watched it sit in the queue for hours while MegaCorp's monolith hogged all the workers. Classic tragedy of the commons.</p><p>This is where the simplicity of our solution became both a blessing and a curse. It was too fair - treating all tasks equally regardless of user impact.</p><h2>The Fairness Fix: Not All Users Are Created Equal</h2><p>We went with the simplest solution first: limit each user to 2 concurrent test generation tasks max.</p><div><pre><span></span><span>def</span><span>main</span><span>():</span> <span>pending_tasks</span> <span>=</span> <span>get_tasks_by_status</span><span>(</span><span>"pending"</span><span>)</span> <span>for</span> <span>task</span> <span>in</span> <span>pending_tasks</span><span>:</span> <span># Check if this user is already hogging resources</span> <span>user_task_count</span> <span>=</span> <span>get_user_task_count</span><span>(</span><span>task</span><span>[</span><span>"user_id"</span><span>],</span> <span>"processing"</span><span>)</span> <span>if</span> <span>user_task_count</span> <span>&gt;=</span> <span>2</span><span>:</span> <span># Max 2 concurrent tasks per user</span> <span>print</span><span>(</span><span>f</span><span>"User </span><span>{</span><span>task</span><span>[</span><span>'user_id'</span><span>]</span><span>}</span><span> hit their limit, skipping..."</span><span>)</span> <span>continue</span> <span># Try to claim the task</span> <span>if</span> <span>claim_task</span><span>(</span><span>task</span><span>[</span><span>"id"</span><span>]):</span> <span>print</span><span>(</span><span>f</span><span>"Processing task for user </span><span>{</span><span>task</span><span>[</span><span>'user_id'</span><span>]</span><span>}</span><span>"</span><span>)</span> <span>process_task</span><span>(</span><span>task</span><span>)</span> <span>def</span><span>get_user_task_count</span><span>(</span><span>user_id</span><span>,</span> <span>status</span><span>):</span> <span>result</span> <span>=</span> <span>execute_query</span><span>(</span> <span>"SELECT COUNT(*) as count FROM tasks WHERE user_id = </span><span>%s</span><span> AND status = </span><span>%s</span><span>"</span><span>,</span> <span>(</span><span>user_id</span><span>,</span> <span>status</span><span>)</span> <span>)</span> <span>return</span> <span>result</span><span>[</span><span>"count"</span><span>]</span> </pre></div><p>Simple, effective, and Sarah is happy again.</p><h2>There Are A Few Other Ways To Solve This</h2><h3>The Single-Query Approach: For the SQL Wizards</h3><p>If you want to be fancy (and reduce database calls), you can do the fairness check and task claiming in one atomic operation:</p><div><pre><span>def</span><span>claim_task_with_fairness</span><span>(</span><span>task_id</span><span>,</span> <span>max_concurrent</span><span>=</span><span>2</span><span>):</span> <span>result</span> <span>=</span> <span>execute_query</span><span>(</span><span>"""</span> <span> UPDATE tasks t1 </span> <span> SET status = 'processing' </span> <span> WHERE t1.id = </span><span>%s</span><span> AND t1.status = 'pending'</span> <span> AND (</span> <span> SELECT COUNT(*) </span> <span> FROM tasks t2 </span> <span> WHERE t2.user_id = t1.user_id </span> <span> AND t2.status = 'processing'</span> <span> ) &lt; </span><span>%s</span> <span> """</span><span>,</span> <span>(</span><span>task_id</span><span>,</span> <span>max_concurrent</span><span>))</span> <span>return</span> <span>result</span><span>.</span><span>rowcount</span> <span>&gt;</span> </pre></div><p>This is beautiful from a database perspective - one query does it all. But it's harder to debug when things go wrong, and trust me, things will go wrong.</p><h3>The Round-Robin Approach: Maximum Fairness</h3><p>For maximum fairness, you can prioritize users who have fewer tasks running:</p><div><pre><span></span><span>def</span><span>get_fair_pending_tasks</span><span>():</span> <span>"""Get tasks ordered by user fairness - users with fewer running tasks go first"""</span> <span>return</span> <span>execute_query</span><span>(</span><span>"""</span> <span> SELECT t1.* FROM tasks t1</span> <span> LEFT JOIN (</span> <span> SELECT user_id, COUNT(*) as running_count</span> <span> FROM tasks </span> <span> WHERE status = 'processing'</span> <span> GROUP BY user_id</span> <span> ) t2 ON t1.user_id = t2.user_id</span> <span> WHERE t1.status = 'pending'</span> <span> ORDER BY COALESCE(t2.running_count, 0) ASC, t1.created_at ASC</span> <span> """</span><span>)</span> </pre></div><p>This query is doing some heavy lifting:</p><ol> <li>Get all pending tasks</li> <li>Count how many tasks each user has running</li> <li>Order by fewest running tasks first, then by creation time</li> </ol><p>It's more complex but gives you true round-robin fairness. MegaCorp's monolith still gets processed, but not at Sarah's microservice's expense.</p><h3>The Time-Based Approach: "When Did I Last Process This User?"</h3><p>You could also add a <code>last_processed_at</code> timestamp to users and prioritize those who haven't been processed recently. But honestly, that's probably overkill unless you're running something like GitHub Actions at scale.</p><h2>The Lessons I Wish I'd Learned Sooner</h2><h3>1. Your Database Is Smarter Than You Think</h3><p>I spent weeks building a distributed locking system when PostgreSQL was sitting there like "I've literally been doing this since 1996, but okay..."</p><p>Databases are <em>designed</em> for concurrency. ACID properties exist for exactly these scenarios. Use them.</p><h3>2. Complexity Is a Bug, Not a Feature</h3><p>Every line of Redis locking code was a potential failure point:</p><ul> <li>Network timeouts</li> <li>Lock cleanup failures</li> <li>Race conditions between services</li> <li>Memory management in Redis</li> </ul><p>The database solution eliminated all of this. Sometimes the best code is the code you don't write.</p><h3>3. Fairness Isn't Optional in Multi-Tenant Systems</h3><p>We learned this the hard way when MegaCorp's monolith starved all the microservice users. If you're building anything where multiple users compete for resources, think about fairness from day one, not when your users start filing angry GitHub issues.</p><h3>4. Start Simple, Then Optimize</h3><p>We went with the two-query approach (check user count, then claim task) rather than the fancy single-query version. Why? Because when something breaks at 3 AM, you want to be able to debug it quickly.</p><h2>Performance Reality Check</h2><p>Let's be honest about the trade-offs:</p><p><strong>Database Approach:</strong></p><ul> <li>&#9989; No Redis memory usage</li> <li>&#9989; Leverages existing database infrastructure</li> <li>&#9989; ACID guarantees</li> <li>&#10060; Extra SELECT query for fairness checks</li> <li>&#10060; Slightly higher database load</li> </ul><p><strong>Redis Approach:</strong></p><ul> <li>&#9989; Fast in-memory operations</li> <li>&#9989; Dedicated locking primitives</li> <li>&#10060; Additional infrastructure to maintain</li> <li>&#10060; Network calls can fail</li> <li>&#10060; Lock cleanup complexity</li> <li>&#10060; Memory management</li> </ul><p>For our use case, the database approach was clearly better. Your mileage may vary.</p><h2>When To Use Each Approach</h2><p><strong>Go with database atomicity when:</strong></p><ul> <li>Your tasks live in the database anyway</li> <li>You want strong consistency guarantees</li> <li>You're trying to reduce infrastructure complexity</li> <li>You trust your database more than your distributed systems skills (smart choice)</li> </ul><p><strong>Stick with Redis/distributed locks when:</strong></p><ul> <li>You need locks across multiple databases</li> <li>Tasks involve complex multi-step operations</li> <li>You already have Redis infrastructure you're comfortable with</li> <li>You're building something like a workflow engine with complex state</li> </ul> <h2>The Bottom Line</h2><p>We replaced 50 lines of complex Redis locking logic with 5 lines of SQL and immediately solved our duplicate processing problem. Sometimes the best engineering solution is the boring one.</p><p>Your database has been solving concurrency problems longer than most of us have been writing code. Maybe it's time to trust it.</p><hr> </div></section>]]></description><pubDate>Wed, 03 Sep 2025 22:28:12 +0530</pubDate></item><item><link>https://kyo.iroiro.party/en/posts/why-rewriting-emacs-is-hard/</link><title>Why Rewriting Emacs Is Hard (kyo.iroiro.party)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7j5wr/why_rewriting_emacs_is_hard/</guid><comments>https://www.reddit.com/r/programming/comments/1n7j5wr/why_rewriting_emacs_is_hard/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 25 min | <a href='https://www.reddit.com/r/programming/comments/1n7j5wr/why_rewriting_emacs_is_hard/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><nav><h2>Table of Contents<a href="https://kyo.iroiro.party#table-of-contents" title="Permalink to this heading">&para;</a></h2><div><ul> <li> <a href="https://kyo.iroiro.party#rolling-your-own-string-types">1. Rolling your own string types</a> <ul> <li><a href="https://kyo.iroiro.party#lossless-file-editing">1.1. Lossless file editing</a></li> <li><a href="https://kyo.iroiro.party#more-universal-than-unicode">1.2. More universal than Unicode</a></li> </ul> </li> <li> <a href="https://kyo.iroiro.party#bringing-your-own-string-libraries">2. Bringing your own string libraries</a> <ul> <li><a href="https://kyo.iroiro.party#case-tables">2.1. Case tables</a></li> <li><a href="https://kyo.iroiro.party#regexp">2.2. Regexp</a></li> <li><a href="https://kyo.iroiro.party#any-encoding-you-want">2.3. Any encoding you want</a></li> </ul> </li> <li> <a href="https://kyo.iroiro.party#buffers-are-more-than-buffers">3. Buffers are more than buffers</a> <ul> <li><a href="https://kyo.iroiro.party#trees-are-everywhere">3.1. Trees are everywhere</a></li> <li><a href="https://kyo.iroiro.party#strings-into-buffers-into-strings">3.2. Strings into buffers into strings</a></li> <li><a href="https://kyo.iroiro.party#more-on-gap-buffers">3.3. More on gap buffers</a></li> </ul> </li> <li><a href="https://kyo.iroiro.party#summarizing">4. Summarizing</a></li> </ul> </div></nav><p>There have been quite a few attempts to re-implement (part of) Emacs&rsquo; functionalities in languages other than C, like <a href="https://jemacs.sourceforge.net/">JEmacs</a>, <a href="https://github.com/remacs/remacs">remacs</a>, and <a href="https://github.com/lem-project/lem/">lem</a>. And we are seeing new efforts in EmacsConf 2024: <a href="https://github.com/CeleritasCelery/rune">rune</a> <sup><a href="https://kyo.iroiro.party#fn.rune">1</a></sup>, <a href="https://codeberg.org/ramin_hal9001/schemacs">schemacs</a> <sup><a href="https://kyo.iroiro.party#fn.gypsum">2</a></sup>, and the revived <a href="https://codeberg.org/lyrra/guilemacs">Guilemacs</a> <sup><a href="https://kyo.iroiro.party#fn.guilemacs">3</a></sup>. (Strictly speaking, Guilemacs is more a fork than a total rewrite, but anyway.) </p><p>However, a complete rewrite of (<span>GNU</span>) Emacs <sup><a href="https://kyo.iroiro.party#fn.gnu-emacs">4</a></sup>has always seemed like an insurmountable task, not just because writing editors <i>is</i> hard. This article aims to look into some of these difficulties and the Emacs designs (that of course have been exposed in some Emacs Lisp <span>API</span>) that lead to them. </p><blockquote><p>The rationale for this piece is that I too have been pipe-dreaming about yet another rewrite. :-/ </p></blockquote><div><h2> <span>1.</span> Rolling your own string types<a href="https://kyo.iroiro.party#rolling-your-own-string-types" title="Permalink to this heading">&para;</a></h2><div><p>What is the highest <a href="https://en.wikipedia.org/wiki/Code_point">code point</a> supported in your favorite programming language? If it&rsquo;s <code>#x10FFFF</code>, as per the current Unicode standard, then good luck rolling your own string implementation to stay compatible with Emacs, in that it supports characters up to <code>#x3FFFFF</code>. </p><p>This design decision has <a href="https://lists.gnu.org/archive/html/emacs-devel/2020-12/msg00892.html">a bit of history behind it</a>, which led us to the following two nice features of <span>GNU</span> Emacs. </p></div><div><h3> <span>1.1.</span> Lossless file editing<a href="https://kyo.iroiro.party#lossless-file-editing" title="Permalink to this heading">&para;</a></h3><div><p>In an era dominated by Unicode, it is becoming rarer to have to work with multiple character sets. But if you do (or did) need to deal with some other encodings, you might have the experience of opening a file and the editor getting the encoding wrong. Now, for some editors, if you accidentally save the wrongly-decoded file back, poof, your file is doomed. </p><p>The main reason for such disasters lies in how string types handle invalid byte sequences. For instance, in Java, when decoding bytes into a <code>String</code> with built-in libraries, you can ask the decoder to either: </p><ol> <li>Replace invalid bytes with replacement characters <a href="https://en.wikipedia.org/wiki/Specials_(Unicode_block)">like <code>#xFFFD</code></a>,</li> <li>Or just throw an error.</li> </ol><p>That is to say, you either give up decoding, or lossily convert them to Unicode. The same applies to most other languages/libraries whose string types are aware of Unicode: the string type has no place for invalid Unicode characters, rightfully so, because it was designed (or re-designed) with only Unicode in mind. </p><p>However, Emacs Lisp, as a language dedicated to a text editor, decides to reserve space for even invalid bytes. Trying to construct a string containing a single <code>#x3FFFFF</code> code point in Emacs, and you will see that it is treated as a single raw byte <code>\377</code> (or <code>#xFF</code>) - the code point range <code>#x3FFF80 - #x3FFFFF</code> is for representing raw bytes: </p><div><pre><code><span>(</span><span>string</span><span>#x3FFF80</span><span>#x3FFFFF</span><span>)</span> </code></pre></div><pre>"\200\377" </pre><p>This is how Emacs ensures lossless file editing. Regardless of the encoding, it transforms invalid bytes into &ldquo;raw bytes&rdquo; that both the ELisp runtime and encoders recognize. When saving, these raw bytes are preserved exactly as they were. </p><blockquote><p>Actually many C-based editors may have similar properties: unedited bytes are preserved as is because a string is just a sequence of bytes. But I am afraid their scripting language, if any, may not be prepared for this. </p></blockquote> </div></div><div><h3> <span>1.2.</span> More universal than Unicode<a href="https://kyo.iroiro.party#more-universal-than-unicode" title="Permalink to this heading">&para;</a></h3><div><p>Another reason for the <code>0 - #x3FFFFF</code> character range is that Emacs was born before Unicode, and, quite luckily, has been one of the few apps that <i>do not</i> just wrongly assume that Unicode has been actually universal. </p><p>Before Unicode, there were a lot of encodings for various languages in various territories. While many of them have now been incorporated into Unicode and can map the code points back and forth, some of them are yet to be fully mapped. An example is the tibetan <span>ISO</span>-2022 encoding, and you may see for yourself at <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/language/tibetan.el"><code>tibetan.el</code></a> (where Emacs defines its lossless tibetan coding system) for how many of the characters are only representable by replacement characters. <sup><a href="https://kyo.iroiro.party#fn.tibetan">5</a></sup></p><p>The Emacs&rsquo; solution to this is similar to that of invalid bytes: Emacs reserves code point space (<code>#x110000 - #x3FFF7F</code>) for characters that are not yet unified (meaning, not yet mapped to Unicode), and any ELisp programs may simply treat them as normal characters, with all text operations still applicable. </p><blockquote><p>Personally I still wonder how these un-unified characters are to be displayed. On my Emacs setup they are just tofu blocks with hexadecimal codes on top, and I don&rsquo;t have a clue whether there are any fonts for them. It seems the look-up tables in many font formats nowadays also assume Unicode code points (or at least searching in English tells me that). So maybe one will need special font formats/terminals for that? </p></blockquote> </div></div></div><div><h2> <span>2.</span> Bringing your own string libraries<a href="https://kyo.iroiro.party#bringing-your-own-string-libraries" title="Permalink to this heading">&para;</a></h2><p>If you are to roll your own string types, then you definitely will need to re-implement all those string libraries. Even if you decide to ignore all that and just use the language&rsquo;s built-in Unicode strings for everything, you will still need to brace yourself for most of the string primitives. No, you cannot simply wrap around your favorite regexp/string libraries, and here is why. </p><div><h3> <span>2.1.</span> Case tables<a href="https://kyo.iroiro.party#case-tables" title="Permalink to this heading">&para;</a></h3><div><p>Most languages provide ways to convert a string to its uppercase/lowercase, and most of them use look-up tables under the hood because of the vast number of conversions and irregularities of Unicode case conversions. Emacs does this too, except that it fully exposes those look-up tables as mutable to ELisp code (although some of them are only accessible through <code>unicode-property-table-internal</code>). The result of this is that one can use <code>upcase/downcase</code> for arbitrary string transformations, in addition to Unicode case conversions. And of course, some ELisp code has been doing so: </p><div><pre><code><span>(</span><span>defconst</span><span>erc--casemapping-rfc1459-strict</span> <span>(</span><span>let</span><span>((</span><span>tbl</span><span>(</span><span>copy-sequence</span><span>ascii-case-table</span><span>))</span> <span>(</span><span>cup</span><span>(</span><span>copy-sequence</span><span>(</span><span>char-table-extra-slot</span><span>ascii-case-table</span><span>0</span><span>))))</span> <span>(</span><span>set-char-table-extra-slot</span><span>tbl</span><span>0</span><span>cup</span><span>)</span> <span>(</span><span>set-char-table-extra-slot</span><span>tbl</span><span>1</span><span>nil</span><span>)</span> <span>(</span><span>set-char-table-extra-slot</span><span>tbl</span><span>2</span><span>nil</span><span>)</span> <span>(</span><span>pcase-dolist</span><span>(</span><span>`</span><span>(</span><span>,</span><span>uc</span><span>.</span><span>,</span><span>lc</span><span>)</span><span>'</span><span>((</span><span>?\[</span><span>.</span><span>?\{</span><span>)</span><span>(</span><span>?\]</span><span>.</span><span>?\}</span><span>)</span><span>(</span><span>?\\</span><span>.</span><span>?\|</span><span>)))</span> <span>(</span><span>aset</span><span>tbl</span><span>uc</span><span>lc</span><span>)</span> <span>(</span><span>aset</span><span>tbl</span><span>lc</span><span>lc</span><span>)</span> <span>(</span><span>aset</span><span>cup</span><span>uc</span><span>uc</span><span>))</span> <span>tbl</span><span>))</span> </code></pre></div><p>The code snippet is from <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/erc/erc.el"><code>erc.el</code></a>, one of the built-in <span>IRC</span> clients in Emacs. What it is doing here is creating case tables for <a href="https://en.wikipedia.org/wiki/Scandinavian_languages">scandanavian</a> case conversions between <code>[]\</code> and <code>{}|</code>, as is specified in <span>RFC</span> 1459: </p><blockquote><p>Because of <span>IRC</span>&rsquo;s scandanavian origin, the characters {}| are considered to be the lower case equivalents of the characters []\, respectively. This is a critical issue when determining the equivalence of two nicknames. </p></blockquote><p>Emacs also provides a <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html"><code>with-case-table</code></a> macro for this, mostly used with <code>ascii-case-table</code> to prevent locale-aware case conversions from messing with some <span>ASCII</span> protocols. </p></div></div><div><h3> <span>2.2.</span> Regexp<a href="https://kyo.iroiro.party#regexp" title="Permalink to this heading">&para;</a></h3><div><p>How can an editor do without regular expressions? Unfortunately, the regexp in Emacs is too specialized to be compatible with any other regexp implementations, <a href="https://swtch.com/~rsc/regexp/regexp1.html">backtracking or not</a>. The following is a regexp example I took from <code>cc-fonts.el</code> (font lock support for <span>CC</span> Mode (a mode for C/C++)): </p><div><pre><code><span>"\\(\\=\\|\\(\\=\\|[^\\]\\)[\n\r]\\)"</span><span>; noncontinued-line-end</span> </code></pre></div><p>No, it is not the extraneous backslashes that makes it incompatible. For people that prefer &ldquo;normal&rdquo; regexp syntax, here it is: <code>(\=|(\=|[^\\])[\n\r])</code>, with <code>\=</code> basically meaning &ldquo;where the user cursor is&rdquo;, and the regexp just means &ldquo;let&rsquo;s treat <code><backslash> and then <end_of_line></end_of_line></backslash></code> or <code><user_cursor> and then <end_of_line></end_of_line></user_cursor></code> as a non-continued line end. Simple, right? Only if the common regexp libraries support asserting <code><user_cursor></user_cursor></code>. </p><p>And it&rsquo;s more than that. Of course Emacs regexps will use case tables for <code>[:lower:]</code>, <code>[:upper:]</code> or case-insensitive matching via <code>case-fold-search</code>. And unsurprisingly, the same applies to the word assertion <code>\w</code>, word boundary assertion <code>\b</code> and more, which involve syntax tables and maybe char category tables. All these also make a slowish backtracking regexp engine mandatory (although one may offload simple regexps to a non-backtracking one). </p><blockquote><p>Emacs allows ELisp to attach <code>syntax-table</code> properties to specific texts in buffers or strings, thus overriding &ldquo;what the syntax table says about this particular character&rdquo;. It seems mainly used with subroutines for parsing, like <code>parse-partial-sexp</code>, but thank goodness it does not affect regexp matching. (<a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/lisp/progmodes/js.el#L2194-L2196">It</a> <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/lisp/progmodes/sh-script.el#L935-L937">is</a> <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/lisp/minibuffer.el#L5205-L5211">not</a> <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/lisp/progmodes/ruby-ts-mode.el#L1091-L1124">that</a> <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/lisp/progmodes/typescript-ts-mode.el#L682-L695">uncommon</a> by the way.) </p></blockquote> </div></div><div><h3> <span>2.3.</span> Any encoding you want<a href="https://kyo.iroiro.party#any-encoding-you-want" title="Permalink to this heading">&para;</a></h3><div><p>Did I forget to mention that Emacs employs another language (<span>CCL</span>, the Code Conversion Language) for <a href="https://emacsninja.com/posts/code-conversion-language.html">encoding conversion</a> and you can implement literally any encoding converters from ELisp with <span>CCL</span>? It&rsquo;s not that hard. All you need to do is to include yet another bytecode interpreter in your implementation. </p><blockquote><p>An alternative is to pretend that everything is Unicode. </p></blockquote> </div></div></div><div><h2> <span>3.</span> Buffers are more than buffers<a href="https://kyo.iroiro.party#buffers-are-more-than-buffers" title="Permalink to this heading">&para;</a></h2><div><p>Every editor must have something to represent editable texts, whether it is <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Gap.html#index-buffer-gap">gap buffers</a>, or <a href="https://xi-editor.io/docs/rope_science_00.html">ropes</a>, or <a href="https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation">piece tables/trees</a> or plain strings. However, Emacs buffers are much more than texts and multiple concepts couple tightly to buffers: </p><ul> <li>Text properties: Attach fonts, colors or any objects to specific texts. One may also use it to highlight texts or hide texts.</li> <li>Overlays: Similar to text properties, but instead of replacing existing properties, it &ldquo;overlays&rdquo; them with newer ones so that one doesn&rsquo;t need to worry about having to restore them later.</li> <li><p>Markers: Want to go back to your previous cursor position? <code>C-u C-SPC</code> will pop and take you to the last marker, which likely <i>marks</i> where you were in the buffer. </p></li> <li><p>Indirect buffers: Indirect buffers share their texts and text properties with base buffers, but not markers, overlays, nor narrowing (i.e., a range specified to make the buffer operate on only a sub-string of its text). </p></li> </ul><p>All of these stay in sync with the text, however or wherever you insert or delete texts. And they need to be considered when you design buffers for your Emacs, especially if you are hoping for concurrent redisplay in the first place. </p><blockquote><p>Also, at least in Emacs, users index strings and buffers mostly by code points. So if you are storing strings as some <span>UTF</span>-8-like bytes, you will need to come up with a way to map between byte offsets and char offsets. Or, if you are using some <a href="https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/strings/TruffleString.Encoding.html">auto-compacting <span>UTF</span>-32 encoding</a>, you will need to map char offsets back to byte offsets, as is required by the Emacs <code>position-bytes/string-bytes</code> subroutine. </p></blockquote> </div><div><h3> <span>3.1.</span> Trees are everywhere<a href="https://kyo.iroiro.party#trees-are-everywhere" title="Permalink to this heading">&para;</a></h3><div><p>For an editor, it is critical to offer decent text editing performance. Let&rsquo;s first take a look at the buffer implementations in some editors here: </p><ul> <li><span>GNU</span> Emacs: <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/src/buffer.h#L228-L238">Gap buffers</a>, with <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/src/intervals.h#L29-L66">intervals stored in a tree</a>, with a <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/src/region-cache.c">line-number cache</a>, with markers that are just integer wrappers that need constant adjustment. <ul> <li><span>GNU</span> Emacs uses a list of markers that track both char offsets and byte offsets to convert between the two systems of offsets, which it admits to be <a href="https://github.com/emacs-mirror/emacs/blob/ac52993b996927031a6913927e1028de47be4312/src/marker.c#L142-L160">slow sometimes</a>.</li> <li> <a href="https://github.com/CeleritasCelery/rune">Rune</a> (&ldquo;experimental Emacs core written in Rust&rdquo;): Also gap buffers, except that it stores char offsets in a tree.</li> </ul> </li> <li><span>VS</span> Code: <a href="https://github.com/microsoft/vscode/blob/a2b1f14d1cc3dfcaa35dc1595c927b77d68cdbe3/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts#L269">&ldquo;Piece trees&rdquo;</a>, or, what-actually-look-like-ropes. It seems they are just ropes with the string fragments turned into sub-string references to a huge append-only string buffer.</li> <li><p>Neovim: <a href="https://github.com/neovim/neovim/blob/17b46d01e29443452ae8b607017f8f5c585d3f0a/src/nvim/memline.c#L5-L35">Line-based ropes</a>, with <a href="https://github.com/neovim/neovim/blob/17b46d01e29443452ae8b607017f8f5c585d3f0a/src/nvim/marktree.c#L1-L5">marks stored in a separate tree</a>. </p><blockquote><p><span>&ldquo;</span>Mom, can we get ropes?&rdquo; &ldquo;We have ropes at home.&rdquo; </p></blockquote> </li> <li>IntelliJ: <a href="https://github.com/JetBrains/intellij-community/blob/e16def25ec80aa742470b604827c21bb1f15679c/platform/util/base/src/com/intellij/util/text/ImmutableText.java">Rope-like strings</a>, with <a href="https://github.com/JetBrains/intellij-community/blob/e16def25ec80aa742470b604827c21bb1f15679c/platform/core-impl/src/com/intellij/openapi/editor/impl/RangeMarkerTree.java">range markers stored in <code>RangeMarkerTree</code></a> and <a href="https://github.com/JetBrains/intellij-community/blob/e16def25ec80aa742470b604827c21bb1f15679c/platform/core-impl/src/com/intellij/openapi/editor/impl/LineSet.java">line-number mappings stored in <code>LineSet</code></a>. <ul> <li>Fleet: <a href="https://blog.jetbrains.com/fleet/2022/02/fleet-below-deck-part-ii-breaking-down-the-editor/">Ropes</a>, with &ldquo;updatable interval trees&rdquo; for widgets, highlighting and more. (As it is not (yet) open source, I cannot look into what they mean by &ldquo;updatable interval trees&rdquo;, but it sounds really like Emacs text properties.)</li> </ul> </li> <li>Zed: <a href="https://zed.dev/blog/zed-decoded-rope-sumtree">Ropes, implemented as a <code>SumTree</code></a>.</li> </ul><p>I won&rsquo;t go into what all these implementations are about since there have been quite some articles about them already (e.g., <a href="https://en.wikipedia.org/wiki/Gap_buffer">gap buffers</a>, <a href="https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation">piece tree</a>, and <a href="https://en.wikipedia.org/wiki/Rope_(data_structure)">ropes</a>). Different as they might sound, when you think of ropes as strings with attached statistics, the distinction actually turns vague (under a single-threaded context): </p><table> <colgroup><col> <col> <col> <col> </colgroup><thead><tr> <th>&nbsp;</th> <th>Ropes</th> <th>Gap Buffers + Tree</th> <th>Piece Tree</th> </tr></thead> <tr> <td>Metadata Keeping</td> <td>In-tree</td> <td>In-tree</td> <td>In-tree</td> </tr><tbody> <tr> <td>New Strings</td> <td>Allocated</td> <td>In gaps</td> <td>In string buffer</td> </tr> <tr> <td>String Deletion</td> <td>De-allocation</td> <td>Gap update</td> <td>No-op</td> </tr> </tbody> </table><p>Notice the &ldquo;in-tree metadata keeping&rdquo; part? Buffers are not just the texts: they are texts with all the attached metadata, be it text properties or code point offsets or line numbers. And trees are usually the way to go if you want these to be in sync with the text. (And I really like how <a href="https://zed.dev/blog/zed-decoded-rope-sumtree#everythings-a-sumtree">Zed treats all these as <code>SumTree</code> with Rust&rsquo;s generics and traits</a>.) </p></div></div><div><h3> <span>3.2.</span> Strings into buffers into strings<a href="https://kyo.iroiro.party#strings-into-buffers-into-strings" title="Permalink to this heading">&para;</a></h3><div><p>Text properties are not unique to Emacs buffers, and you probably have guessed it: ELisp strings also carry properties, and it is only natural that one can pass them between strings and buffers: </p><div><pre><code><span>(</span><span>with-temp-buffer</span> <span>;; `insert' also inserts string properties into buffers.</span> <span>(</span><span>insert</span><span>#(</span><span>"hello world"</span><span>0</span><span>11</span><span>(</span><span>str-prop</span><span>1</span><span>)))</span> <span>(</span><span>put-text-property</span><span>(</span><span>point-min</span><span>)</span><span>(</span><span>point</span><span>)</span><span>'buf-prop</span><span>2</span><span>)</span> <span>;; Buffer text properties are extracted into substrings.</span> <span>(</span><span>buffer-substring</span><span>1</span><span>6</span><span>))</span> </code></pre></div><pre>#("hello" 0 5 (buf-prop 2 str-prop 1)) </pre> <blockquote><p>The weird <span><code><span>#(</span><span>"hello world"</span><span>0</span><span>11</span><span>(</span><span>str-prop</span><span>1</span><span>))</span> </code> thing is the read syntax for strings with text properties. </span></p></blockquote><p>Inserting strings into buffers have some corner cases, like conversion between 0/1-base offsets, <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Not-Intervals.html">interval coalescing</a> and <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Sticky-Properties.html">stickiness</a>. But since these cases are quite straightforward, let&rsquo;s look at some more interesting cases: </p><div><pre><code><span>(</span><span>with-temp-buffer</span> <span>(</span><span>insert</span><span>#(</span><span>"&#129303;"</span><span>0</span><span>1</span><span>(</span><span>a</span><span>1</span><span>)))</span> <span>(</span><span>set-buffer-multibyte</span><span>nil</span><span>)</span> <span>(</span><span>buffer-string</span><span>))</span> </code></pre></div><pre>#("\360\237\244\227" 0 4 (a 1)) </pre><p>Basically, a property spanning <code>1 - 2</code> is automatically expanded to <code>1 - 5</code> when converting a multi-byte buffer into a single byte buffer (probably because intervals track byte positions under the hood): </p><div><pre><code>1 2 (chars) |----&gt; Property: (a 1) &lt;----| +------+------+------+------+ | &#129303; (four bytes in UTF-8) | +------+------+------+------+ | (set-buffer-multibyte nil) \|/ +------+------+------+------+ | \360 | \237 | \244 | \227 | +------+------+------+------+ |----&gt; Property: (a 1) &lt;----| 1 2 3 4 5 (chars) </code></pre></div><p>This also makes one wonder: what happens if we convert a multi-byte string info a single-byte string? Well, normally you won&rsquo;t be able to do that while preserving string properties, but we can work around that with <code>clear-string</code> since <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Modifying-Strings.html">Emacs strings are mutable</a>: </p><div><pre><span></span><code><span>(</span><span>let</span><span>((</span><span>s</span><span>#(</span><span>"&#129303;"</span><span>0</span><span>1</span><span>(</span><span>a</span><span>1</span><span>))))</span> <span>(</span><span>clear-string</span><span>s</span><span>)</span> <span>(</span><span>prin1</span><span>s</span><span>))</span> </code></pre></div><pre>Fatal error 11: Segmentation fault Backtrace: emacs(emacs_backtrace+0x51) [0x57ed0155c5d1] emacs(terminate_due_to_signal+0xa1) [0x57ed014408f4] emacs(+0x80260) [0x57ed01441260] emacs(+0x80267) [0x57ed01441267] emacs(+0x19969e) [0x57ed0155a69e] /usr/lib/libc.so.6(+0x3d1d0) [0x755cd06dc1d0] emacs(copy_intervals+0x188) [0x57ed0164fa58] emacs(Fcopy_sequence+0x84) [0x57ed015dafc4] emacs(+0x23a86d) [0x57ed015fb86d] emacs(Fprin1+0x6b) [0x57ed015fcfdb] emacs(eval_sub+0x933) [0x57ed015d2c43] emacs(Flet+0x250) [0x57ed015d6080] emacs(eval_sub+0x7fa) [0x57ed015d2b0a] ... (as of Emacs 30.0.93) </pre><p>That&rsquo;s &hellip; unexpected. Ahem, and the moral is that you definitely need to be careful working with corner cases, especially when Emacs texts (both buffers and strings) are separated into single-byte (raw-byte) variants and multi-byte ones. &#129303; </p><blockquote><p>This has been <a href="https://lists.gnu.org/archive/html/bug-gnu-emacs/2025-01/msg01131.html">fixed</a> by the way: <code>clear-string</code> should now also clear any string properties. </p></blockquote> </div></div><div><h3> <span>3.3.</span> More on gap buffers<a href="https://kyo.iroiro.party#more-on-gap-buffers" title="Permalink to this heading">&para;</a></h3><div><p>I sometimes see an article (by Troy Hinckley, the creator of <a href="https://github.com/CeleritasCelery/rune">Rune</a>) quoted in discussions on gap buffers and ropes: <a href="https://coredumped.dev/2023/08/09/text-showdown-gap-buffers-vs-ropes/">Text showdown: Gap Buffers vs Ropes</a>. But I don&rsquo;t think some of its benchmarks are actually fair: <a href="https://docs.rs/ropey/latest/ropey/">ropey</a> and <a href="https://docs.rs/crop/latest/crop/">crop</a> track line numbers, while the gap buffer implementation does not. (Or maybe I am missing something here: although the post says it has &ldquo;metrics include things like char and line position&rdquo;, but actually <a href="https://github.com/CeleritasCelery/rune/blob/58575bf028264d4c512826b0bbbc3e747a300659/crates/text-buffer/src/metric.rs#L1009-L1012">it does not (yet)</a>.) And scanning for new lines as well as special-casing for <span>CRLF</span> (e.g., what about inserting <code>CR</code> and only afterwards <code>LF</code>?) certainly takes time&hellip; or maybe not. <sup><a href="https://kyo.iroiro.party#fn.perf">6</a></sup>But anyway, to quote from one of my favorite benchmarking libraries (<a href="https://github.com/openjdk/jmh/"><span>JMH</span></a>): </p><blockquote><p><span>REMEMBER</span>: The numbers below are just data. To gain reusable insights, you need to follow up on why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial experiments, perform baseline and negative tests that provide experimental control, make sure the benchmarking environment is safe on <span>JVM</span>/<span>OS</span>/<span>HW</span> level, ask for reviews from the domain experts. Do not assume the numbers tell you what you want them to tell. </p></blockquote> </div></div></div><div><h2> <span>4.</span> Summarizing<a href="https://kyo.iroiro.party#summarizing" title="Permalink to this heading">&para;</a></h2><div><p>In this post we mostly covered some of the text processing features of Emacs and what challenges they pose on implementations. Personally, I am yet to see another language design that puts embedded raw bytes into the built-in string, and it is indeed a good-to-have feature for me. So kudos again to Emacs maintainers and contributors! In a future post or two (that I hope I can eventually finish), we will be discussing redisplay in Emacs and look into why Emacs can be hard to parallelize. </p><hr> <blockquote><p>Thanks for reading! There are some discussions about this post on <a href="https://lobste.rs/s/jeg5l9/why_rewriting_emacs_is_hard">Lobsters</a>, <a href="https://www.reddit.com/r/emacs/comments/1n7i586/why_rewriting_emacs_is_hard_from_gudzpoz/">Reddit</a> and <a href="https://news.ycombinator.com/item?id=45122442"><span>HN</span></a>, and there are some insightful comments there that you might want to check out! </p><p>Notably, Troy Hinckley, the author of Rune and the &ldquo;Text showdown: Gap Buffers vs Ropes&rdquo; blog post <a href="https://www.reddit.com/r/emacs/comments/1n7i586/comment/ncbcwnh/">pointed out several issues</a> in this post and talked about his vision of ways to handle the problems presented here. (The rune repo is at <a href="https://github.com/CeleritasCelery/rune">https://github.com/CeleritasCelery/rune</a> by the way.) </p><p>Also, Ramin Honary, who&rsquo;s behind Schemacs (originally named Gypsum), <a href="https://fe.disroot.org/@ramin_hal9001/posts/AxprmwhQXPVuQqGE3E">shared his view about these challenges on Fedi</a>. (The Schemacs repo is at <a href="https://codeberg.org/ramin_hal9001/schemacs">https://codeberg.org/ramin_hal9001/schemacs</a>.) </p></blockquote> </div></div></div></section>]]></description><pubDate>Wed, 03 Sep 2025 21:44:47 +0530</pubDate></item><item><link>https://ordep.dev/posts/writing-code-was-never-the-bottleneck</link><title>Writing Code Was Never The Bottleneck (ordep.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7ggac/writing_code_was_never_the_bottleneck/</guid><comments>https://www.reddit.com/r/programming/comments/1n7ggac/writing_code_was_never_the_bottleneck/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/programming/comments/1n7ggac/writing_code_was_never_the_bottleneck/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><blockquote><p>The actual bottlenecks were, and still are, code reviews, knowledge transfer through mentoring and pairing, testing, debugging, and the human overhead of coordination and communication. All of this wrapped inside the labyrinth of tickets, planning meetings, and agile rituals.</p></blockquote></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://ordep.dev/assets/images/social/writing-code-was-never-the-bottleneck.png' /></section><section class='parsed-content'><div><p>For years, I&rsquo;ve felt that writing lines of code <em>was never</em> the bottleneck in software engineering.</p><p>The actual bottlenecks were, and still are, <strong>code reviews</strong>, <strong>knowledge transfer</strong> through mentoring and pairing, <strong>testing</strong>, <strong>debugging</strong>, and the human overhead of <strong>coordination and communication</strong>. All of this wrapped inside the labyrinth of tickets, planning meetings, and agile rituals.</p><p>These processes, meant to drive quality, often slow us down more than the act of writing code itself because they require thought, shared understanding, and sound judgment.</p><p>Now, with LLMs making it easy to generate working code faster than ever, a new narrative has emerged: that writing code <em>was</em> the bottleneck, and we&rsquo;ve finally cracked it.</p><p>But that&rsquo;s <strong>not quite right</strong>.</p><p>The marginal cost of adding new software is approaching <strong>zero</strong>, especially with LLMs. But what is the price of <em>understanding</em>, <em>testing</em>, and <em>trusting</em> that code? <strong>Higher than ever</strong>.</p><hr> <h2>LLMs shift the workload &mdash; they don&rsquo;t remove it</h2><p>Tools like Claude can speed up initial implementation. Still, the result is often more code flowing through systems and more pressure on the people responsible for reviewing, integrating, and maintaining it.</p><p>This becomes especially clear when:</p><ul> <li>It&rsquo;s unclear whether the author fully understands what they submitted.</li> <li>The generated code introduces unfamiliar patterns or breaks established conventions.</li> <li>Edge cases and unintended side effects aren&rsquo;t obvious.</li> </ul><p>We end up in a situation where code is more straightforward to produce but more complex to verify, which doesn&rsquo;t necessarily make teams move faster overall.</p><p>It&rsquo;s not a new challenge. Developers have long joked about <strong>&ldquo;copy-paste engineering&rdquo;</strong>, but the velocity and scale that LLMs enable have <strong>amplified those copy-paste habits</strong>.</p><hr> <h2>Understanding code is still the hard part</h2> <blockquote><p><em>&ldquo;The biggest cost of code is understanding it &mdash; not writing it.&rdquo;</em></p></blockquote><p>LLMs reduce the time it takes to produce code, but they haven&rsquo;t changed the amount of effort required to reason about behavior, identify subtle bugs, or ensure long-term maintainability. That work can be even more challenging when reviewers struggle to distinguish between generated and handwritten code or understand why a particular solution was chosen.</p><hr> <h2>Teams still rely on trust and shared context</h2><p>Software engineering has always been collaborative. It depends on <strong>shared understanding</strong>, <strong>alignment</strong>, and <strong>mentoring</strong>. However, when code is generated faster than it can be discussed or reviewed, teams risk falling into a mode where <strong>quality is assumed rather than ensured</strong>. That creates stress on reviewers and mentors, potentially slowing things down in more subtle ways.</p><hr> <h2>LLMs are powerful &mdash; but they don&rsquo;t fix the fundamentals</h2><p>There&rsquo;s real value in faster prototyping, scaffolding, and automation. But LLMs don&rsquo;t remove the need for <strong>clear thinking</strong>, <strong>careful review</strong>, and <strong>thoughtful design</strong>. If anything, those become even more important as more code gets generated.</p><p>Yes, the cost of writing code has indeed dropped. But the cost of making sense of it together as a team <strong>hasn&rsquo;t</strong>.</p><p><strong>That&rsquo;s still the bottleneck. Let&rsquo;s not pretend it isn&rsquo;t.</strong></p></div></section>]]></description><pubDate>Wed, 03 Sep 2025 20:03:25 +0530</pubDate></item><item><link>https://blog.frost.kiwi/dual-kawase/</link><title>Video Game Blurs (and how the best one works) (blog.frost.kiwi)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n7c780/video_game_blurs_and_how_the_best_one_works/</guid><comments>https://www.reddit.com/r/programming/comments/1n7c780/video_game_blurs_and_how_the_best_one_works/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 347 min | <a href='https://www.reddit.com/r/programming/comments/1n7c780/video_game_blurs_and_how_the_best_one_works/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>Blurs are the basic building block for many <a href="https://en.wikipedia.org/wiki/Video_post-processing#Uses_in_3D_rendering">video game post-processing effects</a> and essential for sleek and modern <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">GUIs</a>. Video game <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/depth-of-field-in-unreal-engine">Depth of Field</a> and <a href="https://en.wikipedia.org/wiki/Bloom_(shader_effect)">Bloom</a> or <a href="https://blog.frost.kiwi/GLSL-noise-and-radial-gradient/#microsoft-windows-acrylic">frosted panels</a> in modern user interfaces - used subtly or obviously - they&rsquo;re everywhere. <span>Even your browser can do it, just tap this sentence!</span></p><figure><img src="https://blog.frost.kiwiimg/intro.png" alt="Texture coordinates, also called UV Coordinates or UVs for short"><figcaption>Effect of "<a href="https://en.wikipedia.org/wiki/Bloom_(shader_effect)">Bloom</a>", one of many use-cases for blur algorithms</figcaption></figure><p>Conceptually, <em>&ldquo;Make thing go blurry&rdquo;</em> is easy, boiling down to some form of <em>&ldquo;average colors in radius&rdquo;</em>. Doing so in <a href="https://en.wikipedia.org/wiki/Real-time_computing">realtime</a> however, took many a graphics programmer through decades upon decades of research and experimentation, across computer science and maths. In this article, we&rsquo;ll follow their footsteps.</p><blockquote><p>A graphics programming time travel, if you will.</p><img src="https://blog.frost.kiwi/assets/kiwis/cyber.svg"></blockquote><p>Using the <a href="https://en.wikipedia.org/wiki/Graphics_processing_unit">GPU</a> in the device you are reading this article on, and the <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL</a> capability of your browser, we&rsquo;ll implement realtime blurring techniques and retrace the trade-offs graphics programmers had to make in order to marry two, sometimes opposing, worlds: <strong>Mathematical theory</strong> and <strong>Technological reality</strong>.</p><blockquote><div><p>This is my submission to this year's <a href="https://some.3b1b.co/">Summer of Math Exposition</a></p></div><img src="https://blog.frost.kiwiimg/SOMELogo.svg"></blockquote><p>With many interactive visualizations to guide us, we&rsquo;ll journey through a bunch of blurs, make a detour through frequency space manipulations, torture your graphics processor to measure performance, before finally arriving at an algorithm with years worth of cumulative graphics programmer sweat - The &#10024; Dual Kawase Blur &#127775;</p><h2>Setup - No blur yet <a href="https://blog.frost.kiwi#setup---no-blur-yet">#</a></h2><p>In the context of video game post-processing, a 3D scene is drawn, also called <a href="https://en.wikipedia.org/wiki/Rendering_(computer_graphics)">rendering</a>, and saved to an intermediary image - a <a href="https://learnopengl.com/Advanced-OpenGL/Framebuffers">framebuffer</a>. In turn, this framebuffer is processed to achieve <a href="https://en.wikipedia.org/wiki/Video_post-processing#Uses_in_3D_rendering">various effects</a>. Since this <em>processing</em> happens <em>after</em> a 3D scene is rendered, it&rsquo;s called <em>post-processing</em>. All that, <em>many</em> times a second.</p><blockquote><div><p><strong>Depending on technique</strong>, framebuffers <a href="https://learnopengl.com/Advanced-Lighting/Deferred-Shading">can hold non-image data</a> and post-processing effects like <a href="https://en.wikipedia.org/wiki/Color_correction">Color-correction</a> or <a href="https://en.wikipedia.org/wiki/Tone_mapping">Tone-mapping</a> don't even require intermediate framebuffers: There's <a href="https://takahirox.github.io/three.js/examples/webgl_tonemapping.html">more</a> than <a href="https://gdcvault.com/play/1020631/The-Revolution-in-Mobile-Game">one way (@35:20)</a></p></div><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>This is where we jump in: with a framebuffer in hand, after the 3D scene was drawn. We&rsquo;ll use a scene from a <a href="https://en.wikipedia.org/wiki/Video_game_modding">mod</a> called <a href="https://store.steampowered.com/app/244630/NEOTOKYO/">NEOTOKYO&deg;</a>. Each time we&rsquo;ll implement a blur, there will be a box, a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Reference/Elements/canvas">canvas</a> instructed with <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API">WebGL 1.0</a>, rendering at <a href="https://en.wikipedia.org/wiki/1:1_pixel_mapping"><strong>native</strong> resolution</a> of your device. Each box has controls and relevant parts of its code below.</p><blockquote><p>No coding or graphics programming knowledge required to follow along. <a href="https://github.com/FrostKiwi/treasurechest/tree/main/posts/dual-kawase">But also no curtains!</a> You can always see <a href="https://www.youtube.com/watch?v=ONH-pxBMJu4">how we talk</a> with your GPU. Terms and meanings will be explained, once it's relevant.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p></div><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span></p></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr></table></div><blockquote><details><summary>Blur Fragment Shader <a href="https://blog.frost.kiwishader/noBlurYet.fs">noBlurYet.fs</a></summary><pre><code><span>/* This is the blur "fragment shader", a program that runs on the GPU. In *this* article, the blur fragment shader runs once per output pixel of the canvas */</span> <span>/* Required in WebGL 1 Shaders and depending on platform may have no effect. For Later: Strong blurs may have a lot of minute color contributions, so we set it "highp" here, the maximum. */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader "simpleQuad.vs". This tells our current output pixel where to read our texture from. */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>/* lightBrightness input. The reason light brightness is in the fragment shader of the blur and not a value applied in a step before our blur shader before, is due to color precision limits. */</span> <span>uniform</span> <span>float</span> lightBrightness<span>;</span> <span>/* Out texture input */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>/* The "main" function, where which is executed by our GPU */</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* gl_FragColor is the output of our shader. texture2D is the texture read, performed with the current 'uv' coordinate. Then multiplied by our lightBrightness value (a multiplier with eg. 1.0 at 100%, 0.5 at 50%) In "scene" mode, this value is locked to 1.0 so it has no effect */</span> gl_FragColor <span>=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span> <span>*</span> lightBrightness<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/simple.js">simple.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupSimple</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-Simple'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>lightBrightness</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> noBlurYetFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/noBlurYet.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Helper for recompilation */</span> <span>function</span> <span>reCompileBlurShader</span><span>(</span><span>)</span> <span>{</span> ctx<span>.</span>shd<span>.</span>blur <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> noBlurYetFrag<span>,</span> <span>[</span><span>"lightBrightness"</span><span>]</span><span>)</span><span>;</span> <span>}</span> <span>/* Blur Shader */</span> <span>reCompileBlurShader</span><span>(</span><span>)</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Box blur at native resolution */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>handle<span>)</span><span>;</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>lightBrightness<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>We don&rsquo;t have a blur implemented yet, not much happening. Above the box you have an <code>Animate</code> button, which will move the scene around to tease out problems of upcoming algorithms. Movement happens <strong>before</strong> our blur will be applied, akin to the player character moving. To see our blur in different use-cases, there are 3 modes:</p><blockquote><p>Different blur algorithms behave differently based on use-case. Some are very performance efficient, but break under movement. Some reveal their flaws with small, high contrast regions like far-away lights</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><ul><li>In <code>Scene</code> mode the blur will be applied across the whole image</li><li>In <code>Lights</code> mode we see and blur just the <a href="https://docs.blender.org/manual/en/latest/render/shader_nodes/shader/principled.html#emission">Emission</a> parts of the scene, sometimes called &ldquo;<a href="https://developer.valvesoftware.com/wiki/Glowing_textures_(Source)#$selfillum">Self-Illumination</a>&rdquo;<ul><li>This also unlocks the <code>lightBrightness</code> slider, where you can boost the energy output of the lights</li></ul></li><li>In <code>Bloom</code> mode, we use the original scene and add the blurred lights from the previous mode on top to create a moody scene. This implements the effect of <a href="https://en.wikipedia.org/wiki/Bloom_(shader_effect)">Bloom</a>, an important use-case for blurs in real-time 3D graphics</li></ul><blockquote><p>Adding the blurred emission <a href="https://chrismillervfx.wordpress.com/2013/04/15/understanding-render-passes/">pass</a> as we do in this article, or <a href="https://en.wikipedia.org/wiki/Thresholding_(image_processing)">thresholding</a> the scene and blurring that, is <strong>not</strong> actually how modern video games do bloom. We'll get into that a bit later.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Finally, you see <a href="https://en.wikipedia.org/wiki/Image_resolution">Resolution</a> of the canvas and <a href="https://en.wikipedia.org/wiki/Frame_rate">Frames per Second / time taken per frame, aka &ldquo;frametime&rdquo;</a>. A very important piece of the puzzle is <em><strong>performance</strong></em>, which will become more and more important as the article continues and the <a href="https://en.wikipedia.org/wiki/Necessity_is_the_mother_of_invention">mother of invention</a> behind our story.</p><blockquote><p>Frame-rate will be capped at your screen's <a href="https://www.intel.com/content/www/us/en/gaming/resources/highest-refresh-rate-gaming.html">refresh rate</a>, most likely 60 fps / 16.6 ms. We'll get into proper <a href="https://en.wikipedia.org/wiki/Benchmark_(computing)">benchmarking</a> as our hero descents this article into blurry madness</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><h3>Technical breakdown <a href="https://blog.frost.kiwi#technical-breakdown">#</a></h3><blockquote><p>Understanding the GPU code is not necessary to follow this article, but if you do choose to <a href="https://github.com/FrostKiwi/treasurechest/tree/main/posts/dual-kawase">peek behind the curtain</a>, here is what you need to know</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>We&rsquo;ll implement our blurs as a <a href="https://learnopengl.com/Getting-started/Hello-Triangle">fragment shader</a> written in <a href="https://en.wikipedia.org/wiki/OpenGL_Shading_Language">GLSL</a>. In a nut-shell, a fragment shader is code that runs on the GPU for every output-pixel, in-parallel. Image inputs in shaders are called <a href="https://learnopengl.com/Getting-started/Textures">Textures</a>. These textures have coordinates, often called <a href="https://en.wikipedia.org/wiki/UV_mapping">UV coordinates</a> - <em>these</em> are the numbers we care about.</p><blockquote><p>Technically, fragment shaders run per <a href="https://www.khronos.org/opengl/wiki/Fragment">fragment</a>, which aren't necessarily pixel sized and there are <a href="https://registry.khronos.org/OpenGL/extensions/EXT/EXT_shader_framebuffer_fetch.txt">other ways</a> to read framebuffers, but none of that matters in the context of this article.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><figure><img src="https://blog.frost.kiwiimg/UV.svg" alt="Texture coordinates, also called UV Coordinates or UVs for short"><figcaption>Texture coordinates, also called "UV" Coordinates or "UVs" for short<br>Note the squished appearance of the image</figcaption></figure><p>UV coordinates specify the position we read in the image, with bottom left being <code>0,0</code> and the top right being <code>1,1</code>. Neither UV coordinates, nor shaders themselves have any concept of image resolution, screen resolution or aspect ratio. If we want to address individual pixels, it&rsquo;s on us to express that in terms of UV coordinates.</p><blockquote><div><p>Although <a href="https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes/">there are ways to find out</a>, we don't know which order output-pixels are processed in, and although the <a href="https://docs.gl/sl4/gl_FragCoord">graphics pipeline can tell us</a>, the shader doesn't even know which output-pixel it currently processes</p></div><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><p>The framebuffer is passed into the fragment shader in line <code>uniform sampler2D texture</code> as a texture. Using the blur shader, we draw a &ldquo;Full Screen Quad&rdquo;, a rectangle covering the entire canvas, with matching <code>0,0</code> in the bottom-left and <code>1,1</code> in the top-right <code>varying vec2 uv</code> UV coordinates to read from the texture.</p><p>The texture&rsquo;s aspect-ratio and resolution are the same as the output canvas&rsquo;s aspect-ratio and resolution, thus there is a 1:1 pixel mapping between the texture we will process and our output canvas. The <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/dual-kawase/js/blur/simple.js">graphics pipeline steps</a> and <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/dual-kawase/shader/simpleQuad.vs">vertex shader</a> responsible for this are not important for this article.</p><p>The blur fragment shader accesses the color of the texture with <code>texture2D(texture, uv)</code>, at the matching output pixel&rsquo;s position. In following examples, we&rsquo;ll read from neighboring pixels, for which we&rsquo;ll need to calculate a UV coordinate offset, a decimal fraction corresponding to one pixel step, calculated with with <code>1 / canvasResolution</code></p><blockquote><p>One way to think of fragment shader code is "What are the instructions to construct this output pixel?"</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>Graphics programming is <a href="https://www.youtube.com/watch?v=xJQ0qXh1-m0">uniquely challenging</a> in the beginning, because of how many rules and limitations the hardware, <a href="https://en.wikipedia.org/wiki/Graphics_library">graphics APIs</a> and the <a href="https://fgiesen.wordpress.com/2011/07/09/a-trip-through-the-graphics-pipeline-2011-index/">rendering pipeline</a> impose. But it also unlocks incredible potential, as other limitations dissolve. Let&rsquo;s find out how graphics programmers have leveraged that potential.</p><h2>Box Blur <a href="https://blog.frost.kiwi#box-blur">#</a></h2><p>From a programmer&rsquo;s perspective, the most straight forward way is to average the neighbors of a pixel using a <a href="https://en.wikipedia.org/wiki/For_loop">for-loop</a>. What the fragment shader is expressing is: &ldquo;<em>look Y pixels up &amp; down, X pixels left &amp; right and average the colors</em>&rdquo;. The more we want to blur, the more we have to increase <code>kernelSize</code>, the bounds of our for-loop.</p><pre><code><span>/* Read from the texture y amount of pixels above and below */</span> <span>for</span> <span>(</span><span>int</span> y <span>=</span> <span>-</span>kernel_size<span>;</span> y <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>y<span>)</span> <span>{</span> <span>/* Read from the texture x amount of pixels to the left and the right */</span> <span>for</span> <span>(</span><span>int</span> x <span>=</span> <span>-</span>kernel_size<span>;</span> x <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>x<span>)</span> <span>{</span> <span>/* Offset from current pixel, indicating which pixel to read */</span> <span>vec2</span> offset <span>=</span> <span>vec2</span><span>(</span>x<span>,</span> y<span>)</span> <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Read and sum up the color contribution of that pixel */</span> sum <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> offset<span>)</span><span>;</span> <span>}</span> <span>}</span></code></pre><p>The bigger the for-loop, the more texture reads we perform, <strong>per output-pixel</strong>. Each texture read is often called a &ldquo;texture tap&rdquo; and the total amount of those &ldquo;taps&rdquo; per-frame will now also be displayed. New controls, new <code>samplePosMultiplier</code>, new terms - Play around with them, get a feel for them, with a constant eye on FPS.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p><svg><circle></circle><rect height="7" width="2"></rect><rect height="9" width="2"></rect></svg></div><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>7x7</output>&nbsp;px</td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr></table></div><blockquote><details><summary>Blur Fragment Shader <a href="https://blog.frost.kiwishader/boxBlur.fs">boxBlur.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large Kernel Sizes result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>/* Resolution Reciprocal. Getting to the next pixel requires us to calculate `UV Coordinate / frameSize`. On hardware, doing a division is slightly slower than doing a multiplication. Since the shader is run per pixel, we avoid the per-pixel division, by calculating the reciprocal 1 / frameSize and pass it into the shader. A very popular micro-optimization across graphics programming */</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>uniform</span> <span>float</span> samplePosMult<span>;</span> <span>/* Multiply to push blur strength past the kernel size */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>/* `KERNEL_SIZE` added during compilation */</span> <span>const</span> <span>int</span> kernel_size <span>=</span> KERNEL_SIZE<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Variable to hold our final color for the current pixel */</span> <span>vec4</span> sum <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> <span>/* How big one side of the sampled square is */</span> <span>const</span> <span>int</span> size <span>=</span> <span>2</span> <span>*</span> kernel_size <span>+</span> <span>1</span><span>;</span> <span>/* Total number of samples we are going to read */</span> <span>const</span> <span>float</span> totalSamples <span>=</span> <span>float</span><span>(</span>size <span>*</span> size<span>)</span><span>;</span> <span>/* Read from the texture y amount of pixels above and below */</span> <span>for</span> <span>(</span><span>int</span> y <span>=</span> <span>-</span>kernel_size<span>;</span> y <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>y<span>)</span> <span>{</span> <span>/* Read from the texture x amount of pixels to the left and the right */</span> <span>for</span> <span>(</span><span>int</span> x <span>=</span> <span>-</span>kernel_size<span>;</span> x <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>x<span>)</span> <span>{</span> <span>/* Offset from the current pixel, indicating which pixel to read */</span> <span>vec2</span> offset <span>=</span> <span>vec2</span><span>(</span>x<span>,</span> y<span>)</span> <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Read and sum up the contribution of that pixel */</span> sum <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> offset<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Return the sum, divided by the number of samples (normalization) */</span> gl_FragColor <span>=</span> <span>(</span>sum <span>/</span> totalSamples<span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/boxBlur.js">boxBlur.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupBoxBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-BoxBlur'</span><span>)</span><span>;</span> <span>const</span> WebGLBoxDetail <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-BoxBlurDetail'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>kernelSize</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sizeRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> boxBlurFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/boxBlur.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/boxBlurBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>blurShaderSrc</span><span>:</span> boxBlurFrag<span>,</span> <span>kernelSize</span><span>:</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Helper for recompilation */</span> <span>function</span> <span>reCompileBlurShader</span><span>(</span><span>blurSize</span><span>)</span> <span>{</span> ctx<span>.</span>shd<span>.</span>blur <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> boxBlurFrag<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"samplePosMult"</span><span>,</span> <span>"bloomStrength"</span><span>]</span><span>,</span> <span>"#define KERNEL_SIZE "</span> <span>+</span> blurSize <span>+</span> <span>'\n'</span><span>)</span><span>;</span> <span>}</span> <span>/* Blur Shader */</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> KernelSizeSide <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>*</span> <span>2</span> <span>+</span> <span>1</span><span>;</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>canvas<span>.</span>width <span>*</span> canvas<span>.</span>height <span>*</span> KernelSizeSide <span>*</span> KernelSizeSide <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Box blur at native resolution */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>handle<span>)</span><span>;</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>Visually, the result doesn&rsquo;t look very pleasing. The stronger the blur, the more &ldquo;boxy&rdquo; features of the image become. This is due to us reading and averaging the texture in a square shape. Especially in bloom mode, with strong <code>lightBrightness</code> and big <code>kernelSize</code>, lights become literally squares.</p><p>Performance is also really bad. With bigger <code>kernelSizes</code>, our <code>Texture Taps</code> count skyrockets and performance drops. Mobile devices will come to a slog. Even the worlds fastest PC graphics cards will fall below screen refresh-rate by cranking <code>kernelSize</code> and zooming the article on PC, thus raising canvas resolution.</p><blockquote><p>We kinda failed on all fronts. It looks bad <strong>and</strong> runs bad.</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><p>Then, there&rsquo;s this <code>samplePosMultiplier</code>. It seems to <em>also</em> seemingly increase blur strength, <em>without</em> increasing textureTaps or lowering performance (or lowering performance just a little on certain devices). But if we crank <em>that</em> too much, we get artifacts in the form of repeating patterns. Let&rsquo;s play with a schematic example:</p><ul><li>The white center square represents the output pixel</li><li>Grey squares are the pixels we would read, with the current <code>kernelSize</code>, with <code>samplePosMult</code> untouched</li><li>the black dots are our <em>actual</em> texture reads <em><strong>per-output-pixel</strong></em>, our &ldquo;sample&rdquo; positions</li></ul><div><table><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>3&times;3</output></td><td></td></tr><tr><td><code>samplePosMult</code></td></tr><tr><td><code>samplePosMult</code></td><td></td><td><output>100</output>%</td><td></td></tr></table></div><p>On can say, that an image is a &ldquo;continous 2D signal&rdquo;. When we texture tap at a specific coordinate, we are <em>sampling the &ldquo;image signal&rdquo; at that coordinate</em>. As previously mentioned, we use UV coordinates and are not bound by concepts like &ldquo;pixels position&rdquo;. <em><strong>Where</strong></em> we place our samples is completely up to us.</p><p>A fundamental blur algorithm option is increasing the sample distance away from the center, thus increasing the amount of image we cover with our samples - more bang for your sample buck. This works by multiplying the offset distance. That is what <code>samplePosMult</code> does and is something you will have access to going forward.</p><p>Doing it too much, brings ugly repeating patterns. This of course leaves some fundamental questions, like where these artifacts come from and what it even means to read between two pixels. <em><strong>And</strong></em> on top of that we have to address performance and the boxyness of our blur! But first&hellip;</p><h2>What even <em>is</em> a kernel? <a href="https://blog.frost.kiwi#what-even-is-a-kernel%3F">#</a></h2><p>What we have created with our for-loop, is a <a href="https://www.youtube.com/watch?v=KuXjwB4LzSA0">convolution</a>. Very simplified, in the context of image processing, it&rsquo;s usually a square of numbers constructing an output pixel, by gathering and weighting pixels, that the square covers. The square is called a kernel and was the thing we visualized previously.</p><p>For blurs, the kernel weights must sum up to 1. If that were not the case, we would either brighten or darken the image. Ensuring that is the normalization step. In the box blur above, this happens by dividing the summed pixel color by <code>totalSamples</code>, the total amount of samples taken. A basic &ldquo;calculate the average&rdquo; expression.</p><p>The same can be expressed as weights of a kernel, a number multiplied with each sample at that position. Since the box blur weighs all sample the same regardless of position, all weights are the same. This is visualized next. The bigger the kernel size, the smaller the weights.</p><div><svg></svg><table><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>3&times;3</output></td><td></td></tr><tr><td><code>samplePosMult</code></td></tr><tr><td><code>samplePosMult</code></td><td></td><td><output>100</output>%</td><td></td></tr></table></div><p>Kernels applied at the edges of our image will read from areas &ldquo;outside&rdquo; the image, with UV coordinates smaller than <code>0,0</code> and bigger than <code>1,1</code>. Luckily, the GPU handles this for us and we are free to decide what happens to those outside samples, by setting the <a href="https://learnopengl.com/Getting-started/Textures#:~:text=Texture%20Wrapping">Texture Wrapping mode</a>.</p><figure><img src="https://blog.frost.kiwiimg/WrappingModes.png" alt="Texture Wrapping Modes and results on blurring"><figcaption>Texture Wrapping Modes and results on blurring (Note the color black bleeding-in)<br><strong>Top</strong>: Framebuffer, zoomed out. <strong>Bottom</strong>: Framebuffer normal, with strong blur applied</figcaption></figure><p>Among others, we can define a solid color to be used, or to &ldquo;clamp&rdquo; to the nearest edge&rsquo;s color. If we choose a solid color, then we will get color bleeding at the edges. Thus for almost all post-processing use-cases, edge color clamping is used, as it prevents weird things happening at the edges. <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/dual-kawase/js/utility.js#L49">This article does too</a>.</p><blockquote><p>You may have noticed a black "blob" streaking with stronger blur levels along the bottom. Specifically here, it happens because the lines between the floor tiles align with the bottom edge, extending black color to infinity</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Convolution as a mathematical concept is surprisingly deep and <a href="https://www.youtube.com/@3blue1brown">3blue1brown</a> has an excellent video on it, that even covers the image processing topic. Theoretically, we won&rsquo;t depart from convolutions. We <em><strong>can</strong></em> dissect our code and express it as weights and kernels. With the for-loop box blur, that <em><strong>was</strong></em> quite easy!</p><figure><iframe src="https://www.youtube-nocookie.com/embed/KuXjwB4LzSA" title="YouTube video player" width="100%"></iframe><figcaption>But what is a convolution?<br><a href="https://www.youtube.com/watch?v=KuXjwB4LzSA">YouTube Video</a> by <a href="https://www.youtube.com/@3blue1brown">3Blue1Brown</a></figcaption></figure><p>On a practical level though, understanding where the convolution is, how many there are and what kernels are at play will become more and more difficult, once we leave the realm of classical blurs and consider the wider implications of reading between pixel bounds. But for now, we stay with the classics:</p><h2>Gaussian Blur <a href="https://blog.frost.kiwi#gaussian-blur">#</a></h2><p>The most famous of blur algorithms is the Gaussian Blur. It uses the <a href="https://en.wikipedia.org/wiki/Normal_distribution">normal distribution</a>, also known as the <a href="https://en.wikipedia.org/wiki/Normal_distribution">bell Curve</a> to weight the samples inside the kernel, with a new variable <code>sigma &sigma;</code> to control the flatness of the curve. Other than generating the kernel weights, the algorithm is identical to the box blur algorithm.</p><figure><figcaption>Gaussian blur weights formula for point <code>(x,y)</code> <a href="https://en.wikipedia.org/wiki/Gaussian_blur#Mathematics">(Source)</a></figcaption></figure><p>To calculate the weights for point <code>(x,y)</code>, the <a href="https://en.wikipedia.org/wiki/Gaussian_blur#Mathematics">above formula is used</a>. The gaussian formula has a weighting multiplier <code>1/(2&pi;&sigma;&sup2;)</code>. In the code, there is no such thing though. The formula expresses the gaussian curve as a <em>continuous</em> function going to <em>infinity</em>. But our code and its for-loop are different - <em><strong>discrete</strong></em> and <em><strong>finite</strong></em>.</p><pre><code><span>float</span> <span>gaussianWeight</span><span>(</span><span>float</span> x<span>,</span> <span>float</span> y<span>,</span> <span>float</span> sigma<span>)</span> <span>{</span> <span>/* e ^ ( - (x&sup2; + y&sup2;) / 2 &sigma;&sup2; ) */</span> <span>return</span> <span>exp</span><span>(</span><span>-</span><span>(</span>x <span>*</span> x <span>+</span> y <span>*</span> y<span>)</span> <span>/</span> <span>(</span><span>2.0</span> <span>*</span> sigma <span>*</span> sigma<span>)</span><span>)</span><span>;</span> <span>}</span></code></pre><blockquote><p>For clarity, the kernel is generated in the fragment shader. Normally, that should be avoided. Fragment shaders run per-output-pixel, but the kernel weights stay the same, making this inefficient.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>Just like with the box blur, weights are summed up and divided at the end, instead of the term <code>1/&radic;(2&pi;&sigma;&sup2;)</code> precalculating weights. <code>sigma</code> controls the sharpness of the curve and thus the blur strength, but wasn&rsquo;t that the job of <code>kernelSize</code>? Play around with all the values below and get a feel for how the various values behave.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p><svg><circle></circle><rect height="7" width="2"></rect><rect height="9" width="2"></rect></svg></div><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>7x7</output>&nbsp;px</td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>sigma</code></td></tr><tr><td><code>sigma</code></td><td></td><td>&plusmn;<output>2.00</output>&sigma;</td><td></td></tr></table></div><blockquote><details><summary>Blur Fragment Shader <a href="https://blog.frost.kiwishader/gaussianBlur.fs">gaussianBlur.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large Kernel Sizes result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> samplePosMult<span>;</span> <span>/* Multiply to push blur strength past the kernel size */</span> <span>uniform</span> <span>float</span> sigma<span>;</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>/* `KERNEL_SIZE` added during compilation */</span> <span>const</span> <span>int</span> kernel_size <span>=</span> KERNEL_SIZE<span>;</span> <span>float</span> <span>gaussianWeight</span><span>(</span><span>float</span> x<span>,</span> <span>float</span> y<span>,</span> <span>float</span> sigma<span>)</span> <span>{</span> <span>/* e ^ ( - (x&sup2; + y&sup2;) / 2 &sigma;&sup2; ) */</span> <span>return</span> <span>exp</span><span>(</span><span>-</span><span>(</span>x <span>*</span> x <span>+</span> y <span>*</span> y<span>)</span> <span>/</span> <span>(</span><span>2.0</span> <span>*</span> sigma <span>*</span> sigma<span>)</span><span>)</span><span>;</span> <span>}</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Variable to hold our final color for the current pixel */</span> <span>vec4</span> sum <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> <span>/* Sum of all weights */</span> <span>float</span> weightSum <span>=</span> <span>0.0</span><span>;</span> <span>/* How big one side of the sampled square is */</span> <span>const</span> <span>int</span> size <span>=</span> <span>2</span> <span>*</span> kernel_size <span>+</span> <span>1</span><span>;</span> <span>/* Total number of samples we are going to read */</span> <span>const</span> <span>float</span> totalSamples <span>=</span> <span>float</span><span>(</span>size <span>*</span> size<span>)</span><span>;</span> <span>/* Read from the texture y amount of pixels above and below */</span> <span>for</span> <span>(</span><span>int</span> y <span>=</span> <span>-</span>kernel_size<span>;</span> y <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>y<span>)</span> <span>{</span> <span>/* Read from the texture x amount of pixels to the left and the right */</span> <span>for</span> <span>(</span><span>int</span> x <span>=</span> <span>-</span>kernel_size<span>;</span> x <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>x<span>)</span> <span>{</span> <span>/* Calculate the required weight */</span> <span>float</span> w <span>=</span> <span>gaussianWeight</span><span>(</span><span>float</span><span>(</span>x<span>)</span><span>,</span> <span>float</span><span>(</span>y<span>)</span><span>,</span> sigma<span>)</span><span>;</span> <span>/* Offset from the current pixel, indicating which pixel to read */</span> <span>vec2</span> offset <span>=</span> <span>vec2</span><span>(</span>x<span>,</span> y<span>)</span> <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Read and sum up the contribution of that pixel, weighted */</span> sum <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> offset<span>)</span> <span>*</span> w<span>;</span> weightSum <span>+=</span> w<span>;</span> <span>}</span> <span>}</span> <span>/* Return the sum, divided by the number of samples (normalization) */</span> gl_FragColor <span>=</span> <span>(</span>sum <span>/</span> weightSum<span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/gaussianBlur.js">gaussianBlur.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupGaussianBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianBlur'</span><span>)</span><span>;</span> <span>const</span> WebGLBoxDetail <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianBlurDetail'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>sigma</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>kernelSize</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sizeRange'</span><span>)</span><span>,</span> <span>sigma</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sigmaRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBoxDetail<span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> gaussianBlurFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/gaussianBlur.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/gaussianBlurBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>blurShaderSrc</span><span>:</span> gaussianBlurFrag<span>,</span> <span>kernelSize</span><span>:</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>,</span> <span>sigma</span><span>:</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Helper for recompilation */</span> <span>function</span> <span>reCompileBlurShader</span><span>(</span><span>blurSize</span><span>)</span> <span>{</span> ctx<span>.</span>shd<span>.</span>blur <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> gaussianBlurFrag<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"samplePosMult"</span><span>,</span> <span>"bloomStrength"</span><span>,</span> <span>"sigma"</span><span>]</span><span>,</span> <span>"#define KERNEL_SIZE "</span> <span>+</span> blurSize <span>+</span> <span>'\n'</span><span>)</span><span>;</span> <span>}</span> <span>/* Blur Shader */</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> KernelSizeSide <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>*</span> <span>2</span> <span>+</span> <span>1</span><span>;</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>canvas<span>.</span>width <span>*</span> canvas<span>.</span>height <span>*</span> KernelSizeSide <span>*</span> KernelSizeSide <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Gaussian blur at native resolution */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>handle<span>)</span><span>;</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>The blur looks way smoother than our previous box blur, with things generally taking on a &ldquo;rounder&rdquo; appearance, due to the bell curve&rsquo;s smooth signal response. That is, unless you move the <code>sigma</code> slider down. If you move <code>sigma</code> too low, you will get our previous box blur like artifacts again.</p><p>Let&rsquo;s clear up what the values actually represent and how they interact. The following visualization shows the kernel with its weights expressed as height in an <a href="https://en.wikipedia.org/wiki/Isometric_projection"><s>Isometric</s></a> <a href="https://en.wikipedia.org/wiki/Axonometric_projection#Three_types">Dimetric</a> perspective projection. There are two different interaction modes with <code>sigma</code> when changing <code>kernelSize</code> and two ways to express <code>sigma</code>.</p><div><p><label> Absolute Sigma</label> <label> Relative Sigma</label></p><table><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>7&times;7</output></td><td></td></tr><tr><td><code>sigma</code></td></tr><tr><td><code>sigma</code></td><td> </td><td><span><span>&plusmn;<output>3.00</output>&sigma; </span><span><output>1.00</output>px</span></span></td><td></td></tr></table></div><p><code>sigma</code> describes the flatness of our mathematical curve, a curve going to infinity. But our algorithm has a limited <code>kernelSize</code>. Where the kernel stops, no more pixel contributions occur, leading to box-blur-like artifacts due to the cut-off. In the context of image processing, there are two ways to setup a gaussian blur&hellip;</p><blockquote><p>A small sigma, thus a flat bell curve, paired with a small kernel size effectively <strong>is</strong> a box blur, with the weights making the kernel box-shaped.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>&hellip; way 1: <a href="https://www.youtube.com/watch?v=ueNY30Cs8Lk">Absolute Sigma</a>. <code>sigma</code> is an absolute value in pixels independent of <code>kernelSize</code>, with <code>kernelSize</code> acting as a &ldquo;window into the curve&rdquo; or way 2: <code>sigma</code> is expressed <em><strong>relative</strong></em> to the current <code>kernelSize</code>. For practical reasons (finicky sliders) the relative to <code>kernelSize</code> mode is used everywhere.</p><p>Eitherway, the infinite gaussian curve <em><strong>will</strong></em> have a cut-off <em>somewhere</em>. <code>sigma</code> too small? - We get box blur like artifacts. <code>sigma</code> too big? - We waste blur efficiency, as the same perceived blur strength requires bigger kernels, thus bigger for-loops with lower performance. An artistic trade-off every piece of software has to make.</p><blockquote><p>An optimal kernel would be one, where the outer weights are almost zero. Thus, if we increased <code>kernelSize</code> in Absolute Sigma mode by one, it would make close to no more <strong>visual</strong> difference.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>There are other ways of creating blur kernels, with other properties. One way is to follow <a href="https://en.wikipedia.org/wiki/Pascal%27s_triangle">Pascal&rsquo;s triangle</a> to get a set of predefined kernel sizes and weights. These are called <a href="https://bartwronski.com/2021/10/31/practical-gaussian-filter-binomial-filter-and-small-sigma-gaussians/">Binomial Filters</a> and lock us into specific &ldquo;kernel presets&rdquo;, but solve the infinity vs cut-off dilemma, by moving weights to zero within the sampling window.</p><p>Binomial Kernels are also Gaussian-like in their frequency response. We won&rsquo;t expand on these further, just know that we <em><strong>can</strong></em> choose kernels by different mathematical criteria, chasing different signal response characteristics. But speaking of which, what even <em>is</em> Gaussian Like? Why do we care?</p><h3>What is Gaussian-like? <a href="https://blog.frost.kiwi#what-is-gaussian-like%3F">#</a></h3><p>In Post-Processing Blur algorithms you generally find two categories. <a href="https://en.wikipedia.org/wiki/Bokeh">Bokeh</a> Blurs and Gaussian-Like Blurs. The gaussian is chosen for its natural appearance, its ability to smooth colors without &ldquo;standout features&rdquo;. Gaussian Blurs are generally used as an ingredient in an overarching visual effect, be it frosted glass Interfaces or Bloom.</p><figure><img src="https://blog.frost.kiwiimg/gaussianLike.png" alt="Bokeh blur, gaussian blur comparison"><figcaption>Bokeh Blur and Gaussian Blur compared.</figcaption></figure><p>In contrast to that, when emulating lenses and or creating <a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/depth-of-field-in-unreal-engine">Depth of Field</a>, is &ldquo;<a href="https://dev.epicgames.com/documentation/en-us/unreal-engine/cinematic-depth-of-field-method?application_version=4.27">Bokeh Blur</a>&rdquo; - also known as &ldquo;Lens Blur&rdquo; or &ldquo;Cinematic Blur&rdquo;. This type of blur <em><strong>is</strong></em> the target visual effect. The challenges and approaches are very much related, but algorithms used differ.</p><p>Algorithms get really creative in this space, all with different trade-offs and visuals. Some sample using a <a href="https://mynameismjp.wordpress.com/2011/02/28/bokeh/">poission disk distribution</a> and some have cool out of the box thinking: Computerphile covered a complex numbers based approach to creating Bokeh Blurs, a fascinating number theory cross-over.</p><figure><iframe src="https://www.youtube-nocookie.com/embed/vNG3ZAd8wCc" title="YouTube video player" width="100%"></iframe><figcaption>Video Game &amp; Complex Bokeh Blurs<br><a href="https://www.youtube.com/watch?v=vNG3ZAd8wCc">YouTube Video</a> by <a href="https://www.youtube.com/@Computerphile">Computerphile</a></figcaption></figure><p>This article though doesn&rsquo;t care about these stylistics approaches. We are here to chase a basic building block of graphics programming and realtime visual effects, a &ldquo;Gaussian-Like&rdquo; with good performance. Speaking of which!</p><h2>Performance <a href="https://blog.frost.kiwi#performance">#</a></h2><p>The main motivator of our journey here, is the chase of realtime performance. Everything we do must happen within few milliseconds. The expected performance of an algorithm and the practical cost once placed in the graphics pipeline, are sometimes surprisingly different numbers though. Gotta measure!</p><blockquote><p>This chapter is about a very <strong>technical</strong> motivation. If you don't care about how fast a GPU does what it does, feel free to skip this section.</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>With performance being such a driving motivator, it would be a shame if we couldn&rsquo;t measure it in this article. Each WebGL Box has a benchmark function, which blurs random noise at a fixed resolution of <code>1600x1200</code> with the respective blur settings you chose and a fixed iteration count workload, a feature hidden so far.</p><blockquote><p>Realtime graphics programming is sometimes more about measuring than programming.</p><img src="https://blog.frost.kiwi/assets/kiwis/laugh.svg"></blockquote><p>Benchmarking is best done by measuring shader execution time. This <a href="https://registry.khronos.org/webgl/extensions/EXT_disjoint_timer_query_webgl2/">can be done</a> in the browser reliably, but only on some platforms. No way exists to do so across all platforms. Luckily, there is the classic method of &ldquo;stalling the graphics pipeline&rdquo;, forcing a wait until all commands finish, a moment in time we can measure.</p><blockquote><p>Across all platforms a stall is guaranteed to occur on command <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels"><code>gl.readPixels()</code></a>. Interestingly, the standards conform command for this: <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish"><code>gl.finish()</code></a> is simply ignored by mobile apple devices.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><p>Below is a button, that unlocks this benchmarking feature, unhiding a benchmark button and <code>Detailed Benchmark Results</code> section under each blur. This allows you to start a benchmark with a preset workload, on a separate <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers">Browser Worker</a>. There is only one issue: Browsers get <em><strong>very</strong></em> angry if you full-load the GPU this way.</p><p>If the graphics pipeline is doing work without reporting back (called &ldquo;yielding&rdquo;) to the browser for too long, browsers will simply kill all GPU access for the whole page, until tab reload. If we yield back, then the measured results are useless and from inside WebGL, we can&rsquo;t stop the GPU, once its commands are issued.</p><blockquote>&#9888;&#65039; Especially on mobile: <strong>please</strong> increase <code>kernelSize</code> and iterations slowly. The previous algorithms have bad <code>kernelSize</code> performance scaling on purpose, be especially careful with them.<p>Stay below <strong>2</strong> seconds of execution time, or the browser will lock GPU access for the page, disabling all blur examples, until a browser restart is performed. On iOS Safari this requires a trip to the App Switcher, a page reload won't be enough.</p></blockquote><blockquote><p>iOS and iPad OS are <strong>especially</strong> strict, will keep GPU access disabled, even on Tab Reload. You will have go to the App Switcher (Double Tap Home Button), Swipe Safari Up to close it and relaunch it from scratch.</p><img src="https://blog.frost.kiwi/assets/kiwis/miffed.svg"></blockquote><h3>What are we optimizing for? <a href="https://blog.frost.kiwi#what-are-we-optimizing-for%3F">#</a></h3><p>With the <a href="https://blog.frost.kiwi#box-blur">above Box Blur</a> and <a href="https://blog.frost.kiwi#gaussian-blur">above Gaussian Blur</a>, you will measure performance scaling very badly with <code>kernelSize</code>. Expressed in the <a href="https://en.wikipedia.org/wiki/Big_O_notation">Big O notation</a>, it has a performance scaling of <code>O(pixelCount * kernelSize&sup2;)</code>. Quadratic scaling of required texture taps in terms of <code>kernelSize</code>. We need to tackle this going forward.</p><blockquote><p>Especially dedicated Laptop GPUs are slow to get out of their lower power states. Pressing the benchmark button multiple times in a row may result in the performance numbers getting better.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Despite the gaussian blur calculating the kernel <a href="https://github.com/FrostKiwi/treasurechest/blob/main/posts/dual-kawase/shader/gaussianBlur.fs#L18">completely from scratch on every single pixel in our implementation</a>, the performance of the box blur and gaussian blur are very close to each other at higher iteration counts. In fact, by precalculating those kernels we could performance match both.</p><blockquote><p>But isn't gaussian blur a more complicated algorithm?</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>As opposed to chips from decades ago, modern graphics cards have very fast arithmetic, but comparatively slow memory access times. With workloads like these, the slowest thing becomes the memory access, in our case the texture taps. The more taps, the slower the algorithm.</p><blockquote><p>Our blurs perform a <strong>dependant texture read</strong>, a graphics programming sin. This is when texture coordinates are determined <strong>during</strong> shader execution, which opts out of many automated shader optimizations.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>Especially on personal computers, you may also have noticed that increasing <code>samplePosMultiplier</code> will negatively impact performance (up to a point), even though the required texture taps stay the same.</p><p>This is due hardware texture caches accelerating texture reads which are spatially close together and not being able to do so effectively, if the texture reads are all too far apart. Platform dependant tools like <a href="https://developer.nvidia.com/blog/identifying-shader-limiters-with-the-shader-profiler-in-nvidia-nsight-graphics/">Nvidia NSight</a> can measure GPU cache utilization. The browser cannot.</p><p>These are key numbers graphics programmers chase when writing fragment shaders: <strong>Texture Taps</strong> and <strong>Cache Utilization</strong>. There is another one, we will get into in a moment. Clearly, our Blurs are <em><strong>slow</strong></em>. Time for a speed up!</p><h2>Separable Gaussian Blur <a href="https://blog.frost.kiwi#separable-gaussian-blur">#</a></h2><p>We have not yet left the <em>classics</em> of blur algorithms. One fundamental concept left on the table is &ldquo;convolution separability&rdquo;. Certain Convolutions like our <a href="https://blog.frost.kiwi#box-blur">Box Blur</a>, <a href="https://blog.frost.kiwi#gaussian-blur">our Gaussian Blur</a> and the <a href="https://bartwronski.com/2021/10/31/practical-gaussian-filter-binomial-filter-and-small-sigma-gaussians/">Binominal filtering</a> mentioned in passing previously can all be performed in two separate passes, by two <em><strong>separate</strong></em> 1D Kernels.</p><figure><svg height="10rem" xmlns:xlink="http://www.w3.org/1999/xlink"></svg> <figcaption>Gaussian blur weights formula for, separated</figcaption></figure><p>Not all convolutions are separable. In the context of graphics programming: If you can express the kernel weights as a formula with axes <code>X, Y</code> and factor-out both <code>X</code> and <code>Y</code> into two separate formulas, then you have gained separability of a 2D kernel and can perform the convolution in two passes, massively saving on texture taps.</p><blockquote><p>Some big budget video games have used effects with kernels that are <strong>not</strong> separable, but did it anyway in two passes + 1D Kernel for the performance gain, with the resulting artifacts being deemed not too bad.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Computerphile covered the concept of separability in the context of 2D image processing really well, if you are interested in a more formal explanation.</p><figure><iframe src="https://www.youtube-nocookie.com/embed/SiJpkucGa1o" title="YouTube video player" width="100%"></iframe><figcaption>Separable Filters and a Bauble<br><a href="https://www.youtube.com/watch?v=SiJpkucGa1o">YouTube Video</a> by <a href="https://www.youtube.com/@Computerphile">Computerphile</a></figcaption></figure><p>Here is our Gaussian Blur, but expressed as a separable Version. You can see just Pass 1 and Pass 2 in isolation or see the final result. Same visual quality as our Gaussian Blur, same dials, but massively faster, with no more quadratic scaling of required texture taps.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p><svg><circle></circle><rect height="7" width="2"></rect><rect height="9" width="2"></rect></svg></div><p><label> Pass 1</label> <label> Pass 2</label> <label> Both</label></p><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>7x7</output>&nbsp;px</td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>sigma</code></td></tr><tr><td><code>sigma</code></td><td></td><td>&plusmn;<output>2.00</output>&sigma;</td><td></td></tr></table></div><blockquote><details><summary>Blur Fragment Shader <a href="https://blog.frost.kiwishader/gaussianBlurSeparable.fs">gaussianBlurSeparable.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large Kernel Sizes result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> samplePosMult<span>;</span> <span>/* Multiply to push blur strength past the kernel size */</span> <span>uniform</span> <span>float</span> sigma<span>;</span> <span>uniform</span> <span>vec2</span> direction<span>;</span> <span>/* Direction vector: (1,0) for horizontal, (0,1) for vertical */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>/* `KERNEL_SIZE` added during compilation */</span> <span>const</span> <span>int</span> kernel_size <span>=</span> KERNEL_SIZE<span>;</span> <span>float</span> <span>gaussianWeight</span><span>(</span><span>float</span> x<span>,</span> <span>float</span> sigma<span>)</span> <span>{</span> <span>/* e ^ ( - x&sup2; / 2 &sigma;&sup2; ) */</span> <span>return</span> <span>exp</span><span>(</span><span>-</span><span>(</span>x <span>*</span> x<span>)</span> <span>/</span> <span>(</span><span>2.0</span> <span>*</span> sigma <span>*</span> sigma<span>)</span><span>)</span><span>;</span> <span>}</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Variable to hold our final color for the current pixel */</span> <span>vec4</span> sum <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> <span>/* Sum of all weights */</span> <span>float</span> weightSum <span>=</span> <span>0.0</span><span>;</span> <span>/* How big one side of the sampled line is */</span> <span>const</span> <span>int</span> size <span>=</span> <span>2</span> <span>*</span> kernel_size <span>+</span> <span>1</span><span>;</span> <span>/* Sample along the direction vector (horizontal or vertical) */</span> <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>-</span>kernel_size<span>;</span> i <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>i<span>)</span> <span>{</span> <span>/* Calculate the required weight for this 1D sample */</span> <span>float</span> w <span>=</span> <span>gaussianWeight</span><span>(</span><span>float</span><span>(</span>i<span>)</span><span>,</span> sigma<span>)</span><span>;</span> <span>/* Offset from the current pixel along the specified direction */</span> <span>vec2</span> offset <span>=</span> <span>vec2</span><span>(</span>i<span>)</span> <span>*</span> direction <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Read and sum up the contribution of that pixel, weighted */</span> sum <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> offset<span>)</span> <span>*</span> w<span>;</span> weightSum <span>+=</span> w<span>;</span> <span>}</span> <span>/* Return the sum, divided by the total weight (normalization) */</span> gl_FragColor <span>=</span> <span>(</span>sum <span>/</span> weightSum<span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/gaussianSeparableBlur.js">gaussianSeparableBlur.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupGaussianSeparableBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianSeparableBlur'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>passMode</span><span>:</span> <span>"pass1"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameIntermediate</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>intermediate</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>sigma</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span><span>,</span> <span>direction</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>kernelSize</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sizeRange'</span><span>)</span><span>,</span> <span>sigma</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sigmaRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[name="modeGaussSep"]'</span><span>)</span><span>,</span> <span>passModes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[name="passMode"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianSeparableBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>passMode</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianSeparableBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#passMode'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianSeparableBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianSeparableBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> gaussianBlurFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/gaussianBlurSeparable.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Pass Mode */</span> ui<span>.</span>rendering<span>.</span>passModes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to pass1 to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"pass1"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>passMode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/gaussianSeparableBlurBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>blurShaderSrc</span><span>:</span> gaussianBlurFrag<span>,</span> <span>kernelSize</span><span>:</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>,</span> <span>sigma</span><span>:</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>passMode</span><span>:</span> ctx<span>.</span>passMode <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> ui<span>.</span>benchmark<span>.</span>passMode<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>passMode<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Helper for recompilation */</span> <span>function</span> <span>reCompileBlurShader</span><span>(</span><span>blurSize</span><span>)</span> <span>{</span> ctx<span>.</span>shd<span>.</span>blur <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> gaussianBlurFrag<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"samplePosMult"</span><span>,</span> <span>"bloomStrength"</span><span>,</span> <span>"sigma"</span><span>,</span> <span>"direction"</span><span>]</span><span>,</span> <span>"#define KERNEL_SIZE "</span> <span>+</span> blurSize <span>+</span> <span>'\n'</span><span>)</span><span>;</span> <span>}</span> <span>/* Blur Shader */</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>intermediate<span>,</span> ctx<span>.</span>tex<span>.</span>frameIntermediate<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>// Clear intermediate texture to prevent lazy initialization warnings</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>intermediate<span>)</span><span>;</span> gl<span>.</span><span>clearColor</span><span>(</span><span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> KernelSizeSide <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>*</span> <span>2</span> <span>+</span> <span>1</span><span>;</span> <span>/* Separable blur: pass1/pass2 = 1 pass, combined = 2 passes */</span> <span>const</span> samplesPerPixel <span>=</span> ctx<span>.</span>passMode <span>==</span> <span>"combined"</span> <span>?</span> KernelSizeSide <span>*</span> <span>2</span> <span>:</span> KernelSizeSide<span>;</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>canvas<span>.</span>width <span>*</span> canvas<span>.</span>height <span>*</span> samplesPerPixel <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Separable Gaussian blur implementation */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>handle<span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>passMode <span>==</span> <span>"pass1"</span><span>)</span> <span>{</span> <span>/* Pass 1 only: Horizontal blur directly to screen */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span> <span>// Horizontal direction</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>if</span> <span>(</span>ctx<span>.</span>passMode <span>==</span> <span>"pass2"</span><span>)</span> <span>{</span> <span>/* Pass 2 only: Vertical blur directly to screen */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> <span>// Vertical direction</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Combined: Two-pass separable blur */</span> <span>/* Pass 1: Horizontal blur to intermediate buffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>intermediate<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span> <span>// Horizontal direction</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Pass 2: Vertical blur to final destination */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> <span>// Vertical direction</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameIntermediate<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameIntermediate<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameIntermediate <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>If you benchmark the performance, you will see a massive performance uplift, as compared to our Gaussian Blur! But there <em>is</em> a trade-off made, that&rsquo;s not quite obvious. In order to have two passes, we are writing out a new framebuffer. Remember the &ldquo;modern chips are fast but memory access in relation is not&rdquo; thing?</p><p>With a modern High-res 4k screen video game, multi-pass anything implies writing out 8.2 Million Pixels to memory, just to read them back in. With smaller kernels on high-res displays, a separable kernel may not always be faster. But with bigger kernels, it almost always is. With a massive speed-up gained, how much faster can we go?</p><h2>The magic of frequency space <a href="https://blog.frost.kiwi#the-magic-of-frequency-space">#</a></h2><p>&hellip;how about blurs that happen so fast, that they are considered free! We are doing a bit of a detour into <em><strong>Frequency Space</strong></em> image manipulation.</p><p>Any 2D image can be converted and edited in frequency space, which unlocks a whole new sort of image manipulation. To blur an image in this paradigm, we perform an <a href="https://usage.imagemagick.org/fourier/#introduction">image Fast Fourier Transform</a>, then <a href="https://usage.imagemagick.org/fourier/#blurring">mask high frequency areas to perform the blur</a> and finally do the inverse transformation.</p><p>A Fourier Transform decomposes a signal into its underlying Sine Frequencies. The output of an <em>image Fast Fourier Transform</em> are &ldquo;Magnitude&rdquo; and &ldquo;Phase&rdquo; component images. These images can be combined back together with the inverse image FFT to produce the original image again&hellip;</p><figure><img src="https://blog.frost.kiwiimg/256ScreenOverlay.png" alt="FFT Viz Input image"><figcaption>Input image for the following interactive FFT example<br>The green stripes are not an error, they are baked into the image on purpose.</figcaption></figure><p>&hellip;but before doing so, we can manipulate the frequency representation of the image in various ways. <a href="https://www.youtube.com/watch?v=qHvdLwSZmF8">Less reading, more interaction!</a> In the following interactive visualization you have the magnitude image, brightness boosted into a human visible representation on the left and the reconstructed image on the right.</p><p>For now, play around with removing energy. You can paint on the magnitude image with your fingers or with the mouse. The output image will be reconstructed accordingly. Also, play around with the circular mask and the feathering sliders. Try to build intuition for what&rsquo;s happening.</p><div><div><p><label><p>Upload <span>Image</span></p></label></p><p><label> Remove<span>Frequency Energy</span></label> <label> Add<span>Frequency Energy</span></label></p><p><label> Reset<span>Magnitude</span></label></p></div><table><tr><td><code>frequencyCutRadius</code></td></tr><tr><td><code>frequencyCutRadius</code></td><td></td><td><output>off</output></td><td></td></tr><tr><td><code>feather</code></td></tr><tr><td><code>feather</code></td><td></td><td><output>0</output></td><td></td></tr></table></div><p>The magnitude image represents the frequency make-up of the image, with the lowest frequencies in the middle and higher at the edges. Horizontal frequencies (vertical features in the image) follow the X Axis and vertical frequencies (Horizontal features in the image) follow the Y Axis, with in-betweens being the diagonals.</p><p>Repeating patterns in the image lighten up as bright-points in the magnitude representation. Or rather, their frequencies have high energy: E.g. the green grid I added. Removing it in photoshop wouldn&rsquo;t be easy! But in frequency space it <em><strong>is</strong></em> easy! Just paint over the blueish 3 diagonal streaks.</p><blockquote><p>Removing repeating features by finger-painting black over frequencies still blows me away.</p><img src="https://blog.frost.kiwi/assets/kiwis/surprised.svg"></blockquote><p>As you may have noticed, the Magnitude representation holds mirrored information. This is due to the FFT being a complex number analysis and our image having only &ldquo;real&rdquo; component pixels, leaving redundant information. The underlying number theory was covered in great detail by 3Blue1Brown:</p><figure><iframe src="https://www.youtube-nocookie.com/embed/spUNpyF58BY" title="YouTube video player" width="100%"></iframe><figcaption>But what is the Fourier Transform? A visual introduction.<br><a href="https://www.youtube.com/watch?v=spUNpyF58BY">YouTube Video</a> by <a href="https://www.youtube.com/@3blue1brown">3Blue1Brown</a></figcaption></figure><p>The underlying code this time is not written by me, but is from <a href="https://github.com/turbomaze/">@turbomaze</a>&rsquo;s repo <a href="https://github.com/turbomaze/JS-Fourier-Image-Analysis">JS-Fourier-Image-Analysis</a>. There is no standard on how you are supposed to plot the magnitude information and how the quadrants are layed out. I changed the implementation by <a href="https://github.com/turbomaze/">@turbomaze</a> to follow the <a href="https://usage.imagemagick.org/fourier/#introduction">convention used by ImageMagick</a>.</p><p>We can blur the image by painting the frequency energy black in a radius around the center, thus eliminating higher frequencies and blurring the image. If we do so with a pixel perfect circle, then we get ringing artifacts - The <a href="https://en.wikipedia.org/wiki/Gibbs_phenomenon">Gibbs phenomenon</a>. By feathering the circle, we lessen this ringing and the blur cleans up.</p><blockquote><p>Drawing a circle like this? That's essentially free on the GPU! We get the equivalent of get super big kernels for free!</p><img src="https://blog.frost.kiwi/assets/kiwis/party.svg"></blockquote><p>But not everything is gold that glitters. First of all, performance. Yes, the &ldquo;blur&rdquo; in frequency space is essentially free, but the trip to frequency space, is everything but. The main issue comes down to <a href="https://en.wikipedia.org/wiki/Butterfly_diagram">FFT transformations</a> performing writes to exponentially many pixels per input pixel, a performance killer.</p><blockquote><p><strong>And</strong> then there's still the inverse conversion!</p><img src="https://blog.frost.kiwi/assets/kiwis/facepalm.svg"></blockquote><p>But our shaders work the other way around, expressing the &ldquo;instructions to construct an output pixel&rdquo;. There <em>are</em> <a href="https://github.com/rreusser/glsl-fft">fragment shader based GPU implementations</a>, but they rely on many passes for calculation, a lot of memory access back and forth. Furthermore, non-power of two images <a href="https://rocm.docs.amd.com/projects/rocFFT/en/latest/design/bluestein.html">require a slower algorithm</a>.</p><p>This article is in the realm of fragment shaders and the graphics pipeline a GPU is part of, but there are also <a href="https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units">GPGPU</a> and <a href="https://github.com/bane9/OpenGLFFT">compute shader implementations</a> with no fragment shader specific limitations. Unfortunately the situation remains: Conversion of high-res images to frequency space is too costly in the context of realtime graphics.</p><blockquote><p>Deleting the frequencies of that grid is magical, but leaves artifacts. In reality it's worse, as my example is idealized. Click <strong>Upload Image</strong>, take a photo of a repeating pattern and see how cleanly you can get rid of it.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Then there are the artifacts I have glossed over. The FFT transformation considers the image as an infinite 2D signal. By blurring, we are bleeding through color from the neighbor copies. And that&rsquo;s not to mention various ringing artifacts that happen. <em><strong>None</strong></em> of this is unsolvable! But there a more underlying issue&hellip;</p><h3>What is a Low-Pass filter? <a href="https://blog.frost.kiwi#what-is-a-low-pass-filter%3F">#</a></h3><blockquote><p>It's a filter that removes high frequencies and leaves the low ones, easy!</p><img src="https://blog.frost.kiwi/assets/kiwis/happy.svg"></blockquote><p>Try the FFT Example again and decrease the <code>frequencyCutRadius</code> to blur. At some point the green lines disappear, right? It <em><strong>is</strong></em> a low pass filter, one where high frequencies are literally annihilated. Small bright lights in the distance? Also annihilated&hellip;</p><div><div><p><label><p>Upload <span>Image</span></p><svg><path></path></svg></label></p><p><label> Remove<span>Frequency Energy</span></label> <label> Add<span>Frequency Energy</span></label></p><p><label> Reset<span>Magnitude</span></label></p></div><table><tr><td><code>frequencyCutRadius</code></td></tr><tr><td><code>frequencyCutRadius</code></td><td></td><td><output>off</output></td><td></td></tr><tr><td><code>feather</code></td></tr><tr><td><code>feather</code></td><td></td><td><output>0</output></td><td></td></tr></table></div><p>If we were to use this to build an effect like bloom, it would remove small lights that are meant to bloom as well! Our gaussian blur on the other hand, <a href="https://en.wikipedia.org/wiki/Gaussian_blur#Low-pass_filter">also a low-pass filter</a>, samples and weights <em><strong>every</strong></em> pixel. In a way it &ldquo;<em>takes the high frequency energy and spreads it into low frequency energy</em>&rdquo;.</p><p>So Low Pass Filter &ne; Low Pass Filter, it depends on context as to what is meant by that word and the reason the article didn&rsquo;t use it until now. Frequency Space energy attenuations are simply not the correct tool for our goal of a &ldquo;basic graphics programming building block&rdquo; for visual effects.</p><blockquote><p>This is a <strong>deep misunderstanding</strong> I held for year, as in why <strong>didn't</strong> video games such a powerful tool?<output></output></p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><p>There are other frequency space image representations, not just FFT Magnitude + Phase. Another famous one is <a href="https://en.wikipedia.org/wiki/Discrete_cosine_transform">Discrete cosine transform</a>. Again, computerphile covered it in great detail in a video. As for realtime hires images, no. DCT conversion is multiple magnitudes slower. Feel free to dive deeper into frequency space&hellip;</p><figure><iframe src="https://www.youtube-nocookie.com/embed/Q2aEzeMDHMA" title="YouTube video player" width="100%"></iframe><figcaption>JPEG DCT, Discrete Cosine Transform (JPEG Pt2)<br><a href="https://www.youtube.com/watch?v=Q2aEzeMDHMA">YouTube Video</a> by <a href="https://www.youtube.com/@Computerphile">Computerphile</a></figcaption></figure><p>&hellip;as for this article, it&rsquo;s the end of our frequency space detour. We talked so much about what&rsquo;s slow on the GPU. Let&rsquo;s talk about something that&rsquo;s not just fast, but free:</p><h2>Bilinear Interpolation <a href="https://blog.frost.kiwi#bilinear-interpolation">#</a></h2><p>Reading from textures comes with a freebie. When reading between pixels, the closet four pixel are interpolated <a href="https://en.wikipedia.org/wiki/Bilinear_interpolation">bilinearly</a> to create the final read, unless you switch to <a href="https://learnopengl.com/Getting-started/Textures#:~:text=Texture%20Filtering">Nearest Neightbor mode</a>. Below you can drag the color sample with finger touch or the mouse. Take note of how and when the color changes in the respective modes.</p><div><div><p><label> Nearest Neighbor</label> <label> Bilinear</label></p><p><label> Animate</label></p></div></div><p>Since reading between pixels gets a linear mix of pixel neighbors, we can <a href="https://www.rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/">linearly interpolate part of our gaussian kernel</a>, sometimes called a <a href="https://www.rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/">Linear Gaussian</a>. By tweaking gaussian weights and reducing the amount of samples we could do a 7 &times; 7 gaussian kernel worth of information with only a 4 &times; 4 kernel, as shown in the <a href="https://www.rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/">linked article</a>.</p><blockquote><p>Though mathematically not the same, visually the result is very close. There are a lot of hand-crafted variations on this, different mixes of kernel sizes and interpolation amounts.</p><img src="https://blog.frost.kiwi/assets/kiwis/speak.svg"></blockquote><p>Bilinear interpolation allows us to resize an image by reading from it at lower resolution. In a way, it&rsquo;s a free bilinear resize built into every graphics chip, zero performance impact. But there <em>is</em> a limit - the bilinear interpolation is limited to a 2 &times; 2 sample square. Try to resize the kiwi below in different modes.</p><blockquote><p>To make this more obvious, the following canvas renders at 25% of <a href="https://en.wikipedia.org/wiki/1:1_pixel_mapping">native resolution</a>.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><div><div><p><label> Nearest Neighbor</label> <label> Bilinear</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p><svg><circle></circle><rect height="7" width="2"></rect><rect height="9" width="2"></rect></svg></div></div><blockquote><details><summary>WebGL Vertex Shader <a href="https://blog.frost.kiwishader/circleAnimationSize.vs">circleAnimationSize.vs</a></summary><pre><code><span>/* Our Vertex data for the Quad */</span> <span>attribute</span> <span>vec2</span> vtx<span>;</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>/* Position offset for the animation */</span> <span>uniform</span> <span>vec2</span> offset<span>;</span> <span>uniform</span> <span>float</span> kiwiSize<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Make the texture Coordinates read in the fragment shader coordinates */</span> uv <span>=</span> vtx <span>*</span> <span>vec2</span><span>(</span><span>0.5</span><span>,</span> <span>-</span><span>0.5</span><span>)</span> <span>+</span> <span>0.5</span><span>;</span> <span>/* Animate Quad in a circle */</span> gl_Position <span>=</span> <span>vec4</span><span>(</span>vtx <span>*</span> kiwiSize <span>+</span> offset<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwishader/simpleTexture.fs">simpleTexture.fs</a></summary><pre><code><span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> gl_FragColor <span>=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span><span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/bilinear.js">bilinear.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'./utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupBilinear</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-Bilinear'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Resolution divider for framebuffer rendering */</span> <span>const</span> resDiv <span>=</span> <span>4</span><span>;</span> <span>// Hardcoded quarter resolution</span> <span>let</span> renderFramebuffer<span>,</span> renderTexture<span>;</span> <span>let</span> buffersInitialized <span>=</span> <span>false</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>true</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>mode</span><span>:</span> <span>"nearest"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>kiwi</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>kiwiSize</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>blit</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>texture</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>kiwiSize</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#kiwiSize'</span><span>)</span><span>,</span> <span>}</span> <span>}</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to nearest to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"nearest"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimationSize <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimationSize.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>rendering<span>.</span>kiwiSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>kiwi <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimationSize<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"kiwiSize"</span><span>]</span><span>)</span><span>;</span> <span>/* Blit Shader for upscaling */</span> ctx<span>.</span>shd<span>.</span>blit <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"texture"</span><span>]</span><span>)</span><span>;</span> <span>/* Set initial shader state */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>kiwi<span>.</span>handle<span>)</span><span>;</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>/* THis genius workaround is based on @Kaiido's: https://stackoverflow.com/a/69385604/6240779 */</span> <span>function</span> <span>loadSVGAsImage</span><span>(</span><span>blob</span><span>)</span> <span>{</span> <span>return</span> <span>new</span> <span>Promise</span><span>(</span><span>(</span><span>resolve</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>const</span> img <span>=</span> <span>new</span> <span>Image</span><span>(</span><span>)</span><span>;</span> <span>const</span> url <span>=</span> <span>URL</span><span>.</span><span>createObjectURL</span><span>(</span>blob<span>)</span><span>;</span> img<span>.</span><span>onload</span> <span>=</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>URL</span><span>.</span><span>revokeObjectURL</span><span>(</span>url<span>)</span><span>;</span> <span>resolve</span><span>(</span>img<span>)</span><span>;</span> <span>}</span><span>;</span> img<span>.</span>src <span>=</span> url<span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> <span>/* Create framebuffer for quarter resolution rendering */</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>renderFramebuffer<span>)</span><span>;</span> renderFramebuffer <span>=</span> gl<span>.</span><span>createFramebuffer</span><span>(</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> renderFramebuffer<span>)</span><span>;</span> <span>/* Create RGBA framebuffer texture manually to preserve alpha */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>renderTexture<span>)</span><span>;</span> renderTexture <span>=</span> gl<span>.</span><span>createTexture</span><span>(</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> renderTexture<span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MIN_FILTER</span><span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MAG_FILTER</span><span>,</span> gl<span>.</span><span>NEAREST</span><span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_S</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_WRAP_T</span><span>,</span> gl<span>.</span><span>CLAMP_TO_EDGE</span><span>)</span><span>;</span> gl<span>.</span><span>texImage2D</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> <span>,</span> gl<span>.</span><span>RGBA</span><span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> <span>,</span> gl<span>.</span><span>RGBA</span><span>,</span> gl<span>.</span><span>UNSIGNED_BYTE</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>framebufferTexture2D</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> gl<span>.</span><span>COLOR_ATTACHMENT0</span><span>,</span> gl<span>.</span><span>TEXTURE_2D</span><span>,</span> renderTexture<span>,</span> <span>)</span><span>;</span> buffersInitialized <span>=</span> <span>true</span><span>;</span> <span>/* Load kiwi texture */</span> <span>let</span> base <span>=</span> <span>await</span> <span>fetch</span><span>(</span><span>"img/kiwi4by3.svg"</span><span>)</span><span>;</span> <span>let</span> baseBlob <span>=</span> <span>await</span> base<span>.</span><span>blob</span><span>(</span><span>)</span><span>;</span> <span>let</span> baseImage <span>=</span> <span>await</span> <span>loadSVGAsImage</span><span>(</span>baseBlob<span>)</span><span>;</span> <span>let</span> baseBitmap <span>=</span> <span>await</span> <span>createImageBitmap</span><span>(</span>baseImage<span>,</span> <span>{</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>/</span> resDiv<span>,</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>NEAREST</span><span>,</span> baseBitmap<span>,</span> <span>4</span><span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* Pass 1: Render to framebuffer at reduced resolution */</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width <span>/</span> resDiv<span>,</span> canvas<span>.</span>height <span>/</span> resDiv<span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>renderFramebuffer<span>)</span> <span>return</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> renderFramebuffer<span>)</span><span>;</span> gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span> <span>/* Use kiwi shader */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>kiwi<span>.</span>handle<span>)</span><span>;</span> <span>/* Bind kiwi texture and set filtering mode */</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MIN_FILTER</span><span>,</span> ctx<span>.</span>mode <span>==</span> <span>"nearest"</span> <span>?</span> gl<span>.</span><span>NEAREST</span> <span>:</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span> gl<span>.</span><span>texParameteri</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> gl<span>.</span><span>TEXTURE_MAG_FILTER</span><span>,</span> ctx<span>.</span>mode <span>==</span> <span>"nearest"</span> <span>?</span> gl<span>.</span><span>NEAREST</span> <span>:</span> gl<span>.</span><span>LINEAR</span><span>)</span><span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>kiwi<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kiwi<span>.</span>uniforms<span>.</span>kiwiSize<span>,</span> ui<span>.</span>rendering<span>.</span>kiwiSize<span>.</span>value<span>)</span><span>;</span> <span>/* Draw kiwi to framebuffer */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> <span>/* Use blit shader */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blit<span>.</span>handle<span>)</span><span>;</span> <span>/* Bind framebuffer texture with nearest neighbor for pixelated upscaling */</span> <span>if</span> <span>(</span><span>!</span>renderTexture<span>)</span> <span>return</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> renderTexture<span>)</span><span>;</span> <span>/* Draw full-screen quad to upscale */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>renderTexture<span>)</span><span>;</span> renderTexture <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>renderFramebuffer<span>)</span><span>;</span> renderFramebuffer <span>=</span> <span>null</span><span>;</span> buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>Nearest Neightbor looks pixelated, if the size is not at 100% size, which is equivalent to 1:1 pixel mapping. At 100% it moves &ldquo;jittery&rdquo;, as it &ldquo;snaps&rdquo; to the nearest neighbor. Bilinear keeps things smooth, but going below 50%, especially below 25%, we get exactly the same kind of aliasing, as we would get from nearest neighbor!</p><blockquote><p>You may have noticed similar aliasing when playing YouTube Videos at a very high manually selected video resolution, but in a small window. Same thing!</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>With 2 &times; 2 samples, we start skipping over color information, if the underlying pixels are smaller than half a pixel in size. Below 50% size, our bilinear interpolation starts to act like nearest neighbor interpolation. So as a result, we can shrink image in steps of 50%, without &ldquo;skipping over information&rdquo; and creating aliasing. Let&rsquo;s use that!</p><h2>Downsampling <a href="https://blog.frost.kiwi#downsampling">#</a></h2><p>One fundamental thing thing you can do in post-processing is to shrink &ldquo;downsample&rdquo; first, perform the processing at a lower resolution and upsample again. With the idea being, that you wouldn&rsquo;t notice the lowered resolution. Below is the <a href="https://blog.frost.kiwi#separable-gaussian-blur">Separable Gaussian Blur</a> again, with a variable downsample / upsample chain.</p><p>Each increase of <code>downSample</code> adds a 50% scale step. Let&rsquo;s visualize the framebuffers in play, as it gets quite complex. Here is an example of a square 1024 px&sup2; image, a <code>downSample</code> of <code>2</code> and our two pass separable Gaussian blur.</p><figure><img src="https://blog.frost.kiwiimg/framebuffer.svg" alt="Downsample and Blur Framebuffers"><figcaption>Framebuffers and their sizes, as used during the downsample + blur chain</figcaption></figure><blockquote><p>One unused optimization is that the blur can read straight from the 512 px&sup2; framebuffer and output the 256 px&sup2; directly, skipping one downsample step.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Below you have the option to skip part of the downsample or part of the upsample chain, if you have <code>downSample</code> set to higher than 1. What may not be quite obvious is why we also upsample in steps. Play around with all the dials and modes, to get a feel for what&rsquo;s happening.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>&#10060; The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p></div><p><label> Normal</label> <label> Skip Down-steps</label> <label> Skip Up-steps</label></p><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>kernelSize</code></td></tr><tr><td><code>kernelSize</code></td><td></td><td><output>7x7</output>&nbsp;px</td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>downSample</code></td></tr><tr><td><code>downSample</code></td><td></td><td><output>0</output></td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>&nbsp;%</td><td></td></tr><tr><td><code>sigma</code></td></tr><tr><td><code>sigma</code></td><td></td><td>&plusmn;<output>2.00</output>&sigma;</td><td></td></tr></table></div><blockquote><details><summary>Blur Fragment Shader <a href="https://blog.frost.kiwishader/gaussianSeparableBlur.fs">gaussianSeparableBlur.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large Kernel Sizes result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> samplePosMult<span>;</span> <span>/* Multiply to push blur strength past the kernel size */</span> <span>uniform</span> <span>float</span> sigma<span>;</span> <span>uniform</span> <span>vec2</span> direction<span>;</span> <span>/* Direction vector: (1,0) for horizontal, (0,1) for vertical */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>/* `KERNEL_SIZE` added during compilation */</span> <span>const</span> <span>int</span> kernel_size <span>=</span> KERNEL_SIZE<span>;</span> <span>float</span> <span>gaussianWeight</span><span>(</span><span>float</span> x<span>,</span> <span>float</span> sigma<span>)</span> <span>{</span> <span>/* e ^ ( - x&sup2; / 2 &sigma;&sup2; ) */</span> <span>return</span> <span>exp</span><span>(</span><span>-</span><span>(</span>x <span>*</span> x<span>)</span> <span>/</span> <span>(</span><span>2.0</span> <span>*</span> sigma <span>*</span> sigma<span>)</span><span>)</span><span>;</span> <span>}</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Variable to hold our final color for the current pixel */</span> <span>vec4</span> sum <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> <span>/* Sum of all weights */</span> <span>float</span> weightSum <span>=</span> <span>0.0</span><span>;</span> <span>/* How big one side of the sampled line is */</span> <span>const</span> <span>int</span> size <span>=</span> <span>2</span> <span>*</span> kernel_size <span>+</span> <span>1</span><span>;</span> <span>/* Sample along the direction vector (horizontal or vertical) */</span> <span>for</span> <span>(</span><span>int</span> i <span>=</span> <span>-</span>kernel_size<span>;</span> i <span>&lt;=</span> kernel_size<span>;</span> <span>++</span>i<span>)</span> <span>{</span> <span>/* Calculate the required weight for this 1D sample */</span> <span>float</span> w <span>=</span> <span>gaussianWeight</span><span>(</span><span>float</span><span>(</span>i<span>)</span><span>,</span> sigma<span>)</span><span>;</span> <span>/* Offset from the current pixel along the specified direction */</span> <span>vec2</span> offset <span>=</span> <span>vec2</span><span>(</span>i<span>)</span> <span>*</span> direction <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Read and sum up the contribution of that pixel, weighted */</span> sum <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> offset<span>)</span> <span>*</span> w<span>;</span> weightSum <span>+=</span> w<span>;</span> <span>}</span> <span>/* Return the sum, divided by the total weight (normalization) */</span> gl_FragColor <span>=</span> <span>(</span>sum <span>/</span> weightSum<span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/downsample.js">downsample.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>/* Quick note about the implementation. In here I use one framebuffer for each size step. In actually, this is *not* how it should be done. Graphics pipelines have "Mip Maps" for textures and we actually can use one texture and render each downsample step into each mip-map size. Then we also get a nice blending slider between the size provided by the hardware as well! That is unfortunately not possible in WebGL 1.0 ( ; __ ; ) I went with WebGL 1.0 for maximum compatibility across devices. */</span> <span>export</span> <span>async</span> <span>function</span> <span>setupGaussianDownsampleBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianDownsampleBlur'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>skipMode</span><span>:</span> <span>"normal"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span><span>,</span> <span>down</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>intermediate</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>nativeIntermediate</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span><span>,</span> <span>down</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>intermediate</span><span>:</span> <span>[</span><span>]</span><span>,</span> <span>nativeIntermediate</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>passthrough</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>sigma</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>kernelSize</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sizeRange'</span><span>)</span><span>,</span> <span>sigma</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#sigmaRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>downSample</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#downSampleRange'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>skipModes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[name="skipMode"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianDownsampleBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>skipMode</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianDownsampleBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#skipMode'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianDownsampleBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-GaussianDownsampleBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> gaussianBlurFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/gaussianBlurSeparable.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>updateSkipModeControls</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>==</span> <span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Skip skipMode radio buttons */</span> <span>if</span> <span>(</span>radio<span>.</span>name <span>===</span> <span>"skipMode"</span><span>)</span> <span>return</span><span>;</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Skip Mode */</span> ui<span>.</span>rendering<span>.</span>skipModes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to normal to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"normal"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>skipMode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Helper function to update skip mode controls */</span> <span>function</span> <span>updateSkipModeControls</span><span>(</span><span>)</span> <span>{</span> <span>const</span> hasIntermediarySteps <span>=</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>value <span>&gt;</span> <span>1</span><span>;</span> ui<span>.</span>rendering<span>.</span>skipModes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> radio<span>.</span>disabled <span>=</span> <span>!</span>hasIntermediarySteps<span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Reset to normal if disabled */</span> <span>if</span> <span>(</span><span>!</span>hasIntermediarySteps <span>&amp;&amp;</span> ctx<span>.</span>skipMode <span>!==</span> <span>"normal"</span><span>)</span> <span>{</span> ctx<span>.</span>skipMode <span>=</span> <span>"normal"</span><span>;</span> <span>}</span> <span>/* Always sync UI radio buttons with current ctx.skipMode */</span> ui<span>.</span>rendering<span>.</span>skipModes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> radio<span>.</span>checked <span>=</span> <span>(</span>radio<span>.</span>value <span>===</span> ctx<span>.</span>skipMode<span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Initialize skip mode controls */</span> <span>updateSkipModeControls</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/downsampleBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>blurShaderSrc</span><span>:</span> gaussianBlurFrag<span>,</span> <span>kernelSize</span><span>:</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>,</span> <span>sigma</span><span>:</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>downSample</span><span>:</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>value<span>,</span> <span>skipMode</span><span>:</span> ctx<span>.</span>skipMode <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> ui<span>.</span>benchmark<span>.</span>skipMode<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>skipMode<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Simple Passthrough */</span> ctx<span>.</span>shd<span>.</span>passthrough <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> simpleTexture<span>)</span><span>;</span> <span>/* Helper for recompilation */</span> <span>function</span> <span>reCompileBlurShader</span><span>(</span><span>blurSize</span><span>)</span> <span>{</span> ctx<span>.</span>shd<span>.</span>blur <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> gaussianBlurFrag<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"samplePosMult"</span><span>,</span> <span>"bloomStrength"</span><span>,</span> <span>"sigma"</span><span>,</span> <span>"direction"</span><span>]</span><span>,</span> <span>"#define KERNEL_SIZE "</span> <span>+</span> blurSize <span>+</span> <span>'\n'</span><span>)</span><span>;</span> <span>}</span> <span>/* Blur Shader */</span> <span>reCompileBlurShader</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value<span>)</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Add native resolution intermediate buffer for separable blur */</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>nativeIntermediate<span>)</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>nativeIntermediate<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>nativeIntermediate<span>,</span> ctx<span>.</span>tex<span>.</span>nativeIntermediate<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>const</span> maxDown <span>=</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>max<span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>max<span>;</span> <span>++</span>i<span>)</span> <span>{</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>intermediate<span>[</span>i<span>]</span><span>)</span><span>;</span> <span>}</span> ctx<span>.</span>fb<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>tex<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>tex<span>.</span>intermediate <span>=</span> <span>[</span><span>]</span><span>;</span> <span>let</span> w <span>=</span> canvas<span>.</span>width<span>,</span> h <span>=</span> canvas<span>.</span>height<span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> maxDown<span>;</span> <span>++</span>i<span>)</span> <span>{</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> w <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> h <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> <span>const</span> <span>[</span>fb<span>,</span> tex<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> w<span>,</span> h<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>down<span>.</span><span>push</span><span>(</span>fb<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>down<span>.</span><span>push</span><span>(</span>tex<span>)</span><span>;</span> <span>const</span> <span>[</span>intermediateFb<span>,</span> intermediateTex<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> w<span>,</span> h<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate<span>.</span><span>push</span><span>(</span>intermediateFb<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>intermediate<span>.</span><span>push</span><span>(</span>intermediateTex<span>)</span><span>;</span> <span>}</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>/* Perform separable blur: horizontal pass followed by vertical pass */</span> <span>function</span> <span>performSeparableBlur</span><span>(</span><span>srcTexture<span>,</span> targetFB<span>,</span> width<span>,</span> height<span>,</span> intermediateFB<span>,</span> intermediateTex<span>,</span> bloomStrength</span><span>)</span> <span>{</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>handle<span>)</span><span>;</span> <span>/* Set common uniforms */</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> width<span>,</span> <span>1.0</span> <span>/</span> height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>sigma<span>,</span> Math<span>.</span><span>max</span><span>(</span>ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>/</span> ui<span>.</span>blur<span>.</span>sigma<span>.</span>value<span>,</span> <span>0.001</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> bloomStrength<span>)</span><span>;</span> <span>/* Horizontal pass */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> intermediateFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> width<span>,</span> height<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>1.0</span><span>,</span> <span>0.0</span><span>)</span><span>;</span> <span>// Horizontal</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTexture<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Vertical pass */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> targetFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> width<span>,</span> height<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>blur<span>.</span>uniforms<span>.</span>direction<span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> <span>// Vertical</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> intermediateTex<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> KernelSizeSide <span>=</span> ui<span>.</span>blur<span>.</span>kernelSize<span>.</span>value <span>*</span> <span>2</span> <span>+</span> <span>1</span><span>;</span> <span>const</span> effectiveRes <span>=</span> <span>[</span>Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>+</span>ui<span>.</span>blur<span>.</span>downSample<span>.</span>value<span>)</span><span>,</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>+</span>ui<span>.</span>blur<span>.</span>downSample<span>.</span>value<span>)</span><span>]</span><span>;</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>effectiveRes<span>[</span><span>]</span> <span>*</span> effectiveRes<span>[</span><span>1</span><span>]</span> <span>*</span> KernelSizeSide <span>*</span> <span>2</span> <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* down-sample chain */</span> <span>const</span> levels <span>=</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>value<span>;</span> <span>let</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>frame<span>;</span> <span>let</span> w <span>=</span> canvas<span>.</span>width<span>,</span> h <span>=</span> canvas<span>.</span>height<span>;</span> <span>if</span> <span>(</span>levels <span>&gt;</span> <span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>skipMode <span>===</span> <span>"skipDown"</span><span>)</span> <span>{</span> <span>/* Skip downsample steps: jump directly to target level and blur */</span> <span>const</span> lastDownsampleFB <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>const</span> lastIntermediateFB <span>=</span> ctx<span>.</span>fb<span>.</span>intermediate<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>const</span> lastIntermediateTex <span>=</span> ctx<span>.</span>tex<span>.</span>intermediate<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>/* Calculate target resolution directly */</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> levels<span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> levels<span>)</span><span>;</span> <span>const</span> bloomStrength <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> <span>performSeparableBlur</span><span>(</span>srcTex<span>,</span> lastDownsampleFB<span>,</span> w<span>,</span> h<span>,</span> lastIntermediateFB<span>,</span> lastIntermediateTex<span>,</span> bloomStrength<span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Normal mode: Downsample up to the second to last level */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>)</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> levels <span>-</span> <span>1</span><span>;</span> <span>++</span>i<span>)</span> <span>{</span> <span>const</span> fb <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>;</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> w <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> h <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> fb<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> w<span>,</span> h<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>gl<span>.</span><span>getUniformLocation</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>,</span> <span>"texture"</span><span>)</span><span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>;</span> <span>}</span> <span>/* Blur into the last downsample buffer */</span> <span>const</span> lastDownsampleFB <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>const</span> lastIntermediateFB <span>=</span> ctx<span>.</span>fb<span>.</span>intermediate<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>const</span> lastIntermediateTex <span>=</span> ctx<span>.</span>tex<span>.</span>intermediate<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> w <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> h <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> <span>const</span> bloomStrength <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> <span>performSeparableBlur</span><span>(</span>srcTex<span>,</span> lastDownsampleFB<span>,</span> w<span>,</span> h<span>,</span> lastIntermediateFB<span>,</span> lastIntermediateTex<span>,</span> bloomStrength<span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>levels <span>-</span> <span>1</span><span>]</span><span>;</span> <span>}</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Run Gaussian blur at native resolution when no downsample */</span> <span>const</span> bloomStrength <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> <span>performSeparableBlur</span><span>(</span>srcTex<span>,</span> ctx<span>.</span>fb<span>.</span>final<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>,</span> ctx<span>.</span>fb<span>.</span>nativeIntermediate<span>,</span> ctx<span>.</span>tex<span>.</span>nativeIntermediate<span>,</span> bloomStrength<span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>;</span> <span>}</span> <span>/* Upsample chain */</span> <span>if</span> <span>(</span>levels <span>&gt;</span> <span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>skipMode <span>===</span> <span>"skipUp"</span><span>)</span> <span>{</span> <span>/* Skip upsample steps: srcTex stays at the lowest resolution */</span> <span>/* Final pass will handle upscaling to full resolution */</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Normal mode: Upsample through the mip levels */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>)</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> levels <span>-</span> <span>2</span><span>;</span> i <span>&gt;=</span> <span>;</span> i<span>--</span><span>)</span> <span>{</span> <span>const</span> fb <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>;</span> <span>let</span> upsampleW <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> <span>let</span> upsampleH <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> fb<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> upsampleW<span>,</span> upsampleH<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>gl<span>.</span><span>getUniformLocation</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>,</span> <span>"texture"</span><span>)</span><span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>;</span> <span>}</span> <span>}</span> <span>}</span> <span>/* Final pass to present to screen (with upscaling if needed) */</span> <span>/* Skip final pass in bloom mode with no downsampling to avoid feedback loop */</span> <span>if</span> <span>(</span><span>!</span><span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>&amp;&amp;</span> levels <span>==</span> <span>)</span><span>)</span> <span>{</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>gl<span>.</span><span>getUniformLocation</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>,</span> <span>"texture"</span><span>)</span><span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>nativeIntermediate<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>nativeIntermediate <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>nativeIntermediate<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>nativeIntermediate <span>=</span> <span>null</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> ui<span>.</span>blur<span>.</span>downSample<span>.</span>max<span>;</span> <span>++</span>i<span>)</span> <span>{</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>intermediate<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate<span>[</span>i<span>]</span><span>)</span><span>;</span> <span>}</span> ctx<span>.</span>tex<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>fb<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>tex<span>.</span>intermediate <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>With each downsample step, our kernel covers more and more area, thus increasing the blur radius. Performance is again, a massive lift up, as we quadratically get less and less pixels to blur with each step. We get bigger blurs with the same <code>kernelSize</code> and with stronger blurs in <code>Scene</code> mode, the resolution drop is not visible.</p><p>With smaller blurs you will get &ldquo;shimmering&rdquo;, as aliasing artifacts begin, even with our bilinear filtering in place. Small blurs and lower resolution don&rsquo;t mix. This is <em><strong>especially</strong></em> painful in bloom mode with strong <code>lightBrightness</code>, as lights will start to &ldquo;turn on and off&rdquo; as they are not resolved correctly at lower resolutions.</p><blockquote><p>There must be some kind of sweet spot of low resolution and blur strong enough to hide the the low resolution.</p><img src="https://blog.frost.kiwi/assets/kiwis/think.svg"></blockquote><p>Skipping Downsample steps will bring obviously horrible aliasing. As for upsampling, there is a deep misunderstanding I held for years, until I read the SIGGRAPH 2014 presentation <a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Next Generation Post Processing in Call of Duty: Advanced Warfare</a> by graphics magician <a href="https://www.iryoku.com/">Jorge Jimenez</a>. One page stuck out to me:</p><figure><img src="https://blog.frost.kiwiimg/jimenez2014.png" alt="Page 159 from presentation Next Generation Post Processing in Call of Duty: Advanced Warfare by Jorge Jimenez"><figcaption>Page 159 from presentation <a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Next Generation Post Processing in Call of Duty: Advanced Warfare</a> by <a href="https://www.iryoku.com/">Jorge Jimenez</a></figcaption></figure><p>With upsampling, even when going from low res to high res in one jump, we aren&rsquo;t &ldquo;skipping&rdquo; any information, right? Nothing is missed. But if you look closely at the above demo with larger <code>downSample</code> chains with <code>Skip Upsample Steps</code> mode, then you will see a vague grid like artifact appearing, especially with strong blurs. <a href="https://blog.frost.kiwi#addendum">This point was expanded in the addendum</a>.</p><figure><figcaption>Visualization of the bilinear interpolation (<a href="https://en.wikipedia.org/wiki/Bicubic_interpolation">Source</a>)</figcaption></figure><p>How to keeps things smooth when upsampling is the field of &ldquo;Reconstruction filters&rdquo;. By skipping intermediate upsampling steps we are performing a 2 &times; 2 sample bilinear reconstruction of very small pixels. As a result we get the bilinear filtering characteristic pyramid shaped hot spots. <em><strong>How</strong></em> we upscale matters.</p><h3>Smooth Blur Animation <a href="https://blog.frost.kiwi#smooth-blur-animation">#</a></h3><p>One fundamental challenge with advanced blur algorithms is that it becomes challenging to get smooth blur sliders and smooth blur strength animations. Eg. with our separable gaussian blur, you could set <code>kernelSize</code> to the maximum required and adjust <code>samplePosMultiplier</code> smoothly between 0% and 100%.</p><p>With downsampling in the picture, this becomes more difficult and solutions to this are very context dependant, so we won&rsquo;t dive into it. One approach you see from time to time is to simply give up on animating blur strength and blend between a blurred and unblurred version of the scene, as shown below. Visually, not very pleasing.</p><h2>Kawase Blur <a href="https://blog.frost.kiwi#kawase-blur">#</a></h2><p>Now we get away from the classical blur approaches. It&rsquo;s the early 2000s and graphics programmer <a href="https://www.siliconstudio.co.jp/middleware/yebis/en/">Masaki Kawase</a>, today senior graphics programmer at Tokyo based company <a href="https://www.siliconstudio.co.jp/">Silicon Studio</a>, is programming the Xbox video game <a href="https://www.youtube.com/watch?v=JjR9VugWoHY">DOUBLE-S.T.E.A.L</a>, a game with vibrant post-processing effects.</p><p>During the creation of those visual effects, <a href="https://www.siliconstudio.co.jp/middleware/yebis/en/">Masaki Kawase</a> used a new blurring technique that he presented in the 2003 Game Developers Conference talk <a href="https://gdcvault.com/browse?keyword=Frame+Buffer+Postprocessing+Effects">Frame Buffer Postprocessing Effects in DOUBLE-S.T.E.A.L (Wreckless)</a>. This technique became later referred to as the &ldquo;Kawase Blur&rdquo;. Let&rsquo;s take a look at it:</p><figure><figcaption>Sample placement in what later become known as the "Kawase Blur"<br>Excerpt from GDC presentation <a href="https://web.archive.org/web/20060909063116/http://www.daionet.gr.jp/~masa/archives/GDC2003_DSTEAL.ppt">Frame Buffer Postprocessing Effects in DOUBLE-S.T.E.A.L</a> (2003)</figcaption></figure><p>This technique does not have a <code>kernelSize</code> parameter anymore. It works in passes of 4 equally weighted samples, placed diagonally from the center output pixel, in the middle where the corners of 4 pixels touch. These samples get color contributions equally from their neighbors, due to bilinear filtering.</p><blockquote><p>This is new, there is no center pixel sample and, except for the required normalization, no explicit weights! The weighting happens as a result of bilinear filtering.</p><img src="https://blog.frost.kiwi/assets/kiwis/teach.svg"></blockquote><p>After a pass is complete, that pass is used as the input to the next pass, where the outer 4 diagonal samples increase in distance by one pixel length. With each pass, this distance grows. Two framebuffers are required for this, which switch between being input and output between passes. This setup is often called &ldquo;ping-ponging&rdquo;.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>L The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p><svg><circle></circle><rect height="7" width="2"></rect><rect height="9" width="2"></rect></svg></div><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>iterations</code></td></tr><tr><td><code>iterations</code></td><td></td><td><output>3</output></td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>%</td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>%</td><td></td></tr></table></div><blockquote><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwishader/kawase.fs">kawase.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large iterations result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> samplePosMult<span>;</span> <span>/* Multiply to push blur strength past the pixel offset */</span> <span>uniform</span> <span>float</span> pixelOffset<span>;</span> <span>/* Pixel offset for this Kawase iteration */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Kawase blur samples 4 corners in a diamond pattern */</span> <span>vec2</span> o <span>=</span> <span>vec2</span><span>(</span>pixelOffset <span>+</span> <span>0.5</span><span>)</span> <span>*</span> samplePosMult <span>*</span> frameSizeRCP<span>;</span> <span>/* Sample the 4 diagonal corners with equal weight */</span> <span>vec4</span> color <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* top-right */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* top-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* bottom-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* bottom-right */</span> color <span>/=</span> <span>4.0</span><span>;</span> <span>/* Apply bloom strength and output */</span> gl_FragColor <span>=</span> color <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/kawase.js">kawase.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupKawaseBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-KawaseBlur'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameIntermediate1</span><span>:</span> <span>null</span><span>,</span> <span>frameIntermediate2</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>intermediate1</span><span>:</span> <span>null</span><span>,</span> <span>intermediate2</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>kawase</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>samplePosMult</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span><span>,</span> <span>pixelOffset</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterationsRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[name="modeKawase"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-KawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>kawaseIterations</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-KawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#kawaseIterations'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-KawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-KawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> kawaseFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/kawase.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>// Lock/unlock samplePos based on iterations</span> <span>const</span> iterations <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>iterations<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> iterations <span>===</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> iterations <span>===</span> <span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/kawaseBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>kawaseShaderSrc</span><span>:</span> kawaseFrag<span>,</span> <span>kawaseIterations</span><span>:</span> ui<span>.</span>blur<span>.</span>iterations<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> ui<span>.</span>benchmark<span>.</span>kawaseIterations<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>kawaseIterations<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Kawase Blur Shader */</span> ctx<span>.</span>shd<span>.</span>kawase <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> kawaseFrag<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"samplePosMult"</span><span>,</span> <span>"pixelOffset"</span><span>,</span> <span>"bloomStrength"</span><span>]</span><span>)</span><span>;</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate1<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate2<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>intermediate1<span>,</span> ctx<span>.</span>tex<span>.</span>frameIntermediate1<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>intermediate2<span>,</span> ctx<span>.</span>tex<span>.</span>frameIntermediate2<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>// Clear intermediate textures to prevent lazy initialization warnings</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>intermediate1<span>)</span><span>;</span> gl<span>.</span><span>clearColor</span><span>(</span><span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>intermediate2<span>)</span><span>;</span> gl<span>.</span><span>clearColor</span><span>(</span><span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>0.0</span><span>,</span> <span>1.0</span><span>)</span><span>;</span> gl<span>.</span><span>clear</span><span>(</span>gl<span>.</span><span>COLOR_BUFFER_BIT</span><span>)</span><span>;</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> iterations <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>iterations<span>.</span>value<span>)</span><span>;</span> <span>/* Kawase blur: 4 samples per iteration, 0 iterations = no blur (1 sample) */</span> <span>const</span> samplesPerPixel <span>=</span> iterations <span>===</span> <span>?</span> <span>1</span> <span>:</span> iterations <span>*</span> <span>4</span><span>;</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>canvas<span>.</span>width <span>*</span> canvas<span>.</span>height <span>*</span> samplesPerPixel <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Handle 0 iterations case - direct copy to output */</span> <span>if</span> <span>(</span>iterations <span>===</span> <span>)</span> <span>{</span> <span>/* Direct copy from scene to final destination using Kawase shader with no offset */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> <span>// null = screen</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Use Kawase shader with pixelOffset=0 and samplePosMult=0 for simple copy */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> <span>0.0</span><span>)</span><span>;</span> <span>// No offset</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>pixelOffset<span>,</span> <span>0.0</span><span>)</span><span>;</span> <span>// No offset</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Kawase Blur implementation - iterative ping-pong between framebuffers */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>width<span>,</span> <span>1.0</span> <span>/</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>samplePosMult<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> <span>/* Apply brightness only on final iteration to match Gaussian behavior */</span> <span>let</span> currentInputTex <span>=</span> ctx<span>.</span>tex<span>.</span>frame<span>;</span> <span>let</span> currentInputFB <span>=</span> ctx<span>.</span>fb<span>.</span>scene<span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> iterations<span>;</span> i<span>++</span><span>)</span> <span>{</span> <span>/* Determine output framebuffer */</span> <span>let</span> outputFB<span>,</span> outputTex<span>;</span> <span>if</span> <span>(</span>i <span>===</span> iterations <span>-</span> <span>1</span><span>)</span> <span>{</span> <span>/* Last iteration - output to final destination */</span> outputFB <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> <span>// null = screen</span> <span>}</span> <span>else</span> <span>{</span> <span>/* Intermediate iterations - ping-pong between buffers */</span> <span>if</span> <span>(</span>i <span>%</span> <span>2</span> <span>===</span> <span>)</span> <span>{</span> outputFB <span>=</span> ctx<span>.</span>fb<span>.</span>intermediate1<span>;</span> outputTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameIntermediate1<span>;</span> <span>}</span> <span>else</span> <span>{</span> outputFB <span>=</span> ctx<span>.</span>fb<span>.</span>intermediate2<span>;</span> outputTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameIntermediate2<span>;</span> <span>}</span> <span>}</span> <span>/* Setup output framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> outputFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Bind input texture */</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> currentInputTex<span>)</span><span>;</span> <span>/* Set pixel offset for this iteration */</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>pixelOffset<span>,</span> i<span>)</span><span>;</span> <span>/* Apply distributed brightness, due to color precision limitations and multi pass nature of this blur algorithm */</span> <span>const</span> finalBrightness <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> <span>const</span> distributedBrightness <span>=</span> Math<span>.</span><span>pow</span><span>(</span>finalBrightness<span>,</span> <span>1.0</span> <span>/</span> iterations<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>kawase<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> distributedBrightness<span>)</span><span>;</span> <span>/* Draw */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>/* Setup for next iteration */</span> <span>if</span> <span>(</span>i <span>&lt;</span> iterations <span>-</span> <span>1</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>i <span>%</span> <span>2</span> <span>===</span> <span>)</span> <span>{</span> currentInputTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameIntermediate1<span>;</span> <span>}</span> <span>else</span> <span>{</span> currentInputTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameIntermediate2<span>;</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameIntermediate1<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameIntermediate1 <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameIntermediate2<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameIntermediate2 <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate1<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate1 <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>intermediate2<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>intermediate2 <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Initialize UI state */</span> <span>const</span> initialIterations <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>iterations<span>.</span>value<span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> initialIterations <span>===</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> initialIterations <span>===</span> <span>;</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>Akin to the <a href="https://en.wikipedia.org/wiki/Central_limit_theorem">Central Limit Theorem</a> making repeated passes of a box-blur approach a gaussian blur, our Kawase blur provides a smooth gaussian-like results, due to the iterative convolution at play. Technically, there are two convolutions happening at the same time - bilinear filtering and the diagonal samples with increasing distance.</p><blockquote><p>Two different origins: The Gaussian blur came from a mathematical concept entering graphics programming. The Kawase blur was born to get the most out of what hardware provides for free.</p><img src="https://blog.frost.kiwi/assets/kiwis/book.svg"></blockquote><p>It is not a separable convolution, due to its diagonal sampling nature. As no downsampling is used, this means that we write all pixels out to memory, each pass. Even if we could separate, the cost of writing out twice as many passes to memory would outweigh the benefit of going from 4 samples per-pass to 2.</p><blockquote><p>With so few samples, you cannot increase <code>samplePosMultiplier</code> without instantly getting artifacts. We mess up the sample pattern.</p><img src="https://blog.frost.kiwi/assets/kiwis/detective.svg"></blockquote><p>Take note of textures taps: They grow linearly, with increasing blur radius. In DOUBLE-S.T.E.A.L, Masaki Kawase used it to create the bloom effect, calculated at a lower resolution. But there is one more evolution coming up - We have blur, we have downsampling. Two separate concepts. What if we &ldquo;fused&rdquo; them?</p><h2>Dual Kawase Blur <a href="https://blog.frost.kiwi#dual-kawase-blur">#</a></h2><p><a href="https://theorg.com/org/arm/org-chart/marius-bjorge">Marius Bj&oslash;rge</a>, principal graphics architect at <a href="https://www.arm.com/">ARM</a> took this thought to its logical conclusion, when he was optimizing mobile graphics rendering with ARM graphics chips. In a SIGGRAPH 2015 <a href="https://dl.acm.org/doi/10.1145/2776880.2787664">talk</a> he presented an algorithm, that would later become knows as the &#10024; Dual Kawase Blur &#127775;, this article&rsquo;s final destination.</p><figure><img src="https://blog.frost.kiwiimg/dualKawasePattern.jpg" alt="Dual Kawase sampling patterns"><figcaption>Dual Kawase sampling patterns<br>Excerpt from <a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Bandwidth-Efficient Rendering</a>, talk by <a href="https://theorg.com/org/arm/org-chart/marius-bjorge">Marius Bj&oslash;rge</a></figcaption></figure><p>This blur works with the idea of Masaki Kawase&rsquo;s &ldquo;placing diagonal samples at increasing distance&rdquo;, but does so in conjunction with downsampling, which effectively performs this &ldquo;increase in distance&rdquo;. There is also a dedicated upsample filter. I&rsquo;ll let Marius Bj&oslash;rge explain this one, an excerpt <a href="https://dl.acm.org/doi/suppl/10.1145/2776880.2787664/suppl_file/a184.mp4">from his talk mentioned above</a></p><blockquote><strong>Marius Bj&oslash;rge</strong>: For lack for a better name, dual filter is something I come up with when playing with different downsampling and upsampling patterns. It's sort of a derivative of the Kawase filter, but instead of ping-ponging between two equally sized textures, this filter works by having the same filter for down sampling and having another filter for upsampling.<p>The downsample filter works by sampling four pixels covering the target pixel, and you also have four pixels on the corner of this pixel to smudge in some information from all the neighboring pixels. So the end upsample filter works by reconstructing information from the downsample pass. So this pattern was chosen to get a nice smooth circular shape.</p></blockquote><p>Let&rsquo;s try it. This time, there are two blur shaders, as there is an upsample and downsample stage. Again, there is no <code>kernelSize</code>. Instead there are <code>downsampleLevels</code>, which performs the blur in conjunction with the down sampling. Play around with all the slider and get a feel for it.</p><div><div><p><label> Scene</label> <label> Lights</label> <label> Bloom</label></p><p><label> Animate</label></p></div><div><canvas></canvas><p>L The browser killed this WebGL Context, please reload the page. If this happened as the result of a long benchmark, decrease the iteration count. On some platforms (iOS / iPad) you may have to restart the browser App completely, as the browser will temporarily refuse to allow this site to run WebGL again.</p></div><table><tr><td><p><span><strong>FPS:</strong><output>?</output>/<output>?</output>ms </span><span><strong>Resolution:</strong><output>?</output>x<output>?</output></span><span><strong>Texture Taps:</strong><output>?</output></span></p></td></tr><tr><td><code>downsampleLevels</code></td></tr><tr><td><code>downsampleLevels</code></td><td></td><td><output>2</output></td><td></td></tr><tr><td><code>samplePosMultiplier</code></td></tr><tr><td><code>samplePosMultiplier</code></td><td></td><td><output>100</output>%</td><td></td></tr><tr><td><code>lightBrightness</code></td></tr><tr><td><code>lightBrightness</code></td><td></td><td><output>100</output>%</td><td></td></tr></table></div><blockquote><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwishader/dual-kawase-down.fs">dual-kawase-down.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large iterations result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> offset<span>;</span> <span>/* Offset multiplier for blur strength */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Dual Kawase downsample: sample center + 4 diagonal corners */</span> <span>vec2</span> halfpixel <span>=</span> frameSizeRCP <span>*</span> <span>0.5</span><span>;</span> <span>vec2</span> o <span>=</span> halfpixel <span>*</span> offset<span>;</span> <span>/* Sample center with 4x weight */</span> <span>vec4</span> color <span>=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv<span>)</span> <span>*</span> <span>4.0</span><span>;</span> <span>/* Sample 4 diagonal corners with 1x weight each */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* bottom-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* bottom-right */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* top-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span><span>;</span> <span>/* top-right */</span> <span>/* Apply bloom strength and normalize by total weight (8) */</span> gl_FragColor <span>=</span> <span>(</span>color <span>/</span> <span>8.0</span><span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Fragment Shader <a href="https://blog.frost.kiwishader/dual-kawase-up.fs">dual-kawase-up.fs</a></summary><pre><code><span>/* Float precision to highp, if supported. Large iterations result many color contributions and thus require the highest precision to avoid clipping. Required in WebGL 1 Shaders and depending on platform may have no effect */</span> <span>precision</span> <span>highp</span> <span>float</span><span>;</span> <span>/* UV coordinates, passed in from the Vertex Shader */</span> <span>varying</span> <span>vec2</span> uv<span>;</span> <span>uniform</span> <span>vec2</span> frameSizeRCP<span>;</span> <span>/* Resolution Reciprocal */</span> <span>uniform</span> <span>float</span> offset<span>;</span> <span>/* Offset multiplier for blur strength */</span> <span>uniform</span> <span>float</span> bloomStrength<span>;</span> <span>/* bloom strength */</span> <span>uniform</span> <span>sampler2D</span> texture<span>;</span> <span>void</span> <span>main</span><span>(</span><span>)</span> <span>{</span> <span>/* Dual Kawase upsample: sample 4 edge centers + 4 diagonal corners */</span> <span>vec2</span> halfpixel <span>=</span> frameSizeRCP <span>*</span> <span>0.5</span><span>;</span> <span>vec2</span> o <span>=</span> halfpixel <span>*</span> offset<span>;</span> <span>vec4</span> color <span>=</span> <span>vec4</span><span>(</span><span>0.0</span><span>)</span><span>;</span> <span>/* Sample 4 edge centers with 1x weight each */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x <span>*</span> <span>2.0</span><span>,</span> <span>0.0</span><span>)</span><span>)</span><span>;</span> <span>/* left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x <span>*</span> <span>2.0</span><span>,</span> <span>0.0</span><span>)</span><span>)</span><span>;</span> <span>/* right */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> <span>-</span>o<span>.</span>y <span>*</span> <span>2.0</span><span>)</span><span>)</span><span>;</span> <span>/* bottom */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>0.0</span><span>,</span> o<span>.</span>y <span>*</span> <span>2.0</span><span>)</span><span>)</span><span>;</span> <span>/* top */</span> <span>/* Sample 4 diagonal corners with 2x weight each */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span> <span>*</span> <span>2.0</span><span>;</span> <span>/* top-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> o<span>.</span>y<span>)</span><span>)</span> <span>*</span> <span>2.0</span><span>;</span> <span>/* top-right */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span><span>-</span>o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span> <span>*</span> <span>2.0</span><span>;</span> <span>/* bottom-left */</span> color <span>+=</span> <span>texture2D</span><span>(</span>texture<span>,</span> uv <span>+</span> <span>vec2</span><span>(</span> o<span>.</span>x<span>,</span> <span>-</span>o<span>.</span>y<span>)</span><span>)</span> <span>*</span> <span>2.0</span><span>;</span> <span>/* bottom-right */</span> <span>/* Apply bloom strength and normalize by total weight (12) */</span> gl_FragColor <span>=</span> <span>(</span>color <span>/</span> <span>12.0</span><span>)</span> <span>*</span> bloomStrength<span>;</span> <span>}</span></code></pre></details><details><summary>WebGL Javascript <a href="https://blog.frost.kiwijs/blur/dual-kawase.js">dual-kawase.js</a></summary><pre><code><span>import</span> <span>*</span> <span>as</span> util <span>from</span> <span>'../utility.js'</span> <span>export</span> <span>async</span> <span>function</span> <span>setupDualKawaseBlur</span><span>(</span><span>)</span> <span>{</span> <span>/* Init */</span> <span>const</span> WebGLBox <span>=</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-DualKawaseBlur'</span><span>)</span><span>;</span> <span>const</span> canvas <span>=</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'canvas'</span><span>)</span><span>;</span> <span>/* Circle Rotation size */</span> <span>const</span> radius <span>=</span> <span>0.12</span><span>;</span> <span>/* Main WebGL 1.0 Context */</span> <span>const</span> gl <span>=</span> canvas<span>.</span><span>getContext</span><span>(</span><span>'webgl'</span><span>,</span> <span>{</span> <span>preserveDrawingBuffer</span><span>:</span> <span>false</span><span>,</span> <span>antialias</span><span>:</span> <span>false</span><span>,</span> <span>alpha</span><span>:</span> <span>false</span><span>,</span> <span>}</span><span>)</span><span>;</span> <span>/* State and Objects */</span> <span>const</span> ctx <span>=</span> <span>{</span> <span>/* State for of the Rendering */</span> <span>mode</span><span>:</span> <span>"scene"</span><span>,</span> <span>flags</span><span>:</span> <span>{</span> <span>isRendering</span><span>:</span> <span>false</span><span>,</span> <span>buffersInitialized</span><span>:</span> <span>false</span><span>,</span> <span>initComplete</span><span>:</span> <span>false</span><span>,</span> <span>benchMode</span><span>:</span> <span>false</span> <span>}</span><span>,</span> <span>/* Textures */</span> <span>tex</span><span>:</span> <span>{</span> <span>sdr</span><span>:</span> <span>null</span><span>,</span> <span>selfIllum</span><span>:</span> <span>null</span><span>,</span> <span>frame</span><span>:</span> <span>null</span><span>,</span> <span>frameFinal</span><span>:</span> <span>null</span><span>,</span> <span>down</span><span>:</span> <span>[</span><span>]</span> <span>}</span><span>,</span> <span>/* Framebuffers */</span> <span>fb</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>null</span><span>,</span> <span>final</span><span>:</span> <span>null</span><span>,</span> <span>down</span><span>:</span> <span>[</span><span>]</span> <span>}</span><span>,</span> <span>/* Shaders and their respective Resource Locations */</span> <span>shd</span><span>:</span> <span>{</span> <span>scene</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>passthrough</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span> <span>}</span><span>,</span> <span>downsample</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>upsample</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>frameSizeRCP</span><span>:</span> <span>null</span><span>,</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>bloomStrength</span><span>:</span> <span>null</span> <span>}</span> <span>}</span><span>,</span> <span>bloom</span><span>:</span> <span>{</span> <span>handle</span><span>:</span> <span>null</span><span>,</span> <span>uniforms</span><span>:</span> <span>{</span> <span>offset</span><span>:</span> <span>null</span><span>,</span> <span>radius</span><span>:</span> <span>null</span><span>,</span> <span>texture</span><span>:</span> <span>null</span><span>,</span> <span>textureAdd</span><span>:</span> <span>null</span> <span>}</span> <span>}</span> <span>}</span> <span>}</span><span>;</span> <span>/* UI Elements */</span> <span>const</span> ui <span>=</span> <span>{</span> <span>display</span><span>:</span> <span>{</span> <span>spinner</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'svg'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>contextLoss</span><span>:</span> canvas<span>.</span>parentElement<span>.</span><span>querySelector</span><span>(</span><span>'div'</span><span>,</span> canvas<span>.</span>parentElement<span>)</span><span>,</span> <span>fps</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#fps'</span><span>)</span><span>,</span> <span>ms</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#ms'</span><span>)</span><span>,</span> <span>width</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#width'</span><span>)</span><span>,</span> <span>height</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#height'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#taps'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>blur</span><span>:</span> <span>{</span> <span>downsample</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#downsampleRange'</span><span>)</span><span>,</span> <span>samplePos</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRange'</span><span>)</span><span>,</span> <span>samplePosReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#samplePosRangeReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>rendering</span><span>:</span> <span>{</span> <span>animate</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#animateCheck'</span><span>)</span><span>,</span> <span>modes</span><span>:</span> WebGLBox<span>.</span><span>querySelectorAll</span><span>(</span><span>'input[type="radio"]'</span><span>)</span><span>,</span> <span>lightBrightness</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightness'</span><span>)</span><span>,</span> <span>lightBrightnessReset</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#lightBrightnessReset'</span><span>)</span><span>,</span> <span>}</span><span>,</span> <span>benchmark</span><span>:</span> <span>{</span> <span>button</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmark'</span><span>)</span><span>,</span> <span>label</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#benchmarkLabel'</span><span>)</span><span>,</span> <span>iterOut</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterOut'</span><span>)</span><span>,</span> <span>renderer</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-DualKawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#renderer'</span><span>)</span><span>,</span> <span>downsampleLevels</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-DualKawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#downsampleLevels'</span><span>)</span><span>,</span> <span>iterTime</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-DualKawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#iterTime'</span><span>)</span><span>,</span> <span>tapsCount</span><span>:</span> document<span>.</span><span>getElementById</span><span>(</span><span>'WebGLBox-DualKawaseBlurDetail'</span><span>)</span><span>.</span><span>querySelector</span><span>(</span><span>'#tapsCountBench'</span><span>)</span><span>,</span> <span>iterations</span><span>:</span> WebGLBox<span>.</span><span>querySelector</span><span>(</span><span>'#iterations'</span><span>)</span> <span>}</span> <span>}</span><span>;</span> <span>/* Shaders */</span> <span>const</span> circleAnimation <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/circleAnimation.vs"</span><span>)</span><span>;</span> <span>const</span> simpleTexture <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleTexture.fs"</span><span>)</span><span>;</span> <span>const</span> bloomVert <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.vs"</span><span>)</span><span>;</span> <span>const</span> bloomFrag <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/bloom.fs"</span><span>)</span><span>;</span> <span>const</span> simpleQuad <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/simpleQuad.vs"</span><span>)</span><span>;</span> <span>const</span> dualKawaseDown <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/dual-kawase-down.fs"</span><span>)</span><span>;</span> <span>const</span> dualKawaseUp <span>=</span> <span>await</span> util<span>.</span><span>fetchShader</span><span>(</span><span>"shader/dual-kawase-up.fs"</span><span>)</span><span>;</span> <span>/* Elements that cause a redraw in the non-animation mode */</span> ui<span>.</span>blur<span>.</span>downsample<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span><span>)</span><span>;</span> <span>/* Events */</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>redraw</span><span>(</span><span>)</span> <span>}</span> <span>}</span><span>)</span><span>;</span> canvas<span>.</span><span>addEventListener</span><span>(</span><span>"webglcontextlost"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>display<span>.</span>contextLoss<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>blur<span>.</span>downsample<span>.</span><span>addEventListener</span><span>(</span><span>'input'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>downsample<span>.</span>value <span>==</span> <span>;</span> ui<span>.</span>blur<span>.</span>samplePosReset<span>.</span>disabled <span>=</span> ui<span>.</span>blur<span>.</span>downsample<span>.</span>value <span>==</span> <span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Render Mode */</span> ui<span>.</span>rendering<span>.</span>modes<span>.</span><span>forEach</span><span>(</span><span>radio</span> <span>=&gt;</span> <span>{</span> <span>/* Force set to scene to fix a reload bug in Firefox Android */</span> <span>if</span> <span>(</span>radio<span>.</span>value <span>===</span> <span>"scene"</span><span>)</span> radio<span>.</span>checked <span>=</span> <span>true</span><span>;</span> radio<span>.</span><span>addEventListener</span><span>(</span><span>'change'</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>mode <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> ui<span>.</span>rendering<span>.</span>lightBrightnessReset<span>.</span>disabled <span>=</span> ctx<span>.</span>mode <span>===</span> <span>"scene"</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span><span>addEventListener</span><span>(</span><span>"click"</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>true</span><span>;</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>true</span><span>;</span> <span>/* spin up the Worker (ES-module) */</span> <span>const</span> worker <span>=</span> <span>new</span> <span>Worker</span><span>(</span><span>"./js/benchmark/dualKawaseBenchmark.js"</span><span>,</span> <span>{</span> <span>type</span><span>:</span> <span>"module"</span> <span>}</span><span>)</span><span>;</span> <span>/* pass all data the worker needs */</span> worker<span>.</span><span>postMessage</span><span>(</span><span>{</span> <span>iterations</span><span>:</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value<span>,</span> <span>downShaderSrc</span><span>:</span> dualKawaseDown<span>,</span> <span>upShaderSrc</span><span>:</span> dualKawaseUp<span>,</span> <span>downsampleLevels</span><span>:</span> ui<span>.</span>blur<span>.</span>downsample<span>.</span>value<span>,</span> <span>samplePos</span><span>:</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value <span>}</span><span>)</span><span>;</span> <span>/* Benchmark */</span> worker<span>.</span><span>addEventListener</span><span>(</span><span>"message"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>event<span>.</span>data<span>.</span>type <span>!==</span> <span>"done"</span><span>)</span> <span>return</span><span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>benchText<span>;</span> ui<span>.</span>benchmark<span>.</span>tapsCount<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>tapsCount<span>;</span> ui<span>.</span>benchmark<span>.</span>iterTime<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>iterationText<span>;</span> ui<span>.</span>benchmark<span>.</span>renderer<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>renderer<span>;</span> ui<span>.</span>benchmark<span>.</span>downsampleLevels<span>.</span>textContent <span>=</span> event<span>.</span>data<span>.</span>downsampleLevels<span>;</span> worker<span>.</span><span>terminate</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>button<span>.</span>disabled <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>benchMode <span>=</span> <span>false</span><span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>else</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> ui<span>.</span>benchmark<span>.</span>iterations<span>.</span><span>addEventListener</span><span>(</span><span>"change"</span><span>,</span> <span>(</span><span>event</span><span>)</span> <span>=&gt;</span> <span>{</span> ui<span>.</span>benchmark<span>.</span>iterOut<span>.</span>value <span>=</span> event<span>.</span>target<span>.</span>value<span>;</span> ui<span>.</span>benchmark<span>.</span>label<span>.</span>textContent <span>=</span> <span>"Benchmark"</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>/* Draw Texture Shader */</span> ctx<span>.</span>shd<span>.</span>scene <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> circleAnimation<span>,</span> simpleTexture<span>,</span> <span>[</span><span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Draw bloom Shader */</span> ctx<span>.</span>shd<span>.</span>bloom <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> bloomVert<span>,</span> bloomFrag<span>,</span> <span>[</span><span>"texture"</span><span>,</span> <span>"textureAdd"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"radius"</span><span>]</span><span>)</span><span>;</span> <span>/* Simple Passthrough */</span> ctx<span>.</span>shd<span>.</span>passthrough <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> simpleTexture<span>)</span><span>;</span> <span>/* Dual Kawase Shaders */</span> ctx<span>.</span>shd<span>.</span>downsample <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> dualKawaseDown<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"bloomStrength"</span><span>]</span><span>)</span><span>;</span> ctx<span>.</span>shd<span>.</span>upsample <span>=</span> util<span>.</span><span>compileAndLinkShader</span><span>(</span>gl<span>,</span> simpleQuad<span>,</span> dualKawaseUp<span>,</span> <span>[</span><span>"frameSizeRCP"</span><span>,</span> <span>"offset"</span><span>,</span> <span>"bloomStrength"</span><span>]</span><span>)</span><span>;</span> <span>/* Send Unit code verts to the GPU */</span> util<span>.</span><span>bindUnitQuad</span><span>(</span>gl<span>)</span><span>;</span> <span>async</span> <span>function</span> <span>setupTextureBuffers</span><span>(</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"block"</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>true</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>scene<span>,</span> ctx<span>.</span>tex<span>.</span>frame<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>[</span>ctx<span>.</span>fb<span>.</span>final<span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>const</span> maxDown <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>downsample<span>.</span>max<span>)</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> maxDown<span>;</span> <span>++</span>i<span>)</span> <span>{</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> <span>}</span> ctx<span>.</span>fb<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>tex<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> <span>let</span> w <span>=</span> canvas<span>.</span>width<span>,</span> h <span>=</span> canvas<span>.</span>height<span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> maxDown<span>;</span> <span>++</span>i<span>)</span> <span>{</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> w <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> h <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> <span>const</span> <span>[</span>fb<span>,</span> tex<span>]</span> <span>=</span> util<span>.</span><span>setupFramebuffer</span><span>(</span>gl<span>,</span> w<span>,</span> h<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>down<span>.</span><span>push</span><span>(</span>fb<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>down<span>.</span><span>push</span><span>(</span>tex<span>)</span><span>;</span> <span>}</span> <span>let</span> <span>[</span>base<span>,</span> selfIllum<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/SDR_No_Sprite.png"</span><span>)</span><span>,</span> <span>fetch</span><span>(</span><span>"/dual-kawase/img/Selfillumination.png"</span><span>)</span> <span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBlob<span>,</span> selfIllumBlob<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span>base<span>.</span><span>blob</span><span>(</span><span>)</span><span>,</span> selfIllum<span>.</span><span>blob</span><span>(</span><span>)</span><span>]</span><span>)</span><span>;</span> <span>let</span> <span>[</span>baseBitmap<span>,</span> selfIllumBitmap<span>]</span> <span>=</span> <span>await</span> Promise<span>.</span><span>all</span><span>(</span><span>[</span> <span>createImageBitmap</span><span>(</span>baseBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span><span>,</span> <span>createImageBitmap</span><span>(</span>selfIllumBlob<span>,</span> <span>{</span> <span>colorSpaceConversion</span><span>:</span> <span>'none'</span><span>,</span> <span>resizeWidth</span><span>:</span> canvas<span>.</span>width <span>*</span> <span>1.12</span><span>,</span> <span>resizeHeight</span><span>:</span> canvas<span>.</span>height <span>*</span> <span>1.12</span><span>,</span> <span>resizeQuality</span><span>:</span> <span>"high"</span> <span>}</span><span>)</span> <span>]</span><span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> baseBitmap<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> util<span>.</span><span>setupTexture</span><span>(</span>gl<span>,</span> <span>null</span><span>,</span> <span>null</span><span>,</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>,</span> gl<span>.</span><span>LINEAR</span><span>,</span> selfIllumBitmap<span>)</span><span>;</span> baseBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> selfIllumBitmap<span>.</span><span>close</span><span>(</span><span>)</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>true</span><span>;</span> ui<span>.</span>display<span>.</span>spinner<span>.</span>style<span>.</span>display <span>=</span> <span>"none"</span><span>;</span> <span>}</span> <span>let</span> prevNow <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> lastStatsUpdate <span>=</span> prevNow<span>;</span> <span>let</span> fpsEMA <span>=</span> <span>60</span><span>;</span> <span>let</span> msEMA <span>=</span> <span>16</span><span>;</span> <span>async</span> <span>function</span> <span>redraw</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>buffersInitialized<span>)</span> <span>await</span> <span>setupTextureBuffers</span><span>(</span><span>)</span><span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>initComplete<span>)</span> <span>return</span><span>;</span> <span>/* UI Stats */</span> <span>const</span> levels <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>downsample<span>.</span>value<span>)</span><span>;</span> <span>/* Calculate texture taps based on computational resolution at each level */</span> <span>let</span> totalTaps <span>=</span> <span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> levels<span>;</span> i<span>++</span><span>)</span> <span>{</span> <span>const</span> levelW <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> <span>const</span> levelH <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> totalTaps <span>+=</span> levelW <span>*</span> levelH <span>*</span> <span>5</span><span>;</span> <span>// 5 samples per downsample pass</span> <span>if</span> <span>(</span>i <span>&lt;</span> levels <span>-</span> <span>1</span><span>)</span> totalTaps <span>+=</span> levelW <span>*</span> levelH <span>*</span> <span>8</span><span>;</span> <span>// 8 samples per upsample pass (except final)</span> <span>}</span> <span>if</span> <span>(</span>levels <span>&gt;</span> <span>)</span> totalTaps <span>+=</span> canvas<span>.</span>width <span>*</span> canvas<span>.</span>height <span>*</span> <span>8</span><span>;</span> <span>// Final upsample to full res</span> <span>const</span> tapsNewText <span>=</span> <span>(</span>totalTaps <span>/</span> <span>1000000</span><span>)</span><span>.</span><span>toFixed</span><span>(</span><span>1</span><span>)</span> <span>+</span> <span>" Million"</span><span>;</span> ui<span>.</span>display<span>.</span>tapsCount<span>.</span>value <span>=</span> tapsNewText<span>;</span> <span>/* Display actual output resolution (always full canvas size) */</span> ui<span>.</span>display<span>.</span>width<span>.</span>value <span>=</span> canvas<span>.</span>width<span>;</span> ui<span>.</span>display<span>.</span>height<span>.</span>value <span>=</span> canvas<span>.</span>height<span>;</span> <span>/* Circle Motion */</span> <span>let</span> radiusSwitch <span>=</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>?</span> radius <span>:</span> <span>0.0</span><span>;</span> <span>let</span> speed <span>=</span> <span>(</span>performance<span>.</span><span>now</span><span>(</span><span>)</span> <span>/</span> <span>10000</span><span>)</span> <span>%</span> Math<span>.</span><span>PI</span> <span>*</span> <span>2</span><span>;</span> <span>const</span> offset <span>=</span> <span>[</span>radiusSwitch <span>*</span> Math<span>.</span><span>cos</span><span>(</span>speed<span>)</span><span>,</span> radiusSwitch <span>*</span> Math<span>.</span><span>sin</span><span>(</span>speed<span>)</span><span>]</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>handle<span>)</span><span>;</span> <span>const</span> texture <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> ctx<span>.</span>tex<span>.</span>sdr <span>:</span> ctx<span>.</span>tex<span>.</span>selfIllum<span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> texture<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>scene<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> <span>/* Setup PostProcess Framebuffer */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>/* Draw Call */</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>const</span> downsampleLevels <span>=</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>downsample<span>.</span>value<span>)</span><span>;</span> <span>let</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>frame<span>;</span> <span>if</span> <span>(</span>downsampleLevels <span>&gt;</span> <span>)</span> <span>{</span> <span>/* Apply distributed brightness, due to color precision limitations and multi pass nature of this blur algorithm */</span> <span>const</span> finalBrightness <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> <span>const</span> totalPasses <span>=</span> <span>2</span> <span>*</span> downsampleLevels<span>;</span> <span>const</span> distributedBrightness <span>=</span> Math<span>.</span><span>pow</span><span>(</span>finalBrightness<span>,</span> <span>1.0</span> <span>/</span> totalPasses<span>)</span><span>;</span> <span>/* Downsample chain */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>downsample<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>downsample<span>.</span>uniforms<span>.</span>offset<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> <span>let</span> w <span>=</span> canvas<span>.</span>width<span>,</span> h <span>=</span> canvas<span>.</span>height<span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> downsampleLevels<span>;</span> <span>++</span>i<span>)</span> <span>{</span> <span>const</span> fb <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>;</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> w <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> h <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> fb<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> w<span>,</span> h<span>)</span><span>;</span> <span>const</span> frameSizeRCP <span>=</span> <span>[</span><span>1.0</span> <span>/</span> w<span>,</span> <span>1.0</span> <span>/</span> h<span>]</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>downsample<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> frameSizeRCP<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>downsample<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> distributedBrightness<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>;</span> <span>}</span> <span>/* Upsample chain */</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>uniforms<span>.</span>offset<span>,</span> ui<span>.</span>blur<span>.</span>samplePos<span>.</span>value<span>)</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> downsampleLevels <span>-</span> <span>2</span><span>;</span> i <span>&gt;=</span> <span>;</span> i<span>--</span><span>)</span> <span>{</span> <span>const</span> fb <span>=</span> ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>;</span> w <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> h <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>1</span><span>)</span><span>)</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> fb<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> w<span>,</span> h<span>)</span><span>;</span> <span>const</span> srcW <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>2</span><span>)</span><span>)</span><span>;</span> <span>const</span> srcH <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>(</span>i <span>+</span> <span>2</span><span>)</span><span>)</span><span>;</span> <span>const</span> frameSizeRCP <span>=</span> <span>[</span><span>1.0</span> <span>/</span> srcW<span>,</span> <span>1.0</span> <span>/</span> srcH<span>]</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> frameSizeRCP<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> distributedBrightness<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>;</span> <span>}</span> <span>/* Final upsample to full resolution */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> <span>const</span> srcW <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>width <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> <span>const</span> srcH <span>=</span> Math<span>.</span><span>max</span><span>(</span><span>1</span><span>,</span> canvas<span>.</span>height <span>&gt;&gt;</span> <span>1</span><span>)</span><span>;</span> <span>const</span> frameSizeRCP <span>=</span> <span>[</span><span>1.0</span> <span>/</span> srcW<span>,</span> <span>1.0</span> <span>/</span> srcH<span>]</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>uniforms<span>.</span>frameSizeRCP<span>,</span> frameSizeRCP<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>upsample<span>.</span>uniforms<span>.</span>bloomStrength<span>,</span> distributedBrightness<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>!=</span> <span>"bloom"</span><span>)</span> <span>{</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>;</span> <span>}</span> <span>}</span> <span>else</span> <span>{</span> <span>/* No blur - direct passthrough */</span> <span>const</span> finalFB <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"bloom"</span> <span>?</span> ctx<span>.</span>fb<span>.</span>final <span>:</span> <span>null</span><span>;</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> finalFB<span>)</span><span>;</span> gl<span>.</span><span>viewport</span><span>(</span><span>,</span> <span>,</span> canvas<span>.</span>width<span>,</span> canvas<span>.</span>height<span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> srcTex<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>gl<span>.</span><span>getUniformLocation</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>,</span> <span>"texture"</span><span>)</span><span>,</span> <span>)</span><span>;</span> <span>const</span> bloomStrength <span>=</span> ctx<span>.</span>mode <span>==</span> <span>"scene"</span> <span>?</span> <span>1.0</span> <span>:</span> ui<span>.</span>rendering<span>.</span>lightBrightness<span>.</span>value<span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>gl<span>.</span><span>getUniformLocation</span><span>(</span>ctx<span>.</span>shd<span>.</span>passthrough<span>.</span>handle<span>,</span> <span>"bloomStrength"</span><span>)</span><span>,</span> bloomStrength<span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>!=</span> <span>"bloom"</span><span>)</span> <span>{</span> srcTex <span>=</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>;</span> <span>}</span> <span>}</span> <span>if</span> <span>(</span>ctx<span>.</span>mode <span>==</span> <span>"bloom"</span><span>)</span> <span>{</span> <span>/* Now do the bloom composition to the screen */</span> gl<span>.</span><span>bindFramebuffer</span><span>(</span>gl<span>.</span><span>FRAMEBUFFER</span><span>,</span> <span>null</span><span>)</span><span>;</span> gl<span>.</span><span>useProgram</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>handle<span>)</span><span>;</span> gl<span>.</span><span>uniform2fv</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>offset<span>,</span> offset<span>)</span><span>;</span> gl<span>.</span><span>uniform1f</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>radius<span>,</span> radiusSwitch<span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE0</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>texture<span>,</span> <span>)</span><span>;</span> gl<span>.</span><span>activeTexture</span><span>(</span>gl<span>.</span><span>TEXTURE1</span><span>)</span><span>;</span> gl<span>.</span><span>bindTexture</span><span>(</span>gl<span>.</span><span>TEXTURE_2D</span><span>,</span> ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> gl<span>.</span><span>uniform1i</span><span>(</span>ctx<span>.</span>shd<span>.</span>bloom<span>.</span>uniforms<span>.</span>textureAdd<span>,</span> <span>1</span><span>)</span><span>;</span> gl<span>.</span><span>drawArrays</span><span>(</span>gl<span>.</span><span>TRIANGLE_FAN</span><span>,</span> <span>,</span> <span>4</span><span>)</span><span>;</span> <span>}</span> <span>/* Ask for CPU-GPU Sync to prevent overloading the GPU during compositing. In reality this is more likely to be flush, but still, it seems to help on multiple devices with during low FPS */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>const</span> now <span>=</span> performance<span>.</span><span>now</span><span>(</span><span>)</span><span>;</span> <span>let</span> dt <span>=</span> now <span>-</span> prevNow<span>;</span> <span>if</span> <span>(</span>dt <span>&gt;</span> <span>)</span> <span>{</span> <span>const</span> instFPS <span>=</span> <span>1000</span> <span>/</span> dt<span>;</span> <span>const</span> <span>ALPHA</span> <span>=</span> <span>0.05</span><span>;</span> fpsEMA <span>=</span> <span>ALPHA</span> <span>*</span> instFPS <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> fpsEMA<span>;</span> msEMA <span>=</span> <span>ALPHA</span> <span>*</span> dt <span>+</span> <span>(</span><span>1</span> <span>-</span> <span>ALPHA</span><span>)</span> <span>*</span> msEMA<span>;</span> <span>}</span> prevNow <span>=</span> now<span>;</span> <span>if</span> <span>(</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked <span>&amp;&amp;</span> now <span>-</span> lastStatsUpdate <span>&gt;=</span> <span>1000</span><span>)</span> <span>{</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> fpsEMA<span>.</span><span>toFixed</span><span>(</span><span>)</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> msEMA<span>.</span><span>toFixed</span><span>(</span><span>2</span><span>)</span><span>;</span> lastStatsUpdate <span>=</span> now<span>;</span> <span>}</span> <span>}</span> <span>let</span> animationFrameId<span>;</span> <span>/* Render at Native Resolution */</span> <span>function</span> <span>nativeResize</span><span>(</span><span>)</span> <span>{</span> <span>const</span> <span>[</span>width<span>,</span> height<span>]</span> <span>=</span> util<span>.</span><span>getNativeSize</span><span>(</span>canvas<span>)</span><span>;</span> <span>if</span> <span>(</span>width <span>&amp;&amp;</span> canvas<span>.</span>width <span>!==</span> width <span>||</span> height <span>&amp;&amp;</span> canvas<span>.</span>height <span>!==</span> height<span>)</span> <span>{</span> canvas<span>.</span>width <span>=</span> width<span>;</span> canvas<span>.</span>height <span>=</span> height<span>;</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>if</span> <span>(</span><span>!</span>ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span> <span>/* Resize Event */</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>let</span> resizePending <span>=</span> <span>false</span><span>;</span> window<span>.</span><span>addEventListener</span><span>(</span><span>'resize'</span><span>,</span> <span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>resizePending<span>)</span> <span>{</span> resizePending <span>=</span> <span>true</span><span>;</span> <span>requestAnimationFrame</span><span>(</span><span>(</span><span>)</span> <span>=&gt;</span> <span>{</span> resizePending <span>=</span> <span>false</span><span>;</span> <span>nativeResize</span><span>(</span><span>)</span><span>;</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>function</span> <span>renderLoop</span><span>(</span><span>)</span> <span>{</span> <span>if</span> <span>(</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> ui<span>.</span>rendering<span>.</span>animate<span>.</span>checked<span>)</span> <span>{</span> <span>redraw</span><span>(</span><span>)</span><span>;</span> animationFrameId <span>=</span> <span>requestAnimationFrame</span><span>(</span>renderLoop<span>)</span><span>;</span> <span>}</span> <span>}</span> <span>function</span> <span>startRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Start rendering, when canvas visible */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>true</span><span>;</span> <span>renderLoop</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>function</span> <span>stopRendering</span><span>(</span><span>)</span> <span>{</span> <span>/* Stop another redraw being called */</span> ctx<span>.</span>flags<span>.</span>isRendering <span>=</span> <span>false</span><span>;</span> <span>cancelAnimationFrame</span><span>(</span>animationFrameId<span>)</span><span>;</span> <span>/* Force the rendering pipeline to sync with CPU before we mess with it */</span> gl<span>.</span><span>finish</span><span>(</span><span>)</span><span>;</span> <span>/* Delete the buffers to free up memory */</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>sdr<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>sdr <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>selfIllum<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>selfIllum <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frame<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frame <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>frameFinal<span>)</span><span>;</span> ctx<span>.</span>tex<span>.</span>frameFinal <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>scene<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>scene <span>=</span> <span>null</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>final<span>)</span><span>;</span> ctx<span>.</span>fb<span>.</span>final <span>=</span> <span>null</span><span>;</span> <span>for</span> <span>(</span><span>let</span> i <span>=</span> <span>;</span> i <span>&lt;</span> <span>parseInt</span><span>(</span>ui<span>.</span>blur<span>.</span>downsample<span>.</span>max<span>)</span><span>;</span> <span>++</span>i<span>)</span> <span>{</span> gl<span>.</span><span>deleteTexture</span><span>(</span>ctx<span>.</span>tex<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> gl<span>.</span><span>deleteFramebuffer</span><span>(</span>ctx<span>.</span>fb<span>.</span>down<span>[</span>i<span>]</span><span>)</span><span>;</span> <span>}</span> ctx<span>.</span>tex<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>fb<span>.</span>down <span>=</span> <span>[</span><span>]</span><span>;</span> ctx<span>.</span>flags<span>.</span>buffersInitialized <span>=</span> <span>false</span><span>;</span> ctx<span>.</span>flags<span>.</span>initComplete <span>=</span> <span>false</span><span>;</span> ui<span>.</span>display<span>.</span>fps<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> ui<span>.</span>display<span>.</span>ms<span>.</span>value <span>=</span> <span>"-"</span><span>;</span> <span>}</span> <span>function</span> <span>handleIntersection</span><span>(</span><span>entries</span><span>)</span> <span>{</span> entries<span>.</span><span>forEach</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>{</span> <span>if</span> <span>(</span>entry<span>.</span>isIntersecting<span>)</span> <span>{</span> <span>if</span> <span>(</span><span>!</span>ctx<span>.</span>flags<span>.</span>isRendering <span>&amp;&amp;</span> <span>!</span>ctx<span>.</span>flags<span>.</span>benchMode<span>)</span> <span>startRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>else</span> <span>{</span> <span>stopRendering</span><span>(</span><span>)</span><span>;</span> <span>}</span> <span>}</span><span>)</span><span>;</span> <span>}</span> <span>/* Only render when the canvas is actually on screen */</span> <span>let</span> observer <span>=</span> <span>new</span> <span>IntersectionObserver</span><span>(</span>handleIntersection<span>)</span><span>;</span> observer<span>.</span><span>observe</span><span>(</span>canvas<span>)</span><span>;</span> <span>}</span></code></pre></details></blockquote><p>It&rsquo;s also a gaussian-like blur. Remember our first gaussian Blur? Its performance tanked exponentially, as we increased kernel radius. But now, with each downsample step, the required texture taps grow slower and slower. The stronger our blur, the less <em>additional</em> samples we require!</p><p>This was of special interest to Marius Bj&oslash;rge, as his goal was to reduce memory access, which is especially slow on mobile devices, and still produce a motion-stable non shimmering blur. Speaking of which, go into bloom mode, crank <code>lightBrightness</code> and compare it to our <a href="https://blog.frost.kiwi#downsampling">downsample</a> example.</p><p>Even though the resolution is reduced to the same <code>downSample</code> level, no shimmering! That&rsquo;s the Dual Kawase Blur for you - A gaussian-like post-processing blur, with good performance, no heavy repeated memory writes and motion stable output. This makes it ideal as a basic building block for visual effects like bloom.</p><h2>What are the big boys doing? <a href="https://blog.frost.kiwi#what-are-the-big-boys-doing%3F">#</a></h2><p>The Dual Kawase Blur has found its way into game engines and user interfaces alike. For instance the Linux Desktop Environment <a href="https://kde.org/">KDE</a> uses it as the frosted backdrop effect <a href="https://web.archive.org/web/20220427124712/https://phabricator.kde.org/D9848">since in 2018</a>, where it remains the <a href="https://invent.kde.org/plasma/kwin/-/tree/master/src/plugins/blur">algorithm of choice to this day</a>. I used KDE&rsquo;s implementation as a guide when creating my demo above.</p><figure><img src="https://blog.frost.kiwiimg/kdeBlur.png" alt="KDE Plasma's Blur with noise at max strength"><figcaption>KDE Plasma's Blur with noise at max strength (<a href="https://web.archive.org/web/20220427124712/https://phabricator.kde.org/D9848">Source</a>)</figcaption></figure><p>Of course, graphics programming didn&rsquo;t stop in 2015 and there have been new developments. The previously mentioned talk <a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Next Generation Post Processing in Call of Duty: Advanced Warfare</a> by <a href="https://www.iryoku.com/">Jorge Jimenez</a> showcased an evolution on the &ldquo;downsample while blurring&rdquo; idea to handle far-away and very bright lights at high blur strengths better.</p><figure><video><source src="https://blog.frost.kiwiimg/jimenezBlur.mp4"></source></video><figcaption>Uneven interpolation of bright, small light sources (Left), Page 156 from presentation<br><a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Next Generation Post Processing in Call of Duty: Advanced Warfare</a> by <a href="https://www.iryoku.com/">Jorge Jimenez</a></figcaption></figure><p>In turn, this technique got picked up two years later by graphics programmer <a href="https://x.com/pixelmager">Mikkel Gjoel</a>, when working on the video game <a href="https://en.wikipedia.org/wiki/Inside_(video_game)">INSIDE</a> by Studio <a href="https://playdead.com/">Playdead</a>. In the GDC 2016 talk <a href="https://gdcvault.com/play/1023304/Low-Complexity-High-Fidelity-INSIDE">Low Complexity, High Fidelity - INSIDE Rendering</a> he showcased a further optimization, reducing the number of texture reads required.</p><figure><video><source src="https://blog.frost.kiwiimg/gdcInside.mp4"></source></video><figcaption>Blur algorithm used for Bloom in video game Inside<br>Excerpt from talk <a href="https://gdcvault.com/play/1023304/Low-Complexity-High-Fidelity-INSIDE">Low Complexity, High Fidelity - INSIDE Rendering</a> by Mikkel Gjoel &amp; Mikkel Svendsen</figcaption></figure><p>I showcased the bloom use-case a lot. The technique used in my demos is rather primitive, akin to the time of video game <a href="https://gangles.ca/2008/07/18/bloom-disasters/">bloom disasters</a>, where some many games had radioactive levels of bloom, showing off a then novel technique. In this older style an extra lights pass or the scene after <a href="https://en.wikipedia.org/wiki/Thresholding_(image_processing)">thresholding</a>, was blurred and added on top.</p><figure><img src="https://blog.frost.kiwiimg/bloom-oblivion.jpg" alt="Bloom in Video game "><figcaption>Bloom in Video game <a href="https://en.wikipedia.org/wiki/The_Elder_Scrolls_IV:_Oblivion">The Elder Scrolls IV: Oblivion</a>, from article by <a href="https://gangles.ca/2008/07/18/bloom-disasters/">Bloom Disasters</a></figcaption></figure><p>These days 3D engines follow a <a href="https://learnopengl.com/PBR/Theory">Physically based shading</a> model, with HDR framebuffers capturing pixels in an <a href="https://learnopengl.com/Getting-started/Textures#:~:text=Energy%20conservation">energy conserving</a> manner. Specular light reflections preserve the super bright pixels from the lamp they originated from.</p><p>With such a wide range of energy values, light that should bloom doesn&rsquo;t need special selection anymore. Instead of defining what to blur, everything is blurred and the bright parts naturally start glowing, without predefined &ldquo;parts to blur&rdquo;.</p><figure><img src="https://blog.frost.kiwiimg/bloom.png" alt="Physically Based Blur"><figcaption>Multiple blurs stacked to create a natural light fall-off<br>Page 144 in <a href="https://www.iryoku.com/next-generation-post-processing-in-call-of-duty-advanced-warfare/">Next Generation Post Processing in Call of Duty: Advanced Warfare</a> by <a href="https://www.iryoku.com/">Jorge Jimenez</a></figcaption></figure><p>The result isn&rsquo;t just blurred once, but rather multiple blur strengths are stacked on top of each other, for a more natural light fall-off, as shown in the previously mentioned talk by Jorge Jimenez. This isn&rsquo;t an article about bloom, but the underlying building block. The Blur.</p><p>This was a journey through blurs and I hope you enjoyed the ride! If you are a new visitor from the <a href="https://some.3b1b.co/">Summer of Math Exposition</a> and enjoyed this article, you&rsquo;ll enjoy my other graphics programming deep-dives on this blog. Also during SoME 3, my submission was a WebApp + Video Adventure into Mirrorballs:</p><figure><iframe src="https://www.youtube-nocookie.com/embed/rJPKTCdk-WI" title="YouTube video player" width="100%"></iframe><figcaption>Mathematical Magic Mirrorball #SoME3<br><a href="https://www.youtube.com/watch?v=rJPKTCdk-WI">YouTube Video</a> by <a href="https://www.youtube.com/@FrostKiwi">FrostKiwi</a></figcaption></figure><h2>Addendum <a href="https://blog.frost.kiwi#addendum">#</a></h2><p>Additional things that came to light as a result of discussions around this article.</p><h3>Upsample skip steps technique <a href="https://blog.frost.kiwi#upsample-skip-steps-technique">#</a></h3><p>In the <a href="https://blog.frost.kiwi#downsampling">downsampling</a> chapter I mentioned, that skipping upsample steps will result in &ldquo;<em>a vague grid like artifact appearing</em>&rdquo;. In an E-Mail, Masaki Kawase expanded on this with a reference to his <a href="https://www.siliconstudio.co.jp/rd/presentations/#CEDEC2009">2009 CEDEC</a> talk <a href="https://www.siliconstudio.co.jp/rd/presentations/files/CEDEC2009/CEDEC2009_Anti-DownsizedBufferArtifacts.ppt">Anti-Downsized Buffer Artifacts</a>, that there is an in-between path, when the Downscale - Upsample chain is a bit longer.</p><figure><figcaption>Skipping Upsample steps and the resulting artifacts (Left) vs performing one intermediary upsample step with 4-Tap Blur, before going on to skipping the remaining intermediary up-sample steps with reduced artifacts (Right)<br>Page 99 - 100 from the 2009 CEDEC talk<br><a href="https://www.siliconstudio.co.jp/rd/presentations/files/CEDEC2009/CEDEC2009_Anti-DownsizedBufferArtifacts.ppt">Anti-Downsized Buffer Artifacts</a> by <a href="https://www.siliconstudio.co.jp/middleware/yebis/en/">Masaki Kawase</a></figcaption></figure><p>This involves performing a slight 4 Texture-Tap blur on the very first upsample from the smallest to 2nd smallest framebuffer size and then skipping all the remaining upscample steps, a technique explained in the above linked talk from page 72 onwards. A balance of a longer upsample chain vs the appearance of artifacts.</p><h3>Multiple blurs stacked <a href="https://blog.frost.kiwi#multiple-blurs-stacked">#</a></h3><p>I was surprised to learn that the &ldquo;Multiple blurs stacked to create a natural light fall-off&rdquo; thing was <em>also</em> presented by Masaki Kawase in the 2004 GDC talk <a href="https://gdcvault.com/play/1015174/Practical-Implementation-of-High-Dynamic">Practical Implementation of High Dynamic Range Rendering</a>. Those couple of years in particular were quite eventful for graphics programming!</p><figure><video><source src="https://blog.frost.kiwivid/2004-Gdc-Kawase-Practical-Hdr.mp4"></source></video><figcaption>Use of Multiple Gaussian Filters, Excerpt from the 2004 GDC Talk<br><a href="https://gdcvault.com/play/1015174/Practical-Implementation-of-High-Dynamic">Practical Implementation of High Dynamic Range Rendering</a> (<a href="https://media.gdcvault.com/gdc04/video/2004-GDC-kawase-practical-hdr.flv">Video Direct Link</a>) by <a href="https://www.siliconstudio.co.jp/middleware/yebis/en/">Masaki Kawase</a></figcaption></figure><blockquote><p>Didn't even know about this connection, truly a graphics programmer idol of mine</p><img src="https://blog.frost.kiwi/assets/kiwis/love.svg"></blockquote><p>Here are the 3 slides mentioned in the excerpt from the talk:</p><figure><figcaption>Page 31 - 33 from the 2004 GDC Talk<br><a href="https://gdcvault.com/play/1015174/Practical-Implementation-of-High-Dynamic">Practical Implementation of High Dynamic Range Rendering</a> by <a href="https://www.siliconstudio.co.jp/middleware/yebis/en/">Masaki Kawase</a></figcaption></figure></div></section>]]></description><pubDate>Wed, 03 Sep 2025 16:57:14 +0530</pubDate></item></channel></rss>
